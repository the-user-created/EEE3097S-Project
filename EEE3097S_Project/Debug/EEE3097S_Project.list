
EEE3097S_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a798  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aee4  0800aee4  00020514  2**0
                  CONTENTS
  4 .ARM          00000000  0800aee4  0800aee4  00020514  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aee4  0800aee4  00020514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aee4  0800aee4  0001aee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee8  0800aee8  0001aee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000514  20000000  0800aeec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000514  0800b400  00020514  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e40  0800b400  00020e40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f59e  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad1  00000000  00000000  0002fada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  000325b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00033258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152ac  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013310  00000000  00000000  0004906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e8f9  00000000  00000000  0005c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cac75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  000cacc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000ce690  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000ce6b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000514 	.word	0x20000514
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a840 	.word	0x0800a840

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000518 	.word	0x20000518
 8000104:	0800a840 	.word	0x0800a840

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fcb7 	bl	8001d8c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fc07 	bl	8001c3c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fca9 	bl	8001d8c <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc9f 	bl	8001d8c <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc2f 	bl	8001cc0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fc25 	bl	8001cc0 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	0008      	movs	r0, r1
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 fa3d 	bl	800090c <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 f9c9 	bl	8000834 <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fa2f 	bl	800090c <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa25 	bl	800090c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9d5 	bl	8000880 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 f9cb 	bl	8000880 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fadd>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	46c6      	mov	lr, r8
 80004fc:	0243      	lsls	r3, r0, #9
 80004fe:	0a5b      	lsrs	r3, r3, #9
 8000500:	024e      	lsls	r6, r1, #9
 8000502:	0045      	lsls	r5, r0, #1
 8000504:	004f      	lsls	r7, r1, #1
 8000506:	00da      	lsls	r2, r3, #3
 8000508:	0fc4      	lsrs	r4, r0, #31
 800050a:	469c      	mov	ip, r3
 800050c:	0a70      	lsrs	r0, r6, #9
 800050e:	4690      	mov	r8, r2
 8000510:	b500      	push	{lr}
 8000512:	0e2d      	lsrs	r5, r5, #24
 8000514:	0e3f      	lsrs	r7, r7, #24
 8000516:	0fc9      	lsrs	r1, r1, #31
 8000518:	09b6      	lsrs	r6, r6, #6
 800051a:	428c      	cmp	r4, r1
 800051c:	d04b      	beq.n	80005b6 <__aeabi_fadd+0xbe>
 800051e:	1bea      	subs	r2, r5, r7
 8000520:	2a00      	cmp	r2, #0
 8000522:	dd36      	ble.n	8000592 <__aeabi_fadd+0x9a>
 8000524:	2f00      	cmp	r7, #0
 8000526:	d061      	beq.n	80005ec <__aeabi_fadd+0xf4>
 8000528:	2dff      	cmp	r5, #255	; 0xff
 800052a:	d100      	bne.n	800052e <__aeabi_fadd+0x36>
 800052c:	e0ad      	b.n	800068a <__aeabi_fadd+0x192>
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	04db      	lsls	r3, r3, #19
 8000532:	431e      	orrs	r6, r3
 8000534:	2a1b      	cmp	r2, #27
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x42>
 8000538:	e0d3      	b.n	80006e2 <__aeabi_fadd+0x1ea>
 800053a:	2001      	movs	r0, #1
 800053c:	4643      	mov	r3, r8
 800053e:	1a18      	subs	r0, r3, r0
 8000540:	0143      	lsls	r3, r0, #5
 8000542:	d400      	bmi.n	8000546 <__aeabi_fadd+0x4e>
 8000544:	e08c      	b.n	8000660 <__aeabi_fadd+0x168>
 8000546:	0180      	lsls	r0, r0, #6
 8000548:	0987      	lsrs	r7, r0, #6
 800054a:	0038      	movs	r0, r7
 800054c:	f002 fb9e 	bl	8002c8c <__clzsi2>
 8000550:	3805      	subs	r0, #5
 8000552:	4087      	lsls	r7, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fadd+0x62>
 8000558:	e0b6      	b.n	80006c8 <__aeabi_fadd+0x1d0>
 800055a:	1a2d      	subs	r5, r5, r0
 800055c:	48b3      	ldr	r0, [pc, #716]	; (800082c <__aeabi_fadd+0x334>)
 800055e:	4038      	ands	r0, r7
 8000560:	0743      	lsls	r3, r0, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fadd+0x76>
 8000564:	230f      	movs	r3, #15
 8000566:	4003      	ands	r3, r0
 8000568:	2b04      	cmp	r3, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fadd+0x76>
 800056c:	3004      	adds	r0, #4
 800056e:	0143      	lsls	r3, r0, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fadd+0x7c>
 8000572:	e078      	b.n	8000666 <__aeabi_fadd+0x16e>
 8000574:	1c6a      	adds	r2, r5, #1
 8000576:	2dfe      	cmp	r5, #254	; 0xfe
 8000578:	d065      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800057a:	0180      	lsls	r0, r0, #6
 800057c:	0a43      	lsrs	r3, r0, #9
 800057e:	469c      	mov	ip, r3
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	4663      	mov	r3, ip
 8000584:	05d0      	lsls	r0, r2, #23
 8000586:	4318      	orrs	r0, r3
 8000588:	07e4      	lsls	r4, r4, #31
 800058a:	4320      	orrs	r0, r4
 800058c:	bc80      	pop	{r7}
 800058e:	46b8      	mov	r8, r7
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	2a00      	cmp	r2, #0
 8000594:	d035      	beq.n	8000602 <__aeabi_fadd+0x10a>
 8000596:	1b7a      	subs	r2, r7, r5
 8000598:	2d00      	cmp	r5, #0
 800059a:	d000      	beq.n	800059e <__aeabi_fadd+0xa6>
 800059c:	e0af      	b.n	80006fe <__aeabi_fadd+0x206>
 800059e:	4643      	mov	r3, r8
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xae>
 80005a4:	e0a7      	b.n	80006f6 <__aeabi_fadd+0x1fe>
 80005a6:	1e53      	subs	r3, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0xb6>
 80005ac:	e12f      	b.n	800080e <__aeabi_fadd+0x316>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d069      	beq.n	8000686 <__aeabi_fadd+0x18e>
 80005b2:	001a      	movs	r2, r3
 80005b4:	e0aa      	b.n	800070c <__aeabi_fadd+0x214>
 80005b6:	1be9      	subs	r1, r5, r7
 80005b8:	2900      	cmp	r1, #0
 80005ba:	dd70      	ble.n	800069e <__aeabi_fadd+0x1a6>
 80005bc:	2f00      	cmp	r7, #0
 80005be:	d037      	beq.n	8000630 <__aeabi_fadd+0x138>
 80005c0:	2dff      	cmp	r5, #255	; 0xff
 80005c2:	d062      	beq.n	800068a <__aeabi_fadd+0x192>
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	04db      	lsls	r3, r3, #19
 80005c8:	431e      	orrs	r6, r3
 80005ca:	291b      	cmp	r1, #27
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_fadd+0xd8>
 80005ce:	e0b0      	b.n	8000732 <__aeabi_fadd+0x23a>
 80005d0:	2001      	movs	r0, #1
 80005d2:	4440      	add	r0, r8
 80005d4:	0143      	lsls	r3, r0, #5
 80005d6:	d543      	bpl.n	8000660 <__aeabi_fadd+0x168>
 80005d8:	3501      	adds	r5, #1
 80005da:	2dff      	cmp	r5, #255	; 0xff
 80005dc:	d033      	beq.n	8000646 <__aeabi_fadd+0x14e>
 80005de:	2301      	movs	r3, #1
 80005e0:	4a93      	ldr	r2, [pc, #588]	; (8000830 <__aeabi_fadd+0x338>)
 80005e2:	4003      	ands	r3, r0
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	4010      	ands	r0, r2
 80005e8:	4318      	orrs	r0, r3
 80005ea:	e7b9      	b.n	8000560 <__aeabi_fadd+0x68>
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0xfa>
 80005f0:	e083      	b.n	80006fa <__aeabi_fadd+0x202>
 80005f2:	1e51      	subs	r1, r2, #1
 80005f4:	2a01      	cmp	r2, #1
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x102>
 80005f8:	e0d8      	b.n	80007ac <__aeabi_fadd+0x2b4>
 80005fa:	2aff      	cmp	r2, #255	; 0xff
 80005fc:	d045      	beq.n	800068a <__aeabi_fadd+0x192>
 80005fe:	000a      	movs	r2, r1
 8000600:	e798      	b.n	8000534 <__aeabi_fadd+0x3c>
 8000602:	27fe      	movs	r7, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4217      	tst	r7, r2
 8000608:	d000      	beq.n	800060c <__aeabi_fadd+0x114>
 800060a:	e086      	b.n	800071a <__aeabi_fadd+0x222>
 800060c:	2d00      	cmp	r5, #0
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0x11a>
 8000610:	e0b7      	b.n	8000782 <__aeabi_fadd+0x28a>
 8000612:	4643      	mov	r3, r8
 8000614:	2b00      	cmp	r3, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x122>
 8000618:	e0f3      	b.n	8000802 <__aeabi_fadd+0x30a>
 800061a:	2200      	movs	r2, #0
 800061c:	2e00      	cmp	r6, #0
 800061e:	d0b0      	beq.n	8000582 <__aeabi_fadd+0x8a>
 8000620:	1b98      	subs	r0, r3, r6
 8000622:	0143      	lsls	r3, r0, #5
 8000624:	d400      	bmi.n	8000628 <__aeabi_fadd+0x130>
 8000626:	e0fa      	b.n	800081e <__aeabi_fadd+0x326>
 8000628:	4643      	mov	r3, r8
 800062a:	000c      	movs	r4, r1
 800062c:	1af0      	subs	r0, r6, r3
 800062e:	e797      	b.n	8000560 <__aeabi_fadd+0x68>
 8000630:	2e00      	cmp	r6, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_fadd+0x13e>
 8000634:	e0c8      	b.n	80007c8 <__aeabi_fadd+0x2d0>
 8000636:	1e4a      	subs	r2, r1, #1
 8000638:	2901      	cmp	r1, #1
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x146>
 800063c:	e0ae      	b.n	800079c <__aeabi_fadd+0x2a4>
 800063e:	29ff      	cmp	r1, #255	; 0xff
 8000640:	d023      	beq.n	800068a <__aeabi_fadd+0x192>
 8000642:	0011      	movs	r1, r2
 8000644:	e7c1      	b.n	80005ca <__aeabi_fadd+0xd2>
 8000646:	2300      	movs	r3, #0
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	469c      	mov	ip, r3
 800064c:	e799      	b.n	8000582 <__aeabi_fadd+0x8a>
 800064e:	21fe      	movs	r1, #254	; 0xfe
 8000650:	1c6a      	adds	r2, r5, #1
 8000652:	4211      	tst	r1, r2
 8000654:	d077      	beq.n	8000746 <__aeabi_fadd+0x24e>
 8000656:	2aff      	cmp	r2, #255	; 0xff
 8000658:	d0f5      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800065a:	0015      	movs	r5, r2
 800065c:	4446      	add	r6, r8
 800065e:	0870      	lsrs	r0, r6, #1
 8000660:	0743      	lsls	r3, r0, #29
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x16e>
 8000664:	e77e      	b.n	8000564 <__aeabi_fadd+0x6c>
 8000666:	08c3      	lsrs	r3, r0, #3
 8000668:	2dff      	cmp	r5, #255	; 0xff
 800066a:	d00e      	beq.n	800068a <__aeabi_fadd+0x192>
 800066c:	025b      	lsls	r3, r3, #9
 800066e:	0a5b      	lsrs	r3, r3, #9
 8000670:	469c      	mov	ip, r3
 8000672:	b2ea      	uxtb	r2, r5
 8000674:	e785      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000676:	2e00      	cmp	r6, #0
 8000678:	d007      	beq.n	800068a <__aeabi_fadd+0x192>
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	03d2      	lsls	r2, r2, #15
 800067e:	4213      	tst	r3, r2
 8000680:	d003      	beq.n	800068a <__aeabi_fadd+0x192>
 8000682:	4210      	tst	r0, r2
 8000684:	d101      	bne.n	800068a <__aeabi_fadd+0x192>
 8000686:	000c      	movs	r4, r1
 8000688:	0003      	movs	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0db      	beq.n	8000646 <__aeabi_fadd+0x14e>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4318      	orrs	r0, r3
 8000694:	0240      	lsls	r0, r0, #9
 8000696:	0a43      	lsrs	r3, r0, #9
 8000698:	469c      	mov	ip, r3
 800069a:	22ff      	movs	r2, #255	; 0xff
 800069c:	e771      	b.n	8000582 <__aeabi_fadd+0x8a>
 800069e:	2900      	cmp	r1, #0
 80006a0:	d0d5      	beq.n	800064e <__aeabi_fadd+0x156>
 80006a2:	1b7a      	subs	r2, r7, r5
 80006a4:	2d00      	cmp	r5, #0
 80006a6:	d160      	bne.n	800076a <__aeabi_fadd+0x272>
 80006a8:	4643      	mov	r3, r8
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d024      	beq.n	80006f8 <__aeabi_fadd+0x200>
 80006ae:	1e53      	subs	r3, r2, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d073      	beq.n	800079c <__aeabi_fadd+0x2a4>
 80006b4:	2aff      	cmp	r2, #255	; 0xff
 80006b6:	d0e7      	beq.n	8000688 <__aeabi_fadd+0x190>
 80006b8:	001a      	movs	r2, r3
 80006ba:	2a1b      	cmp	r2, #27
 80006bc:	dc00      	bgt.n	80006c0 <__aeabi_fadd+0x1c8>
 80006be:	e085      	b.n	80007cc <__aeabi_fadd+0x2d4>
 80006c0:	2001      	movs	r0, #1
 80006c2:	003d      	movs	r5, r7
 80006c4:	1980      	adds	r0, r0, r6
 80006c6:	e785      	b.n	80005d4 <__aeabi_fadd+0xdc>
 80006c8:	2320      	movs	r3, #32
 80006ca:	003a      	movs	r2, r7
 80006cc:	1b45      	subs	r5, r0, r5
 80006ce:	0038      	movs	r0, r7
 80006d0:	3501      	adds	r5, #1
 80006d2:	40ea      	lsrs	r2, r5
 80006d4:	1b5d      	subs	r5, r3, r5
 80006d6:	40a8      	lsls	r0, r5
 80006d8:	1e43      	subs	r3, r0, #1
 80006da:	4198      	sbcs	r0, r3
 80006dc:	2500      	movs	r5, #0
 80006de:	4310      	orrs	r0, r2
 80006e0:	e73e      	b.n	8000560 <__aeabi_fadd+0x68>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0030      	movs	r0, r6
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	0031      	movs	r1, r6
 80006ea:	4098      	lsls	r0, r3
 80006ec:	40d1      	lsrs	r1, r2
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4308      	orrs	r0, r1
 80006f4:	e722      	b.n	800053c <__aeabi_fadd+0x44>
 80006f6:	000c      	movs	r4, r1
 80006f8:	0003      	movs	r3, r0
 80006fa:	0015      	movs	r5, r2
 80006fc:	e7b4      	b.n	8000668 <__aeabi_fadd+0x170>
 80006fe:	2fff      	cmp	r7, #255	; 0xff
 8000700:	d0c1      	beq.n	8000686 <__aeabi_fadd+0x18e>
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	4640      	mov	r0, r8
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	4318      	orrs	r0, r3
 800070a:	4680      	mov	r8, r0
 800070c:	2a1b      	cmp	r2, #27
 800070e:	dd51      	ble.n	80007b4 <__aeabi_fadd+0x2bc>
 8000710:	2001      	movs	r0, #1
 8000712:	000c      	movs	r4, r1
 8000714:	003d      	movs	r5, r7
 8000716:	1a30      	subs	r0, r6, r0
 8000718:	e712      	b.n	8000540 <__aeabi_fadd+0x48>
 800071a:	4643      	mov	r3, r8
 800071c:	1b9f      	subs	r7, r3, r6
 800071e:	017b      	lsls	r3, r7, #5
 8000720:	d42b      	bmi.n	800077a <__aeabi_fadd+0x282>
 8000722:	2f00      	cmp	r7, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x230>
 8000726:	e710      	b.n	800054a <__aeabi_fadd+0x52>
 8000728:	2300      	movs	r3, #0
 800072a:	2400      	movs	r4, #0
 800072c:	2200      	movs	r2, #0
 800072e:	469c      	mov	ip, r3
 8000730:	e727      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000732:	2320      	movs	r3, #32
 8000734:	0032      	movs	r2, r6
 8000736:	0030      	movs	r0, r6
 8000738:	40ca      	lsrs	r2, r1
 800073a:	1a59      	subs	r1, r3, r1
 800073c:	4088      	lsls	r0, r1
 800073e:	1e43      	subs	r3, r0, #1
 8000740:	4198      	sbcs	r0, r3
 8000742:	4310      	orrs	r0, r2
 8000744:	e745      	b.n	80005d2 <__aeabi_fadd+0xda>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d14a      	bne.n	80007e0 <__aeabi_fadd+0x2e8>
 800074a:	4643      	mov	r3, r8
 800074c:	2b00      	cmp	r3, #0
 800074e:	d063      	beq.n	8000818 <__aeabi_fadd+0x320>
 8000750:	2200      	movs	r2, #0
 8000752:	2e00      	cmp	r6, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x260>
 8000756:	e714      	b.n	8000582 <__aeabi_fadd+0x8a>
 8000758:	0030      	movs	r0, r6
 800075a:	4440      	add	r0, r8
 800075c:	0143      	lsls	r3, r0, #5
 800075e:	d400      	bmi.n	8000762 <__aeabi_fadd+0x26a>
 8000760:	e77e      	b.n	8000660 <__aeabi_fadd+0x168>
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <__aeabi_fadd+0x334>)
 8000764:	3501      	adds	r5, #1
 8000766:	4018      	ands	r0, r3
 8000768:	e77a      	b.n	8000660 <__aeabi_fadd+0x168>
 800076a:	2fff      	cmp	r7, #255	; 0xff
 800076c:	d08c      	beq.n	8000688 <__aeabi_fadd+0x190>
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	4641      	mov	r1, r8
 8000772:	04db      	lsls	r3, r3, #19
 8000774:	4319      	orrs	r1, r3
 8000776:	4688      	mov	r8, r1
 8000778:	e79f      	b.n	80006ba <__aeabi_fadd+0x1c2>
 800077a:	4643      	mov	r3, r8
 800077c:	000c      	movs	r4, r1
 800077e:	1af7      	subs	r7, r6, r3
 8000780:	e6e3      	b.n	800054a <__aeabi_fadd+0x52>
 8000782:	4642      	mov	r2, r8
 8000784:	2a00      	cmp	r2, #0
 8000786:	d000      	beq.n	800078a <__aeabi_fadd+0x292>
 8000788:	e775      	b.n	8000676 <__aeabi_fadd+0x17e>
 800078a:	2e00      	cmp	r6, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x298>
 800078e:	e77a      	b.n	8000686 <__aeabi_fadd+0x18e>
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	03db      	lsls	r3, r3, #15
 8000794:	2400      	movs	r4, #0
 8000796:	469c      	mov	ip, r3
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	e6f2      	b.n	8000582 <__aeabi_fadd+0x8a>
 800079c:	0030      	movs	r0, r6
 800079e:	4440      	add	r0, r8
 80007a0:	2501      	movs	r5, #1
 80007a2:	0143      	lsls	r3, r0, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fadd+0x2b0>
 80007a6:	e75b      	b.n	8000660 <__aeabi_fadd+0x168>
 80007a8:	2502      	movs	r5, #2
 80007aa:	e718      	b.n	80005de <__aeabi_fadd+0xe6>
 80007ac:	4643      	mov	r3, r8
 80007ae:	2501      	movs	r5, #1
 80007b0:	1b98      	subs	r0, r3, r6
 80007b2:	e6c5      	b.n	8000540 <__aeabi_fadd+0x48>
 80007b4:	2320      	movs	r3, #32
 80007b6:	4644      	mov	r4, r8
 80007b8:	4640      	mov	r0, r8
 80007ba:	40d4      	lsrs	r4, r2
 80007bc:	1a9a      	subs	r2, r3, r2
 80007be:	4090      	lsls	r0, r2
 80007c0:	1e43      	subs	r3, r0, #1
 80007c2:	4198      	sbcs	r0, r3
 80007c4:	4320      	orrs	r0, r4
 80007c6:	e7a4      	b.n	8000712 <__aeabi_fadd+0x21a>
 80007c8:	000d      	movs	r5, r1
 80007ca:	e74d      	b.n	8000668 <__aeabi_fadd+0x170>
 80007cc:	2320      	movs	r3, #32
 80007ce:	4641      	mov	r1, r8
 80007d0:	4640      	mov	r0, r8
 80007d2:	40d1      	lsrs	r1, r2
 80007d4:	1a9a      	subs	r2, r3, r2
 80007d6:	4090      	lsls	r0, r2
 80007d8:	1e43      	subs	r3, r0, #1
 80007da:	4198      	sbcs	r0, r3
 80007dc:	4308      	orrs	r0, r1
 80007de:	e770      	b.n	80006c2 <__aeabi_fadd+0x1ca>
 80007e0:	4642      	mov	r2, r8
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x2f0>
 80007e6:	e74f      	b.n	8000688 <__aeabi_fadd+0x190>
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2f6>
 80007ec:	e74d      	b.n	800068a <__aeabi_fadd+0x192>
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	4213      	tst	r3, r2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x300>
 80007f6:	e748      	b.n	800068a <__aeabi_fadd+0x192>
 80007f8:	4210      	tst	r0, r2
 80007fa:	d000      	beq.n	80007fe <__aeabi_fadd+0x306>
 80007fc:	e745      	b.n	800068a <__aeabi_fadd+0x192>
 80007fe:	0003      	movs	r3, r0
 8000800:	e743      	b.n	800068a <__aeabi_fadd+0x192>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d090      	beq.n	8000728 <__aeabi_fadd+0x230>
 8000806:	000c      	movs	r4, r1
 8000808:	4684      	mov	ip, r0
 800080a:	2200      	movs	r2, #0
 800080c:	e6b9      	b.n	8000582 <__aeabi_fadd+0x8a>
 800080e:	4643      	mov	r3, r8
 8000810:	000c      	movs	r4, r1
 8000812:	1af0      	subs	r0, r6, r3
 8000814:	3501      	adds	r5, #1
 8000816:	e693      	b.n	8000540 <__aeabi_fadd+0x48>
 8000818:	4684      	mov	ip, r0
 800081a:	2200      	movs	r2, #0
 800081c:	e6b1      	b.n	8000582 <__aeabi_fadd+0x8a>
 800081e:	2800      	cmp	r0, #0
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x32c>
 8000822:	e71d      	b.n	8000660 <__aeabi_fadd+0x168>
 8000824:	2300      	movs	r3, #0
 8000826:	2400      	movs	r4, #0
 8000828:	469c      	mov	ip, r3
 800082a:	e6aa      	b.n	8000582 <__aeabi_fadd+0x8a>
 800082c:	fbffffff 	.word	0xfbffffff
 8000830:	7dffffff 	.word	0x7dffffff

08000834 <__eqsf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	024e      	lsls	r6, r1, #9
 800083c:	004c      	lsls	r4, r1, #1
 800083e:	0fc3      	lsrs	r3, r0, #31
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	2001      	movs	r0, #1
 8000844:	0e12      	lsrs	r2, r2, #24
 8000846:	0a76      	lsrs	r6, r6, #9
 8000848:	0e24      	lsrs	r4, r4, #24
 800084a:	0fc9      	lsrs	r1, r1, #31
 800084c:	2aff      	cmp	r2, #255	; 0xff
 800084e:	d006      	beq.n	800085e <__eqsf2+0x2a>
 8000850:	2cff      	cmp	r4, #255	; 0xff
 8000852:	d003      	beq.n	800085c <__eqsf2+0x28>
 8000854:	42a2      	cmp	r2, r4
 8000856:	d101      	bne.n	800085c <__eqsf2+0x28>
 8000858:	42b5      	cmp	r5, r6
 800085a:	d006      	beq.n	800086a <__eqsf2+0x36>
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	2d00      	cmp	r5, #0
 8000860:	d1fc      	bne.n	800085c <__eqsf2+0x28>
 8000862:	2cff      	cmp	r4, #255	; 0xff
 8000864:	d1fa      	bne.n	800085c <__eqsf2+0x28>
 8000866:	2e00      	cmp	r6, #0
 8000868:	d1f8      	bne.n	800085c <__eqsf2+0x28>
 800086a:	428b      	cmp	r3, r1
 800086c:	d006      	beq.n	800087c <__eqsf2+0x48>
 800086e:	2001      	movs	r0, #1
 8000870:	2a00      	cmp	r2, #0
 8000872:	d1f3      	bne.n	800085c <__eqsf2+0x28>
 8000874:	0028      	movs	r0, r5
 8000876:	1e43      	subs	r3, r0, #1
 8000878:	4198      	sbcs	r0, r3
 800087a:	e7ef      	b.n	800085c <__eqsf2+0x28>
 800087c:	2000      	movs	r0, #0
 800087e:	e7ed      	b.n	800085c <__eqsf2+0x28>

08000880 <__gesf2>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	0042      	lsls	r2, r0, #1
 8000884:	0245      	lsls	r5, r0, #9
 8000886:	024e      	lsls	r6, r1, #9
 8000888:	004c      	lsls	r4, r1, #1
 800088a:	0fc3      	lsrs	r3, r0, #31
 800088c:	0a6d      	lsrs	r5, r5, #9
 800088e:	0e12      	lsrs	r2, r2, #24
 8000890:	0a76      	lsrs	r6, r6, #9
 8000892:	0e24      	lsrs	r4, r4, #24
 8000894:	0fc8      	lsrs	r0, r1, #31
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d01b      	beq.n	80008d2 <__gesf2+0x52>
 800089a:	2cff      	cmp	r4, #255	; 0xff
 800089c:	d00e      	beq.n	80008bc <__gesf2+0x3c>
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d11b      	bne.n	80008da <__gesf2+0x5a>
 80008a2:	2c00      	cmp	r4, #0
 80008a4:	d101      	bne.n	80008aa <__gesf2+0x2a>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d01c      	beq.n	80008e4 <__gesf2+0x64>
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d00c      	beq.n	80008c8 <__gesf2+0x48>
 80008ae:	4283      	cmp	r3, r0
 80008b0:	d01c      	beq.n	80008ec <__gesf2+0x6c>
 80008b2:	2102      	movs	r1, #2
 80008b4:	1e58      	subs	r0, r3, #1
 80008b6:	4008      	ands	r0, r1
 80008b8:	3801      	subs	r0, #1
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d122      	bne.n	8000906 <__gesf2+0x86>
 80008c0:	2a00      	cmp	r2, #0
 80008c2:	d1f4      	bne.n	80008ae <__gesf2+0x2e>
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d1f2      	bne.n	80008ae <__gesf2+0x2e>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d1f6      	bne.n	80008ba <__gesf2+0x3a>
 80008cc:	2001      	movs	r0, #1
 80008ce:	4240      	negs	r0, r0
 80008d0:	e7f3      	b.n	80008ba <__gesf2+0x3a>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d117      	bne.n	8000906 <__gesf2+0x86>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d0f0      	beq.n	80008bc <__gesf2+0x3c>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d1e7      	bne.n	80008ae <__gesf2+0x2e>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d1e5      	bne.n	80008ae <__gesf2+0x2e>
 80008e2:	e7e6      	b.n	80008b2 <__gesf2+0x32>
 80008e4:	2000      	movs	r0, #0
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d0e7      	beq.n	80008ba <__gesf2+0x3a>
 80008ea:	e7e2      	b.n	80008b2 <__gesf2+0x32>
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	dc05      	bgt.n	80008fc <__gesf2+0x7c>
 80008f0:	dbea      	blt.n	80008c8 <__gesf2+0x48>
 80008f2:	42b5      	cmp	r5, r6
 80008f4:	d802      	bhi.n	80008fc <__gesf2+0x7c>
 80008f6:	d3e7      	bcc.n	80008c8 <__gesf2+0x48>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7de      	b.n	80008ba <__gesf2+0x3a>
 80008fc:	4243      	negs	r3, r0
 80008fe:	4158      	adcs	r0, r3
 8000900:	0040      	lsls	r0, r0, #1
 8000902:	3801      	subs	r0, #1
 8000904:	e7d9      	b.n	80008ba <__gesf2+0x3a>
 8000906:	2002      	movs	r0, #2
 8000908:	4240      	negs	r0, r0
 800090a:	e7d6      	b.n	80008ba <__gesf2+0x3a>

0800090c <__lesf2>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	0042      	lsls	r2, r0, #1
 8000910:	0245      	lsls	r5, r0, #9
 8000912:	024e      	lsls	r6, r1, #9
 8000914:	004c      	lsls	r4, r1, #1
 8000916:	0fc3      	lsrs	r3, r0, #31
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e12      	lsrs	r2, r2, #24
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e24      	lsrs	r4, r4, #24
 8000920:	0fc8      	lsrs	r0, r1, #31
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d00b      	beq.n	800093e <__lesf2+0x32>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d00d      	beq.n	8000946 <__lesf2+0x3a>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d11f      	bne.n	800096e <__lesf2+0x62>
 800092e:	2c00      	cmp	r4, #0
 8000930:	d116      	bne.n	8000960 <__lesf2+0x54>
 8000932:	2e00      	cmp	r6, #0
 8000934:	d114      	bne.n	8000960 <__lesf2+0x54>
 8000936:	2000      	movs	r0, #0
 8000938:	2d00      	cmp	r5, #0
 800093a:	d010      	beq.n	800095e <__lesf2+0x52>
 800093c:	e009      	b.n	8000952 <__lesf2+0x46>
 800093e:	2d00      	cmp	r5, #0
 8000940:	d10c      	bne.n	800095c <__lesf2+0x50>
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d113      	bne.n	800096e <__lesf2+0x62>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d108      	bne.n	800095c <__lesf2+0x50>
 800094a:	2a00      	cmp	r2, #0
 800094c:	d008      	beq.n	8000960 <__lesf2+0x54>
 800094e:	4283      	cmp	r3, r0
 8000950:	d012      	beq.n	8000978 <__lesf2+0x6c>
 8000952:	2102      	movs	r1, #2
 8000954:	1e58      	subs	r0, r3, #1
 8000956:	4008      	ands	r0, r1
 8000958:	3801      	subs	r0, #1
 800095a:	e000      	b.n	800095e <__lesf2+0x52>
 800095c:	2002      	movs	r0, #2
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	2d00      	cmp	r5, #0
 8000962:	d1f4      	bne.n	800094e <__lesf2+0x42>
 8000964:	2800      	cmp	r0, #0
 8000966:	d1fa      	bne.n	800095e <__lesf2+0x52>
 8000968:	2001      	movs	r0, #1
 800096a:	4240      	negs	r0, r0
 800096c:	e7f7      	b.n	800095e <__lesf2+0x52>
 800096e:	2c00      	cmp	r4, #0
 8000970:	d1ed      	bne.n	800094e <__lesf2+0x42>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d1eb      	bne.n	800094e <__lesf2+0x42>
 8000976:	e7ec      	b.n	8000952 <__lesf2+0x46>
 8000978:	42a2      	cmp	r2, r4
 800097a:	dc05      	bgt.n	8000988 <__lesf2+0x7c>
 800097c:	dbf2      	blt.n	8000964 <__lesf2+0x58>
 800097e:	42b5      	cmp	r5, r6
 8000980:	d802      	bhi.n	8000988 <__lesf2+0x7c>
 8000982:	d3ef      	bcc.n	8000964 <__lesf2+0x58>
 8000984:	2000      	movs	r0, #0
 8000986:	e7ea      	b.n	800095e <__lesf2+0x52>
 8000988:	4243      	negs	r3, r0
 800098a:	4158      	adcs	r0, r3
 800098c:	0040      	lsls	r0, r0, #1
 800098e:	3801      	subs	r0, #1
 8000990:	e7e5      	b.n	800095e <__lesf2+0x52>
 8000992:	46c0      	nop			; (mov r8, r8)

08000994 <__aeabi_fmul>:
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	464f      	mov	r7, r9
 8000998:	4646      	mov	r6, r8
 800099a:	46d6      	mov	lr, sl
 800099c:	0244      	lsls	r4, r0, #9
 800099e:	0045      	lsls	r5, r0, #1
 80009a0:	b5c0      	push	{r6, r7, lr}
 80009a2:	0a64      	lsrs	r4, r4, #9
 80009a4:	1c0f      	adds	r7, r1, #0
 80009a6:	0e2d      	lsrs	r5, r5, #24
 80009a8:	0fc6      	lsrs	r6, r0, #31
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fmul+0x1c>
 80009ae:	e08d      	b.n	8000acc <__aeabi_fmul+0x138>
 80009b0:	2dff      	cmp	r5, #255	; 0xff
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fmul+0x22>
 80009b4:	e092      	b.n	8000adc <__aeabi_fmul+0x148>
 80009b6:	2300      	movs	r3, #0
 80009b8:	2080      	movs	r0, #128	; 0x80
 80009ba:	4699      	mov	r9, r3
 80009bc:	469a      	mov	sl, r3
 80009be:	00e4      	lsls	r4, r4, #3
 80009c0:	04c0      	lsls	r0, r0, #19
 80009c2:	4304      	orrs	r4, r0
 80009c4:	3d7f      	subs	r5, #127	; 0x7f
 80009c6:	0278      	lsls	r0, r7, #9
 80009c8:	0a43      	lsrs	r3, r0, #9
 80009ca:	4698      	mov	r8, r3
 80009cc:	007b      	lsls	r3, r7, #1
 80009ce:	0e1b      	lsrs	r3, r3, #24
 80009d0:	0fff      	lsrs	r7, r7, #31
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fmul+0x44>
 80009d6:	e070      	b.n	8000aba <__aeabi_fmul+0x126>
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fmul+0x4a>
 80009dc:	e086      	b.n	8000aec <__aeabi_fmul+0x158>
 80009de:	4642      	mov	r2, r8
 80009e0:	00d0      	lsls	r0, r2, #3
 80009e2:	2280      	movs	r2, #128	; 0x80
 80009e4:	3b7f      	subs	r3, #127	; 0x7f
 80009e6:	18ed      	adds	r5, r5, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	04d2      	lsls	r2, r2, #19
 80009ec:	4302      	orrs	r2, r0
 80009ee:	4690      	mov	r8, r2
 80009f0:	469c      	mov	ip, r3
 80009f2:	0031      	movs	r1, r6
 80009f4:	464b      	mov	r3, r9
 80009f6:	4079      	eors	r1, r7
 80009f8:	1c68      	adds	r0, r5, #1
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d81c      	bhi.n	8000a38 <__aeabi_fmul+0xa4>
 80009fe:	4a76      	ldr	r2, [pc, #472]	; (8000bd8 <__aeabi_fmul+0x244>)
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	58d3      	ldr	r3, [r2, r3]
 8000a04:	469f      	mov	pc, r3
 8000a06:	0039      	movs	r1, r7
 8000a08:	4644      	mov	r4, r8
 8000a0a:	46e2      	mov	sl, ip
 8000a0c:	4653      	mov	r3, sl
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d00f      	beq.n	8000a32 <__aeabi_fmul+0x9e>
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fmul+0x84>
 8000a16:	e0d7      	b.n	8000bc8 <__aeabi_fmul+0x234>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d137      	bne.n	8000a8c <__aeabi_fmul+0xf8>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	2400      	movs	r4, #0
 8000a20:	05c0      	lsls	r0, r0, #23
 8000a22:	4320      	orrs	r0, r4
 8000a24:	07c9      	lsls	r1, r1, #31
 8000a26:	4308      	orrs	r0, r1
 8000a28:	bce0      	pop	{r5, r6, r7}
 8000a2a:	46ba      	mov	sl, r7
 8000a2c:	46b1      	mov	r9, r6
 8000a2e:	46a8      	mov	r8, r5
 8000a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2400      	movs	r4, #0
 8000a36:	e7f3      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000a38:	0c26      	lsrs	r6, r4, #16
 8000a3a:	0424      	lsls	r4, r4, #16
 8000a3c:	0c22      	lsrs	r2, r4, #16
 8000a3e:	4644      	mov	r4, r8
 8000a40:	0424      	lsls	r4, r4, #16
 8000a42:	0c24      	lsrs	r4, r4, #16
 8000a44:	4643      	mov	r3, r8
 8000a46:	0027      	movs	r7, r4
 8000a48:	0c1b      	lsrs	r3, r3, #16
 8000a4a:	4357      	muls	r7, r2
 8000a4c:	4374      	muls	r4, r6
 8000a4e:	435a      	muls	r2, r3
 8000a50:	435e      	muls	r6, r3
 8000a52:	1912      	adds	r2, r2, r4
 8000a54:	0c3b      	lsrs	r3, r7, #16
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	429c      	cmp	r4, r3
 8000a5a:	d903      	bls.n	8000a64 <__aeabi_fmul+0xd0>
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	0252      	lsls	r2, r2, #9
 8000a60:	4694      	mov	ip, r2
 8000a62:	4466      	add	r6, ip
 8000a64:	043f      	lsls	r7, r7, #16
 8000a66:	041a      	lsls	r2, r3, #16
 8000a68:	0c3f      	lsrs	r7, r7, #16
 8000a6a:	19d2      	adds	r2, r2, r7
 8000a6c:	0194      	lsls	r4, r2, #6
 8000a6e:	1e67      	subs	r7, r4, #1
 8000a70:	41bc      	sbcs	r4, r7
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	0e92      	lsrs	r2, r2, #26
 8000a76:	199b      	adds	r3, r3, r6
 8000a78:	4314      	orrs	r4, r2
 8000a7a:	019b      	lsls	r3, r3, #6
 8000a7c:	431c      	orrs	r4, r3
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	d400      	bmi.n	8000a84 <__aeabi_fmul+0xf0>
 8000a82:	e09b      	b.n	8000bbc <__aeabi_fmul+0x228>
 8000a84:	2301      	movs	r3, #1
 8000a86:	0862      	lsrs	r2, r4, #1
 8000a88:	401c      	ands	r4, r3
 8000a8a:	4314      	orrs	r4, r2
 8000a8c:	0002      	movs	r2, r0
 8000a8e:	327f      	adds	r2, #127	; 0x7f
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	dd64      	ble.n	8000b5e <__aeabi_fmul+0x1ca>
 8000a94:	0763      	lsls	r3, r4, #29
 8000a96:	d004      	beq.n	8000aa2 <__aeabi_fmul+0x10e>
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4023      	ands	r3, r4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_fmul+0x10e>
 8000aa0:	3404      	adds	r4, #4
 8000aa2:	0123      	lsls	r3, r4, #4
 8000aa4:	d503      	bpl.n	8000aae <__aeabi_fmul+0x11a>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <__aeabi_fmul+0x248>)
 8000aaa:	3280      	adds	r2, #128	; 0x80
 8000aac:	401c      	ands	r4, r3
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	dcbf      	bgt.n	8000a32 <__aeabi_fmul+0x9e>
 8000ab2:	01a4      	lsls	r4, r4, #6
 8000ab4:	0a64      	lsrs	r4, r4, #9
 8000ab6:	b2d0      	uxtb	r0, r2
 8000ab8:	e7b2      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000aba:	4643      	mov	r3, r8
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d13d      	bne.n	8000b3c <__aeabi_fmul+0x1a8>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	469c      	mov	ip, r3
 8000aca:	e792      	b.n	80009f2 <__aeabi_fmul+0x5e>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d129      	bne.n	8000b24 <__aeabi_fmul+0x190>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	4699      	mov	r9, r3
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	469a      	mov	sl, r3
 8000ada:	e774      	b.n	80009c6 <__aeabi_fmul+0x32>
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d11b      	bne.n	8000b18 <__aeabi_fmul+0x184>
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	3b06      	subs	r3, #6
 8000ae6:	25ff      	movs	r5, #255	; 0xff
 8000ae8:	469a      	mov	sl, r3
 8000aea:	e76c      	b.n	80009c6 <__aeabi_fmul+0x32>
 8000aec:	4643      	mov	r3, r8
 8000aee:	35ff      	adds	r5, #255	; 0xff
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <__aeabi_fmul+0x178>
 8000af4:	2302      	movs	r3, #2
 8000af6:	464a      	mov	r2, r9
 8000af8:	431a      	orrs	r2, r3
 8000afa:	4691      	mov	r9, r2
 8000afc:	469c      	mov	ip, r3
 8000afe:	e778      	b.n	80009f2 <__aeabi_fmul+0x5e>
 8000b00:	4653      	mov	r3, sl
 8000b02:	0031      	movs	r1, r6
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fmul+0x176>
 8000b08:	e783      	b.n	8000a12 <__aeabi_fmul+0x7e>
 8000b0a:	e792      	b.n	8000a32 <__aeabi_fmul+0x9e>
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	464a      	mov	r2, r9
 8000b10:	431a      	orrs	r2, r3
 8000b12:	4691      	mov	r9, r2
 8000b14:	469c      	mov	ip, r3
 8000b16:	e76c      	b.n	80009f2 <__aeabi_fmul+0x5e>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	25ff      	movs	r5, #255	; 0xff
 8000b20:	469a      	mov	sl, r3
 8000b22:	e750      	b.n	80009c6 <__aeabi_fmul+0x32>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 f8b1 	bl	8002c8c <__clzsi2>
 8000b2a:	2576      	movs	r5, #118	; 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	426d      	negs	r5, r5
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	1a2d      	subs	r5, r5, r0
 8000b3a:	e744      	b.n	80009c6 <__aeabi_fmul+0x32>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f002 f8a5 	bl	8002c8c <__clzsi2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409a      	lsls	r2, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	1a2d      	subs	r5, r5, r0
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	469c      	mov	ip, r3
 8000b50:	3d76      	subs	r5, #118	; 0x76
 8000b52:	e74e      	b.n	80009f2 <__aeabi_fmul+0x5e>
 8000b54:	2480      	movs	r4, #128	; 0x80
 8000b56:	2100      	movs	r1, #0
 8000b58:	20ff      	movs	r0, #255	; 0xff
 8000b5a:	03e4      	lsls	r4, r4, #15
 8000b5c:	e760      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	2b1b      	cmp	r3, #27
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_fmul+0x1d4>
 8000b66:	e759      	b.n	8000a1c <__aeabi_fmul+0x88>
 8000b68:	0022      	movs	r2, r4
 8000b6a:	309e      	adds	r0, #158	; 0x9e
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	4084      	lsls	r4, r0
 8000b70:	0013      	movs	r3, r2
 8000b72:	1e62      	subs	r2, r4, #1
 8000b74:	4194      	sbcs	r4, r2
 8000b76:	431c      	orrs	r4, r3
 8000b78:	0763      	lsls	r3, r4, #29
 8000b7a:	d004      	beq.n	8000b86 <__aeabi_fmul+0x1f2>
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4023      	ands	r3, r4
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fmul+0x1f2>
 8000b84:	3404      	adds	r4, #4
 8000b86:	0163      	lsls	r3, r4, #5
 8000b88:	d51a      	bpl.n	8000bc0 <__aeabi_fmul+0x22c>
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	e747      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000b90:	2080      	movs	r0, #128	; 0x80
 8000b92:	03c0      	lsls	r0, r0, #15
 8000b94:	4204      	tst	r4, r0
 8000b96:	d009      	beq.n	8000bac <__aeabi_fmul+0x218>
 8000b98:	4643      	mov	r3, r8
 8000b9a:	4203      	tst	r3, r0
 8000b9c:	d106      	bne.n	8000bac <__aeabi_fmul+0x218>
 8000b9e:	4644      	mov	r4, r8
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	0264      	lsls	r4, r4, #9
 8000ba4:	0039      	movs	r1, r7
 8000ba6:	20ff      	movs	r0, #255	; 0xff
 8000ba8:	0a64      	lsrs	r4, r4, #9
 8000baa:	e739      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000bac:	2080      	movs	r0, #128	; 0x80
 8000bae:	03c0      	lsls	r0, r0, #15
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	0264      	lsls	r4, r4, #9
 8000bb4:	0031      	movs	r1, r6
 8000bb6:	20ff      	movs	r0, #255	; 0xff
 8000bb8:	0a64      	lsrs	r4, r4, #9
 8000bba:	e731      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000bbc:	0028      	movs	r0, r5
 8000bbe:	e765      	b.n	8000a8c <__aeabi_fmul+0xf8>
 8000bc0:	01a4      	lsls	r4, r4, #6
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	0a64      	lsrs	r4, r4, #9
 8000bc6:	e72b      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000bc8:	2080      	movs	r0, #128	; 0x80
 8000bca:	03c0      	lsls	r0, r0, #15
 8000bcc:	4304      	orrs	r4, r0
 8000bce:	0264      	lsls	r4, r4, #9
 8000bd0:	20ff      	movs	r0, #255	; 0xff
 8000bd2:	0a64      	lsrs	r4, r4, #9
 8000bd4:	e724      	b.n	8000a20 <__aeabi_fmul+0x8c>
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	0800a930 	.word	0x0800a930
 8000bdc:	f7ffffff 	.word	0xf7ffffff

08000be0 <__aeabi_fsub>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	46ce      	mov	lr, r9
 8000be4:	4647      	mov	r7, r8
 8000be6:	0243      	lsls	r3, r0, #9
 8000be8:	0a5b      	lsrs	r3, r3, #9
 8000bea:	024e      	lsls	r6, r1, #9
 8000bec:	00da      	lsls	r2, r3, #3
 8000bee:	4694      	mov	ip, r2
 8000bf0:	0a72      	lsrs	r2, r6, #9
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	0045      	lsls	r5, r0, #1
 8000bf6:	004a      	lsls	r2, r1, #1
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	0e2d      	lsrs	r5, r5, #24
 8000bfc:	001f      	movs	r7, r3
 8000bfe:	0fc4      	lsrs	r4, r0, #31
 8000c00:	0e12      	lsrs	r2, r2, #24
 8000c02:	0fc9      	lsrs	r1, r1, #31
 8000c04:	09b6      	lsrs	r6, r6, #6
 8000c06:	2aff      	cmp	r2, #255	; 0xff
 8000c08:	d05b      	beq.n	8000cc2 <__aeabi_fsub+0xe2>
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4041      	eors	r1, r0
 8000c0e:	428c      	cmp	r4, r1
 8000c10:	d039      	beq.n	8000c86 <__aeabi_fsub+0xa6>
 8000c12:	1aa8      	subs	r0, r5, r2
 8000c14:	2800      	cmp	r0, #0
 8000c16:	dd5a      	ble.n	8000cce <__aeabi_fsub+0xee>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d06a      	beq.n	8000cf2 <__aeabi_fsub+0x112>
 8000c1c:	2dff      	cmp	r5, #255	; 0xff
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fsub+0x42>
 8000c20:	e0d9      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	04d2      	lsls	r2, r2, #19
 8000c26:	4316      	orrs	r6, r2
 8000c28:	281b      	cmp	r0, #27
 8000c2a:	dc00      	bgt.n	8000c2e <__aeabi_fsub+0x4e>
 8000c2c:	e0e9      	b.n	8000e02 <__aeabi_fsub+0x222>
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4663      	mov	r3, ip
 8000c32:	1a18      	subs	r0, r3, r0
 8000c34:	0143      	lsls	r3, r0, #5
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_fsub+0x5a>
 8000c38:	e0b4      	b.n	8000da4 <__aeabi_fsub+0x1c4>
 8000c3a:	0180      	lsls	r0, r0, #6
 8000c3c:	0987      	lsrs	r7, r0, #6
 8000c3e:	0038      	movs	r0, r7
 8000c40:	f002 f824 	bl	8002c8c <__clzsi2>
 8000c44:	3805      	subs	r0, #5
 8000c46:	4087      	lsls	r7, r0
 8000c48:	4285      	cmp	r5, r0
 8000c4a:	dc00      	bgt.n	8000c4e <__aeabi_fsub+0x6e>
 8000c4c:	e0cc      	b.n	8000de8 <__aeabi_fsub+0x208>
 8000c4e:	1a2d      	subs	r5, r5, r0
 8000c50:	48b5      	ldr	r0, [pc, #724]	; (8000f28 <__aeabi_fsub+0x348>)
 8000c52:	4038      	ands	r0, r7
 8000c54:	0743      	lsls	r3, r0, #29
 8000c56:	d004      	beq.n	8000c62 <__aeabi_fsub+0x82>
 8000c58:	230f      	movs	r3, #15
 8000c5a:	4003      	ands	r3, r0
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d000      	beq.n	8000c62 <__aeabi_fsub+0x82>
 8000c60:	3004      	adds	r0, #4
 8000c62:	0143      	lsls	r3, r0, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x88>
 8000c66:	e0a0      	b.n	8000daa <__aeabi_fsub+0x1ca>
 8000c68:	1c6a      	adds	r2, r5, #1
 8000c6a:	2dfe      	cmp	r5, #254	; 0xfe
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x90>
 8000c6e:	e08d      	b.n	8000d8c <__aeabi_fsub+0x1ac>
 8000c70:	0180      	lsls	r0, r0, #6
 8000c72:	0a47      	lsrs	r7, r0, #9
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	05d0      	lsls	r0, r2, #23
 8000c78:	4338      	orrs	r0, r7
 8000c7a:	07e4      	lsls	r4, r4, #31
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	bcc0      	pop	{r6, r7}
 8000c80:	46b9      	mov	r9, r7
 8000c82:	46b0      	mov	r8, r6
 8000c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c86:	1aa8      	subs	r0, r5, r2
 8000c88:	4680      	mov	r8, r0
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	dd45      	ble.n	8000d1a <__aeabi_fsub+0x13a>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	d070      	beq.n	8000d74 <__aeabi_fsub+0x194>
 8000c92:	2dff      	cmp	r5, #255	; 0xff
 8000c94:	d100      	bne.n	8000c98 <__aeabi_fsub+0xb8>
 8000c96:	e09e      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	04db      	lsls	r3, r3, #19
 8000c9c:	431e      	orrs	r6, r3
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	2b1b      	cmp	r3, #27
 8000ca2:	dc00      	bgt.n	8000ca6 <__aeabi_fsub+0xc6>
 8000ca4:	e0d2      	b.n	8000e4c <__aeabi_fsub+0x26c>
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4460      	add	r0, ip
 8000caa:	0143      	lsls	r3, r0, #5
 8000cac:	d57a      	bpl.n	8000da4 <__aeabi_fsub+0x1c4>
 8000cae:	3501      	adds	r5, #1
 8000cb0:	2dff      	cmp	r5, #255	; 0xff
 8000cb2:	d06b      	beq.n	8000d8c <__aeabi_fsub+0x1ac>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a9d      	ldr	r2, [pc, #628]	; (8000f2c <__aeabi_fsub+0x34c>)
 8000cb8:	4003      	ands	r3, r0
 8000cba:	0840      	lsrs	r0, r0, #1
 8000cbc:	4010      	ands	r0, r2
 8000cbe:	4318      	orrs	r0, r3
 8000cc0:	e7c8      	b.n	8000c54 <__aeabi_fsub+0x74>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d020      	beq.n	8000d08 <__aeabi_fsub+0x128>
 8000cc6:	428c      	cmp	r4, r1
 8000cc8:	d023      	beq.n	8000d12 <__aeabi_fsub+0x132>
 8000cca:	0028      	movs	r0, r5
 8000ccc:	38ff      	subs	r0, #255	; 0xff
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d039      	beq.n	8000d46 <__aeabi_fsub+0x166>
 8000cd2:	1b57      	subs	r7, r2, r5
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d000      	beq.n	8000cda <__aeabi_fsub+0xfa>
 8000cd8:	e09d      	b.n	8000e16 <__aeabi_fsub+0x236>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x102>
 8000ce0:	e0db      	b.n	8000e9a <__aeabi_fsub+0x2ba>
 8000ce2:	1e7b      	subs	r3, r7, #1
 8000ce4:	2f01      	cmp	r7, #1
 8000ce6:	d100      	bne.n	8000cea <__aeabi_fsub+0x10a>
 8000ce8:	e10d      	b.n	8000f06 <__aeabi_fsub+0x326>
 8000cea:	2fff      	cmp	r7, #255	; 0xff
 8000cec:	d071      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000cee:	001f      	movs	r7, r3
 8000cf0:	e098      	b.n	8000e24 <__aeabi_fsub+0x244>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x118>
 8000cf6:	e0a7      	b.n	8000e48 <__aeabi_fsub+0x268>
 8000cf8:	1e42      	subs	r2, r0, #1
 8000cfa:	2801      	cmp	r0, #1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x120>
 8000cfe:	e0e6      	b.n	8000ece <__aeabi_fsub+0x2ee>
 8000d00:	28ff      	cmp	r0, #255	; 0xff
 8000d02:	d068      	beq.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000d04:	0010      	movs	r0, r2
 8000d06:	e78f      	b.n	8000c28 <__aeabi_fsub+0x48>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4041      	eors	r1, r0
 8000d0c:	42a1      	cmp	r1, r4
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fsub+0x132>
 8000d10:	e77f      	b.n	8000c12 <__aeabi_fsub+0x32>
 8000d12:	20ff      	movs	r0, #255	; 0xff
 8000d14:	4240      	negs	r0, r0
 8000d16:	4680      	mov	r8, r0
 8000d18:	44a8      	add	r8, r5
 8000d1a:	4640      	mov	r0, r8
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d038      	beq.n	8000d92 <__aeabi_fsub+0x1b2>
 8000d20:	1b51      	subs	r1, r2, r5
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x148>
 8000d26:	e0ae      	b.n	8000e86 <__aeabi_fsub+0x2a6>
 8000d28:	2aff      	cmp	r2, #255	; 0xff
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x14e>
 8000d2c:	e0df      	b.n	8000eee <__aeabi_fsub+0x30e>
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	4660      	mov	r0, ip
 8000d32:	04db      	lsls	r3, r3, #19
 8000d34:	4318      	orrs	r0, r3
 8000d36:	4684      	mov	ip, r0
 8000d38:	291b      	cmp	r1, #27
 8000d3a:	dc00      	bgt.n	8000d3e <__aeabi_fsub+0x15e>
 8000d3c:	e0d9      	b.n	8000ef2 <__aeabi_fsub+0x312>
 8000d3e:	2001      	movs	r0, #1
 8000d40:	0015      	movs	r5, r2
 8000d42:	1980      	adds	r0, r0, r6
 8000d44:	e7b1      	b.n	8000caa <__aeabi_fsub+0xca>
 8000d46:	20fe      	movs	r0, #254	; 0xfe
 8000d48:	1c6a      	adds	r2, r5, #1
 8000d4a:	4210      	tst	r0, r2
 8000d4c:	d171      	bne.n	8000e32 <__aeabi_fsub+0x252>
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x174>
 8000d52:	e0a6      	b.n	8000ea2 <__aeabi_fsub+0x2c2>
 8000d54:	4663      	mov	r3, ip
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x17c>
 8000d5a:	e0d9      	b.n	8000f10 <__aeabi_fsub+0x330>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x184>
 8000d62:	e788      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000d64:	1b98      	subs	r0, r3, r6
 8000d66:	0143      	lsls	r3, r0, #5
 8000d68:	d400      	bmi.n	8000d6c <__aeabi_fsub+0x18c>
 8000d6a:	e0e1      	b.n	8000f30 <__aeabi_fsub+0x350>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	000c      	movs	r4, r1
 8000d70:	1af0      	subs	r0, r6, r3
 8000d72:	e76f      	b.n	8000c54 <__aeabi_fsub+0x74>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_fsub+0x19a>
 8000d78:	e0b7      	b.n	8000eea <__aeabi_fsub+0x30a>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	2801      	cmp	r0, #1
 8000d80:	d100      	bne.n	8000d84 <__aeabi_fsub+0x1a4>
 8000d82:	e09c      	b.n	8000ebe <__aeabi_fsub+0x2de>
 8000d84:	28ff      	cmp	r0, #255	; 0xff
 8000d86:	d026      	beq.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000d88:	4690      	mov	r8, r2
 8000d8a:	e788      	b.n	8000c9e <__aeabi_fsub+0xbe>
 8000d8c:	22ff      	movs	r2, #255	; 0xff
 8000d8e:	2700      	movs	r7, #0
 8000d90:	e771      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000d92:	20fe      	movs	r0, #254	; 0xfe
 8000d94:	1c6a      	adds	r2, r5, #1
 8000d96:	4210      	tst	r0, r2
 8000d98:	d064      	beq.n	8000e64 <__aeabi_fsub+0x284>
 8000d9a:	2aff      	cmp	r2, #255	; 0xff
 8000d9c:	d0f6      	beq.n	8000d8c <__aeabi_fsub+0x1ac>
 8000d9e:	0015      	movs	r5, r2
 8000da0:	4466      	add	r6, ip
 8000da2:	0870      	lsrs	r0, r6, #1
 8000da4:	0743      	lsls	r3, r0, #29
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0x1ca>
 8000da8:	e756      	b.n	8000c58 <__aeabi_fsub+0x78>
 8000daa:	08c3      	lsrs	r3, r0, #3
 8000dac:	2dff      	cmp	r5, #255	; 0xff
 8000dae:	d012      	beq.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	0a5f      	lsrs	r7, r3, #9
 8000db4:	b2ea      	uxtb	r2, r5
 8000db6:	e75e      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000db8:	4662      	mov	r2, ip
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x1e0>
 8000dbe:	e096      	b.n	8000eee <__aeabi_fsub+0x30e>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d008      	beq.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	03d2      	lsls	r2, r2, #15
 8000dc8:	4213      	tst	r3, r2
 8000dca:	d004      	beq.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000dcc:	4648      	mov	r0, r9
 8000dce:	4210      	tst	r0, r2
 8000dd0:	d101      	bne.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	464b      	mov	r3, r9
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0d8      	beq.n	8000d8c <__aeabi_fsub+0x1ac>
 8000dda:	2780      	movs	r7, #128	; 0x80
 8000ddc:	03ff      	lsls	r7, r7, #15
 8000dde:	431f      	orrs	r7, r3
 8000de0:	027f      	lsls	r7, r7, #9
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	0a7f      	lsrs	r7, r7, #9
 8000de6:	e746      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000de8:	2320      	movs	r3, #32
 8000dea:	003a      	movs	r2, r7
 8000dec:	1b45      	subs	r5, r0, r5
 8000dee:	0038      	movs	r0, r7
 8000df0:	3501      	adds	r5, #1
 8000df2:	40ea      	lsrs	r2, r5
 8000df4:	1b5d      	subs	r5, r3, r5
 8000df6:	40a8      	lsls	r0, r5
 8000df8:	1e43      	subs	r3, r0, #1
 8000dfa:	4198      	sbcs	r0, r3
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	4310      	orrs	r0, r2
 8000e00:	e728      	b.n	8000c54 <__aeabi_fsub+0x74>
 8000e02:	2320      	movs	r3, #32
 8000e04:	1a1b      	subs	r3, r3, r0
 8000e06:	0032      	movs	r2, r6
 8000e08:	409e      	lsls	r6, r3
 8000e0a:	40c2      	lsrs	r2, r0
 8000e0c:	0030      	movs	r0, r6
 8000e0e:	1e43      	subs	r3, r0, #1
 8000e10:	4198      	sbcs	r0, r3
 8000e12:	4310      	orrs	r0, r2
 8000e14:	e70c      	b.n	8000c30 <__aeabi_fsub+0x50>
 8000e16:	2aff      	cmp	r2, #255	; 0xff
 8000e18:	d0db      	beq.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	4660      	mov	r0, ip
 8000e1e:	04db      	lsls	r3, r3, #19
 8000e20:	4318      	orrs	r0, r3
 8000e22:	4684      	mov	ip, r0
 8000e24:	2f1b      	cmp	r7, #27
 8000e26:	dd56      	ble.n	8000ed6 <__aeabi_fsub+0x2f6>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	000c      	movs	r4, r1
 8000e2c:	0015      	movs	r5, r2
 8000e2e:	1a30      	subs	r0, r6, r0
 8000e30:	e700      	b.n	8000c34 <__aeabi_fsub+0x54>
 8000e32:	4663      	mov	r3, ip
 8000e34:	1b9f      	subs	r7, r3, r6
 8000e36:	017b      	lsls	r3, r7, #5
 8000e38:	d43d      	bmi.n	8000eb6 <__aeabi_fsub+0x2d6>
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fsub+0x260>
 8000e3e:	e6fe      	b.n	8000c3e <__aeabi_fsub+0x5e>
 8000e40:	2400      	movs	r4, #0
 8000e42:	2200      	movs	r2, #0
 8000e44:	2700      	movs	r7, #0
 8000e46:	e716      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000e48:	0005      	movs	r5, r0
 8000e4a:	e7af      	b.n	8000dac <__aeabi_fsub+0x1cc>
 8000e4c:	0032      	movs	r2, r6
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4641      	mov	r1, r8
 8000e52:	40da      	lsrs	r2, r3
 8000e54:	2320      	movs	r3, #32
 8000e56:	1a5b      	subs	r3, r3, r1
 8000e58:	409e      	lsls	r6, r3
 8000e5a:	0030      	movs	r0, r6
 8000e5c:	1e43      	subs	r3, r0, #1
 8000e5e:	4198      	sbcs	r0, r3
 8000e60:	4310      	orrs	r0, r2
 8000e62:	e721      	b.n	8000ca8 <__aeabi_fsub+0xc8>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d1a7      	bne.n	8000db8 <__aeabi_fsub+0x1d8>
 8000e68:	4663      	mov	r3, ip
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d059      	beq.n	8000f22 <__aeabi_fsub+0x342>
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2e00      	cmp	r6, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x296>
 8000e74:	e6ff      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000e76:	0030      	movs	r0, r6
 8000e78:	4460      	add	r0, ip
 8000e7a:	0143      	lsls	r3, r0, #5
 8000e7c:	d592      	bpl.n	8000da4 <__aeabi_fsub+0x1c4>
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <__aeabi_fsub+0x348>)
 8000e80:	3501      	adds	r5, #1
 8000e82:	4018      	ands	r0, r3
 8000e84:	e78e      	b.n	8000da4 <__aeabi_fsub+0x1c4>
 8000e86:	4663      	mov	r3, ip
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d047      	beq.n	8000f1c <__aeabi_fsub+0x33c>
 8000e8c:	1e4b      	subs	r3, r1, #1
 8000e8e:	2901      	cmp	r1, #1
 8000e90:	d015      	beq.n	8000ebe <__aeabi_fsub+0x2de>
 8000e92:	29ff      	cmp	r1, #255	; 0xff
 8000e94:	d02b      	beq.n	8000eee <__aeabi_fsub+0x30e>
 8000e96:	0019      	movs	r1, r3
 8000e98:	e74e      	b.n	8000d38 <__aeabi_fsub+0x158>
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	003d      	movs	r5, r7
 8000ea0:	e784      	b.n	8000dac <__aeabi_fsub+0x1cc>
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d18b      	bne.n	8000dc0 <__aeabi_fsub+0x1e0>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d192      	bne.n	8000dd2 <__aeabi_fsub+0x1f2>
 8000eac:	2780      	movs	r7, #128	; 0x80
 8000eae:	2400      	movs	r4, #0
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	03ff      	lsls	r7, r7, #15
 8000eb4:	e6df      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000eb6:	4663      	mov	r3, ip
 8000eb8:	000c      	movs	r4, r1
 8000eba:	1af7      	subs	r7, r6, r3
 8000ebc:	e6bf      	b.n	8000c3e <__aeabi_fsub+0x5e>
 8000ebe:	0030      	movs	r0, r6
 8000ec0:	4460      	add	r0, ip
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	0143      	lsls	r3, r0, #5
 8000ec6:	d400      	bmi.n	8000eca <__aeabi_fsub+0x2ea>
 8000ec8:	e76c      	b.n	8000da4 <__aeabi_fsub+0x1c4>
 8000eca:	2502      	movs	r5, #2
 8000ecc:	e6f2      	b.n	8000cb4 <__aeabi_fsub+0xd4>
 8000ece:	4663      	mov	r3, ip
 8000ed0:	2501      	movs	r5, #1
 8000ed2:	1b98      	subs	r0, r3, r6
 8000ed4:	e6ae      	b.n	8000c34 <__aeabi_fsub+0x54>
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	4664      	mov	r4, ip
 8000eda:	4660      	mov	r0, ip
 8000edc:	40fc      	lsrs	r4, r7
 8000ede:	1bdf      	subs	r7, r3, r7
 8000ee0:	40b8      	lsls	r0, r7
 8000ee2:	1e43      	subs	r3, r0, #1
 8000ee4:	4198      	sbcs	r0, r3
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	e79f      	b.n	8000e2a <__aeabi_fsub+0x24a>
 8000eea:	0005      	movs	r5, r0
 8000eec:	e75e      	b.n	8000dac <__aeabi_fsub+0x1cc>
 8000eee:	464b      	mov	r3, r9
 8000ef0:	e771      	b.n	8000dd6 <__aeabi_fsub+0x1f6>
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	4665      	mov	r5, ip
 8000ef6:	4660      	mov	r0, ip
 8000ef8:	40cd      	lsrs	r5, r1
 8000efa:	1a59      	subs	r1, r3, r1
 8000efc:	4088      	lsls	r0, r1
 8000efe:	1e43      	subs	r3, r0, #1
 8000f00:	4198      	sbcs	r0, r3
 8000f02:	4328      	orrs	r0, r5
 8000f04:	e71c      	b.n	8000d40 <__aeabi_fsub+0x160>
 8000f06:	4663      	mov	r3, ip
 8000f08:	000c      	movs	r4, r1
 8000f0a:	2501      	movs	r5, #1
 8000f0c:	1af0      	subs	r0, r6, r3
 8000f0e:	e691      	b.n	8000c34 <__aeabi_fsub+0x54>
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	d095      	beq.n	8000e40 <__aeabi_fsub+0x260>
 8000f14:	000c      	movs	r4, r1
 8000f16:	464f      	mov	r7, r9
 8000f18:	2200      	movs	r2, #0
 8000f1a:	e6ac      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000f1c:	464b      	mov	r3, r9
 8000f1e:	000d      	movs	r5, r1
 8000f20:	e744      	b.n	8000dac <__aeabi_fsub+0x1cc>
 8000f22:	464f      	mov	r7, r9
 8000f24:	2200      	movs	r2, #0
 8000f26:	e6a6      	b.n	8000c76 <__aeabi_fsub+0x96>
 8000f28:	fbffffff 	.word	0xfbffffff
 8000f2c:	7dffffff 	.word	0x7dffffff
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fsub+0x356>
 8000f34:	e736      	b.n	8000da4 <__aeabi_fsub+0x1c4>
 8000f36:	2400      	movs	r4, #0
 8000f38:	2700      	movs	r7, #0
 8000f3a:	e69c      	b.n	8000c76 <__aeabi_fsub+0x96>

08000f3c <__aeabi_i2f>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d013      	beq.n	8000f6a <__aeabi_i2f+0x2e>
 8000f42:	17c3      	asrs	r3, r0, #31
 8000f44:	18c6      	adds	r6, r0, r3
 8000f46:	405e      	eors	r6, r3
 8000f48:	0fc4      	lsrs	r4, r0, #31
 8000f4a:	0030      	movs	r0, r6
 8000f4c:	f001 fe9e 	bl	8002c8c <__clzsi2>
 8000f50:	239e      	movs	r3, #158	; 0x9e
 8000f52:	0005      	movs	r5, r0
 8000f54:	1a1b      	subs	r3, r3, r0
 8000f56:	2b96      	cmp	r3, #150	; 0x96
 8000f58:	dc0f      	bgt.n	8000f7a <__aeabi_i2f+0x3e>
 8000f5a:	2808      	cmp	r0, #8
 8000f5c:	dd01      	ble.n	8000f62 <__aeabi_i2f+0x26>
 8000f5e:	3d08      	subs	r5, #8
 8000f60:	40ae      	lsls	r6, r5
 8000f62:	0276      	lsls	r6, r6, #9
 8000f64:	0a76      	lsrs	r6, r6, #9
 8000f66:	b2d8      	uxtb	r0, r3
 8000f68:	e002      	b.n	8000f70 <__aeabi_i2f+0x34>
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	2600      	movs	r6, #0
 8000f70:	05c0      	lsls	r0, r0, #23
 8000f72:	4330      	orrs	r0, r6
 8000f74:	07e4      	lsls	r4, r4, #31
 8000f76:	4320      	orrs	r0, r4
 8000f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f7a:	2b99      	cmp	r3, #153	; 0x99
 8000f7c:	dd0c      	ble.n	8000f98 <__aeabi_i2f+0x5c>
 8000f7e:	2205      	movs	r2, #5
 8000f80:	0031      	movs	r1, r6
 8000f82:	1a12      	subs	r2, r2, r0
 8000f84:	40d1      	lsrs	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	0001      	movs	r1, r0
 8000f8a:	0030      	movs	r0, r6
 8000f8c:	311b      	adds	r1, #27
 8000f8e:	4088      	lsls	r0, r1
 8000f90:	1e41      	subs	r1, r0, #1
 8000f92:	4188      	sbcs	r0, r1
 8000f94:	4302      	orrs	r2, r0
 8000f96:	0016      	movs	r6, r2
 8000f98:	2d05      	cmp	r5, #5
 8000f9a:	dc12      	bgt.n	8000fc2 <__aeabi_i2f+0x86>
 8000f9c:	0031      	movs	r1, r6
 8000f9e:	4f0d      	ldr	r7, [pc, #52]	; (8000fd4 <__aeabi_i2f+0x98>)
 8000fa0:	4039      	ands	r1, r7
 8000fa2:	0772      	lsls	r2, r6, #29
 8000fa4:	d009      	beq.n	8000fba <__aeabi_i2f+0x7e>
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	4030      	ands	r0, r6
 8000faa:	2804      	cmp	r0, #4
 8000fac:	d005      	beq.n	8000fba <__aeabi_i2f+0x7e>
 8000fae:	3104      	adds	r1, #4
 8000fb0:	014a      	lsls	r2, r1, #5
 8000fb2:	d502      	bpl.n	8000fba <__aeabi_i2f+0x7e>
 8000fb4:	239f      	movs	r3, #159	; 0x9f
 8000fb6:	4039      	ands	r1, r7
 8000fb8:	1b5b      	subs	r3, r3, r5
 8000fba:	0189      	lsls	r1, r1, #6
 8000fbc:	0a4e      	lsrs	r6, r1, #9
 8000fbe:	b2d8      	uxtb	r0, r3
 8000fc0:	e7d6      	b.n	8000f70 <__aeabi_i2f+0x34>
 8000fc2:	1f6a      	subs	r2, r5, #5
 8000fc4:	4096      	lsls	r6, r2
 8000fc6:	0031      	movs	r1, r6
 8000fc8:	4f02      	ldr	r7, [pc, #8]	; (8000fd4 <__aeabi_i2f+0x98>)
 8000fca:	4039      	ands	r1, r7
 8000fcc:	0772      	lsls	r2, r6, #29
 8000fce:	d0f4      	beq.n	8000fba <__aeabi_i2f+0x7e>
 8000fd0:	e7e9      	b.n	8000fa6 <__aeabi_i2f+0x6a>
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	fbffffff 	.word	0xfbffffff

08000fd8 <__aeabi_dadd>:
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	464f      	mov	r7, r9
 8000fdc:	4646      	mov	r6, r8
 8000fde:	46d6      	mov	lr, sl
 8000fe0:	000d      	movs	r5, r1
 8000fe2:	0004      	movs	r4, r0
 8000fe4:	b5c0      	push	{r6, r7, lr}
 8000fe6:	001f      	movs	r7, r3
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0328      	lsls	r0, r5, #12
 8000fec:	0f62      	lsrs	r2, r4, #29
 8000fee:	0a40      	lsrs	r0, r0, #9
 8000ff0:	4310      	orrs	r0, r2
 8000ff2:	007a      	lsls	r2, r7, #1
 8000ff4:	0d52      	lsrs	r2, r2, #21
 8000ff6:	00e3      	lsls	r3, r4, #3
 8000ff8:	033c      	lsls	r4, r7, #12
 8000ffa:	4691      	mov	r9, r2
 8000ffc:	0a64      	lsrs	r4, r4, #9
 8000ffe:	0ffa      	lsrs	r2, r7, #31
 8001000:	0f4f      	lsrs	r7, r1, #29
 8001002:	006e      	lsls	r6, r5, #1
 8001004:	4327      	orrs	r7, r4
 8001006:	4692      	mov	sl, r2
 8001008:	46b8      	mov	r8, r7
 800100a:	0d76      	lsrs	r6, r6, #21
 800100c:	0fed      	lsrs	r5, r5, #31
 800100e:	00c9      	lsls	r1, r1, #3
 8001010:	4295      	cmp	r5, r2
 8001012:	d100      	bne.n	8001016 <__aeabi_dadd+0x3e>
 8001014:	e099      	b.n	800114a <__aeabi_dadd+0x172>
 8001016:	464c      	mov	r4, r9
 8001018:	1b34      	subs	r4, r6, r4
 800101a:	46a4      	mov	ip, r4
 800101c:	2c00      	cmp	r4, #0
 800101e:	dc00      	bgt.n	8001022 <__aeabi_dadd+0x4a>
 8001020:	e07c      	b.n	800111c <__aeabi_dadd+0x144>
 8001022:	464a      	mov	r2, r9
 8001024:	2a00      	cmp	r2, #0
 8001026:	d100      	bne.n	800102a <__aeabi_dadd+0x52>
 8001028:	e0b8      	b.n	800119c <__aeabi_dadd+0x1c4>
 800102a:	4ac5      	ldr	r2, [pc, #788]	; (8001340 <__aeabi_dadd+0x368>)
 800102c:	4296      	cmp	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x5a>
 8001030:	e11c      	b.n	800126c <__aeabi_dadd+0x294>
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	003c      	movs	r4, r7
 8001036:	0412      	lsls	r2, r2, #16
 8001038:	4314      	orrs	r4, r2
 800103a:	46a0      	mov	r8, r4
 800103c:	4662      	mov	r2, ip
 800103e:	2a38      	cmp	r2, #56	; 0x38
 8001040:	dd00      	ble.n	8001044 <__aeabi_dadd+0x6c>
 8001042:	e161      	b.n	8001308 <__aeabi_dadd+0x330>
 8001044:	2a1f      	cmp	r2, #31
 8001046:	dd00      	ble.n	800104a <__aeabi_dadd+0x72>
 8001048:	e1cc      	b.n	80013e4 <__aeabi_dadd+0x40c>
 800104a:	4664      	mov	r4, ip
 800104c:	2220      	movs	r2, #32
 800104e:	1b12      	subs	r2, r2, r4
 8001050:	4644      	mov	r4, r8
 8001052:	4094      	lsls	r4, r2
 8001054:	000f      	movs	r7, r1
 8001056:	46a1      	mov	r9, r4
 8001058:	4664      	mov	r4, ip
 800105a:	4091      	lsls	r1, r2
 800105c:	40e7      	lsrs	r7, r4
 800105e:	464c      	mov	r4, r9
 8001060:	1e4a      	subs	r2, r1, #1
 8001062:	4191      	sbcs	r1, r2
 8001064:	433c      	orrs	r4, r7
 8001066:	4642      	mov	r2, r8
 8001068:	4321      	orrs	r1, r4
 800106a:	4664      	mov	r4, ip
 800106c:	40e2      	lsrs	r2, r4
 800106e:	1a80      	subs	r0, r0, r2
 8001070:	1a5c      	subs	r4, r3, r1
 8001072:	42a3      	cmp	r3, r4
 8001074:	419b      	sbcs	r3, r3
 8001076:	425f      	negs	r7, r3
 8001078:	1bc7      	subs	r7, r0, r7
 800107a:	023b      	lsls	r3, r7, #8
 800107c:	d400      	bmi.n	8001080 <__aeabi_dadd+0xa8>
 800107e:	e0d0      	b.n	8001222 <__aeabi_dadd+0x24a>
 8001080:	027f      	lsls	r7, r7, #9
 8001082:	0a7f      	lsrs	r7, r7, #9
 8001084:	2f00      	cmp	r7, #0
 8001086:	d100      	bne.n	800108a <__aeabi_dadd+0xb2>
 8001088:	e0ff      	b.n	800128a <__aeabi_dadd+0x2b2>
 800108a:	0038      	movs	r0, r7
 800108c:	f001 fdfe 	bl	8002c8c <__clzsi2>
 8001090:	0001      	movs	r1, r0
 8001092:	3908      	subs	r1, #8
 8001094:	2320      	movs	r3, #32
 8001096:	0022      	movs	r2, r4
 8001098:	1a5b      	subs	r3, r3, r1
 800109a:	408f      	lsls	r7, r1
 800109c:	40da      	lsrs	r2, r3
 800109e:	408c      	lsls	r4, r1
 80010a0:	4317      	orrs	r7, r2
 80010a2:	42b1      	cmp	r1, r6
 80010a4:	da00      	bge.n	80010a8 <__aeabi_dadd+0xd0>
 80010a6:	e0ff      	b.n	80012a8 <__aeabi_dadd+0x2d0>
 80010a8:	1b89      	subs	r1, r1, r6
 80010aa:	1c4b      	adds	r3, r1, #1
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	dd00      	ble.n	80010b2 <__aeabi_dadd+0xda>
 80010b0:	e0a8      	b.n	8001204 <__aeabi_dadd+0x22c>
 80010b2:	2220      	movs	r2, #32
 80010b4:	0039      	movs	r1, r7
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	0020      	movs	r0, r4
 80010ba:	4094      	lsls	r4, r2
 80010bc:	4091      	lsls	r1, r2
 80010be:	40d8      	lsrs	r0, r3
 80010c0:	1e62      	subs	r2, r4, #1
 80010c2:	4194      	sbcs	r4, r2
 80010c4:	40df      	lsrs	r7, r3
 80010c6:	2600      	movs	r6, #0
 80010c8:	4301      	orrs	r1, r0
 80010ca:	430c      	orrs	r4, r1
 80010cc:	0763      	lsls	r3, r4, #29
 80010ce:	d009      	beq.n	80010e4 <__aeabi_dadd+0x10c>
 80010d0:	230f      	movs	r3, #15
 80010d2:	4023      	ands	r3, r4
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d005      	beq.n	80010e4 <__aeabi_dadd+0x10c>
 80010d8:	1d23      	adds	r3, r4, #4
 80010da:	42a3      	cmp	r3, r4
 80010dc:	41a4      	sbcs	r4, r4
 80010de:	4264      	negs	r4, r4
 80010e0:	193f      	adds	r7, r7, r4
 80010e2:	001c      	movs	r4, r3
 80010e4:	023b      	lsls	r3, r7, #8
 80010e6:	d400      	bmi.n	80010ea <__aeabi_dadd+0x112>
 80010e8:	e09e      	b.n	8001228 <__aeabi_dadd+0x250>
 80010ea:	4b95      	ldr	r3, [pc, #596]	; (8001340 <__aeabi_dadd+0x368>)
 80010ec:	3601      	adds	r6, #1
 80010ee:	429e      	cmp	r6, r3
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x11c>
 80010f2:	e0b7      	b.n	8001264 <__aeabi_dadd+0x28c>
 80010f4:	4a93      	ldr	r2, [pc, #588]	; (8001344 <__aeabi_dadd+0x36c>)
 80010f6:	08e4      	lsrs	r4, r4, #3
 80010f8:	4017      	ands	r7, r2
 80010fa:	077b      	lsls	r3, r7, #29
 80010fc:	0571      	lsls	r1, r6, #21
 80010fe:	027f      	lsls	r7, r7, #9
 8001100:	4323      	orrs	r3, r4
 8001102:	0b3f      	lsrs	r7, r7, #12
 8001104:	0d4a      	lsrs	r2, r1, #21
 8001106:	0512      	lsls	r2, r2, #20
 8001108:	433a      	orrs	r2, r7
 800110a:	07ed      	lsls	r5, r5, #31
 800110c:	432a      	orrs	r2, r5
 800110e:	0018      	movs	r0, r3
 8001110:	0011      	movs	r1, r2
 8001112:	bce0      	pop	{r5, r6, r7}
 8001114:	46ba      	mov	sl, r7
 8001116:	46b1      	mov	r9, r6
 8001118:	46a8      	mov	r8, r5
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111c:	2c00      	cmp	r4, #0
 800111e:	d04b      	beq.n	80011b8 <__aeabi_dadd+0x1e0>
 8001120:	464c      	mov	r4, r9
 8001122:	1ba4      	subs	r4, r4, r6
 8001124:	46a4      	mov	ip, r4
 8001126:	2e00      	cmp	r6, #0
 8001128:	d000      	beq.n	800112c <__aeabi_dadd+0x154>
 800112a:	e123      	b.n	8001374 <__aeabi_dadd+0x39c>
 800112c:	0004      	movs	r4, r0
 800112e:	431c      	orrs	r4, r3
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x15c>
 8001132:	e1af      	b.n	8001494 <__aeabi_dadd+0x4bc>
 8001134:	4662      	mov	r2, ip
 8001136:	1e54      	subs	r4, r2, #1
 8001138:	2a01      	cmp	r2, #1
 800113a:	d100      	bne.n	800113e <__aeabi_dadd+0x166>
 800113c:	e215      	b.n	800156a <__aeabi_dadd+0x592>
 800113e:	4d80      	ldr	r5, [pc, #512]	; (8001340 <__aeabi_dadd+0x368>)
 8001140:	45ac      	cmp	ip, r5
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x16e>
 8001144:	e1c8      	b.n	80014d8 <__aeabi_dadd+0x500>
 8001146:	46a4      	mov	ip, r4
 8001148:	e11b      	b.n	8001382 <__aeabi_dadd+0x3aa>
 800114a:	464a      	mov	r2, r9
 800114c:	1ab2      	subs	r2, r6, r2
 800114e:	4694      	mov	ip, r2
 8001150:	2a00      	cmp	r2, #0
 8001152:	dc00      	bgt.n	8001156 <__aeabi_dadd+0x17e>
 8001154:	e0ac      	b.n	80012b0 <__aeabi_dadd+0x2d8>
 8001156:	464a      	mov	r2, r9
 8001158:	2a00      	cmp	r2, #0
 800115a:	d043      	beq.n	80011e4 <__aeabi_dadd+0x20c>
 800115c:	4a78      	ldr	r2, [pc, #480]	; (8001340 <__aeabi_dadd+0x368>)
 800115e:	4296      	cmp	r6, r2
 8001160:	d100      	bne.n	8001164 <__aeabi_dadd+0x18c>
 8001162:	e1af      	b.n	80014c4 <__aeabi_dadd+0x4ec>
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	003c      	movs	r4, r7
 8001168:	0412      	lsls	r2, r2, #16
 800116a:	4314      	orrs	r4, r2
 800116c:	46a0      	mov	r8, r4
 800116e:	4662      	mov	r2, ip
 8001170:	2a38      	cmp	r2, #56	; 0x38
 8001172:	dc67      	bgt.n	8001244 <__aeabi_dadd+0x26c>
 8001174:	2a1f      	cmp	r2, #31
 8001176:	dc00      	bgt.n	800117a <__aeabi_dadd+0x1a2>
 8001178:	e15f      	b.n	800143a <__aeabi_dadd+0x462>
 800117a:	4647      	mov	r7, r8
 800117c:	3a20      	subs	r2, #32
 800117e:	40d7      	lsrs	r7, r2
 8001180:	4662      	mov	r2, ip
 8001182:	2a20      	cmp	r2, #32
 8001184:	d005      	beq.n	8001192 <__aeabi_dadd+0x1ba>
 8001186:	4664      	mov	r4, ip
 8001188:	2240      	movs	r2, #64	; 0x40
 800118a:	1b12      	subs	r2, r2, r4
 800118c:	4644      	mov	r4, r8
 800118e:	4094      	lsls	r4, r2
 8001190:	4321      	orrs	r1, r4
 8001192:	1e4a      	subs	r2, r1, #1
 8001194:	4191      	sbcs	r1, r2
 8001196:	000c      	movs	r4, r1
 8001198:	433c      	orrs	r4, r7
 800119a:	e057      	b.n	800124c <__aeabi_dadd+0x274>
 800119c:	003a      	movs	r2, r7
 800119e:	430a      	orrs	r2, r1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x1cc>
 80011a2:	e105      	b.n	80013b0 <__aeabi_dadd+0x3d8>
 80011a4:	0022      	movs	r2, r4
 80011a6:	3a01      	subs	r2, #1
 80011a8:	2c01      	cmp	r4, #1
 80011aa:	d100      	bne.n	80011ae <__aeabi_dadd+0x1d6>
 80011ac:	e182      	b.n	80014b4 <__aeabi_dadd+0x4dc>
 80011ae:	4c64      	ldr	r4, [pc, #400]	; (8001340 <__aeabi_dadd+0x368>)
 80011b0:	45a4      	cmp	ip, r4
 80011b2:	d05b      	beq.n	800126c <__aeabi_dadd+0x294>
 80011b4:	4694      	mov	ip, r2
 80011b6:	e741      	b.n	800103c <__aeabi_dadd+0x64>
 80011b8:	4c63      	ldr	r4, [pc, #396]	; (8001348 <__aeabi_dadd+0x370>)
 80011ba:	1c77      	adds	r7, r6, #1
 80011bc:	4227      	tst	r7, r4
 80011be:	d000      	beq.n	80011c2 <__aeabi_dadd+0x1ea>
 80011c0:	e0c4      	b.n	800134c <__aeabi_dadd+0x374>
 80011c2:	0004      	movs	r4, r0
 80011c4:	431c      	orrs	r4, r3
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d000      	beq.n	80011cc <__aeabi_dadd+0x1f4>
 80011ca:	e169      	b.n	80014a0 <__aeabi_dadd+0x4c8>
 80011cc:	2c00      	cmp	r4, #0
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dadd+0x1fa>
 80011d0:	e1bf      	b.n	8001552 <__aeabi_dadd+0x57a>
 80011d2:	4644      	mov	r4, r8
 80011d4:	430c      	orrs	r4, r1
 80011d6:	d000      	beq.n	80011da <__aeabi_dadd+0x202>
 80011d8:	e1d0      	b.n	800157c <__aeabi_dadd+0x5a4>
 80011da:	0742      	lsls	r2, r0, #29
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	4313      	orrs	r3, r2
 80011e0:	08c0      	lsrs	r0, r0, #3
 80011e2:	e029      	b.n	8001238 <__aeabi_dadd+0x260>
 80011e4:	003a      	movs	r2, r7
 80011e6:	430a      	orrs	r2, r1
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x214>
 80011ea:	e170      	b.n	80014ce <__aeabi_dadd+0x4f6>
 80011ec:	4662      	mov	r2, ip
 80011ee:	4664      	mov	r4, ip
 80011f0:	3a01      	subs	r2, #1
 80011f2:	2c01      	cmp	r4, #1
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dadd+0x220>
 80011f6:	e0e0      	b.n	80013ba <__aeabi_dadd+0x3e2>
 80011f8:	4c51      	ldr	r4, [pc, #324]	; (8001340 <__aeabi_dadd+0x368>)
 80011fa:	45a4      	cmp	ip, r4
 80011fc:	d100      	bne.n	8001200 <__aeabi_dadd+0x228>
 80011fe:	e161      	b.n	80014c4 <__aeabi_dadd+0x4ec>
 8001200:	4694      	mov	ip, r2
 8001202:	e7b4      	b.n	800116e <__aeabi_dadd+0x196>
 8001204:	003a      	movs	r2, r7
 8001206:	391f      	subs	r1, #31
 8001208:	40ca      	lsrs	r2, r1
 800120a:	0011      	movs	r1, r2
 800120c:	2b20      	cmp	r3, #32
 800120e:	d003      	beq.n	8001218 <__aeabi_dadd+0x240>
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	409f      	lsls	r7, r3
 8001216:	433c      	orrs	r4, r7
 8001218:	1e63      	subs	r3, r4, #1
 800121a:	419c      	sbcs	r4, r3
 800121c:	2700      	movs	r7, #0
 800121e:	2600      	movs	r6, #0
 8001220:	430c      	orrs	r4, r1
 8001222:	0763      	lsls	r3, r4, #29
 8001224:	d000      	beq.n	8001228 <__aeabi_dadd+0x250>
 8001226:	e753      	b.n	80010d0 <__aeabi_dadd+0xf8>
 8001228:	46b4      	mov	ip, r6
 800122a:	08e4      	lsrs	r4, r4, #3
 800122c:	077b      	lsls	r3, r7, #29
 800122e:	4323      	orrs	r3, r4
 8001230:	08f8      	lsrs	r0, r7, #3
 8001232:	4a43      	ldr	r2, [pc, #268]	; (8001340 <__aeabi_dadd+0x368>)
 8001234:	4594      	cmp	ip, r2
 8001236:	d01d      	beq.n	8001274 <__aeabi_dadd+0x29c>
 8001238:	4662      	mov	r2, ip
 800123a:	0307      	lsls	r7, r0, #12
 800123c:	0552      	lsls	r2, r2, #21
 800123e:	0b3f      	lsrs	r7, r7, #12
 8001240:	0d52      	lsrs	r2, r2, #21
 8001242:	e760      	b.n	8001106 <__aeabi_dadd+0x12e>
 8001244:	4644      	mov	r4, r8
 8001246:	430c      	orrs	r4, r1
 8001248:	1e62      	subs	r2, r4, #1
 800124a:	4194      	sbcs	r4, r2
 800124c:	18e4      	adds	r4, r4, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	419b      	sbcs	r3, r3
 8001252:	425f      	negs	r7, r3
 8001254:	183f      	adds	r7, r7, r0
 8001256:	023b      	lsls	r3, r7, #8
 8001258:	d5e3      	bpl.n	8001222 <__aeabi_dadd+0x24a>
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <__aeabi_dadd+0x368>)
 800125c:	3601      	adds	r6, #1
 800125e:	429e      	cmp	r6, r3
 8001260:	d000      	beq.n	8001264 <__aeabi_dadd+0x28c>
 8001262:	e0b5      	b.n	80013d0 <__aeabi_dadd+0x3f8>
 8001264:	0032      	movs	r2, r6
 8001266:	2700      	movs	r7, #0
 8001268:	2300      	movs	r3, #0
 800126a:	e74c      	b.n	8001106 <__aeabi_dadd+0x12e>
 800126c:	0742      	lsls	r2, r0, #29
 800126e:	08db      	lsrs	r3, r3, #3
 8001270:	4313      	orrs	r3, r2
 8001272:	08c0      	lsrs	r0, r0, #3
 8001274:	001a      	movs	r2, r3
 8001276:	4302      	orrs	r2, r0
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x2a4>
 800127a:	e1e1      	b.n	8001640 <__aeabi_dadd+0x668>
 800127c:	2780      	movs	r7, #128	; 0x80
 800127e:	033f      	lsls	r7, r7, #12
 8001280:	4307      	orrs	r7, r0
 8001282:	033f      	lsls	r7, r7, #12
 8001284:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <__aeabi_dadd+0x368>)
 8001286:	0b3f      	lsrs	r7, r7, #12
 8001288:	e73d      	b.n	8001106 <__aeabi_dadd+0x12e>
 800128a:	0020      	movs	r0, r4
 800128c:	f001 fcfe 	bl	8002c8c <__clzsi2>
 8001290:	0001      	movs	r1, r0
 8001292:	3118      	adds	r1, #24
 8001294:	291f      	cmp	r1, #31
 8001296:	dc00      	bgt.n	800129a <__aeabi_dadd+0x2c2>
 8001298:	e6fc      	b.n	8001094 <__aeabi_dadd+0xbc>
 800129a:	3808      	subs	r0, #8
 800129c:	4084      	lsls	r4, r0
 800129e:	0027      	movs	r7, r4
 80012a0:	2400      	movs	r4, #0
 80012a2:	42b1      	cmp	r1, r6
 80012a4:	db00      	blt.n	80012a8 <__aeabi_dadd+0x2d0>
 80012a6:	e6ff      	b.n	80010a8 <__aeabi_dadd+0xd0>
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <__aeabi_dadd+0x36c>)
 80012aa:	1a76      	subs	r6, r6, r1
 80012ac:	4017      	ands	r7, r2
 80012ae:	e70d      	b.n	80010cc <__aeabi_dadd+0xf4>
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d02f      	beq.n	8001314 <__aeabi_dadd+0x33c>
 80012b4:	464a      	mov	r2, r9
 80012b6:	1b92      	subs	r2, r2, r6
 80012b8:	4694      	mov	ip, r2
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x2e8>
 80012be:	e0ad      	b.n	800141c <__aeabi_dadd+0x444>
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <__aeabi_dadd+0x368>)
 80012c2:	4591      	cmp	r9, r2
 80012c4:	d100      	bne.n	80012c8 <__aeabi_dadd+0x2f0>
 80012c6:	e10f      	b.n	80014e8 <__aeabi_dadd+0x510>
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	0412      	lsls	r2, r2, #16
 80012cc:	4310      	orrs	r0, r2
 80012ce:	4662      	mov	r2, ip
 80012d0:	2a38      	cmp	r2, #56	; 0x38
 80012d2:	dd00      	ble.n	80012d6 <__aeabi_dadd+0x2fe>
 80012d4:	e10f      	b.n	80014f6 <__aeabi_dadd+0x51e>
 80012d6:	2a1f      	cmp	r2, #31
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dadd+0x304>
 80012da:	e180      	b.n	80015de <__aeabi_dadd+0x606>
 80012dc:	4664      	mov	r4, ip
 80012de:	2220      	movs	r2, #32
 80012e0:	001e      	movs	r6, r3
 80012e2:	1b12      	subs	r2, r2, r4
 80012e4:	4667      	mov	r7, ip
 80012e6:	0004      	movs	r4, r0
 80012e8:	4093      	lsls	r3, r2
 80012ea:	4094      	lsls	r4, r2
 80012ec:	40fe      	lsrs	r6, r7
 80012ee:	1e5a      	subs	r2, r3, #1
 80012f0:	4193      	sbcs	r3, r2
 80012f2:	40f8      	lsrs	r0, r7
 80012f4:	4334      	orrs	r4, r6
 80012f6:	431c      	orrs	r4, r3
 80012f8:	4480      	add	r8, r0
 80012fa:	1864      	adds	r4, r4, r1
 80012fc:	428c      	cmp	r4, r1
 80012fe:	41bf      	sbcs	r7, r7
 8001300:	427f      	negs	r7, r7
 8001302:	464e      	mov	r6, r9
 8001304:	4447      	add	r7, r8
 8001306:	e7a6      	b.n	8001256 <__aeabi_dadd+0x27e>
 8001308:	4642      	mov	r2, r8
 800130a:	430a      	orrs	r2, r1
 800130c:	0011      	movs	r1, r2
 800130e:	1e4a      	subs	r2, r1, #1
 8001310:	4191      	sbcs	r1, r2
 8001312:	e6ad      	b.n	8001070 <__aeabi_dadd+0x98>
 8001314:	4c0c      	ldr	r4, [pc, #48]	; (8001348 <__aeabi_dadd+0x370>)
 8001316:	1c72      	adds	r2, r6, #1
 8001318:	4222      	tst	r2, r4
 800131a:	d000      	beq.n	800131e <__aeabi_dadd+0x346>
 800131c:	e0a1      	b.n	8001462 <__aeabi_dadd+0x48a>
 800131e:	0002      	movs	r2, r0
 8001320:	431a      	orrs	r2, r3
 8001322:	2e00      	cmp	r6, #0
 8001324:	d000      	beq.n	8001328 <__aeabi_dadd+0x350>
 8001326:	e0fa      	b.n	800151e <__aeabi_dadd+0x546>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x356>
 800132c:	e145      	b.n	80015ba <__aeabi_dadd+0x5e2>
 800132e:	003a      	movs	r2, r7
 8001330:	430a      	orrs	r2, r1
 8001332:	d000      	beq.n	8001336 <__aeabi_dadd+0x35e>
 8001334:	e146      	b.n	80015c4 <__aeabi_dadd+0x5ec>
 8001336:	0742      	lsls	r2, r0, #29
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	4313      	orrs	r3, r2
 800133c:	08c0      	lsrs	r0, r0, #3
 800133e:	e77b      	b.n	8001238 <__aeabi_dadd+0x260>
 8001340:	000007ff 	.word	0x000007ff
 8001344:	ff7fffff 	.word	0xff7fffff
 8001348:	000007fe 	.word	0x000007fe
 800134c:	4647      	mov	r7, r8
 800134e:	1a5c      	subs	r4, r3, r1
 8001350:	1bc2      	subs	r2, r0, r7
 8001352:	42a3      	cmp	r3, r4
 8001354:	41bf      	sbcs	r7, r7
 8001356:	427f      	negs	r7, r7
 8001358:	46b9      	mov	r9, r7
 800135a:	0017      	movs	r7, r2
 800135c:	464a      	mov	r2, r9
 800135e:	1abf      	subs	r7, r7, r2
 8001360:	023a      	lsls	r2, r7, #8
 8001362:	d500      	bpl.n	8001366 <__aeabi_dadd+0x38e>
 8001364:	e08d      	b.n	8001482 <__aeabi_dadd+0x4aa>
 8001366:	0023      	movs	r3, r4
 8001368:	433b      	orrs	r3, r7
 800136a:	d000      	beq.n	800136e <__aeabi_dadd+0x396>
 800136c:	e68a      	b.n	8001084 <__aeabi_dadd+0xac>
 800136e:	2000      	movs	r0, #0
 8001370:	2500      	movs	r5, #0
 8001372:	e761      	b.n	8001238 <__aeabi_dadd+0x260>
 8001374:	4cb4      	ldr	r4, [pc, #720]	; (8001648 <__aeabi_dadd+0x670>)
 8001376:	45a1      	cmp	r9, r4
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x3a4>
 800137a:	e0ad      	b.n	80014d8 <__aeabi_dadd+0x500>
 800137c:	2480      	movs	r4, #128	; 0x80
 800137e:	0424      	lsls	r4, r4, #16
 8001380:	4320      	orrs	r0, r4
 8001382:	4664      	mov	r4, ip
 8001384:	2c38      	cmp	r4, #56	; 0x38
 8001386:	dc3d      	bgt.n	8001404 <__aeabi_dadd+0x42c>
 8001388:	4662      	mov	r2, ip
 800138a:	2c1f      	cmp	r4, #31
 800138c:	dd00      	ble.n	8001390 <__aeabi_dadd+0x3b8>
 800138e:	e0b7      	b.n	8001500 <__aeabi_dadd+0x528>
 8001390:	2520      	movs	r5, #32
 8001392:	001e      	movs	r6, r3
 8001394:	1b2d      	subs	r5, r5, r4
 8001396:	0004      	movs	r4, r0
 8001398:	40ab      	lsls	r3, r5
 800139a:	40ac      	lsls	r4, r5
 800139c:	40d6      	lsrs	r6, r2
 800139e:	40d0      	lsrs	r0, r2
 80013a0:	4642      	mov	r2, r8
 80013a2:	1e5d      	subs	r5, r3, #1
 80013a4:	41ab      	sbcs	r3, r5
 80013a6:	4334      	orrs	r4, r6
 80013a8:	1a12      	subs	r2, r2, r0
 80013aa:	4690      	mov	r8, r2
 80013ac:	4323      	orrs	r3, r4
 80013ae:	e02c      	b.n	800140a <__aeabi_dadd+0x432>
 80013b0:	0742      	lsls	r2, r0, #29
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	08c0      	lsrs	r0, r0, #3
 80013b8:	e73b      	b.n	8001232 <__aeabi_dadd+0x25a>
 80013ba:	185c      	adds	r4, r3, r1
 80013bc:	429c      	cmp	r4, r3
 80013be:	419b      	sbcs	r3, r3
 80013c0:	4440      	add	r0, r8
 80013c2:	425b      	negs	r3, r3
 80013c4:	18c7      	adds	r7, r0, r3
 80013c6:	2601      	movs	r6, #1
 80013c8:	023b      	lsls	r3, r7, #8
 80013ca:	d400      	bmi.n	80013ce <__aeabi_dadd+0x3f6>
 80013cc:	e729      	b.n	8001222 <__aeabi_dadd+0x24a>
 80013ce:	2602      	movs	r6, #2
 80013d0:	4a9e      	ldr	r2, [pc, #632]	; (800164c <__aeabi_dadd+0x674>)
 80013d2:	0863      	lsrs	r3, r4, #1
 80013d4:	4017      	ands	r7, r2
 80013d6:	2201      	movs	r2, #1
 80013d8:	4014      	ands	r4, r2
 80013da:	431c      	orrs	r4, r3
 80013dc:	07fb      	lsls	r3, r7, #31
 80013de:	431c      	orrs	r4, r3
 80013e0:	087f      	lsrs	r7, r7, #1
 80013e2:	e673      	b.n	80010cc <__aeabi_dadd+0xf4>
 80013e4:	4644      	mov	r4, r8
 80013e6:	3a20      	subs	r2, #32
 80013e8:	40d4      	lsrs	r4, r2
 80013ea:	4662      	mov	r2, ip
 80013ec:	2a20      	cmp	r2, #32
 80013ee:	d005      	beq.n	80013fc <__aeabi_dadd+0x424>
 80013f0:	4667      	mov	r7, ip
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	1bd2      	subs	r2, r2, r7
 80013f6:	4647      	mov	r7, r8
 80013f8:	4097      	lsls	r7, r2
 80013fa:	4339      	orrs	r1, r7
 80013fc:	1e4a      	subs	r2, r1, #1
 80013fe:	4191      	sbcs	r1, r2
 8001400:	4321      	orrs	r1, r4
 8001402:	e635      	b.n	8001070 <__aeabi_dadd+0x98>
 8001404:	4303      	orrs	r3, r0
 8001406:	1e58      	subs	r0, r3, #1
 8001408:	4183      	sbcs	r3, r0
 800140a:	1acc      	subs	r4, r1, r3
 800140c:	42a1      	cmp	r1, r4
 800140e:	41bf      	sbcs	r7, r7
 8001410:	4643      	mov	r3, r8
 8001412:	427f      	negs	r7, r7
 8001414:	4655      	mov	r5, sl
 8001416:	464e      	mov	r6, r9
 8001418:	1bdf      	subs	r7, r3, r7
 800141a:	e62e      	b.n	800107a <__aeabi_dadd+0xa2>
 800141c:	0002      	movs	r2, r0
 800141e:	431a      	orrs	r2, r3
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x44c>
 8001422:	e0bd      	b.n	80015a0 <__aeabi_dadd+0x5c8>
 8001424:	4662      	mov	r2, ip
 8001426:	4664      	mov	r4, ip
 8001428:	3a01      	subs	r2, #1
 800142a:	2c01      	cmp	r4, #1
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x458>
 800142e:	e0e5      	b.n	80015fc <__aeabi_dadd+0x624>
 8001430:	4c85      	ldr	r4, [pc, #532]	; (8001648 <__aeabi_dadd+0x670>)
 8001432:	45a4      	cmp	ip, r4
 8001434:	d058      	beq.n	80014e8 <__aeabi_dadd+0x510>
 8001436:	4694      	mov	ip, r2
 8001438:	e749      	b.n	80012ce <__aeabi_dadd+0x2f6>
 800143a:	4664      	mov	r4, ip
 800143c:	2220      	movs	r2, #32
 800143e:	1b12      	subs	r2, r2, r4
 8001440:	4644      	mov	r4, r8
 8001442:	4094      	lsls	r4, r2
 8001444:	000f      	movs	r7, r1
 8001446:	46a1      	mov	r9, r4
 8001448:	4664      	mov	r4, ip
 800144a:	4091      	lsls	r1, r2
 800144c:	40e7      	lsrs	r7, r4
 800144e:	464c      	mov	r4, r9
 8001450:	1e4a      	subs	r2, r1, #1
 8001452:	4191      	sbcs	r1, r2
 8001454:	433c      	orrs	r4, r7
 8001456:	4642      	mov	r2, r8
 8001458:	430c      	orrs	r4, r1
 800145a:	4661      	mov	r1, ip
 800145c:	40ca      	lsrs	r2, r1
 800145e:	1880      	adds	r0, r0, r2
 8001460:	e6f4      	b.n	800124c <__aeabi_dadd+0x274>
 8001462:	4c79      	ldr	r4, [pc, #484]	; (8001648 <__aeabi_dadd+0x670>)
 8001464:	42a2      	cmp	r2, r4
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x492>
 8001468:	e6fd      	b.n	8001266 <__aeabi_dadd+0x28e>
 800146a:	1859      	adds	r1, r3, r1
 800146c:	4299      	cmp	r1, r3
 800146e:	419b      	sbcs	r3, r3
 8001470:	4440      	add	r0, r8
 8001472:	425f      	negs	r7, r3
 8001474:	19c7      	adds	r7, r0, r7
 8001476:	07fc      	lsls	r4, r7, #31
 8001478:	0849      	lsrs	r1, r1, #1
 800147a:	0016      	movs	r6, r2
 800147c:	430c      	orrs	r4, r1
 800147e:	087f      	lsrs	r7, r7, #1
 8001480:	e6cf      	b.n	8001222 <__aeabi_dadd+0x24a>
 8001482:	1acc      	subs	r4, r1, r3
 8001484:	42a1      	cmp	r1, r4
 8001486:	41bf      	sbcs	r7, r7
 8001488:	4643      	mov	r3, r8
 800148a:	427f      	negs	r7, r7
 800148c:	1a18      	subs	r0, r3, r0
 800148e:	4655      	mov	r5, sl
 8001490:	1bc7      	subs	r7, r0, r7
 8001492:	e5f7      	b.n	8001084 <__aeabi_dadd+0xac>
 8001494:	08c9      	lsrs	r1, r1, #3
 8001496:	077b      	lsls	r3, r7, #29
 8001498:	4655      	mov	r5, sl
 800149a:	430b      	orrs	r3, r1
 800149c:	08f8      	lsrs	r0, r7, #3
 800149e:	e6c8      	b.n	8001232 <__aeabi_dadd+0x25a>
 80014a0:	2c00      	cmp	r4, #0
 80014a2:	d000      	beq.n	80014a6 <__aeabi_dadd+0x4ce>
 80014a4:	e081      	b.n	80015aa <__aeabi_dadd+0x5d2>
 80014a6:	4643      	mov	r3, r8
 80014a8:	430b      	orrs	r3, r1
 80014aa:	d115      	bne.n	80014d8 <__aeabi_dadd+0x500>
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	2500      	movs	r5, #0
 80014b0:	0300      	lsls	r0, r0, #12
 80014b2:	e6e3      	b.n	800127c <__aeabi_dadd+0x2a4>
 80014b4:	1a5c      	subs	r4, r3, r1
 80014b6:	42a3      	cmp	r3, r4
 80014b8:	419b      	sbcs	r3, r3
 80014ba:	1bc7      	subs	r7, r0, r7
 80014bc:	425b      	negs	r3, r3
 80014be:	2601      	movs	r6, #1
 80014c0:	1aff      	subs	r7, r7, r3
 80014c2:	e5da      	b.n	800107a <__aeabi_dadd+0xa2>
 80014c4:	0742      	lsls	r2, r0, #29
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	08c0      	lsrs	r0, r0, #3
 80014cc:	e6d2      	b.n	8001274 <__aeabi_dadd+0x29c>
 80014ce:	0742      	lsls	r2, r0, #29
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	08c0      	lsrs	r0, r0, #3
 80014d6:	e6ac      	b.n	8001232 <__aeabi_dadd+0x25a>
 80014d8:	4643      	mov	r3, r8
 80014da:	4642      	mov	r2, r8
 80014dc:	08c9      	lsrs	r1, r1, #3
 80014de:	075b      	lsls	r3, r3, #29
 80014e0:	4655      	mov	r5, sl
 80014e2:	430b      	orrs	r3, r1
 80014e4:	08d0      	lsrs	r0, r2, #3
 80014e6:	e6c5      	b.n	8001274 <__aeabi_dadd+0x29c>
 80014e8:	4643      	mov	r3, r8
 80014ea:	4642      	mov	r2, r8
 80014ec:	075b      	lsls	r3, r3, #29
 80014ee:	08c9      	lsrs	r1, r1, #3
 80014f0:	430b      	orrs	r3, r1
 80014f2:	08d0      	lsrs	r0, r2, #3
 80014f4:	e6be      	b.n	8001274 <__aeabi_dadd+0x29c>
 80014f6:	4303      	orrs	r3, r0
 80014f8:	001c      	movs	r4, r3
 80014fa:	1e63      	subs	r3, r4, #1
 80014fc:	419c      	sbcs	r4, r3
 80014fe:	e6fc      	b.n	80012fa <__aeabi_dadd+0x322>
 8001500:	0002      	movs	r2, r0
 8001502:	3c20      	subs	r4, #32
 8001504:	40e2      	lsrs	r2, r4
 8001506:	0014      	movs	r4, r2
 8001508:	4662      	mov	r2, ip
 800150a:	2a20      	cmp	r2, #32
 800150c:	d003      	beq.n	8001516 <__aeabi_dadd+0x53e>
 800150e:	2540      	movs	r5, #64	; 0x40
 8001510:	1aad      	subs	r5, r5, r2
 8001512:	40a8      	lsls	r0, r5
 8001514:	4303      	orrs	r3, r0
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	4183      	sbcs	r3, r0
 800151a:	4323      	orrs	r3, r4
 800151c:	e775      	b.n	800140a <__aeabi_dadd+0x432>
 800151e:	2a00      	cmp	r2, #0
 8001520:	d0e2      	beq.n	80014e8 <__aeabi_dadd+0x510>
 8001522:	003a      	movs	r2, r7
 8001524:	430a      	orrs	r2, r1
 8001526:	d0cd      	beq.n	80014c4 <__aeabi_dadd+0x4ec>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	4313      	orrs	r3, r2
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	08c0      	lsrs	r0, r0, #3
 8001532:	0312      	lsls	r2, r2, #12
 8001534:	4210      	tst	r0, r2
 8001536:	d006      	beq.n	8001546 <__aeabi_dadd+0x56e>
 8001538:	08fc      	lsrs	r4, r7, #3
 800153a:	4214      	tst	r4, r2
 800153c:	d103      	bne.n	8001546 <__aeabi_dadd+0x56e>
 800153e:	0020      	movs	r0, r4
 8001540:	08cb      	lsrs	r3, r1, #3
 8001542:	077a      	lsls	r2, r7, #29
 8001544:	4313      	orrs	r3, r2
 8001546:	0f5a      	lsrs	r2, r3, #29
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	0752      	lsls	r2, r2, #29
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	4313      	orrs	r3, r2
 8001550:	e690      	b.n	8001274 <__aeabi_dadd+0x29c>
 8001552:	4643      	mov	r3, r8
 8001554:	430b      	orrs	r3, r1
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x582>
 8001558:	e709      	b.n	800136e <__aeabi_dadd+0x396>
 800155a:	4643      	mov	r3, r8
 800155c:	4642      	mov	r2, r8
 800155e:	08c9      	lsrs	r1, r1, #3
 8001560:	075b      	lsls	r3, r3, #29
 8001562:	4655      	mov	r5, sl
 8001564:	430b      	orrs	r3, r1
 8001566:	08d0      	lsrs	r0, r2, #3
 8001568:	e666      	b.n	8001238 <__aeabi_dadd+0x260>
 800156a:	1acc      	subs	r4, r1, r3
 800156c:	42a1      	cmp	r1, r4
 800156e:	4189      	sbcs	r1, r1
 8001570:	1a3f      	subs	r7, r7, r0
 8001572:	4249      	negs	r1, r1
 8001574:	4655      	mov	r5, sl
 8001576:	2601      	movs	r6, #1
 8001578:	1a7f      	subs	r7, r7, r1
 800157a:	e57e      	b.n	800107a <__aeabi_dadd+0xa2>
 800157c:	4642      	mov	r2, r8
 800157e:	1a5c      	subs	r4, r3, r1
 8001580:	1a87      	subs	r7, r0, r2
 8001582:	42a3      	cmp	r3, r4
 8001584:	4192      	sbcs	r2, r2
 8001586:	4252      	negs	r2, r2
 8001588:	1abf      	subs	r7, r7, r2
 800158a:	023a      	lsls	r2, r7, #8
 800158c:	d53d      	bpl.n	800160a <__aeabi_dadd+0x632>
 800158e:	1acc      	subs	r4, r1, r3
 8001590:	42a1      	cmp	r1, r4
 8001592:	4189      	sbcs	r1, r1
 8001594:	4643      	mov	r3, r8
 8001596:	4249      	negs	r1, r1
 8001598:	1a1f      	subs	r7, r3, r0
 800159a:	4655      	mov	r5, sl
 800159c:	1a7f      	subs	r7, r7, r1
 800159e:	e595      	b.n	80010cc <__aeabi_dadd+0xf4>
 80015a0:	077b      	lsls	r3, r7, #29
 80015a2:	08c9      	lsrs	r1, r1, #3
 80015a4:	430b      	orrs	r3, r1
 80015a6:	08f8      	lsrs	r0, r7, #3
 80015a8:	e643      	b.n	8001232 <__aeabi_dadd+0x25a>
 80015aa:	4644      	mov	r4, r8
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	430c      	orrs	r4, r1
 80015b0:	d130      	bne.n	8001614 <__aeabi_dadd+0x63c>
 80015b2:	0742      	lsls	r2, r0, #29
 80015b4:	4313      	orrs	r3, r2
 80015b6:	08c0      	lsrs	r0, r0, #3
 80015b8:	e65c      	b.n	8001274 <__aeabi_dadd+0x29c>
 80015ba:	077b      	lsls	r3, r7, #29
 80015bc:	08c9      	lsrs	r1, r1, #3
 80015be:	430b      	orrs	r3, r1
 80015c0:	08f8      	lsrs	r0, r7, #3
 80015c2:	e639      	b.n	8001238 <__aeabi_dadd+0x260>
 80015c4:	185c      	adds	r4, r3, r1
 80015c6:	429c      	cmp	r4, r3
 80015c8:	419b      	sbcs	r3, r3
 80015ca:	4440      	add	r0, r8
 80015cc:	425b      	negs	r3, r3
 80015ce:	18c7      	adds	r7, r0, r3
 80015d0:	023b      	lsls	r3, r7, #8
 80015d2:	d400      	bmi.n	80015d6 <__aeabi_dadd+0x5fe>
 80015d4:	e625      	b.n	8001222 <__aeabi_dadd+0x24a>
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <__aeabi_dadd+0x674>)
 80015d8:	2601      	movs	r6, #1
 80015da:	401f      	ands	r7, r3
 80015dc:	e621      	b.n	8001222 <__aeabi_dadd+0x24a>
 80015de:	0004      	movs	r4, r0
 80015e0:	3a20      	subs	r2, #32
 80015e2:	40d4      	lsrs	r4, r2
 80015e4:	4662      	mov	r2, ip
 80015e6:	2a20      	cmp	r2, #32
 80015e8:	d004      	beq.n	80015f4 <__aeabi_dadd+0x61c>
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	4666      	mov	r6, ip
 80015ee:	1b92      	subs	r2, r2, r6
 80015f0:	4090      	lsls	r0, r2
 80015f2:	4303      	orrs	r3, r0
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	4193      	sbcs	r3, r2
 80015f8:	431c      	orrs	r4, r3
 80015fa:	e67e      	b.n	80012fa <__aeabi_dadd+0x322>
 80015fc:	185c      	adds	r4, r3, r1
 80015fe:	428c      	cmp	r4, r1
 8001600:	4189      	sbcs	r1, r1
 8001602:	4440      	add	r0, r8
 8001604:	4249      	negs	r1, r1
 8001606:	1847      	adds	r7, r0, r1
 8001608:	e6dd      	b.n	80013c6 <__aeabi_dadd+0x3ee>
 800160a:	0023      	movs	r3, r4
 800160c:	433b      	orrs	r3, r7
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x63a>
 8001610:	e6ad      	b.n	800136e <__aeabi_dadd+0x396>
 8001612:	e606      	b.n	8001222 <__aeabi_dadd+0x24a>
 8001614:	0744      	lsls	r4, r0, #29
 8001616:	4323      	orrs	r3, r4
 8001618:	2480      	movs	r4, #128	; 0x80
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	0324      	lsls	r4, r4, #12
 800161e:	4220      	tst	r0, r4
 8001620:	d008      	beq.n	8001634 <__aeabi_dadd+0x65c>
 8001622:	4642      	mov	r2, r8
 8001624:	08d6      	lsrs	r6, r2, #3
 8001626:	4226      	tst	r6, r4
 8001628:	d104      	bne.n	8001634 <__aeabi_dadd+0x65c>
 800162a:	4655      	mov	r5, sl
 800162c:	0030      	movs	r0, r6
 800162e:	08cb      	lsrs	r3, r1, #3
 8001630:	0751      	lsls	r1, r2, #29
 8001632:	430b      	orrs	r3, r1
 8001634:	0f5a      	lsrs	r2, r3, #29
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	0752      	lsls	r2, r2, #29
 800163c:	4313      	orrs	r3, r2
 800163e:	e619      	b.n	8001274 <__aeabi_dadd+0x29c>
 8001640:	2300      	movs	r3, #0
 8001642:	4a01      	ldr	r2, [pc, #4]	; (8001648 <__aeabi_dadd+0x670>)
 8001644:	001f      	movs	r7, r3
 8001646:	e55e      	b.n	8001106 <__aeabi_dadd+0x12e>
 8001648:	000007ff 	.word	0x000007ff
 800164c:	ff7fffff 	.word	0xff7fffff

08001650 <__aeabi_ddiv>:
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	4657      	mov	r7, sl
 8001654:	464e      	mov	r6, r9
 8001656:	4645      	mov	r5, r8
 8001658:	46de      	mov	lr, fp
 800165a:	b5e0      	push	{r5, r6, r7, lr}
 800165c:	4681      	mov	r9, r0
 800165e:	0005      	movs	r5, r0
 8001660:	030c      	lsls	r4, r1, #12
 8001662:	0048      	lsls	r0, r1, #1
 8001664:	4692      	mov	sl, r2
 8001666:	001f      	movs	r7, r3
 8001668:	b085      	sub	sp, #20
 800166a:	0b24      	lsrs	r4, r4, #12
 800166c:	0d40      	lsrs	r0, r0, #21
 800166e:	0fce      	lsrs	r6, r1, #31
 8001670:	2800      	cmp	r0, #0
 8001672:	d100      	bne.n	8001676 <__aeabi_ddiv+0x26>
 8001674:	e156      	b.n	8001924 <__aeabi_ddiv+0x2d4>
 8001676:	4bd4      	ldr	r3, [pc, #848]	; (80019c8 <__aeabi_ddiv+0x378>)
 8001678:	4298      	cmp	r0, r3
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x2e>
 800167c:	e172      	b.n	8001964 <__aeabi_ddiv+0x314>
 800167e:	0f6b      	lsrs	r3, r5, #29
 8001680:	00e4      	lsls	r4, r4, #3
 8001682:	431c      	orrs	r4, r3
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	4323      	orrs	r3, r4
 800168a:	4698      	mov	r8, r3
 800168c:	4bcf      	ldr	r3, [pc, #828]	; (80019cc <__aeabi_ddiv+0x37c>)
 800168e:	00ed      	lsls	r5, r5, #3
 8001690:	469b      	mov	fp, r3
 8001692:	2300      	movs	r3, #0
 8001694:	4699      	mov	r9, r3
 8001696:	4483      	add	fp, r0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	033c      	lsls	r4, r7, #12
 800169c:	007b      	lsls	r3, r7, #1
 800169e:	4650      	mov	r0, sl
 80016a0:	0b24      	lsrs	r4, r4, #12
 80016a2:	0d5b      	lsrs	r3, r3, #21
 80016a4:	0fff      	lsrs	r7, r7, #31
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x5c>
 80016aa:	e11f      	b.n	80018ec <__aeabi_ddiv+0x29c>
 80016ac:	4ac6      	ldr	r2, [pc, #792]	; (80019c8 <__aeabi_ddiv+0x378>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d100      	bne.n	80016b4 <__aeabi_ddiv+0x64>
 80016b2:	e162      	b.n	800197a <__aeabi_ddiv+0x32a>
 80016b4:	49c5      	ldr	r1, [pc, #788]	; (80019cc <__aeabi_ddiv+0x37c>)
 80016b6:	0f42      	lsrs	r2, r0, #29
 80016b8:	468c      	mov	ip, r1
 80016ba:	00e4      	lsls	r4, r4, #3
 80016bc:	4659      	mov	r1, fp
 80016be:	4314      	orrs	r4, r2
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	4463      	add	r3, ip
 80016c4:	0412      	lsls	r2, r2, #16
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4314      	orrs	r4, r2
 80016ca:	469b      	mov	fp, r3
 80016cc:	00c2      	lsls	r2, r0, #3
 80016ce:	2000      	movs	r0, #0
 80016d0:	0033      	movs	r3, r6
 80016d2:	407b      	eors	r3, r7
 80016d4:	469a      	mov	sl, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d827      	bhi.n	800172c <__aeabi_ddiv+0xdc>
 80016dc:	49bc      	ldr	r1, [pc, #752]	; (80019d0 <__aeabi_ddiv+0x380>)
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	58cb      	ldr	r3, [r1, r3]
 80016e2:	469f      	mov	pc, r3
 80016e4:	46b2      	mov	sl, r6
 80016e6:	9b00      	ldr	r3, [sp, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d016      	beq.n	800171a <__aeabi_ddiv+0xca>
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d100      	bne.n	80016f2 <__aeabi_ddiv+0xa2>
 80016f0:	e28e      	b.n	8001c10 <__aeabi_ddiv+0x5c0>
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d000      	beq.n	80016f8 <__aeabi_ddiv+0xa8>
 80016f6:	e0d9      	b.n	80018ac <__aeabi_ddiv+0x25c>
 80016f8:	2300      	movs	r3, #0
 80016fa:	2400      	movs	r4, #0
 80016fc:	2500      	movs	r5, #0
 80016fe:	4652      	mov	r2, sl
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	4323      	orrs	r3, r4
 8001704:	07d2      	lsls	r2, r2, #31
 8001706:	4313      	orrs	r3, r2
 8001708:	0028      	movs	r0, r5
 800170a:	0019      	movs	r1, r3
 800170c:	b005      	add	sp, #20
 800170e:	bcf0      	pop	{r4, r5, r6, r7}
 8001710:	46bb      	mov	fp, r7
 8001712:	46b2      	mov	sl, r6
 8001714:	46a9      	mov	r9, r5
 8001716:	46a0      	mov	r8, r4
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	2400      	movs	r4, #0
 800171c:	2500      	movs	r5, #0
 800171e:	4baa      	ldr	r3, [pc, #680]	; (80019c8 <__aeabi_ddiv+0x378>)
 8001720:	e7ed      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001722:	46ba      	mov	sl, r7
 8001724:	46a0      	mov	r8, r4
 8001726:	0015      	movs	r5, r2
 8001728:	9000      	str	r0, [sp, #0]
 800172a:	e7dc      	b.n	80016e6 <__aeabi_ddiv+0x96>
 800172c:	4544      	cmp	r4, r8
 800172e:	d200      	bcs.n	8001732 <__aeabi_ddiv+0xe2>
 8001730:	e1c7      	b.n	8001ac2 <__aeabi_ddiv+0x472>
 8001732:	d100      	bne.n	8001736 <__aeabi_ddiv+0xe6>
 8001734:	e1c2      	b.n	8001abc <__aeabi_ddiv+0x46c>
 8001736:	2301      	movs	r3, #1
 8001738:	425b      	negs	r3, r3
 800173a:	469c      	mov	ip, r3
 800173c:	002e      	movs	r6, r5
 800173e:	4640      	mov	r0, r8
 8001740:	2500      	movs	r5, #0
 8001742:	44e3      	add	fp, ip
 8001744:	0223      	lsls	r3, r4, #8
 8001746:	0e14      	lsrs	r4, r2, #24
 8001748:	431c      	orrs	r4, r3
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	4699      	mov	r9, r3
 800174e:	0423      	lsls	r3, r4, #16
 8001750:	0c1f      	lsrs	r7, r3, #16
 8001752:	0212      	lsls	r2, r2, #8
 8001754:	4649      	mov	r1, r9
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	9701      	str	r7, [sp, #4]
 800175a:	f7fe fd65 	bl	8000228 <__aeabi_uidivmod>
 800175e:	0002      	movs	r2, r0
 8001760:	437a      	muls	r2, r7
 8001762:	040b      	lsls	r3, r1, #16
 8001764:	0c31      	lsrs	r1, r6, #16
 8001766:	4680      	mov	r8, r0
 8001768:	4319      	orrs	r1, r3
 800176a:	428a      	cmp	r2, r1
 800176c:	d907      	bls.n	800177e <__aeabi_ddiv+0x12e>
 800176e:	2301      	movs	r3, #1
 8001770:	425b      	negs	r3, r3
 8001772:	469c      	mov	ip, r3
 8001774:	1909      	adds	r1, r1, r4
 8001776:	44e0      	add	r8, ip
 8001778:	428c      	cmp	r4, r1
 800177a:	d800      	bhi.n	800177e <__aeabi_ddiv+0x12e>
 800177c:	e207      	b.n	8001b8e <__aeabi_ddiv+0x53e>
 800177e:	1a88      	subs	r0, r1, r2
 8001780:	4649      	mov	r1, r9
 8001782:	f7fe fd51 	bl	8000228 <__aeabi_uidivmod>
 8001786:	0409      	lsls	r1, r1, #16
 8001788:	468c      	mov	ip, r1
 800178a:	0431      	lsls	r1, r6, #16
 800178c:	4666      	mov	r6, ip
 800178e:	9a01      	ldr	r2, [sp, #4]
 8001790:	0c09      	lsrs	r1, r1, #16
 8001792:	4342      	muls	r2, r0
 8001794:	0003      	movs	r3, r0
 8001796:	4331      	orrs	r1, r6
 8001798:	428a      	cmp	r2, r1
 800179a:	d904      	bls.n	80017a6 <__aeabi_ddiv+0x156>
 800179c:	1909      	adds	r1, r1, r4
 800179e:	3b01      	subs	r3, #1
 80017a0:	428c      	cmp	r4, r1
 80017a2:	d800      	bhi.n	80017a6 <__aeabi_ddiv+0x156>
 80017a4:	e1ed      	b.n	8001b82 <__aeabi_ddiv+0x532>
 80017a6:	1a88      	subs	r0, r1, r2
 80017a8:	4642      	mov	r2, r8
 80017aa:	0412      	lsls	r2, r2, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4690      	mov	r8, r2
 80017b0:	4641      	mov	r1, r8
 80017b2:	9b00      	ldr	r3, [sp, #0]
 80017b4:	040e      	lsls	r6, r1, #16
 80017b6:	0c1b      	lsrs	r3, r3, #16
 80017b8:	001f      	movs	r7, r3
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	9b00      	ldr	r3, [sp, #0]
 80017be:	0c36      	lsrs	r6, r6, #16
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	0c19      	lsrs	r1, r3, #16
 80017c4:	000b      	movs	r3, r1
 80017c6:	4373      	muls	r3, r6
 80017c8:	0c12      	lsrs	r2, r2, #16
 80017ca:	437e      	muls	r6, r7
 80017cc:	9103      	str	r1, [sp, #12]
 80017ce:	4351      	muls	r1, r2
 80017d0:	437a      	muls	r2, r7
 80017d2:	0c1f      	lsrs	r7, r3, #16
 80017d4:	46bc      	mov	ip, r7
 80017d6:	1876      	adds	r6, r6, r1
 80017d8:	4466      	add	r6, ip
 80017da:	42b1      	cmp	r1, r6
 80017dc:	d903      	bls.n	80017e6 <__aeabi_ddiv+0x196>
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0249      	lsls	r1, r1, #9
 80017e2:	468c      	mov	ip, r1
 80017e4:	4462      	add	r2, ip
 80017e6:	0c31      	lsrs	r1, r6, #16
 80017e8:	188a      	adds	r2, r1, r2
 80017ea:	0431      	lsls	r1, r6, #16
 80017ec:	041e      	lsls	r6, r3, #16
 80017ee:	0c36      	lsrs	r6, r6, #16
 80017f0:	198e      	adds	r6, r1, r6
 80017f2:	4290      	cmp	r0, r2
 80017f4:	d302      	bcc.n	80017fc <__aeabi_ddiv+0x1ac>
 80017f6:	d112      	bne.n	800181e <__aeabi_ddiv+0x1ce>
 80017f8:	42b5      	cmp	r5, r6
 80017fa:	d210      	bcs.n	800181e <__aeabi_ddiv+0x1ce>
 80017fc:	4643      	mov	r3, r8
 80017fe:	1e59      	subs	r1, r3, #1
 8001800:	9b00      	ldr	r3, [sp, #0]
 8001802:	469c      	mov	ip, r3
 8001804:	4465      	add	r5, ip
 8001806:	001f      	movs	r7, r3
 8001808:	429d      	cmp	r5, r3
 800180a:	419b      	sbcs	r3, r3
 800180c:	425b      	negs	r3, r3
 800180e:	191b      	adds	r3, r3, r4
 8001810:	18c0      	adds	r0, r0, r3
 8001812:	4284      	cmp	r4, r0
 8001814:	d200      	bcs.n	8001818 <__aeabi_ddiv+0x1c8>
 8001816:	e1a0      	b.n	8001b5a <__aeabi_ddiv+0x50a>
 8001818:	d100      	bne.n	800181c <__aeabi_ddiv+0x1cc>
 800181a:	e19b      	b.n	8001b54 <__aeabi_ddiv+0x504>
 800181c:	4688      	mov	r8, r1
 800181e:	1bae      	subs	r6, r5, r6
 8001820:	42b5      	cmp	r5, r6
 8001822:	41ad      	sbcs	r5, r5
 8001824:	1a80      	subs	r0, r0, r2
 8001826:	426d      	negs	r5, r5
 8001828:	1b40      	subs	r0, r0, r5
 800182a:	4284      	cmp	r4, r0
 800182c:	d100      	bne.n	8001830 <__aeabi_ddiv+0x1e0>
 800182e:	e1d5      	b.n	8001bdc <__aeabi_ddiv+0x58c>
 8001830:	4649      	mov	r1, r9
 8001832:	f7fe fcf9 	bl	8000228 <__aeabi_uidivmod>
 8001836:	9a01      	ldr	r2, [sp, #4]
 8001838:	040b      	lsls	r3, r1, #16
 800183a:	4342      	muls	r2, r0
 800183c:	0c31      	lsrs	r1, r6, #16
 800183e:	0005      	movs	r5, r0
 8001840:	4319      	orrs	r1, r3
 8001842:	428a      	cmp	r2, r1
 8001844:	d900      	bls.n	8001848 <__aeabi_ddiv+0x1f8>
 8001846:	e16c      	b.n	8001b22 <__aeabi_ddiv+0x4d2>
 8001848:	1a88      	subs	r0, r1, r2
 800184a:	4649      	mov	r1, r9
 800184c:	f7fe fcec 	bl	8000228 <__aeabi_uidivmod>
 8001850:	9a01      	ldr	r2, [sp, #4]
 8001852:	0436      	lsls	r6, r6, #16
 8001854:	4342      	muls	r2, r0
 8001856:	0409      	lsls	r1, r1, #16
 8001858:	0c36      	lsrs	r6, r6, #16
 800185a:	0003      	movs	r3, r0
 800185c:	430e      	orrs	r6, r1
 800185e:	42b2      	cmp	r2, r6
 8001860:	d900      	bls.n	8001864 <__aeabi_ddiv+0x214>
 8001862:	e153      	b.n	8001b0c <__aeabi_ddiv+0x4bc>
 8001864:	9803      	ldr	r0, [sp, #12]
 8001866:	1ab6      	subs	r6, r6, r2
 8001868:	0002      	movs	r2, r0
 800186a:	042d      	lsls	r5, r5, #16
 800186c:	431d      	orrs	r5, r3
 800186e:	9f02      	ldr	r7, [sp, #8]
 8001870:	042b      	lsls	r3, r5, #16
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	435a      	muls	r2, r3
 8001876:	437b      	muls	r3, r7
 8001878:	469c      	mov	ip, r3
 800187a:	0c29      	lsrs	r1, r5, #16
 800187c:	4348      	muls	r0, r1
 800187e:	0c13      	lsrs	r3, r2, #16
 8001880:	4484      	add	ip, r0
 8001882:	4463      	add	r3, ip
 8001884:	4379      	muls	r1, r7
 8001886:	4298      	cmp	r0, r3
 8001888:	d903      	bls.n	8001892 <__aeabi_ddiv+0x242>
 800188a:	2080      	movs	r0, #128	; 0x80
 800188c:	0240      	lsls	r0, r0, #9
 800188e:	4684      	mov	ip, r0
 8001890:	4461      	add	r1, ip
 8001892:	0c18      	lsrs	r0, r3, #16
 8001894:	0412      	lsls	r2, r2, #16
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	0c12      	lsrs	r2, r2, #16
 800189a:	1841      	adds	r1, r0, r1
 800189c:	189b      	adds	r3, r3, r2
 800189e:	428e      	cmp	r6, r1
 80018a0:	d200      	bcs.n	80018a4 <__aeabi_ddiv+0x254>
 80018a2:	e0ff      	b.n	8001aa4 <__aeabi_ddiv+0x454>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x258>
 80018a6:	e0fa      	b.n	8001a9e <__aeabi_ddiv+0x44e>
 80018a8:	2301      	movs	r3, #1
 80018aa:	431d      	orrs	r5, r3
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <__aeabi_ddiv+0x384>)
 80018ae:	445a      	add	r2, fp
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_ddiv+0x266>
 80018b4:	e0aa      	b.n	8001a0c <__aeabi_ddiv+0x3bc>
 80018b6:	076b      	lsls	r3, r5, #29
 80018b8:	d000      	beq.n	80018bc <__aeabi_ddiv+0x26c>
 80018ba:	e13d      	b.n	8001b38 <__aeabi_ddiv+0x4e8>
 80018bc:	08ed      	lsrs	r5, r5, #3
 80018be:	4643      	mov	r3, r8
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	d506      	bpl.n	80018d2 <__aeabi_ddiv+0x282>
 80018c4:	4642      	mov	r2, r8
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <__aeabi_ddiv+0x388>)
 80018c8:	401a      	ands	r2, r3
 80018ca:	4690      	mov	r8, r2
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	00d2      	lsls	r2, r2, #3
 80018d0:	445a      	add	r2, fp
 80018d2:	4b42      	ldr	r3, [pc, #264]	; (80019dc <__aeabi_ddiv+0x38c>)
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dd00      	ble.n	80018da <__aeabi_ddiv+0x28a>
 80018d8:	e71f      	b.n	800171a <__aeabi_ddiv+0xca>
 80018da:	4643      	mov	r3, r8
 80018dc:	075b      	lsls	r3, r3, #29
 80018de:	431d      	orrs	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	0552      	lsls	r2, r2, #21
 80018e4:	025c      	lsls	r4, r3, #9
 80018e6:	0b24      	lsrs	r4, r4, #12
 80018e8:	0d53      	lsrs	r3, r2, #21
 80018ea:	e708      	b.n	80016fe <__aeabi_ddiv+0xae>
 80018ec:	4652      	mov	r2, sl
 80018ee:	4322      	orrs	r2, r4
 80018f0:	d100      	bne.n	80018f4 <__aeabi_ddiv+0x2a4>
 80018f2:	e07b      	b.n	80019ec <__aeabi_ddiv+0x39c>
 80018f4:	2c00      	cmp	r4, #0
 80018f6:	d100      	bne.n	80018fa <__aeabi_ddiv+0x2aa>
 80018f8:	e0fa      	b.n	8001af0 <__aeabi_ddiv+0x4a0>
 80018fa:	0020      	movs	r0, r4
 80018fc:	f001 f9c6 	bl	8002c8c <__clzsi2>
 8001900:	0002      	movs	r2, r0
 8001902:	3a0b      	subs	r2, #11
 8001904:	231d      	movs	r3, #29
 8001906:	0001      	movs	r1, r0
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	4652      	mov	r2, sl
 800190c:	3908      	subs	r1, #8
 800190e:	40da      	lsrs	r2, r3
 8001910:	408c      	lsls	r4, r1
 8001912:	4314      	orrs	r4, r2
 8001914:	4652      	mov	r2, sl
 8001916:	408a      	lsls	r2, r1
 8001918:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <__aeabi_ddiv+0x390>)
 800191a:	4458      	add	r0, fp
 800191c:	469b      	mov	fp, r3
 800191e:	4483      	add	fp, r0
 8001920:	2000      	movs	r0, #0
 8001922:	e6d5      	b.n	80016d0 <__aeabi_ddiv+0x80>
 8001924:	464b      	mov	r3, r9
 8001926:	4323      	orrs	r3, r4
 8001928:	4698      	mov	r8, r3
 800192a:	d044      	beq.n	80019b6 <__aeabi_ddiv+0x366>
 800192c:	2c00      	cmp	r4, #0
 800192e:	d100      	bne.n	8001932 <__aeabi_ddiv+0x2e2>
 8001930:	e0ce      	b.n	8001ad0 <__aeabi_ddiv+0x480>
 8001932:	0020      	movs	r0, r4
 8001934:	f001 f9aa 	bl	8002c8c <__clzsi2>
 8001938:	0001      	movs	r1, r0
 800193a:	0002      	movs	r2, r0
 800193c:	390b      	subs	r1, #11
 800193e:	231d      	movs	r3, #29
 8001940:	1a5b      	subs	r3, r3, r1
 8001942:	4649      	mov	r1, r9
 8001944:	0010      	movs	r0, r2
 8001946:	40d9      	lsrs	r1, r3
 8001948:	3808      	subs	r0, #8
 800194a:	4084      	lsls	r4, r0
 800194c:	000b      	movs	r3, r1
 800194e:	464d      	mov	r5, r9
 8001950:	4323      	orrs	r3, r4
 8001952:	4698      	mov	r8, r3
 8001954:	4085      	lsls	r5, r0
 8001956:	4823      	ldr	r0, [pc, #140]	; (80019e4 <__aeabi_ddiv+0x394>)
 8001958:	1a83      	subs	r3, r0, r2
 800195a:	469b      	mov	fp, r3
 800195c:	2300      	movs	r3, #0
 800195e:	4699      	mov	r9, r3
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	e69a      	b.n	800169a <__aeabi_ddiv+0x4a>
 8001964:	464b      	mov	r3, r9
 8001966:	4323      	orrs	r3, r4
 8001968:	4698      	mov	r8, r3
 800196a:	d11d      	bne.n	80019a8 <__aeabi_ddiv+0x358>
 800196c:	2308      	movs	r3, #8
 800196e:	4699      	mov	r9, r3
 8001970:	3b06      	subs	r3, #6
 8001972:	2500      	movs	r5, #0
 8001974:	4683      	mov	fp, r0
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	e68f      	b.n	800169a <__aeabi_ddiv+0x4a>
 800197a:	4652      	mov	r2, sl
 800197c:	4322      	orrs	r2, r4
 800197e:	d109      	bne.n	8001994 <__aeabi_ddiv+0x344>
 8001980:	2302      	movs	r3, #2
 8001982:	4649      	mov	r1, r9
 8001984:	4319      	orrs	r1, r3
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <__aeabi_ddiv+0x398>)
 8001988:	4689      	mov	r9, r1
 800198a:	469c      	mov	ip, r3
 800198c:	2400      	movs	r4, #0
 800198e:	2002      	movs	r0, #2
 8001990:	44e3      	add	fp, ip
 8001992:	e69d      	b.n	80016d0 <__aeabi_ddiv+0x80>
 8001994:	2303      	movs	r3, #3
 8001996:	464a      	mov	r2, r9
 8001998:	431a      	orrs	r2, r3
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <__aeabi_ddiv+0x398>)
 800199c:	4691      	mov	r9, r2
 800199e:	469c      	mov	ip, r3
 80019a0:	4652      	mov	r2, sl
 80019a2:	2003      	movs	r0, #3
 80019a4:	44e3      	add	fp, ip
 80019a6:	e693      	b.n	80016d0 <__aeabi_ddiv+0x80>
 80019a8:	230c      	movs	r3, #12
 80019aa:	4699      	mov	r9, r3
 80019ac:	3b09      	subs	r3, #9
 80019ae:	46a0      	mov	r8, r4
 80019b0:	4683      	mov	fp, r0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	e671      	b.n	800169a <__aeabi_ddiv+0x4a>
 80019b6:	2304      	movs	r3, #4
 80019b8:	4699      	mov	r9, r3
 80019ba:	2300      	movs	r3, #0
 80019bc:	469b      	mov	fp, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	2500      	movs	r5, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	e669      	b.n	800169a <__aeabi_ddiv+0x4a>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	fffffc01 	.word	0xfffffc01
 80019d0:	0800a970 	.word	0x0800a970
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	000003f3 	.word	0x000003f3
 80019e4:	fffffc0d 	.word	0xfffffc0d
 80019e8:	fffff801 	.word	0xfffff801
 80019ec:	4649      	mov	r1, r9
 80019ee:	2301      	movs	r3, #1
 80019f0:	4319      	orrs	r1, r3
 80019f2:	4689      	mov	r9, r1
 80019f4:	2400      	movs	r4, #0
 80019f6:	2001      	movs	r0, #1
 80019f8:	e66a      	b.n	80016d0 <__aeabi_ddiv+0x80>
 80019fa:	2300      	movs	r3, #0
 80019fc:	2480      	movs	r4, #128	; 0x80
 80019fe:	469a      	mov	sl, r3
 8001a00:	2500      	movs	r5, #0
 8001a02:	4b8a      	ldr	r3, [pc, #552]	; (8001c2c <__aeabi_ddiv+0x5dc>)
 8001a04:	0324      	lsls	r4, r4, #12
 8001a06:	e67a      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	426d      	negs	r5, r5
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	2b38      	cmp	r3, #56	; 0x38
 8001a12:	dd00      	ble.n	8001a16 <__aeabi_ddiv+0x3c6>
 8001a14:	e670      	b.n	80016f8 <__aeabi_ddiv+0xa8>
 8001a16:	2b1f      	cmp	r3, #31
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_ddiv+0x3cc>
 8001a1a:	e0bf      	b.n	8001b9c <__aeabi_ddiv+0x54c>
 8001a1c:	211f      	movs	r1, #31
 8001a1e:	4249      	negs	r1, r1
 8001a20:	1a8a      	subs	r2, r1, r2
 8001a22:	4641      	mov	r1, r8
 8001a24:	40d1      	lsrs	r1, r2
 8001a26:	000a      	movs	r2, r1
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d004      	beq.n	8001a36 <__aeabi_ddiv+0x3e6>
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <__aeabi_ddiv+0x5e0>)
 8001a30:	445b      	add	r3, fp
 8001a32:	4099      	lsls	r1, r3
 8001a34:	430d      	orrs	r5, r1
 8001a36:	1e6b      	subs	r3, r5, #1
 8001a38:	419d      	sbcs	r5, r3
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	432a      	orrs	r2, r5
 8001a3e:	001d      	movs	r5, r3
 8001a40:	2400      	movs	r4, #0
 8001a42:	4015      	ands	r5, r2
 8001a44:	4213      	tst	r3, r2
 8001a46:	d100      	bne.n	8001a4a <__aeabi_ddiv+0x3fa>
 8001a48:	e0d4      	b.n	8001bf4 <__aeabi_ddiv+0x5a4>
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	4011      	ands	r1, r2
 8001a50:	2904      	cmp	r1, #4
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x406>
 8001a54:	e0cb      	b.n	8001bee <__aeabi_ddiv+0x59e>
 8001a56:	1d11      	adds	r1, r2, #4
 8001a58:	4291      	cmp	r1, r2
 8001a5a:	4192      	sbcs	r2, r2
 8001a5c:	4252      	negs	r2, r2
 8001a5e:	189b      	adds	r3, r3, r2
 8001a60:	000a      	movs	r2, r1
 8001a62:	0219      	lsls	r1, r3, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_ddiv+0x418>
 8001a66:	e0c2      	b.n	8001bee <__aeabi_ddiv+0x59e>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	2500      	movs	r5, #0
 8001a6e:	e646      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	4641      	mov	r1, r8
 8001a74:	031b      	lsls	r3, r3, #12
 8001a76:	4219      	tst	r1, r3
 8001a78:	d008      	beq.n	8001a8c <__aeabi_ddiv+0x43c>
 8001a7a:	421c      	tst	r4, r3
 8001a7c:	d106      	bne.n	8001a8c <__aeabi_ddiv+0x43c>
 8001a7e:	431c      	orrs	r4, r3
 8001a80:	0324      	lsls	r4, r4, #12
 8001a82:	46ba      	mov	sl, r7
 8001a84:	0015      	movs	r5, r2
 8001a86:	4b69      	ldr	r3, [pc, #420]	; (8001c2c <__aeabi_ddiv+0x5dc>)
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	e638      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001a8c:	2480      	movs	r4, #128	; 0x80
 8001a8e:	4643      	mov	r3, r8
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	431c      	orrs	r4, r3
 8001a94:	0324      	lsls	r4, r4, #12
 8001a96:	46b2      	mov	sl, r6
 8001a98:	4b64      	ldr	r3, [pc, #400]	; (8001c2c <__aeabi_ddiv+0x5dc>)
 8001a9a:	0b24      	lsrs	r4, r4, #12
 8001a9c:	e62f      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_ddiv+0x454>
 8001aa2:	e703      	b.n	80018ac <__aeabi_ddiv+0x25c>
 8001aa4:	19a6      	adds	r6, r4, r6
 8001aa6:	1e68      	subs	r0, r5, #1
 8001aa8:	42a6      	cmp	r6, r4
 8001aaa:	d200      	bcs.n	8001aae <__aeabi_ddiv+0x45e>
 8001aac:	e08d      	b.n	8001bca <__aeabi_ddiv+0x57a>
 8001aae:	428e      	cmp	r6, r1
 8001ab0:	d200      	bcs.n	8001ab4 <__aeabi_ddiv+0x464>
 8001ab2:	e0a3      	b.n	8001bfc <__aeabi_ddiv+0x5ac>
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_ddiv+0x468>
 8001ab6:	e0b3      	b.n	8001c20 <__aeabi_ddiv+0x5d0>
 8001ab8:	0005      	movs	r5, r0
 8001aba:	e6f5      	b.n	80018a8 <__aeabi_ddiv+0x258>
 8001abc:	42aa      	cmp	r2, r5
 8001abe:	d900      	bls.n	8001ac2 <__aeabi_ddiv+0x472>
 8001ac0:	e639      	b.n	8001736 <__aeabi_ddiv+0xe6>
 8001ac2:	4643      	mov	r3, r8
 8001ac4:	07de      	lsls	r6, r3, #31
 8001ac6:	0858      	lsrs	r0, r3, #1
 8001ac8:	086b      	lsrs	r3, r5, #1
 8001aca:	431e      	orrs	r6, r3
 8001acc:	07ed      	lsls	r5, r5, #31
 8001ace:	e639      	b.n	8001744 <__aeabi_ddiv+0xf4>
 8001ad0:	4648      	mov	r0, r9
 8001ad2:	f001 f8db 	bl	8002c8c <__clzsi2>
 8001ad6:	0001      	movs	r1, r0
 8001ad8:	0002      	movs	r2, r0
 8001ada:	3115      	adds	r1, #21
 8001adc:	3220      	adds	r2, #32
 8001ade:	291c      	cmp	r1, #28
 8001ae0:	dc00      	bgt.n	8001ae4 <__aeabi_ddiv+0x494>
 8001ae2:	e72c      	b.n	800193e <__aeabi_ddiv+0x2ee>
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	3808      	subs	r0, #8
 8001ae8:	4083      	lsls	r3, r0
 8001aea:	2500      	movs	r5, #0
 8001aec:	4698      	mov	r8, r3
 8001aee:	e732      	b.n	8001956 <__aeabi_ddiv+0x306>
 8001af0:	f001 f8cc 	bl	8002c8c <__clzsi2>
 8001af4:	0003      	movs	r3, r0
 8001af6:	001a      	movs	r2, r3
 8001af8:	3215      	adds	r2, #21
 8001afa:	3020      	adds	r0, #32
 8001afc:	2a1c      	cmp	r2, #28
 8001afe:	dc00      	bgt.n	8001b02 <__aeabi_ddiv+0x4b2>
 8001b00:	e700      	b.n	8001904 <__aeabi_ddiv+0x2b4>
 8001b02:	4654      	mov	r4, sl
 8001b04:	3b08      	subs	r3, #8
 8001b06:	2200      	movs	r2, #0
 8001b08:	409c      	lsls	r4, r3
 8001b0a:	e705      	b.n	8001918 <__aeabi_ddiv+0x2c8>
 8001b0c:	1936      	adds	r6, r6, r4
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	42b4      	cmp	r4, r6
 8001b12:	d900      	bls.n	8001b16 <__aeabi_ddiv+0x4c6>
 8001b14:	e6a6      	b.n	8001864 <__aeabi_ddiv+0x214>
 8001b16:	42b2      	cmp	r2, r6
 8001b18:	d800      	bhi.n	8001b1c <__aeabi_ddiv+0x4cc>
 8001b1a:	e6a3      	b.n	8001864 <__aeabi_ddiv+0x214>
 8001b1c:	1e83      	subs	r3, r0, #2
 8001b1e:	1936      	adds	r6, r6, r4
 8001b20:	e6a0      	b.n	8001864 <__aeabi_ddiv+0x214>
 8001b22:	1909      	adds	r1, r1, r4
 8001b24:	3d01      	subs	r5, #1
 8001b26:	428c      	cmp	r4, r1
 8001b28:	d900      	bls.n	8001b2c <__aeabi_ddiv+0x4dc>
 8001b2a:	e68d      	b.n	8001848 <__aeabi_ddiv+0x1f8>
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	d800      	bhi.n	8001b32 <__aeabi_ddiv+0x4e2>
 8001b30:	e68a      	b.n	8001848 <__aeabi_ddiv+0x1f8>
 8001b32:	1e85      	subs	r5, r0, #2
 8001b34:	1909      	adds	r1, r1, r4
 8001b36:	e687      	b.n	8001848 <__aeabi_ddiv+0x1f8>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	402b      	ands	r3, r5
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_ddiv+0x4f2>
 8001b40:	e6bc      	b.n	80018bc <__aeabi_ddiv+0x26c>
 8001b42:	2305      	movs	r3, #5
 8001b44:	425b      	negs	r3, r3
 8001b46:	42ab      	cmp	r3, r5
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	3504      	adds	r5, #4
 8001b4c:	425b      	negs	r3, r3
 8001b4e:	08ed      	lsrs	r5, r5, #3
 8001b50:	4498      	add	r8, r3
 8001b52:	e6b4      	b.n	80018be <__aeabi_ddiv+0x26e>
 8001b54:	42af      	cmp	r7, r5
 8001b56:	d900      	bls.n	8001b5a <__aeabi_ddiv+0x50a>
 8001b58:	e660      	b.n	800181c <__aeabi_ddiv+0x1cc>
 8001b5a:	4282      	cmp	r2, r0
 8001b5c:	d804      	bhi.n	8001b68 <__aeabi_ddiv+0x518>
 8001b5e:	d000      	beq.n	8001b62 <__aeabi_ddiv+0x512>
 8001b60:	e65c      	b.n	800181c <__aeabi_ddiv+0x1cc>
 8001b62:	42ae      	cmp	r6, r5
 8001b64:	d800      	bhi.n	8001b68 <__aeabi_ddiv+0x518>
 8001b66:	e659      	b.n	800181c <__aeabi_ddiv+0x1cc>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	469c      	mov	ip, r3
 8001b6e:	9b00      	ldr	r3, [sp, #0]
 8001b70:	44e0      	add	r8, ip
 8001b72:	469c      	mov	ip, r3
 8001b74:	4465      	add	r5, ip
 8001b76:	429d      	cmp	r5, r3
 8001b78:	419b      	sbcs	r3, r3
 8001b7a:	425b      	negs	r3, r3
 8001b7c:	191b      	adds	r3, r3, r4
 8001b7e:	18c0      	adds	r0, r0, r3
 8001b80:	e64d      	b.n	800181e <__aeabi_ddiv+0x1ce>
 8001b82:	428a      	cmp	r2, r1
 8001b84:	d800      	bhi.n	8001b88 <__aeabi_ddiv+0x538>
 8001b86:	e60e      	b.n	80017a6 <__aeabi_ddiv+0x156>
 8001b88:	1e83      	subs	r3, r0, #2
 8001b8a:	1909      	adds	r1, r1, r4
 8001b8c:	e60b      	b.n	80017a6 <__aeabi_ddiv+0x156>
 8001b8e:	428a      	cmp	r2, r1
 8001b90:	d800      	bhi.n	8001b94 <__aeabi_ddiv+0x544>
 8001b92:	e5f4      	b.n	800177e <__aeabi_ddiv+0x12e>
 8001b94:	1e83      	subs	r3, r0, #2
 8001b96:	4698      	mov	r8, r3
 8001b98:	1909      	adds	r1, r1, r4
 8001b9a:	e5f0      	b.n	800177e <__aeabi_ddiv+0x12e>
 8001b9c:	4925      	ldr	r1, [pc, #148]	; (8001c34 <__aeabi_ddiv+0x5e4>)
 8001b9e:	0028      	movs	r0, r5
 8001ba0:	4459      	add	r1, fp
 8001ba2:	408d      	lsls	r5, r1
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	408a      	lsls	r2, r1
 8001ba8:	1e69      	subs	r1, r5, #1
 8001baa:	418d      	sbcs	r5, r1
 8001bac:	4641      	mov	r1, r8
 8001bae:	40d8      	lsrs	r0, r3
 8001bb0:	40d9      	lsrs	r1, r3
 8001bb2:	4302      	orrs	r2, r0
 8001bb4:	432a      	orrs	r2, r5
 8001bb6:	000b      	movs	r3, r1
 8001bb8:	0751      	lsls	r1, r2, #29
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x56e>
 8001bbc:	e751      	b.n	8001a62 <__aeabi_ddiv+0x412>
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	4011      	ands	r1, r2
 8001bc2:	2904      	cmp	r1, #4
 8001bc4:	d000      	beq.n	8001bc8 <__aeabi_ddiv+0x578>
 8001bc6:	e746      	b.n	8001a56 <__aeabi_ddiv+0x406>
 8001bc8:	e74b      	b.n	8001a62 <__aeabi_ddiv+0x412>
 8001bca:	0005      	movs	r5, r0
 8001bcc:	428e      	cmp	r6, r1
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_ddiv+0x582>
 8001bd0:	e66a      	b.n	80018a8 <__aeabi_ddiv+0x258>
 8001bd2:	9a00      	ldr	r2, [sp, #0]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d000      	beq.n	8001bda <__aeabi_ddiv+0x58a>
 8001bd8:	e666      	b.n	80018a8 <__aeabi_ddiv+0x258>
 8001bda:	e667      	b.n	80018ac <__aeabi_ddiv+0x25c>
 8001bdc:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <__aeabi_ddiv+0x5e8>)
 8001bde:	445a      	add	r2, fp
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	dc00      	bgt.n	8001be6 <__aeabi_ddiv+0x596>
 8001be4:	e710      	b.n	8001a08 <__aeabi_ddiv+0x3b8>
 8001be6:	2301      	movs	r3, #1
 8001be8:	2500      	movs	r5, #0
 8001bea:	4498      	add	r8, r3
 8001bec:	e667      	b.n	80018be <__aeabi_ddiv+0x26e>
 8001bee:	075d      	lsls	r5, r3, #29
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	0b1c      	lsrs	r4, r3, #12
 8001bf4:	08d2      	lsrs	r2, r2, #3
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4315      	orrs	r5, r2
 8001bfa:	e580      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001bfc:	9800      	ldr	r0, [sp, #0]
 8001bfe:	3d02      	subs	r5, #2
 8001c00:	0042      	lsls	r2, r0, #1
 8001c02:	4282      	cmp	r2, r0
 8001c04:	41bf      	sbcs	r7, r7
 8001c06:	427f      	negs	r7, r7
 8001c08:	193c      	adds	r4, r7, r4
 8001c0a:	1936      	adds	r6, r6, r4
 8001c0c:	9200      	str	r2, [sp, #0]
 8001c0e:	e7dd      	b.n	8001bcc <__aeabi_ddiv+0x57c>
 8001c10:	2480      	movs	r4, #128	; 0x80
 8001c12:	4643      	mov	r3, r8
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	431c      	orrs	r4, r3
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__aeabi_ddiv+0x5dc>)
 8001c1c:	0b24      	lsrs	r4, r4, #12
 8001c1e:	e56e      	b.n	80016fe <__aeabi_ddiv+0xae>
 8001c20:	9a00      	ldr	r2, [sp, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3ea      	bcc.n	8001bfc <__aeabi_ddiv+0x5ac>
 8001c26:	0005      	movs	r5, r0
 8001c28:	e7d3      	b.n	8001bd2 <__aeabi_ddiv+0x582>
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	0000043e 	.word	0x0000043e
 8001c34:	0000041e 	.word	0x0000041e
 8001c38:	000003ff 	.word	0x000003ff

08001c3c <__eqdf2>:
 8001c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3e:	464e      	mov	r6, r9
 8001c40:	4645      	mov	r5, r8
 8001c42:	46de      	mov	lr, fp
 8001c44:	4657      	mov	r7, sl
 8001c46:	4690      	mov	r8, r2
 8001c48:	b5e0      	push	{r5, r6, r7, lr}
 8001c4a:	0017      	movs	r7, r2
 8001c4c:	031a      	lsls	r2, r3, #12
 8001c4e:	0b12      	lsrs	r2, r2, #12
 8001c50:	0005      	movs	r5, r0
 8001c52:	4684      	mov	ip, r0
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <__eqdf2+0x80>)
 8001c56:	030e      	lsls	r6, r1, #12
 8001c58:	004c      	lsls	r4, r1, #1
 8001c5a:	4691      	mov	r9, r2
 8001c5c:	005a      	lsls	r2, r3, #1
 8001c5e:	0fdb      	lsrs	r3, r3, #31
 8001c60:	469b      	mov	fp, r3
 8001c62:	0b36      	lsrs	r6, r6, #12
 8001c64:	0d64      	lsrs	r4, r4, #21
 8001c66:	0fc9      	lsrs	r1, r1, #31
 8001c68:	0d52      	lsrs	r2, r2, #21
 8001c6a:	4284      	cmp	r4, r0
 8001c6c:	d019      	beq.n	8001ca2 <__eqdf2+0x66>
 8001c6e:	4282      	cmp	r2, r0
 8001c70:	d010      	beq.n	8001c94 <__eqdf2+0x58>
 8001c72:	2001      	movs	r0, #1
 8001c74:	4294      	cmp	r4, r2
 8001c76:	d10e      	bne.n	8001c96 <__eqdf2+0x5a>
 8001c78:	454e      	cmp	r6, r9
 8001c7a:	d10c      	bne.n	8001c96 <__eqdf2+0x5a>
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	45c4      	cmp	ip, r8
 8001c80:	d109      	bne.n	8001c96 <__eqdf2+0x5a>
 8001c82:	4559      	cmp	r1, fp
 8001c84:	d017      	beq.n	8001cb6 <__eqdf2+0x7a>
 8001c86:	2c00      	cmp	r4, #0
 8001c88:	d105      	bne.n	8001c96 <__eqdf2+0x5a>
 8001c8a:	0030      	movs	r0, r6
 8001c8c:	4328      	orrs	r0, r5
 8001c8e:	1e43      	subs	r3, r0, #1
 8001c90:	4198      	sbcs	r0, r3
 8001c92:	e000      	b.n	8001c96 <__eqdf2+0x5a>
 8001c94:	2001      	movs	r0, #1
 8001c96:	bcf0      	pop	{r4, r5, r6, r7}
 8001c98:	46bb      	mov	fp, r7
 8001c9a:	46b2      	mov	sl, r6
 8001c9c:	46a9      	mov	r9, r5
 8001c9e:	46a0      	mov	r8, r4
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca2:	0033      	movs	r3, r6
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	432b      	orrs	r3, r5
 8001ca8:	d1f5      	bne.n	8001c96 <__eqdf2+0x5a>
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d1f3      	bne.n	8001c96 <__eqdf2+0x5a>
 8001cae:	464b      	mov	r3, r9
 8001cb0:	433b      	orrs	r3, r7
 8001cb2:	d1f0      	bne.n	8001c96 <__eqdf2+0x5a>
 8001cb4:	e7e2      	b.n	8001c7c <__eqdf2+0x40>
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e7ed      	b.n	8001c96 <__eqdf2+0x5a>
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	000007ff 	.word	0x000007ff

08001cc0 <__gedf2>:
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	4647      	mov	r7, r8
 8001cc4:	46ce      	mov	lr, r9
 8001cc6:	0004      	movs	r4, r0
 8001cc8:	0018      	movs	r0, r3
 8001cca:	0016      	movs	r6, r2
 8001ccc:	031b      	lsls	r3, r3, #12
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	4d2d      	ldr	r5, [pc, #180]	; (8001d88 <__gedf2+0xc8>)
 8001cd2:	004a      	lsls	r2, r1, #1
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	0043      	lsls	r3, r0, #1
 8001cda:	030f      	lsls	r7, r1, #12
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	46b0      	mov	r8, r6
 8001ce0:	0b3f      	lsrs	r7, r7, #12
 8001ce2:	0d52      	lsrs	r2, r2, #21
 8001ce4:	0fc9      	lsrs	r1, r1, #31
 8001ce6:	0d5b      	lsrs	r3, r3, #21
 8001ce8:	0fc0      	lsrs	r0, r0, #31
 8001cea:	42aa      	cmp	r2, r5
 8001cec:	d021      	beq.n	8001d32 <__gedf2+0x72>
 8001cee:	42ab      	cmp	r3, r5
 8001cf0:	d013      	beq.n	8001d1a <__gedf2+0x5a>
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d122      	bne.n	8001d3c <__gedf2+0x7c>
 8001cf6:	433c      	orrs	r4, r7
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <__gedf2+0x42>
 8001cfc:	464d      	mov	r5, r9
 8001cfe:	432e      	orrs	r6, r5
 8001d00:	d022      	beq.n	8001d48 <__gedf2+0x88>
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d010      	beq.n	8001d28 <__gedf2+0x68>
 8001d06:	4281      	cmp	r1, r0
 8001d08:	d022      	beq.n	8001d50 <__gedf2+0x90>
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	3901      	subs	r1, #1
 8001d0e:	4008      	ands	r0, r1
 8001d10:	3801      	subs	r0, #1
 8001d12:	bcc0      	pop	{r6, r7}
 8001d14:	46b9      	mov	r9, r7
 8001d16:	46b0      	mov	r8, r6
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	464d      	mov	r5, r9
 8001d1c:	432e      	orrs	r6, r5
 8001d1e:	d129      	bne.n	8001d74 <__gedf2+0xb4>
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	d1f0      	bne.n	8001d06 <__gedf2+0x46>
 8001d24:	433c      	orrs	r4, r7
 8001d26:	d1ee      	bne.n	8001d06 <__gedf2+0x46>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d1f2      	bne.n	8001d12 <__gedf2+0x52>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4240      	negs	r0, r0
 8001d30:	e7ef      	b.n	8001d12 <__gedf2+0x52>
 8001d32:	003d      	movs	r5, r7
 8001d34:	4325      	orrs	r5, r4
 8001d36:	d11d      	bne.n	8001d74 <__gedf2+0xb4>
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d0ee      	beq.n	8001d1a <__gedf2+0x5a>
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e2      	bne.n	8001d06 <__gedf2+0x46>
 8001d40:	464c      	mov	r4, r9
 8001d42:	4326      	orrs	r6, r4
 8001d44:	d1df      	bne.n	8001d06 <__gedf2+0x46>
 8001d46:	e7e0      	b.n	8001d0a <__gedf2+0x4a>
 8001d48:	2000      	movs	r0, #0
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d0e1      	beq.n	8001d12 <__gedf2+0x52>
 8001d4e:	e7dc      	b.n	8001d0a <__gedf2+0x4a>
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dc0a      	bgt.n	8001d6a <__gedf2+0xaa>
 8001d54:	dbe8      	blt.n	8001d28 <__gedf2+0x68>
 8001d56:	454f      	cmp	r7, r9
 8001d58:	d8d7      	bhi.n	8001d0a <__gedf2+0x4a>
 8001d5a:	d00e      	beq.n	8001d7a <__gedf2+0xba>
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	454f      	cmp	r7, r9
 8001d60:	d2d7      	bcs.n	8001d12 <__gedf2+0x52>
 8001d62:	2900      	cmp	r1, #0
 8001d64:	d0e2      	beq.n	8001d2c <__gedf2+0x6c>
 8001d66:	0008      	movs	r0, r1
 8001d68:	e7d3      	b.n	8001d12 <__gedf2+0x52>
 8001d6a:	4243      	negs	r3, r0
 8001d6c:	4158      	adcs	r0, r3
 8001d6e:	0040      	lsls	r0, r0, #1
 8001d70:	3801      	subs	r0, #1
 8001d72:	e7ce      	b.n	8001d12 <__gedf2+0x52>
 8001d74:	2002      	movs	r0, #2
 8001d76:	4240      	negs	r0, r0
 8001d78:	e7cb      	b.n	8001d12 <__gedf2+0x52>
 8001d7a:	45c4      	cmp	ip, r8
 8001d7c:	d8c5      	bhi.n	8001d0a <__gedf2+0x4a>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	45c4      	cmp	ip, r8
 8001d82:	d2c6      	bcs.n	8001d12 <__gedf2+0x52>
 8001d84:	e7ed      	b.n	8001d62 <__gedf2+0xa2>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff

08001d8c <__ledf2>:
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	4647      	mov	r7, r8
 8001d90:	46ce      	mov	lr, r9
 8001d92:	0004      	movs	r4, r0
 8001d94:	0018      	movs	r0, r3
 8001d96:	0016      	movs	r6, r2
 8001d98:	031b      	lsls	r3, r3, #12
 8001d9a:	0b1b      	lsrs	r3, r3, #12
 8001d9c:	4d2c      	ldr	r5, [pc, #176]	; (8001e50 <__ledf2+0xc4>)
 8001d9e:	004a      	lsls	r2, r1, #1
 8001da0:	4699      	mov	r9, r3
 8001da2:	b580      	push	{r7, lr}
 8001da4:	0043      	lsls	r3, r0, #1
 8001da6:	030f      	lsls	r7, r1, #12
 8001da8:	46a4      	mov	ip, r4
 8001daa:	46b0      	mov	r8, r6
 8001dac:	0b3f      	lsrs	r7, r7, #12
 8001dae:	0d52      	lsrs	r2, r2, #21
 8001db0:	0fc9      	lsrs	r1, r1, #31
 8001db2:	0d5b      	lsrs	r3, r3, #21
 8001db4:	0fc0      	lsrs	r0, r0, #31
 8001db6:	42aa      	cmp	r2, r5
 8001db8:	d00d      	beq.n	8001dd6 <__ledf2+0x4a>
 8001dba:	42ab      	cmp	r3, r5
 8001dbc:	d010      	beq.n	8001de0 <__ledf2+0x54>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d127      	bne.n	8001e12 <__ledf2+0x86>
 8001dc2:	433c      	orrs	r4, r7
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <__ledf2+0x60>
 8001dc8:	464d      	mov	r5, r9
 8001dca:	432e      	orrs	r6, r5
 8001dcc:	d10e      	bne.n	8001dec <__ledf2+0x60>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	2c00      	cmp	r4, #0
 8001dd2:	d015      	beq.n	8001e00 <__ledf2+0x74>
 8001dd4:	e00e      	b.n	8001df4 <__ledf2+0x68>
 8001dd6:	003d      	movs	r5, r7
 8001dd8:	4325      	orrs	r5, r4
 8001dda:	d110      	bne.n	8001dfe <__ledf2+0x72>
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d118      	bne.n	8001e12 <__ledf2+0x86>
 8001de0:	464d      	mov	r5, r9
 8001de2:	432e      	orrs	r6, r5
 8001de4:	d10b      	bne.n	8001dfe <__ledf2+0x72>
 8001de6:	2a00      	cmp	r2, #0
 8001de8:	d102      	bne.n	8001df0 <__ledf2+0x64>
 8001dea:	433c      	orrs	r4, r7
 8001dec:	2c00      	cmp	r4, #0
 8001dee:	d00b      	beq.n	8001e08 <__ledf2+0x7c>
 8001df0:	4281      	cmp	r1, r0
 8001df2:	d014      	beq.n	8001e1e <__ledf2+0x92>
 8001df4:	2002      	movs	r0, #2
 8001df6:	3901      	subs	r1, #1
 8001df8:	4008      	ands	r0, r1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	e000      	b.n	8001e00 <__ledf2+0x74>
 8001dfe:	2002      	movs	r0, #2
 8001e00:	bcc0      	pop	{r6, r7}
 8001e02:	46b9      	mov	r9, r7
 8001e04:	46b0      	mov	r8, r6
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1f9      	bne.n	8001e00 <__ledf2+0x74>
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	4240      	negs	r0, r0
 8001e10:	e7f6      	b.n	8001e00 <__ledf2+0x74>
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1ec      	bne.n	8001df0 <__ledf2+0x64>
 8001e16:	464c      	mov	r4, r9
 8001e18:	4326      	orrs	r6, r4
 8001e1a:	d1e9      	bne.n	8001df0 <__ledf2+0x64>
 8001e1c:	e7ea      	b.n	8001df4 <__ledf2+0x68>
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dd04      	ble.n	8001e2c <__ledf2+0xa0>
 8001e22:	4243      	negs	r3, r0
 8001e24:	4158      	adcs	r0, r3
 8001e26:	0040      	lsls	r0, r0, #1
 8001e28:	3801      	subs	r0, #1
 8001e2a:	e7e9      	b.n	8001e00 <__ledf2+0x74>
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbeb      	blt.n	8001e08 <__ledf2+0x7c>
 8001e30:	454f      	cmp	r7, r9
 8001e32:	d8df      	bhi.n	8001df4 <__ledf2+0x68>
 8001e34:	d006      	beq.n	8001e44 <__ledf2+0xb8>
 8001e36:	2000      	movs	r0, #0
 8001e38:	454f      	cmp	r7, r9
 8001e3a:	d2e1      	bcs.n	8001e00 <__ledf2+0x74>
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	d0e5      	beq.n	8001e0c <__ledf2+0x80>
 8001e40:	0008      	movs	r0, r1
 8001e42:	e7dd      	b.n	8001e00 <__ledf2+0x74>
 8001e44:	45c4      	cmp	ip, r8
 8001e46:	d8d5      	bhi.n	8001df4 <__ledf2+0x68>
 8001e48:	2000      	movs	r0, #0
 8001e4a:	45c4      	cmp	ip, r8
 8001e4c:	d2d8      	bcs.n	8001e00 <__ledf2+0x74>
 8001e4e:	e7f5      	b.n	8001e3c <__ledf2+0xb0>
 8001e50:	000007ff 	.word	0x000007ff

08001e54 <__aeabi_dmul>:
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	4657      	mov	r7, sl
 8001e58:	464e      	mov	r6, r9
 8001e5a:	4645      	mov	r5, r8
 8001e5c:	46de      	mov	lr, fp
 8001e5e:	b5e0      	push	{r5, r6, r7, lr}
 8001e60:	4698      	mov	r8, r3
 8001e62:	030c      	lsls	r4, r1, #12
 8001e64:	004b      	lsls	r3, r1, #1
 8001e66:	0006      	movs	r6, r0
 8001e68:	4692      	mov	sl, r2
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	0b24      	lsrs	r4, r4, #12
 8001e6e:	0d5b      	lsrs	r3, r3, #21
 8001e70:	0fcf      	lsrs	r7, r1, #31
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dmul+0x24>
 8001e76:	e15c      	b.n	8002132 <__aeabi_dmul+0x2de>
 8001e78:	4ad9      	ldr	r2, [pc, #868]	; (80021e0 <__aeabi_dmul+0x38c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dmul+0x2c>
 8001e7e:	e175      	b.n	800216c <__aeabi_dmul+0x318>
 8001e80:	0f42      	lsrs	r2, r0, #29
 8001e82:	00e4      	lsls	r4, r4, #3
 8001e84:	4314      	orrs	r4, r2
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	0412      	lsls	r2, r2, #16
 8001e8a:	4314      	orrs	r4, r2
 8001e8c:	4ad5      	ldr	r2, [pc, #852]	; (80021e4 <__aeabi_dmul+0x390>)
 8001e8e:	00c5      	lsls	r5, r0, #3
 8001e90:	4694      	mov	ip, r2
 8001e92:	4463      	add	r3, ip
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	4699      	mov	r9, r3
 8001e9a:	469b      	mov	fp, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	031e      	lsls	r6, r3, #12
 8001ea2:	0fd2      	lsrs	r2, r2, #31
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4650      	mov	r0, sl
 8001ea8:	4690      	mov	r8, r2
 8001eaa:	0b36      	lsrs	r6, r6, #12
 8001eac:	0d5b      	lsrs	r3, r3, #21
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dmul+0x5e>
 8001eb0:	e120      	b.n	80020f4 <__aeabi_dmul+0x2a0>
 8001eb2:	4acb      	ldr	r2, [pc, #812]	; (80021e0 <__aeabi_dmul+0x38c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dmul+0x66>
 8001eb8:	e162      	b.n	8002180 <__aeabi_dmul+0x32c>
 8001eba:	49ca      	ldr	r1, [pc, #808]	; (80021e4 <__aeabi_dmul+0x390>)
 8001ebc:	0f42      	lsrs	r2, r0, #29
 8001ebe:	468c      	mov	ip, r1
 8001ec0:	9900      	ldr	r1, [sp, #0]
 8001ec2:	4463      	add	r3, ip
 8001ec4:	00f6      	lsls	r6, r6, #3
 8001ec6:	468c      	mov	ip, r1
 8001ec8:	4316      	orrs	r6, r2
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	449c      	add	ip, r3
 8001ece:	0412      	lsls	r2, r2, #16
 8001ed0:	4663      	mov	r3, ip
 8001ed2:	4316      	orrs	r6, r2
 8001ed4:	00c2      	lsls	r2, r0, #3
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	9900      	ldr	r1, [sp, #0]
 8001edc:	4643      	mov	r3, r8
 8001ede:	3101      	adds	r1, #1
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	407b      	eors	r3, r7
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	290f      	cmp	r1, #15
 8001eea:	d826      	bhi.n	8001f3a <__aeabi_dmul+0xe6>
 8001eec:	4bbe      	ldr	r3, [pc, #760]	; (80021e8 <__aeabi_dmul+0x394>)
 8001eee:	0089      	lsls	r1, r1, #2
 8001ef0:	5859      	ldr	r1, [r3, r1]
 8001ef2:	468f      	mov	pc, r1
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	0034      	movs	r4, r6
 8001efa:	0015      	movs	r5, r2
 8001efc:	4683      	mov	fp, r0
 8001efe:	465b      	mov	r3, fp
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d016      	beq.n	8001f32 <__aeabi_dmul+0xde>
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dmul+0xb6>
 8001f08:	e203      	b.n	8002312 <__aeabi_dmul+0x4be>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d000      	beq.n	8001f10 <__aeabi_dmul+0xbc>
 8001f0e:	e0cd      	b.n	80020ac <__aeabi_dmul+0x258>
 8001f10:	2200      	movs	r2, #0
 8001f12:	2400      	movs	r4, #0
 8001f14:	2500      	movs	r5, #0
 8001f16:	9b01      	ldr	r3, [sp, #4]
 8001f18:	0512      	lsls	r2, r2, #20
 8001f1a:	4322      	orrs	r2, r4
 8001f1c:	07db      	lsls	r3, r3, #31
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	0028      	movs	r0, r5
 8001f22:	0011      	movs	r1, r2
 8001f24:	b007      	add	sp, #28
 8001f26:	bcf0      	pop	{r4, r5, r6, r7}
 8001f28:	46bb      	mov	fp, r7
 8001f2a:	46b2      	mov	sl, r6
 8001f2c:	46a9      	mov	r9, r5
 8001f2e:	46a0      	mov	r8, r4
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f32:	2400      	movs	r4, #0
 8001f34:	2500      	movs	r5, #0
 8001f36:	4aaa      	ldr	r2, [pc, #680]	; (80021e0 <__aeabi_dmul+0x38c>)
 8001f38:	e7ed      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8001f3a:	0c28      	lsrs	r0, r5, #16
 8001f3c:	042d      	lsls	r5, r5, #16
 8001f3e:	0c2d      	lsrs	r5, r5, #16
 8001f40:	002b      	movs	r3, r5
 8001f42:	0c11      	lsrs	r1, r2, #16
 8001f44:	0412      	lsls	r2, r2, #16
 8001f46:	0c12      	lsrs	r2, r2, #16
 8001f48:	4353      	muls	r3, r2
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	002f      	movs	r7, r5
 8001f50:	4343      	muls	r3, r0
 8001f52:	4699      	mov	r9, r3
 8001f54:	434f      	muls	r7, r1
 8001f56:	444f      	add	r7, r9
 8001f58:	46bb      	mov	fp, r7
 8001f5a:	4647      	mov	r7, r8
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	0c3f      	lsrs	r7, r7, #16
 8001f60:	46ba      	mov	sl, r7
 8001f62:	4343      	muls	r3, r0
 8001f64:	44da      	add	sl, fp
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	45d1      	cmp	r9, sl
 8001f6a:	d904      	bls.n	8001f76 <__aeabi_dmul+0x122>
 8001f6c:	2780      	movs	r7, #128	; 0x80
 8001f6e:	027f      	lsls	r7, r7, #9
 8001f70:	46b9      	mov	r9, r7
 8001f72:	444b      	add	r3, r9
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	4653      	mov	r3, sl
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	469b      	mov	fp, r3
 8001f7c:	4653      	mov	r3, sl
 8001f7e:	041f      	lsls	r7, r3, #16
 8001f80:	4643      	mov	r3, r8
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	4698      	mov	r8, r3
 8001f88:	003b      	movs	r3, r7
 8001f8a:	4443      	add	r3, r8
 8001f8c:	9304      	str	r3, [sp, #16]
 8001f8e:	0c33      	lsrs	r3, r6, #16
 8001f90:	0436      	lsls	r6, r6, #16
 8001f92:	0c36      	lsrs	r6, r6, #16
 8001f94:	4698      	mov	r8, r3
 8001f96:	0033      	movs	r3, r6
 8001f98:	4343      	muls	r3, r0
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	4643      	mov	r3, r8
 8001f9e:	4343      	muls	r3, r0
 8001fa0:	002f      	movs	r7, r5
 8001fa2:	469a      	mov	sl, r3
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	4377      	muls	r7, r6
 8001fa8:	435d      	muls	r5, r3
 8001faa:	0c38      	lsrs	r0, r7, #16
 8001fac:	444d      	add	r5, r9
 8001fae:	1945      	adds	r5, r0, r5
 8001fb0:	45a9      	cmp	r9, r5
 8001fb2:	d903      	bls.n	8001fbc <__aeabi_dmul+0x168>
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	4699      	mov	r9, r3
 8001fba:	44ca      	add	sl, r9
 8001fbc:	043f      	lsls	r7, r7, #16
 8001fbe:	0c28      	lsrs	r0, r5, #16
 8001fc0:	0c3f      	lsrs	r7, r7, #16
 8001fc2:	042d      	lsls	r5, r5, #16
 8001fc4:	19ed      	adds	r5, r5, r7
 8001fc6:	0c27      	lsrs	r7, r4, #16
 8001fc8:	0424      	lsls	r4, r4, #16
 8001fca:	0c24      	lsrs	r4, r4, #16
 8001fcc:	0003      	movs	r3, r0
 8001fce:	0020      	movs	r0, r4
 8001fd0:	4350      	muls	r0, r2
 8001fd2:	437a      	muls	r2, r7
 8001fd4:	4691      	mov	r9, r2
 8001fd6:	003a      	movs	r2, r7
 8001fd8:	4453      	add	r3, sl
 8001fda:	9305      	str	r3, [sp, #20]
 8001fdc:	0c03      	lsrs	r3, r0, #16
 8001fde:	469a      	mov	sl, r3
 8001fe0:	434a      	muls	r2, r1
 8001fe2:	4361      	muls	r1, r4
 8001fe4:	4449      	add	r1, r9
 8001fe6:	4451      	add	r1, sl
 8001fe8:	44ab      	add	fp, r5
 8001fea:	4589      	cmp	r9, r1
 8001fec:	d903      	bls.n	8001ff6 <__aeabi_dmul+0x1a2>
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	4699      	mov	r9, r3
 8001ff4:	444a      	add	r2, r9
 8001ff6:	0400      	lsls	r0, r0, #16
 8001ff8:	0c0b      	lsrs	r3, r1, #16
 8001ffa:	0c00      	lsrs	r0, r0, #16
 8001ffc:	0409      	lsls	r1, r1, #16
 8001ffe:	1809      	adds	r1, r1, r0
 8002000:	0020      	movs	r0, r4
 8002002:	4699      	mov	r9, r3
 8002004:	4643      	mov	r3, r8
 8002006:	4370      	muls	r0, r6
 8002008:	435c      	muls	r4, r3
 800200a:	437e      	muls	r6, r7
 800200c:	435f      	muls	r7, r3
 800200e:	0c03      	lsrs	r3, r0, #16
 8002010:	4698      	mov	r8, r3
 8002012:	19a4      	adds	r4, r4, r6
 8002014:	4444      	add	r4, r8
 8002016:	444a      	add	r2, r9
 8002018:	9703      	str	r7, [sp, #12]
 800201a:	42a6      	cmp	r6, r4
 800201c:	d904      	bls.n	8002028 <__aeabi_dmul+0x1d4>
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	4698      	mov	r8, r3
 8002024:	4447      	add	r7, r8
 8002026:	9703      	str	r7, [sp, #12]
 8002028:	0423      	lsls	r3, r4, #16
 800202a:	9e02      	ldr	r6, [sp, #8]
 800202c:	469a      	mov	sl, r3
 800202e:	9b05      	ldr	r3, [sp, #20]
 8002030:	445e      	add	r6, fp
 8002032:	4698      	mov	r8, r3
 8002034:	42ae      	cmp	r6, r5
 8002036:	41ad      	sbcs	r5, r5
 8002038:	1876      	adds	r6, r6, r1
 800203a:	428e      	cmp	r6, r1
 800203c:	4189      	sbcs	r1, r1
 800203e:	0400      	lsls	r0, r0, #16
 8002040:	0c00      	lsrs	r0, r0, #16
 8002042:	4450      	add	r0, sl
 8002044:	4440      	add	r0, r8
 8002046:	426d      	negs	r5, r5
 8002048:	1947      	adds	r7, r0, r5
 800204a:	46b8      	mov	r8, r7
 800204c:	4693      	mov	fp, r2
 800204e:	4249      	negs	r1, r1
 8002050:	4689      	mov	r9, r1
 8002052:	44c3      	add	fp, r8
 8002054:	44d9      	add	r9, fp
 8002056:	4298      	cmp	r0, r3
 8002058:	4180      	sbcs	r0, r0
 800205a:	45a8      	cmp	r8, r5
 800205c:	41ad      	sbcs	r5, r5
 800205e:	4593      	cmp	fp, r2
 8002060:	4192      	sbcs	r2, r2
 8002062:	4589      	cmp	r9, r1
 8002064:	4189      	sbcs	r1, r1
 8002066:	426d      	negs	r5, r5
 8002068:	4240      	negs	r0, r0
 800206a:	4328      	orrs	r0, r5
 800206c:	0c24      	lsrs	r4, r4, #16
 800206e:	4252      	negs	r2, r2
 8002070:	4249      	negs	r1, r1
 8002072:	430a      	orrs	r2, r1
 8002074:	9b03      	ldr	r3, [sp, #12]
 8002076:	1900      	adds	r0, r0, r4
 8002078:	1880      	adds	r0, r0, r2
 800207a:	18c7      	adds	r7, r0, r3
 800207c:	464b      	mov	r3, r9
 800207e:	0ddc      	lsrs	r4, r3, #23
 8002080:	9b04      	ldr	r3, [sp, #16]
 8002082:	0275      	lsls	r5, r6, #9
 8002084:	431d      	orrs	r5, r3
 8002086:	1e6a      	subs	r2, r5, #1
 8002088:	4195      	sbcs	r5, r2
 800208a:	464b      	mov	r3, r9
 800208c:	0df6      	lsrs	r6, r6, #23
 800208e:	027f      	lsls	r7, r7, #9
 8002090:	4335      	orrs	r5, r6
 8002092:	025a      	lsls	r2, r3, #9
 8002094:	433c      	orrs	r4, r7
 8002096:	4315      	orrs	r5, r2
 8002098:	01fb      	lsls	r3, r7, #7
 800209a:	d400      	bmi.n	800209e <__aeabi_dmul+0x24a>
 800209c:	e11c      	b.n	80022d8 <__aeabi_dmul+0x484>
 800209e:	2101      	movs	r1, #1
 80020a0:	086a      	lsrs	r2, r5, #1
 80020a2:	400d      	ands	r5, r1
 80020a4:	4315      	orrs	r5, r2
 80020a6:	07e2      	lsls	r2, r4, #31
 80020a8:	4315      	orrs	r5, r2
 80020aa:	0864      	lsrs	r4, r4, #1
 80020ac:	494f      	ldr	r1, [pc, #316]	; (80021ec <__aeabi_dmul+0x398>)
 80020ae:	4461      	add	r1, ip
 80020b0:	2900      	cmp	r1, #0
 80020b2:	dc00      	bgt.n	80020b6 <__aeabi_dmul+0x262>
 80020b4:	e0b0      	b.n	8002218 <__aeabi_dmul+0x3c4>
 80020b6:	076b      	lsls	r3, r5, #29
 80020b8:	d009      	beq.n	80020ce <__aeabi_dmul+0x27a>
 80020ba:	220f      	movs	r2, #15
 80020bc:	402a      	ands	r2, r5
 80020be:	2a04      	cmp	r2, #4
 80020c0:	d005      	beq.n	80020ce <__aeabi_dmul+0x27a>
 80020c2:	1d2a      	adds	r2, r5, #4
 80020c4:	42aa      	cmp	r2, r5
 80020c6:	41ad      	sbcs	r5, r5
 80020c8:	426d      	negs	r5, r5
 80020ca:	1964      	adds	r4, r4, r5
 80020cc:	0015      	movs	r5, r2
 80020ce:	01e3      	lsls	r3, r4, #7
 80020d0:	d504      	bpl.n	80020dc <__aeabi_dmul+0x288>
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <__aeabi_dmul+0x39c>)
 80020d6:	00c9      	lsls	r1, r1, #3
 80020d8:	4014      	ands	r4, r2
 80020da:	4461      	add	r1, ip
 80020dc:	4a45      	ldr	r2, [pc, #276]	; (80021f4 <__aeabi_dmul+0x3a0>)
 80020de:	4291      	cmp	r1, r2
 80020e0:	dd00      	ble.n	80020e4 <__aeabi_dmul+0x290>
 80020e2:	e726      	b.n	8001f32 <__aeabi_dmul+0xde>
 80020e4:	0762      	lsls	r2, r4, #29
 80020e6:	08ed      	lsrs	r5, r5, #3
 80020e8:	0264      	lsls	r4, r4, #9
 80020ea:	0549      	lsls	r1, r1, #21
 80020ec:	4315      	orrs	r5, r2
 80020ee:	0b24      	lsrs	r4, r4, #12
 80020f0:	0d4a      	lsrs	r2, r1, #21
 80020f2:	e710      	b.n	8001f16 <__aeabi_dmul+0xc2>
 80020f4:	4652      	mov	r2, sl
 80020f6:	4332      	orrs	r2, r6
 80020f8:	d100      	bne.n	80020fc <__aeabi_dmul+0x2a8>
 80020fa:	e07f      	b.n	80021fc <__aeabi_dmul+0x3a8>
 80020fc:	2e00      	cmp	r6, #0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dmul+0x2ae>
 8002100:	e0dc      	b.n	80022bc <__aeabi_dmul+0x468>
 8002102:	0030      	movs	r0, r6
 8002104:	f000 fdc2 	bl	8002c8c <__clzsi2>
 8002108:	0002      	movs	r2, r0
 800210a:	3a0b      	subs	r2, #11
 800210c:	231d      	movs	r3, #29
 800210e:	0001      	movs	r1, r0
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	4652      	mov	r2, sl
 8002114:	3908      	subs	r1, #8
 8002116:	40da      	lsrs	r2, r3
 8002118:	408e      	lsls	r6, r1
 800211a:	4316      	orrs	r6, r2
 800211c:	4652      	mov	r2, sl
 800211e:	408a      	lsls	r2, r1
 8002120:	9b00      	ldr	r3, [sp, #0]
 8002122:	4935      	ldr	r1, [pc, #212]	; (80021f8 <__aeabi_dmul+0x3a4>)
 8002124:	1a18      	subs	r0, r3, r0
 8002126:	0003      	movs	r3, r0
 8002128:	468c      	mov	ip, r1
 800212a:	4463      	add	r3, ip
 800212c:	2000      	movs	r0, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	e6d3      	b.n	8001eda <__aeabi_dmul+0x86>
 8002132:	0025      	movs	r5, r4
 8002134:	4305      	orrs	r5, r0
 8002136:	d04a      	beq.n	80021ce <__aeabi_dmul+0x37a>
 8002138:	2c00      	cmp	r4, #0
 800213a:	d100      	bne.n	800213e <__aeabi_dmul+0x2ea>
 800213c:	e0b0      	b.n	80022a0 <__aeabi_dmul+0x44c>
 800213e:	0020      	movs	r0, r4
 8002140:	f000 fda4 	bl	8002c8c <__clzsi2>
 8002144:	0001      	movs	r1, r0
 8002146:	0002      	movs	r2, r0
 8002148:	390b      	subs	r1, #11
 800214a:	231d      	movs	r3, #29
 800214c:	0010      	movs	r0, r2
 800214e:	1a5b      	subs	r3, r3, r1
 8002150:	0031      	movs	r1, r6
 8002152:	0035      	movs	r5, r6
 8002154:	3808      	subs	r0, #8
 8002156:	4084      	lsls	r4, r0
 8002158:	40d9      	lsrs	r1, r3
 800215a:	4085      	lsls	r5, r0
 800215c:	430c      	orrs	r4, r1
 800215e:	4826      	ldr	r0, [pc, #152]	; (80021f8 <__aeabi_dmul+0x3a4>)
 8002160:	1a83      	subs	r3, r0, r2
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	4699      	mov	r9, r3
 8002168:	469b      	mov	fp, r3
 800216a:	e697      	b.n	8001e9c <__aeabi_dmul+0x48>
 800216c:	0005      	movs	r5, r0
 800216e:	4325      	orrs	r5, r4
 8002170:	d126      	bne.n	80021c0 <__aeabi_dmul+0x36c>
 8002172:	2208      	movs	r2, #8
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2302      	movs	r3, #2
 8002178:	2400      	movs	r4, #0
 800217a:	4691      	mov	r9, r2
 800217c:	469b      	mov	fp, r3
 800217e:	e68d      	b.n	8001e9c <__aeabi_dmul+0x48>
 8002180:	4652      	mov	r2, sl
 8002182:	9b00      	ldr	r3, [sp, #0]
 8002184:	4332      	orrs	r2, r6
 8002186:	d110      	bne.n	80021aa <__aeabi_dmul+0x356>
 8002188:	4915      	ldr	r1, [pc, #84]	; (80021e0 <__aeabi_dmul+0x38c>)
 800218a:	2600      	movs	r6, #0
 800218c:	468c      	mov	ip, r1
 800218e:	4463      	add	r3, ip
 8002190:	4649      	mov	r1, r9
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2302      	movs	r3, #2
 8002196:	4319      	orrs	r1, r3
 8002198:	4689      	mov	r9, r1
 800219a:	2002      	movs	r0, #2
 800219c:	e69d      	b.n	8001eda <__aeabi_dmul+0x86>
 800219e:	465b      	mov	r3, fp
 80021a0:	9701      	str	r7, [sp, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d000      	beq.n	80021a8 <__aeabi_dmul+0x354>
 80021a6:	e6ad      	b.n	8001f04 <__aeabi_dmul+0xb0>
 80021a8:	e6c3      	b.n	8001f32 <__aeabi_dmul+0xde>
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <__aeabi_dmul+0x38c>)
 80021ac:	2003      	movs	r0, #3
 80021ae:	4694      	mov	ip, r2
 80021b0:	4463      	add	r3, ip
 80021b2:	464a      	mov	r2, r9
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2303      	movs	r3, #3
 80021b8:	431a      	orrs	r2, r3
 80021ba:	4691      	mov	r9, r2
 80021bc:	4652      	mov	r2, sl
 80021be:	e68c      	b.n	8001eda <__aeabi_dmul+0x86>
 80021c0:	220c      	movs	r2, #12
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2303      	movs	r3, #3
 80021c6:	0005      	movs	r5, r0
 80021c8:	4691      	mov	r9, r2
 80021ca:	469b      	mov	fp, r3
 80021cc:	e666      	b.n	8001e9c <__aeabi_dmul+0x48>
 80021ce:	2304      	movs	r3, #4
 80021d0:	4699      	mov	r9, r3
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	2400      	movs	r4, #0
 80021da:	469b      	mov	fp, r3
 80021dc:	e65e      	b.n	8001e9c <__aeabi_dmul+0x48>
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	000007ff 	.word	0x000007ff
 80021e4:	fffffc01 	.word	0xfffffc01
 80021e8:	0800a9b0 	.word	0x0800a9b0
 80021ec:	000003ff 	.word	0x000003ff
 80021f0:	feffffff 	.word	0xfeffffff
 80021f4:	000007fe 	.word	0x000007fe
 80021f8:	fffffc0d 	.word	0xfffffc0d
 80021fc:	4649      	mov	r1, r9
 80021fe:	2301      	movs	r3, #1
 8002200:	4319      	orrs	r1, r3
 8002202:	4689      	mov	r9, r1
 8002204:	2600      	movs	r6, #0
 8002206:	2001      	movs	r0, #1
 8002208:	e667      	b.n	8001eda <__aeabi_dmul+0x86>
 800220a:	2300      	movs	r3, #0
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	2500      	movs	r5, #0
 8002210:	4a43      	ldr	r2, [pc, #268]	; (8002320 <__aeabi_dmul+0x4cc>)
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	e67e      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8002218:	2001      	movs	r0, #1
 800221a:	1a40      	subs	r0, r0, r1
 800221c:	2838      	cmp	r0, #56	; 0x38
 800221e:	dd00      	ble.n	8002222 <__aeabi_dmul+0x3ce>
 8002220:	e676      	b.n	8001f10 <__aeabi_dmul+0xbc>
 8002222:	281f      	cmp	r0, #31
 8002224:	dd5b      	ble.n	80022de <__aeabi_dmul+0x48a>
 8002226:	221f      	movs	r2, #31
 8002228:	0023      	movs	r3, r4
 800222a:	4252      	negs	r2, r2
 800222c:	1a51      	subs	r1, r2, r1
 800222e:	40cb      	lsrs	r3, r1
 8002230:	0019      	movs	r1, r3
 8002232:	2820      	cmp	r0, #32
 8002234:	d003      	beq.n	800223e <__aeabi_dmul+0x3ea>
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <__aeabi_dmul+0x4d0>)
 8002238:	4462      	add	r2, ip
 800223a:	4094      	lsls	r4, r2
 800223c:	4325      	orrs	r5, r4
 800223e:	1e6a      	subs	r2, r5, #1
 8002240:	4195      	sbcs	r5, r2
 8002242:	002a      	movs	r2, r5
 8002244:	430a      	orrs	r2, r1
 8002246:	2107      	movs	r1, #7
 8002248:	000d      	movs	r5, r1
 800224a:	2400      	movs	r4, #0
 800224c:	4015      	ands	r5, r2
 800224e:	4211      	tst	r1, r2
 8002250:	d05b      	beq.n	800230a <__aeabi_dmul+0x4b6>
 8002252:	210f      	movs	r1, #15
 8002254:	2400      	movs	r4, #0
 8002256:	4011      	ands	r1, r2
 8002258:	2904      	cmp	r1, #4
 800225a:	d053      	beq.n	8002304 <__aeabi_dmul+0x4b0>
 800225c:	1d11      	adds	r1, r2, #4
 800225e:	4291      	cmp	r1, r2
 8002260:	4192      	sbcs	r2, r2
 8002262:	4252      	negs	r2, r2
 8002264:	18a4      	adds	r4, r4, r2
 8002266:	000a      	movs	r2, r1
 8002268:	0223      	lsls	r3, r4, #8
 800226a:	d54b      	bpl.n	8002304 <__aeabi_dmul+0x4b0>
 800226c:	2201      	movs	r2, #1
 800226e:	2400      	movs	r4, #0
 8002270:	2500      	movs	r5, #0
 8002272:	e650      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	031b      	lsls	r3, r3, #12
 8002278:	421c      	tst	r4, r3
 800227a:	d009      	beq.n	8002290 <__aeabi_dmul+0x43c>
 800227c:	421e      	tst	r6, r3
 800227e:	d107      	bne.n	8002290 <__aeabi_dmul+0x43c>
 8002280:	4333      	orrs	r3, r6
 8002282:	031c      	lsls	r4, r3, #12
 8002284:	4643      	mov	r3, r8
 8002286:	0015      	movs	r5, r2
 8002288:	0b24      	lsrs	r4, r4, #12
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <__aeabi_dmul+0x4cc>)
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	e642      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	0312      	lsls	r2, r2, #12
 8002294:	4314      	orrs	r4, r2
 8002296:	0324      	lsls	r4, r4, #12
 8002298:	4a21      	ldr	r2, [pc, #132]	; (8002320 <__aeabi_dmul+0x4cc>)
 800229a:	0b24      	lsrs	r4, r4, #12
 800229c:	9701      	str	r7, [sp, #4]
 800229e:	e63a      	b.n	8001f16 <__aeabi_dmul+0xc2>
 80022a0:	f000 fcf4 	bl	8002c8c <__clzsi2>
 80022a4:	0001      	movs	r1, r0
 80022a6:	0002      	movs	r2, r0
 80022a8:	3115      	adds	r1, #21
 80022aa:	3220      	adds	r2, #32
 80022ac:	291c      	cmp	r1, #28
 80022ae:	dc00      	bgt.n	80022b2 <__aeabi_dmul+0x45e>
 80022b0:	e74b      	b.n	800214a <__aeabi_dmul+0x2f6>
 80022b2:	0034      	movs	r4, r6
 80022b4:	3808      	subs	r0, #8
 80022b6:	2500      	movs	r5, #0
 80022b8:	4084      	lsls	r4, r0
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x30a>
 80022bc:	f000 fce6 	bl	8002c8c <__clzsi2>
 80022c0:	0003      	movs	r3, r0
 80022c2:	001a      	movs	r2, r3
 80022c4:	3215      	adds	r2, #21
 80022c6:	3020      	adds	r0, #32
 80022c8:	2a1c      	cmp	r2, #28
 80022ca:	dc00      	bgt.n	80022ce <__aeabi_dmul+0x47a>
 80022cc:	e71e      	b.n	800210c <__aeabi_dmul+0x2b8>
 80022ce:	4656      	mov	r6, sl
 80022d0:	3b08      	subs	r3, #8
 80022d2:	2200      	movs	r2, #0
 80022d4:	409e      	lsls	r6, r3
 80022d6:	e723      	b.n	8002120 <__aeabi_dmul+0x2cc>
 80022d8:	9b00      	ldr	r3, [sp, #0]
 80022da:	469c      	mov	ip, r3
 80022dc:	e6e6      	b.n	80020ac <__aeabi_dmul+0x258>
 80022de:	4912      	ldr	r1, [pc, #72]	; (8002328 <__aeabi_dmul+0x4d4>)
 80022e0:	0022      	movs	r2, r4
 80022e2:	4461      	add	r1, ip
 80022e4:	002e      	movs	r6, r5
 80022e6:	408d      	lsls	r5, r1
 80022e8:	408a      	lsls	r2, r1
 80022ea:	40c6      	lsrs	r6, r0
 80022ec:	1e69      	subs	r1, r5, #1
 80022ee:	418d      	sbcs	r5, r1
 80022f0:	4332      	orrs	r2, r6
 80022f2:	432a      	orrs	r2, r5
 80022f4:	40c4      	lsrs	r4, r0
 80022f6:	0753      	lsls	r3, r2, #29
 80022f8:	d0b6      	beq.n	8002268 <__aeabi_dmul+0x414>
 80022fa:	210f      	movs	r1, #15
 80022fc:	4011      	ands	r1, r2
 80022fe:	2904      	cmp	r1, #4
 8002300:	d1ac      	bne.n	800225c <__aeabi_dmul+0x408>
 8002302:	e7b1      	b.n	8002268 <__aeabi_dmul+0x414>
 8002304:	0765      	lsls	r5, r4, #29
 8002306:	0264      	lsls	r4, r4, #9
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	08d2      	lsrs	r2, r2, #3
 800230c:	4315      	orrs	r5, r2
 800230e:	2200      	movs	r2, #0
 8002310:	e601      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	0312      	lsls	r2, r2, #12
 8002316:	4314      	orrs	r4, r2
 8002318:	0324      	lsls	r4, r4, #12
 800231a:	4a01      	ldr	r2, [pc, #4]	; (8002320 <__aeabi_dmul+0x4cc>)
 800231c:	0b24      	lsrs	r4, r4, #12
 800231e:	e5fa      	b.n	8001f16 <__aeabi_dmul+0xc2>
 8002320:	000007ff 	.word	0x000007ff
 8002324:	0000043e 	.word	0x0000043e
 8002328:	0000041e 	.word	0x0000041e

0800232c <__aeabi_dsub>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	4657      	mov	r7, sl
 8002330:	464e      	mov	r6, r9
 8002332:	4645      	mov	r5, r8
 8002334:	46de      	mov	lr, fp
 8002336:	b5e0      	push	{r5, r6, r7, lr}
 8002338:	001e      	movs	r6, r3
 800233a:	0017      	movs	r7, r2
 800233c:	004a      	lsls	r2, r1, #1
 800233e:	030b      	lsls	r3, r1, #12
 8002340:	0d52      	lsrs	r2, r2, #21
 8002342:	0a5b      	lsrs	r3, r3, #9
 8002344:	4690      	mov	r8, r2
 8002346:	0f42      	lsrs	r2, r0, #29
 8002348:	431a      	orrs	r2, r3
 800234a:	0fcd      	lsrs	r5, r1, #31
 800234c:	4ccd      	ldr	r4, [pc, #820]	; (8002684 <__aeabi_dsub+0x358>)
 800234e:	0331      	lsls	r1, r6, #12
 8002350:	00c3      	lsls	r3, r0, #3
 8002352:	4694      	mov	ip, r2
 8002354:	0070      	lsls	r0, r6, #1
 8002356:	0f7a      	lsrs	r2, r7, #29
 8002358:	0a49      	lsrs	r1, r1, #9
 800235a:	00ff      	lsls	r7, r7, #3
 800235c:	469a      	mov	sl, r3
 800235e:	46b9      	mov	r9, r7
 8002360:	0d40      	lsrs	r0, r0, #21
 8002362:	0ff6      	lsrs	r6, r6, #31
 8002364:	4311      	orrs	r1, r2
 8002366:	42a0      	cmp	r0, r4
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x40>
 800236a:	e0b1      	b.n	80024d0 <__aeabi_dsub+0x1a4>
 800236c:	2201      	movs	r2, #1
 800236e:	4056      	eors	r6, r2
 8002370:	46b3      	mov	fp, r6
 8002372:	42b5      	cmp	r5, r6
 8002374:	d100      	bne.n	8002378 <__aeabi_dsub+0x4c>
 8002376:	e088      	b.n	800248a <__aeabi_dsub+0x15e>
 8002378:	4642      	mov	r2, r8
 800237a:	1a12      	subs	r2, r2, r0
 800237c:	2a00      	cmp	r2, #0
 800237e:	dc00      	bgt.n	8002382 <__aeabi_dsub+0x56>
 8002380:	e0ae      	b.n	80024e0 <__aeabi_dsub+0x1b4>
 8002382:	2800      	cmp	r0, #0
 8002384:	d100      	bne.n	8002388 <__aeabi_dsub+0x5c>
 8002386:	e0c1      	b.n	800250c <__aeabi_dsub+0x1e0>
 8002388:	48be      	ldr	r0, [pc, #760]	; (8002684 <__aeabi_dsub+0x358>)
 800238a:	4580      	cmp	r8, r0
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x64>
 800238e:	e151      	b.n	8002634 <__aeabi_dsub+0x308>
 8002390:	2080      	movs	r0, #128	; 0x80
 8002392:	0400      	lsls	r0, r0, #16
 8002394:	4301      	orrs	r1, r0
 8002396:	2a38      	cmp	r2, #56	; 0x38
 8002398:	dd00      	ble.n	800239c <__aeabi_dsub+0x70>
 800239a:	e17b      	b.n	8002694 <__aeabi_dsub+0x368>
 800239c:	2a1f      	cmp	r2, #31
 800239e:	dd00      	ble.n	80023a2 <__aeabi_dsub+0x76>
 80023a0:	e1ee      	b.n	8002780 <__aeabi_dsub+0x454>
 80023a2:	2020      	movs	r0, #32
 80023a4:	003e      	movs	r6, r7
 80023a6:	1a80      	subs	r0, r0, r2
 80023a8:	000c      	movs	r4, r1
 80023aa:	40d6      	lsrs	r6, r2
 80023ac:	40d1      	lsrs	r1, r2
 80023ae:	4087      	lsls	r7, r0
 80023b0:	4662      	mov	r2, ip
 80023b2:	4084      	lsls	r4, r0
 80023b4:	1a52      	subs	r2, r2, r1
 80023b6:	1e78      	subs	r0, r7, #1
 80023b8:	4187      	sbcs	r7, r0
 80023ba:	4694      	mov	ip, r2
 80023bc:	4334      	orrs	r4, r6
 80023be:	4327      	orrs	r7, r4
 80023c0:	1bdc      	subs	r4, r3, r7
 80023c2:	42a3      	cmp	r3, r4
 80023c4:	419b      	sbcs	r3, r3
 80023c6:	4662      	mov	r2, ip
 80023c8:	425b      	negs	r3, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4699      	mov	r9, r3
 80023ce:	464b      	mov	r3, r9
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	d400      	bmi.n	80023d6 <__aeabi_dsub+0xaa>
 80023d4:	e118      	b.n	8002608 <__aeabi_dsub+0x2dc>
 80023d6:	464b      	mov	r3, r9
 80023d8:	0258      	lsls	r0, r3, #9
 80023da:	0a43      	lsrs	r3, r0, #9
 80023dc:	4699      	mov	r9, r3
 80023de:	464b      	mov	r3, r9
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0xba>
 80023e4:	e137      	b.n	8002656 <__aeabi_dsub+0x32a>
 80023e6:	4648      	mov	r0, r9
 80023e8:	f000 fc50 	bl	8002c8c <__clzsi2>
 80023ec:	0001      	movs	r1, r0
 80023ee:	3908      	subs	r1, #8
 80023f0:	2320      	movs	r3, #32
 80023f2:	0022      	movs	r2, r4
 80023f4:	4648      	mov	r0, r9
 80023f6:	1a5b      	subs	r3, r3, r1
 80023f8:	40da      	lsrs	r2, r3
 80023fa:	4088      	lsls	r0, r1
 80023fc:	408c      	lsls	r4, r1
 80023fe:	4643      	mov	r3, r8
 8002400:	4310      	orrs	r0, r2
 8002402:	4588      	cmp	r8, r1
 8002404:	dd00      	ble.n	8002408 <__aeabi_dsub+0xdc>
 8002406:	e136      	b.n	8002676 <__aeabi_dsub+0x34a>
 8002408:	1ac9      	subs	r1, r1, r3
 800240a:	1c4b      	adds	r3, r1, #1
 800240c:	2b1f      	cmp	r3, #31
 800240e:	dd00      	ble.n	8002412 <__aeabi_dsub+0xe6>
 8002410:	e0ea      	b.n	80025e8 <__aeabi_dsub+0x2bc>
 8002412:	2220      	movs	r2, #32
 8002414:	0026      	movs	r6, r4
 8002416:	1ad2      	subs	r2, r2, r3
 8002418:	0001      	movs	r1, r0
 800241a:	4094      	lsls	r4, r2
 800241c:	40de      	lsrs	r6, r3
 800241e:	40d8      	lsrs	r0, r3
 8002420:	2300      	movs	r3, #0
 8002422:	4091      	lsls	r1, r2
 8002424:	1e62      	subs	r2, r4, #1
 8002426:	4194      	sbcs	r4, r2
 8002428:	4681      	mov	r9, r0
 800242a:	4698      	mov	r8, r3
 800242c:	4331      	orrs	r1, r6
 800242e:	430c      	orrs	r4, r1
 8002430:	0763      	lsls	r3, r4, #29
 8002432:	d009      	beq.n	8002448 <__aeabi_dsub+0x11c>
 8002434:	230f      	movs	r3, #15
 8002436:	4023      	ands	r3, r4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d005      	beq.n	8002448 <__aeabi_dsub+0x11c>
 800243c:	1d23      	adds	r3, r4, #4
 800243e:	42a3      	cmp	r3, r4
 8002440:	41a4      	sbcs	r4, r4
 8002442:	4264      	negs	r4, r4
 8002444:	44a1      	add	r9, r4
 8002446:	001c      	movs	r4, r3
 8002448:	464b      	mov	r3, r9
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	d400      	bmi.n	8002450 <__aeabi_dsub+0x124>
 800244e:	e0de      	b.n	800260e <__aeabi_dsub+0x2e2>
 8002450:	4641      	mov	r1, r8
 8002452:	4b8c      	ldr	r3, [pc, #560]	; (8002684 <__aeabi_dsub+0x358>)
 8002454:	3101      	adds	r1, #1
 8002456:	4299      	cmp	r1, r3
 8002458:	d100      	bne.n	800245c <__aeabi_dsub+0x130>
 800245a:	e0e7      	b.n	800262c <__aeabi_dsub+0x300>
 800245c:	464b      	mov	r3, r9
 800245e:	488a      	ldr	r0, [pc, #552]	; (8002688 <__aeabi_dsub+0x35c>)
 8002460:	08e4      	lsrs	r4, r4, #3
 8002462:	4003      	ands	r3, r0
 8002464:	0018      	movs	r0, r3
 8002466:	0549      	lsls	r1, r1, #21
 8002468:	075b      	lsls	r3, r3, #29
 800246a:	0240      	lsls	r0, r0, #9
 800246c:	4323      	orrs	r3, r4
 800246e:	0d4a      	lsrs	r2, r1, #21
 8002470:	0b04      	lsrs	r4, r0, #12
 8002472:	0512      	lsls	r2, r2, #20
 8002474:	07ed      	lsls	r5, r5, #31
 8002476:	4322      	orrs	r2, r4
 8002478:	432a      	orrs	r2, r5
 800247a:	0018      	movs	r0, r3
 800247c:	0011      	movs	r1, r2
 800247e:	bcf0      	pop	{r4, r5, r6, r7}
 8002480:	46bb      	mov	fp, r7
 8002482:	46b2      	mov	sl, r6
 8002484:	46a9      	mov	r9, r5
 8002486:	46a0      	mov	r8, r4
 8002488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800248a:	4642      	mov	r2, r8
 800248c:	1a12      	subs	r2, r2, r0
 800248e:	2a00      	cmp	r2, #0
 8002490:	dd52      	ble.n	8002538 <__aeabi_dsub+0x20c>
 8002492:	2800      	cmp	r0, #0
 8002494:	d100      	bne.n	8002498 <__aeabi_dsub+0x16c>
 8002496:	e09c      	b.n	80025d2 <__aeabi_dsub+0x2a6>
 8002498:	45a0      	cmp	r8, r4
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x172>
 800249c:	e0ca      	b.n	8002634 <__aeabi_dsub+0x308>
 800249e:	2080      	movs	r0, #128	; 0x80
 80024a0:	0400      	lsls	r0, r0, #16
 80024a2:	4301      	orrs	r1, r0
 80024a4:	2a38      	cmp	r2, #56	; 0x38
 80024a6:	dd00      	ble.n	80024aa <__aeabi_dsub+0x17e>
 80024a8:	e149      	b.n	800273e <__aeabi_dsub+0x412>
 80024aa:	2a1f      	cmp	r2, #31
 80024ac:	dc00      	bgt.n	80024b0 <__aeabi_dsub+0x184>
 80024ae:	e197      	b.n	80027e0 <__aeabi_dsub+0x4b4>
 80024b0:	0010      	movs	r0, r2
 80024b2:	000e      	movs	r6, r1
 80024b4:	3820      	subs	r0, #32
 80024b6:	40c6      	lsrs	r6, r0
 80024b8:	2a20      	cmp	r2, #32
 80024ba:	d004      	beq.n	80024c6 <__aeabi_dsub+0x19a>
 80024bc:	2040      	movs	r0, #64	; 0x40
 80024be:	1a82      	subs	r2, r0, r2
 80024c0:	4091      	lsls	r1, r2
 80024c2:	430f      	orrs	r7, r1
 80024c4:	46b9      	mov	r9, r7
 80024c6:	464c      	mov	r4, r9
 80024c8:	1e62      	subs	r2, r4, #1
 80024ca:	4194      	sbcs	r4, r2
 80024cc:	4334      	orrs	r4, r6
 80024ce:	e13a      	b.n	8002746 <__aeabi_dsub+0x41a>
 80024d0:	000a      	movs	r2, r1
 80024d2:	433a      	orrs	r2, r7
 80024d4:	d028      	beq.n	8002528 <__aeabi_dsub+0x1fc>
 80024d6:	46b3      	mov	fp, r6
 80024d8:	42b5      	cmp	r5, r6
 80024da:	d02b      	beq.n	8002534 <__aeabi_dsub+0x208>
 80024dc:	4a6b      	ldr	r2, [pc, #428]	; (800268c <__aeabi_dsub+0x360>)
 80024de:	4442      	add	r2, r8
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d05d      	beq.n	80025a0 <__aeabi_dsub+0x274>
 80024e4:	4642      	mov	r2, r8
 80024e6:	4644      	mov	r4, r8
 80024e8:	1a82      	subs	r2, r0, r2
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d000      	beq.n	80024f0 <__aeabi_dsub+0x1c4>
 80024ee:	e0f5      	b.n	80026dc <__aeabi_dsub+0x3b0>
 80024f0:	4665      	mov	r5, ip
 80024f2:	431d      	orrs	r5, r3
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x1cc>
 80024f6:	e19c      	b.n	8002832 <__aeabi_dsub+0x506>
 80024f8:	1e55      	subs	r5, r2, #1
 80024fa:	2a01      	cmp	r2, #1
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x1d4>
 80024fe:	e1fb      	b.n	80028f8 <__aeabi_dsub+0x5cc>
 8002500:	4c60      	ldr	r4, [pc, #384]	; (8002684 <__aeabi_dsub+0x358>)
 8002502:	42a2      	cmp	r2, r4
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x1dc>
 8002506:	e1bd      	b.n	8002884 <__aeabi_dsub+0x558>
 8002508:	002a      	movs	r2, r5
 800250a:	e0f0      	b.n	80026ee <__aeabi_dsub+0x3c2>
 800250c:	0008      	movs	r0, r1
 800250e:	4338      	orrs	r0, r7
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x1e8>
 8002512:	e0c3      	b.n	800269c <__aeabi_dsub+0x370>
 8002514:	1e50      	subs	r0, r2, #1
 8002516:	2a01      	cmp	r2, #1
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x1f0>
 800251a:	e1a8      	b.n	800286e <__aeabi_dsub+0x542>
 800251c:	4c59      	ldr	r4, [pc, #356]	; (8002684 <__aeabi_dsub+0x358>)
 800251e:	42a2      	cmp	r2, r4
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x1f8>
 8002522:	e087      	b.n	8002634 <__aeabi_dsub+0x308>
 8002524:	0002      	movs	r2, r0
 8002526:	e736      	b.n	8002396 <__aeabi_dsub+0x6a>
 8002528:	2201      	movs	r2, #1
 800252a:	4056      	eors	r6, r2
 800252c:	46b3      	mov	fp, r6
 800252e:	42b5      	cmp	r5, r6
 8002530:	d000      	beq.n	8002534 <__aeabi_dsub+0x208>
 8002532:	e721      	b.n	8002378 <__aeabi_dsub+0x4c>
 8002534:	4a55      	ldr	r2, [pc, #340]	; (800268c <__aeabi_dsub+0x360>)
 8002536:	4442      	add	r2, r8
 8002538:	2a00      	cmp	r2, #0
 800253a:	d100      	bne.n	800253e <__aeabi_dsub+0x212>
 800253c:	e0b5      	b.n	80026aa <__aeabi_dsub+0x37e>
 800253e:	4642      	mov	r2, r8
 8002540:	4644      	mov	r4, r8
 8002542:	1a82      	subs	r2, r0, r2
 8002544:	2c00      	cmp	r4, #0
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x21e>
 8002548:	e138      	b.n	80027bc <__aeabi_dsub+0x490>
 800254a:	4e4e      	ldr	r6, [pc, #312]	; (8002684 <__aeabi_dsub+0x358>)
 800254c:	42b0      	cmp	r0, r6
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x226>
 8002550:	e1de      	b.n	8002910 <__aeabi_dsub+0x5e4>
 8002552:	2680      	movs	r6, #128	; 0x80
 8002554:	4664      	mov	r4, ip
 8002556:	0436      	lsls	r6, r6, #16
 8002558:	4334      	orrs	r4, r6
 800255a:	46a4      	mov	ip, r4
 800255c:	2a38      	cmp	r2, #56	; 0x38
 800255e:	dd00      	ble.n	8002562 <__aeabi_dsub+0x236>
 8002560:	e196      	b.n	8002890 <__aeabi_dsub+0x564>
 8002562:	2a1f      	cmp	r2, #31
 8002564:	dd00      	ble.n	8002568 <__aeabi_dsub+0x23c>
 8002566:	e224      	b.n	80029b2 <__aeabi_dsub+0x686>
 8002568:	2620      	movs	r6, #32
 800256a:	1ab4      	subs	r4, r6, r2
 800256c:	46a2      	mov	sl, r4
 800256e:	4664      	mov	r4, ip
 8002570:	4656      	mov	r6, sl
 8002572:	40b4      	lsls	r4, r6
 8002574:	46a1      	mov	r9, r4
 8002576:	001c      	movs	r4, r3
 8002578:	464e      	mov	r6, r9
 800257a:	40d4      	lsrs	r4, r2
 800257c:	4326      	orrs	r6, r4
 800257e:	0034      	movs	r4, r6
 8002580:	4656      	mov	r6, sl
 8002582:	40b3      	lsls	r3, r6
 8002584:	1e5e      	subs	r6, r3, #1
 8002586:	41b3      	sbcs	r3, r6
 8002588:	431c      	orrs	r4, r3
 800258a:	4663      	mov	r3, ip
 800258c:	40d3      	lsrs	r3, r2
 800258e:	18c9      	adds	r1, r1, r3
 8002590:	19e4      	adds	r4, r4, r7
 8002592:	42bc      	cmp	r4, r7
 8002594:	41bf      	sbcs	r7, r7
 8002596:	427f      	negs	r7, r7
 8002598:	46b9      	mov	r9, r7
 800259a:	4680      	mov	r8, r0
 800259c:	4489      	add	r9, r1
 800259e:	e0d8      	b.n	8002752 <__aeabi_dsub+0x426>
 80025a0:	4640      	mov	r0, r8
 80025a2:	4c3b      	ldr	r4, [pc, #236]	; (8002690 <__aeabi_dsub+0x364>)
 80025a4:	3001      	adds	r0, #1
 80025a6:	4220      	tst	r0, r4
 80025a8:	d000      	beq.n	80025ac <__aeabi_dsub+0x280>
 80025aa:	e0b4      	b.n	8002716 <__aeabi_dsub+0x3ea>
 80025ac:	4640      	mov	r0, r8
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d000      	beq.n	80025b4 <__aeabi_dsub+0x288>
 80025b2:	e144      	b.n	800283e <__aeabi_dsub+0x512>
 80025b4:	4660      	mov	r0, ip
 80025b6:	4318      	orrs	r0, r3
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x290>
 80025ba:	e190      	b.n	80028de <__aeabi_dsub+0x5b2>
 80025bc:	0008      	movs	r0, r1
 80025be:	4338      	orrs	r0, r7
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x298>
 80025c2:	e1aa      	b.n	800291a <__aeabi_dsub+0x5ee>
 80025c4:	4661      	mov	r1, ip
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0749      	lsls	r1, r1, #29
 80025ca:	430b      	orrs	r3, r1
 80025cc:	4661      	mov	r1, ip
 80025ce:	08cc      	lsrs	r4, r1, #3
 80025d0:	e027      	b.n	8002622 <__aeabi_dsub+0x2f6>
 80025d2:	0008      	movs	r0, r1
 80025d4:	4338      	orrs	r0, r7
 80025d6:	d061      	beq.n	800269c <__aeabi_dsub+0x370>
 80025d8:	1e50      	subs	r0, r2, #1
 80025da:	2a01      	cmp	r2, #1
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x2b4>
 80025de:	e139      	b.n	8002854 <__aeabi_dsub+0x528>
 80025e0:	42a2      	cmp	r2, r4
 80025e2:	d027      	beq.n	8002634 <__aeabi_dsub+0x308>
 80025e4:	0002      	movs	r2, r0
 80025e6:	e75d      	b.n	80024a4 <__aeabi_dsub+0x178>
 80025e8:	0002      	movs	r2, r0
 80025ea:	391f      	subs	r1, #31
 80025ec:	40ca      	lsrs	r2, r1
 80025ee:	0011      	movs	r1, r2
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d003      	beq.n	80025fc <__aeabi_dsub+0x2d0>
 80025f4:	2240      	movs	r2, #64	; 0x40
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4098      	lsls	r0, r3
 80025fa:	4304      	orrs	r4, r0
 80025fc:	1e63      	subs	r3, r4, #1
 80025fe:	419c      	sbcs	r4, r3
 8002600:	2300      	movs	r3, #0
 8002602:	4699      	mov	r9, r3
 8002604:	4698      	mov	r8, r3
 8002606:	430c      	orrs	r4, r1
 8002608:	0763      	lsls	r3, r4, #29
 800260a:	d000      	beq.n	800260e <__aeabi_dsub+0x2e2>
 800260c:	e712      	b.n	8002434 <__aeabi_dsub+0x108>
 800260e:	464b      	mov	r3, r9
 8002610:	464a      	mov	r2, r9
 8002612:	08e4      	lsrs	r4, r4, #3
 8002614:	075b      	lsls	r3, r3, #29
 8002616:	4323      	orrs	r3, r4
 8002618:	08d4      	lsrs	r4, r2, #3
 800261a:	4642      	mov	r2, r8
 800261c:	4919      	ldr	r1, [pc, #100]	; (8002684 <__aeabi_dsub+0x358>)
 800261e:	428a      	cmp	r2, r1
 8002620:	d00e      	beq.n	8002640 <__aeabi_dsub+0x314>
 8002622:	0324      	lsls	r4, r4, #12
 8002624:	0552      	lsls	r2, r2, #21
 8002626:	0b24      	lsrs	r4, r4, #12
 8002628:	0d52      	lsrs	r2, r2, #21
 800262a:	e722      	b.n	8002472 <__aeabi_dsub+0x146>
 800262c:	000a      	movs	r2, r1
 800262e:	2400      	movs	r4, #0
 8002630:	2300      	movs	r3, #0
 8002632:	e71e      	b.n	8002472 <__aeabi_dsub+0x146>
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	4662      	mov	r2, ip
 8002638:	0752      	lsls	r2, r2, #29
 800263a:	4313      	orrs	r3, r2
 800263c:	4662      	mov	r2, ip
 800263e:	08d4      	lsrs	r4, r2, #3
 8002640:	001a      	movs	r2, r3
 8002642:	4322      	orrs	r2, r4
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x31c>
 8002646:	e1fc      	b.n	8002a42 <__aeabi_dsub+0x716>
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	0312      	lsls	r2, r2, #12
 800264c:	4314      	orrs	r4, r2
 800264e:	0324      	lsls	r4, r4, #12
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <__aeabi_dsub+0x358>)
 8002652:	0b24      	lsrs	r4, r4, #12
 8002654:	e70d      	b.n	8002472 <__aeabi_dsub+0x146>
 8002656:	0020      	movs	r0, r4
 8002658:	f000 fb18 	bl	8002c8c <__clzsi2>
 800265c:	0001      	movs	r1, r0
 800265e:	3118      	adds	r1, #24
 8002660:	291f      	cmp	r1, #31
 8002662:	dc00      	bgt.n	8002666 <__aeabi_dsub+0x33a>
 8002664:	e6c4      	b.n	80023f0 <__aeabi_dsub+0xc4>
 8002666:	3808      	subs	r0, #8
 8002668:	4084      	lsls	r4, r0
 800266a:	4643      	mov	r3, r8
 800266c:	0020      	movs	r0, r4
 800266e:	2400      	movs	r4, #0
 8002670:	4588      	cmp	r8, r1
 8002672:	dc00      	bgt.n	8002676 <__aeabi_dsub+0x34a>
 8002674:	e6c8      	b.n	8002408 <__aeabi_dsub+0xdc>
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__aeabi_dsub+0x35c>)
 8002678:	1a5b      	subs	r3, r3, r1
 800267a:	4010      	ands	r0, r2
 800267c:	4698      	mov	r8, r3
 800267e:	4681      	mov	r9, r0
 8002680:	e6d6      	b.n	8002430 <__aeabi_dsub+0x104>
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	000007ff 	.word	0x000007ff
 8002688:	ff7fffff 	.word	0xff7fffff
 800268c:	fffff801 	.word	0xfffff801
 8002690:	000007fe 	.word	0x000007fe
 8002694:	430f      	orrs	r7, r1
 8002696:	1e7a      	subs	r2, r7, #1
 8002698:	4197      	sbcs	r7, r2
 800269a:	e691      	b.n	80023c0 <__aeabi_dsub+0x94>
 800269c:	4661      	mov	r1, ip
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	0749      	lsls	r1, r1, #29
 80026a2:	430b      	orrs	r3, r1
 80026a4:	4661      	mov	r1, ip
 80026a6:	08cc      	lsrs	r4, r1, #3
 80026a8:	e7b8      	b.n	800261c <__aeabi_dsub+0x2f0>
 80026aa:	4640      	mov	r0, r8
 80026ac:	4cd3      	ldr	r4, [pc, #844]	; (80029fc <__aeabi_dsub+0x6d0>)
 80026ae:	3001      	adds	r0, #1
 80026b0:	4220      	tst	r0, r4
 80026b2:	d000      	beq.n	80026b6 <__aeabi_dsub+0x38a>
 80026b4:	e0a2      	b.n	80027fc <__aeabi_dsub+0x4d0>
 80026b6:	4640      	mov	r0, r8
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x392>
 80026bc:	e101      	b.n	80028c2 <__aeabi_dsub+0x596>
 80026be:	4660      	mov	r0, ip
 80026c0:	4318      	orrs	r0, r3
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x39a>
 80026c4:	e15e      	b.n	8002984 <__aeabi_dsub+0x658>
 80026c6:	0008      	movs	r0, r1
 80026c8:	4338      	orrs	r0, r7
 80026ca:	d000      	beq.n	80026ce <__aeabi_dsub+0x3a2>
 80026cc:	e15f      	b.n	800298e <__aeabi_dsub+0x662>
 80026ce:	4661      	mov	r1, ip
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	0749      	lsls	r1, r1, #29
 80026d4:	430b      	orrs	r3, r1
 80026d6:	4661      	mov	r1, ip
 80026d8:	08cc      	lsrs	r4, r1, #3
 80026da:	e7a2      	b.n	8002622 <__aeabi_dsub+0x2f6>
 80026dc:	4dc8      	ldr	r5, [pc, #800]	; (8002a00 <__aeabi_dsub+0x6d4>)
 80026de:	42a8      	cmp	r0, r5
 80026e0:	d100      	bne.n	80026e4 <__aeabi_dsub+0x3b8>
 80026e2:	e0cf      	b.n	8002884 <__aeabi_dsub+0x558>
 80026e4:	2580      	movs	r5, #128	; 0x80
 80026e6:	4664      	mov	r4, ip
 80026e8:	042d      	lsls	r5, r5, #16
 80026ea:	432c      	orrs	r4, r5
 80026ec:	46a4      	mov	ip, r4
 80026ee:	2a38      	cmp	r2, #56	; 0x38
 80026f0:	dc56      	bgt.n	80027a0 <__aeabi_dsub+0x474>
 80026f2:	2a1f      	cmp	r2, #31
 80026f4:	dd00      	ble.n	80026f8 <__aeabi_dsub+0x3cc>
 80026f6:	e0d1      	b.n	800289c <__aeabi_dsub+0x570>
 80026f8:	2520      	movs	r5, #32
 80026fa:	001e      	movs	r6, r3
 80026fc:	1aad      	subs	r5, r5, r2
 80026fe:	4664      	mov	r4, ip
 8002700:	40ab      	lsls	r3, r5
 8002702:	40ac      	lsls	r4, r5
 8002704:	40d6      	lsrs	r6, r2
 8002706:	1e5d      	subs	r5, r3, #1
 8002708:	41ab      	sbcs	r3, r5
 800270a:	4334      	orrs	r4, r6
 800270c:	4323      	orrs	r3, r4
 800270e:	4664      	mov	r4, ip
 8002710:	40d4      	lsrs	r4, r2
 8002712:	1b09      	subs	r1, r1, r4
 8002714:	e049      	b.n	80027aa <__aeabi_dsub+0x47e>
 8002716:	4660      	mov	r0, ip
 8002718:	1bdc      	subs	r4, r3, r7
 800271a:	1a46      	subs	r6, r0, r1
 800271c:	42a3      	cmp	r3, r4
 800271e:	4180      	sbcs	r0, r0
 8002720:	4240      	negs	r0, r0
 8002722:	4681      	mov	r9, r0
 8002724:	0030      	movs	r0, r6
 8002726:	464e      	mov	r6, r9
 8002728:	1b80      	subs	r0, r0, r6
 800272a:	4681      	mov	r9, r0
 800272c:	0200      	lsls	r0, r0, #8
 800272e:	d476      	bmi.n	800281e <__aeabi_dsub+0x4f2>
 8002730:	464b      	mov	r3, r9
 8002732:	4323      	orrs	r3, r4
 8002734:	d000      	beq.n	8002738 <__aeabi_dsub+0x40c>
 8002736:	e652      	b.n	80023de <__aeabi_dsub+0xb2>
 8002738:	2400      	movs	r4, #0
 800273a:	2500      	movs	r5, #0
 800273c:	e771      	b.n	8002622 <__aeabi_dsub+0x2f6>
 800273e:	4339      	orrs	r1, r7
 8002740:	000c      	movs	r4, r1
 8002742:	1e62      	subs	r2, r4, #1
 8002744:	4194      	sbcs	r4, r2
 8002746:	18e4      	adds	r4, r4, r3
 8002748:	429c      	cmp	r4, r3
 800274a:	419b      	sbcs	r3, r3
 800274c:	425b      	negs	r3, r3
 800274e:	4463      	add	r3, ip
 8002750:	4699      	mov	r9, r3
 8002752:	464b      	mov	r3, r9
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	d400      	bmi.n	800275a <__aeabi_dsub+0x42e>
 8002758:	e756      	b.n	8002608 <__aeabi_dsub+0x2dc>
 800275a:	2301      	movs	r3, #1
 800275c:	469c      	mov	ip, r3
 800275e:	4ba8      	ldr	r3, [pc, #672]	; (8002a00 <__aeabi_dsub+0x6d4>)
 8002760:	44e0      	add	r8, ip
 8002762:	4598      	cmp	r8, r3
 8002764:	d038      	beq.n	80027d8 <__aeabi_dsub+0x4ac>
 8002766:	464b      	mov	r3, r9
 8002768:	48a6      	ldr	r0, [pc, #664]	; (8002a04 <__aeabi_dsub+0x6d8>)
 800276a:	2201      	movs	r2, #1
 800276c:	4003      	ands	r3, r0
 800276e:	0018      	movs	r0, r3
 8002770:	0863      	lsrs	r3, r4, #1
 8002772:	4014      	ands	r4, r2
 8002774:	431c      	orrs	r4, r3
 8002776:	07c3      	lsls	r3, r0, #31
 8002778:	431c      	orrs	r4, r3
 800277a:	0843      	lsrs	r3, r0, #1
 800277c:	4699      	mov	r9, r3
 800277e:	e657      	b.n	8002430 <__aeabi_dsub+0x104>
 8002780:	0010      	movs	r0, r2
 8002782:	000e      	movs	r6, r1
 8002784:	3820      	subs	r0, #32
 8002786:	40c6      	lsrs	r6, r0
 8002788:	2a20      	cmp	r2, #32
 800278a:	d004      	beq.n	8002796 <__aeabi_dsub+0x46a>
 800278c:	2040      	movs	r0, #64	; 0x40
 800278e:	1a82      	subs	r2, r0, r2
 8002790:	4091      	lsls	r1, r2
 8002792:	430f      	orrs	r7, r1
 8002794:	46b9      	mov	r9, r7
 8002796:	464f      	mov	r7, r9
 8002798:	1e7a      	subs	r2, r7, #1
 800279a:	4197      	sbcs	r7, r2
 800279c:	4337      	orrs	r7, r6
 800279e:	e60f      	b.n	80023c0 <__aeabi_dsub+0x94>
 80027a0:	4662      	mov	r2, ip
 80027a2:	431a      	orrs	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	4193      	sbcs	r3, r2
 80027aa:	1afc      	subs	r4, r7, r3
 80027ac:	42a7      	cmp	r7, r4
 80027ae:	41bf      	sbcs	r7, r7
 80027b0:	427f      	negs	r7, r7
 80027b2:	1bcb      	subs	r3, r1, r7
 80027b4:	4699      	mov	r9, r3
 80027b6:	465d      	mov	r5, fp
 80027b8:	4680      	mov	r8, r0
 80027ba:	e608      	b.n	80023ce <__aeabi_dsub+0xa2>
 80027bc:	4666      	mov	r6, ip
 80027be:	431e      	orrs	r6, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x498>
 80027c2:	e0be      	b.n	8002942 <__aeabi_dsub+0x616>
 80027c4:	1e56      	subs	r6, r2, #1
 80027c6:	2a01      	cmp	r2, #1
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x4a0>
 80027ca:	e109      	b.n	80029e0 <__aeabi_dsub+0x6b4>
 80027cc:	4c8c      	ldr	r4, [pc, #560]	; (8002a00 <__aeabi_dsub+0x6d4>)
 80027ce:	42a2      	cmp	r2, r4
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x4a8>
 80027d2:	e119      	b.n	8002a08 <__aeabi_dsub+0x6dc>
 80027d4:	0032      	movs	r2, r6
 80027d6:	e6c1      	b.n	800255c <__aeabi_dsub+0x230>
 80027d8:	4642      	mov	r2, r8
 80027da:	2400      	movs	r4, #0
 80027dc:	2300      	movs	r3, #0
 80027de:	e648      	b.n	8002472 <__aeabi_dsub+0x146>
 80027e0:	2020      	movs	r0, #32
 80027e2:	000c      	movs	r4, r1
 80027e4:	1a80      	subs	r0, r0, r2
 80027e6:	003e      	movs	r6, r7
 80027e8:	4087      	lsls	r7, r0
 80027ea:	4084      	lsls	r4, r0
 80027ec:	40d6      	lsrs	r6, r2
 80027ee:	1e78      	subs	r0, r7, #1
 80027f0:	4187      	sbcs	r7, r0
 80027f2:	40d1      	lsrs	r1, r2
 80027f4:	4334      	orrs	r4, r6
 80027f6:	433c      	orrs	r4, r7
 80027f8:	448c      	add	ip, r1
 80027fa:	e7a4      	b.n	8002746 <__aeabi_dsub+0x41a>
 80027fc:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <__aeabi_dsub+0x6d4>)
 80027fe:	4290      	cmp	r0, r2
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x4d8>
 8002802:	e0e9      	b.n	80029d8 <__aeabi_dsub+0x6ac>
 8002804:	19df      	adds	r7, r3, r7
 8002806:	429f      	cmp	r7, r3
 8002808:	419b      	sbcs	r3, r3
 800280a:	4461      	add	r1, ip
 800280c:	425b      	negs	r3, r3
 800280e:	18c9      	adds	r1, r1, r3
 8002810:	07cc      	lsls	r4, r1, #31
 8002812:	087f      	lsrs	r7, r7, #1
 8002814:	084b      	lsrs	r3, r1, #1
 8002816:	4699      	mov	r9, r3
 8002818:	4680      	mov	r8, r0
 800281a:	433c      	orrs	r4, r7
 800281c:	e6f4      	b.n	8002608 <__aeabi_dsub+0x2dc>
 800281e:	1afc      	subs	r4, r7, r3
 8002820:	42a7      	cmp	r7, r4
 8002822:	41bf      	sbcs	r7, r7
 8002824:	4663      	mov	r3, ip
 8002826:	427f      	negs	r7, r7
 8002828:	1ac9      	subs	r1, r1, r3
 800282a:	1bcb      	subs	r3, r1, r7
 800282c:	4699      	mov	r9, r3
 800282e:	465d      	mov	r5, fp
 8002830:	e5d5      	b.n	80023de <__aeabi_dsub+0xb2>
 8002832:	08ff      	lsrs	r7, r7, #3
 8002834:	074b      	lsls	r3, r1, #29
 8002836:	465d      	mov	r5, fp
 8002838:	433b      	orrs	r3, r7
 800283a:	08cc      	lsrs	r4, r1, #3
 800283c:	e6ee      	b.n	800261c <__aeabi_dsub+0x2f0>
 800283e:	4662      	mov	r2, ip
 8002840:	431a      	orrs	r2, r3
 8002842:	d000      	beq.n	8002846 <__aeabi_dsub+0x51a>
 8002844:	e082      	b.n	800294c <__aeabi_dsub+0x620>
 8002846:	000b      	movs	r3, r1
 8002848:	433b      	orrs	r3, r7
 800284a:	d11b      	bne.n	8002884 <__aeabi_dsub+0x558>
 800284c:	2480      	movs	r4, #128	; 0x80
 800284e:	2500      	movs	r5, #0
 8002850:	0324      	lsls	r4, r4, #12
 8002852:	e6f9      	b.n	8002648 <__aeabi_dsub+0x31c>
 8002854:	19dc      	adds	r4, r3, r7
 8002856:	429c      	cmp	r4, r3
 8002858:	419b      	sbcs	r3, r3
 800285a:	4461      	add	r1, ip
 800285c:	4689      	mov	r9, r1
 800285e:	425b      	negs	r3, r3
 8002860:	4499      	add	r9, r3
 8002862:	464b      	mov	r3, r9
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	d444      	bmi.n	80028f2 <__aeabi_dsub+0x5c6>
 8002868:	2301      	movs	r3, #1
 800286a:	4698      	mov	r8, r3
 800286c:	e6cc      	b.n	8002608 <__aeabi_dsub+0x2dc>
 800286e:	1bdc      	subs	r4, r3, r7
 8002870:	4662      	mov	r2, ip
 8002872:	42a3      	cmp	r3, r4
 8002874:	419b      	sbcs	r3, r3
 8002876:	1a51      	subs	r1, r2, r1
 8002878:	425b      	negs	r3, r3
 800287a:	1acb      	subs	r3, r1, r3
 800287c:	4699      	mov	r9, r3
 800287e:	2301      	movs	r3, #1
 8002880:	4698      	mov	r8, r3
 8002882:	e5a4      	b.n	80023ce <__aeabi_dsub+0xa2>
 8002884:	08ff      	lsrs	r7, r7, #3
 8002886:	074b      	lsls	r3, r1, #29
 8002888:	465d      	mov	r5, fp
 800288a:	433b      	orrs	r3, r7
 800288c:	08cc      	lsrs	r4, r1, #3
 800288e:	e6d7      	b.n	8002640 <__aeabi_dsub+0x314>
 8002890:	4662      	mov	r2, ip
 8002892:	431a      	orrs	r2, r3
 8002894:	0014      	movs	r4, r2
 8002896:	1e63      	subs	r3, r4, #1
 8002898:	419c      	sbcs	r4, r3
 800289a:	e679      	b.n	8002590 <__aeabi_dsub+0x264>
 800289c:	0015      	movs	r5, r2
 800289e:	4664      	mov	r4, ip
 80028a0:	3d20      	subs	r5, #32
 80028a2:	40ec      	lsrs	r4, r5
 80028a4:	46a0      	mov	r8, r4
 80028a6:	2a20      	cmp	r2, #32
 80028a8:	d005      	beq.n	80028b6 <__aeabi_dsub+0x58a>
 80028aa:	2540      	movs	r5, #64	; 0x40
 80028ac:	4664      	mov	r4, ip
 80028ae:	1aaa      	subs	r2, r5, r2
 80028b0:	4094      	lsls	r4, r2
 80028b2:	4323      	orrs	r3, r4
 80028b4:	469a      	mov	sl, r3
 80028b6:	4654      	mov	r4, sl
 80028b8:	1e63      	subs	r3, r4, #1
 80028ba:	419c      	sbcs	r4, r3
 80028bc:	4643      	mov	r3, r8
 80028be:	4323      	orrs	r3, r4
 80028c0:	e773      	b.n	80027aa <__aeabi_dsub+0x47e>
 80028c2:	4662      	mov	r2, ip
 80028c4:	431a      	orrs	r2, r3
 80028c6:	d023      	beq.n	8002910 <__aeabi_dsub+0x5e4>
 80028c8:	000a      	movs	r2, r1
 80028ca:	433a      	orrs	r2, r7
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x5a4>
 80028ce:	e0a0      	b.n	8002a12 <__aeabi_dsub+0x6e6>
 80028d0:	4662      	mov	r2, ip
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	0752      	lsls	r2, r2, #29
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4662      	mov	r2, ip
 80028da:	08d4      	lsrs	r4, r2, #3
 80028dc:	e6b0      	b.n	8002640 <__aeabi_dsub+0x314>
 80028de:	000b      	movs	r3, r1
 80028e0:	433b      	orrs	r3, r7
 80028e2:	d100      	bne.n	80028e6 <__aeabi_dsub+0x5ba>
 80028e4:	e728      	b.n	8002738 <__aeabi_dsub+0x40c>
 80028e6:	08ff      	lsrs	r7, r7, #3
 80028e8:	074b      	lsls	r3, r1, #29
 80028ea:	465d      	mov	r5, fp
 80028ec:	433b      	orrs	r3, r7
 80028ee:	08cc      	lsrs	r4, r1, #3
 80028f0:	e697      	b.n	8002622 <__aeabi_dsub+0x2f6>
 80028f2:	2302      	movs	r3, #2
 80028f4:	4698      	mov	r8, r3
 80028f6:	e736      	b.n	8002766 <__aeabi_dsub+0x43a>
 80028f8:	1afc      	subs	r4, r7, r3
 80028fa:	42a7      	cmp	r7, r4
 80028fc:	41bf      	sbcs	r7, r7
 80028fe:	4663      	mov	r3, ip
 8002900:	427f      	negs	r7, r7
 8002902:	1ac9      	subs	r1, r1, r3
 8002904:	1bcb      	subs	r3, r1, r7
 8002906:	4699      	mov	r9, r3
 8002908:	2301      	movs	r3, #1
 800290a:	465d      	mov	r5, fp
 800290c:	4698      	mov	r8, r3
 800290e:	e55e      	b.n	80023ce <__aeabi_dsub+0xa2>
 8002910:	074b      	lsls	r3, r1, #29
 8002912:	08ff      	lsrs	r7, r7, #3
 8002914:	433b      	orrs	r3, r7
 8002916:	08cc      	lsrs	r4, r1, #3
 8002918:	e692      	b.n	8002640 <__aeabi_dsub+0x314>
 800291a:	1bdc      	subs	r4, r3, r7
 800291c:	4660      	mov	r0, ip
 800291e:	42a3      	cmp	r3, r4
 8002920:	41b6      	sbcs	r6, r6
 8002922:	1a40      	subs	r0, r0, r1
 8002924:	4276      	negs	r6, r6
 8002926:	1b80      	subs	r0, r0, r6
 8002928:	4681      	mov	r9, r0
 800292a:	0200      	lsls	r0, r0, #8
 800292c:	d560      	bpl.n	80029f0 <__aeabi_dsub+0x6c4>
 800292e:	1afc      	subs	r4, r7, r3
 8002930:	42a7      	cmp	r7, r4
 8002932:	41bf      	sbcs	r7, r7
 8002934:	4663      	mov	r3, ip
 8002936:	427f      	negs	r7, r7
 8002938:	1ac9      	subs	r1, r1, r3
 800293a:	1bcb      	subs	r3, r1, r7
 800293c:	4699      	mov	r9, r3
 800293e:	465d      	mov	r5, fp
 8002940:	e576      	b.n	8002430 <__aeabi_dsub+0x104>
 8002942:	08ff      	lsrs	r7, r7, #3
 8002944:	074b      	lsls	r3, r1, #29
 8002946:	433b      	orrs	r3, r7
 8002948:	08cc      	lsrs	r4, r1, #3
 800294a:	e667      	b.n	800261c <__aeabi_dsub+0x2f0>
 800294c:	000a      	movs	r2, r1
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	433a      	orrs	r2, r7
 8002952:	d100      	bne.n	8002956 <__aeabi_dsub+0x62a>
 8002954:	e66f      	b.n	8002636 <__aeabi_dsub+0x30a>
 8002956:	4662      	mov	r2, ip
 8002958:	0752      	lsls	r2, r2, #29
 800295a:	4313      	orrs	r3, r2
 800295c:	4662      	mov	r2, ip
 800295e:	08d4      	lsrs	r4, r2, #3
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	0312      	lsls	r2, r2, #12
 8002964:	4214      	tst	r4, r2
 8002966:	d007      	beq.n	8002978 <__aeabi_dsub+0x64c>
 8002968:	08c8      	lsrs	r0, r1, #3
 800296a:	4210      	tst	r0, r2
 800296c:	d104      	bne.n	8002978 <__aeabi_dsub+0x64c>
 800296e:	465d      	mov	r5, fp
 8002970:	0004      	movs	r4, r0
 8002972:	08fb      	lsrs	r3, r7, #3
 8002974:	0749      	lsls	r1, r1, #29
 8002976:	430b      	orrs	r3, r1
 8002978:	0f5a      	lsrs	r2, r3, #29
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	0752      	lsls	r2, r2, #29
 8002980:	4313      	orrs	r3, r2
 8002982:	e65d      	b.n	8002640 <__aeabi_dsub+0x314>
 8002984:	074b      	lsls	r3, r1, #29
 8002986:	08ff      	lsrs	r7, r7, #3
 8002988:	433b      	orrs	r3, r7
 800298a:	08cc      	lsrs	r4, r1, #3
 800298c:	e649      	b.n	8002622 <__aeabi_dsub+0x2f6>
 800298e:	19dc      	adds	r4, r3, r7
 8002990:	429c      	cmp	r4, r3
 8002992:	419b      	sbcs	r3, r3
 8002994:	4461      	add	r1, ip
 8002996:	4689      	mov	r9, r1
 8002998:	425b      	negs	r3, r3
 800299a:	4499      	add	r9, r3
 800299c:	464b      	mov	r3, r9
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	d400      	bmi.n	80029a4 <__aeabi_dsub+0x678>
 80029a2:	e631      	b.n	8002608 <__aeabi_dsub+0x2dc>
 80029a4:	464a      	mov	r2, r9
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <__aeabi_dsub+0x6d8>)
 80029a8:	401a      	ands	r2, r3
 80029aa:	2301      	movs	r3, #1
 80029ac:	4691      	mov	r9, r2
 80029ae:	4698      	mov	r8, r3
 80029b0:	e62a      	b.n	8002608 <__aeabi_dsub+0x2dc>
 80029b2:	0016      	movs	r6, r2
 80029b4:	4664      	mov	r4, ip
 80029b6:	3e20      	subs	r6, #32
 80029b8:	40f4      	lsrs	r4, r6
 80029ba:	46a0      	mov	r8, r4
 80029bc:	2a20      	cmp	r2, #32
 80029be:	d005      	beq.n	80029cc <__aeabi_dsub+0x6a0>
 80029c0:	2640      	movs	r6, #64	; 0x40
 80029c2:	4664      	mov	r4, ip
 80029c4:	1ab2      	subs	r2, r6, r2
 80029c6:	4094      	lsls	r4, r2
 80029c8:	4323      	orrs	r3, r4
 80029ca:	469a      	mov	sl, r3
 80029cc:	4654      	mov	r4, sl
 80029ce:	1e63      	subs	r3, r4, #1
 80029d0:	419c      	sbcs	r4, r3
 80029d2:	4643      	mov	r3, r8
 80029d4:	431c      	orrs	r4, r3
 80029d6:	e5db      	b.n	8002590 <__aeabi_dsub+0x264>
 80029d8:	0002      	movs	r2, r0
 80029da:	2400      	movs	r4, #0
 80029dc:	2300      	movs	r3, #0
 80029de:	e548      	b.n	8002472 <__aeabi_dsub+0x146>
 80029e0:	19dc      	adds	r4, r3, r7
 80029e2:	42bc      	cmp	r4, r7
 80029e4:	41bf      	sbcs	r7, r7
 80029e6:	4461      	add	r1, ip
 80029e8:	4689      	mov	r9, r1
 80029ea:	427f      	negs	r7, r7
 80029ec:	44b9      	add	r9, r7
 80029ee:	e738      	b.n	8002862 <__aeabi_dsub+0x536>
 80029f0:	464b      	mov	r3, r9
 80029f2:	4323      	orrs	r3, r4
 80029f4:	d100      	bne.n	80029f8 <__aeabi_dsub+0x6cc>
 80029f6:	e69f      	b.n	8002738 <__aeabi_dsub+0x40c>
 80029f8:	e606      	b.n	8002608 <__aeabi_dsub+0x2dc>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	000007fe 	.word	0x000007fe
 8002a00:	000007ff 	.word	0x000007ff
 8002a04:	ff7fffff 	.word	0xff7fffff
 8002a08:	08ff      	lsrs	r7, r7, #3
 8002a0a:	074b      	lsls	r3, r1, #29
 8002a0c:	433b      	orrs	r3, r7
 8002a0e:	08cc      	lsrs	r4, r1, #3
 8002a10:	e616      	b.n	8002640 <__aeabi_dsub+0x314>
 8002a12:	4662      	mov	r2, ip
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	0752      	lsls	r2, r2, #29
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	4662      	mov	r2, ip
 8002a1c:	08d4      	lsrs	r4, r2, #3
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	0312      	lsls	r2, r2, #12
 8002a22:	4214      	tst	r4, r2
 8002a24:	d007      	beq.n	8002a36 <__aeabi_dsub+0x70a>
 8002a26:	08c8      	lsrs	r0, r1, #3
 8002a28:	4210      	tst	r0, r2
 8002a2a:	d104      	bne.n	8002a36 <__aeabi_dsub+0x70a>
 8002a2c:	465d      	mov	r5, fp
 8002a2e:	0004      	movs	r4, r0
 8002a30:	08fb      	lsrs	r3, r7, #3
 8002a32:	0749      	lsls	r1, r1, #29
 8002a34:	430b      	orrs	r3, r1
 8002a36:	0f5a      	lsrs	r2, r3, #29
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	0752      	lsls	r2, r2, #29
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	e5fe      	b.n	8002640 <__aeabi_dsub+0x314>
 8002a42:	2300      	movs	r3, #0
 8002a44:	4a01      	ldr	r2, [pc, #4]	; (8002a4c <__aeabi_dsub+0x720>)
 8002a46:	001c      	movs	r4, r3
 8002a48:	e513      	b.n	8002472 <__aeabi_dsub+0x146>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	000007ff 	.word	0x000007ff

08002a50 <__aeabi_dcmpun>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0005      	movs	r5, r0
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <__aeabi_dcmpun+0x38>)
 8002a56:	031c      	lsls	r4, r3, #12
 8002a58:	0016      	movs	r6, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	030a      	lsls	r2, r1, #12
 8002a5e:	0049      	lsls	r1, r1, #1
 8002a60:	0b12      	lsrs	r2, r2, #12
 8002a62:	0d49      	lsrs	r1, r1, #21
 8002a64:	0b24      	lsrs	r4, r4, #12
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	4281      	cmp	r1, r0
 8002a6a:	d008      	beq.n	8002a7e <__aeabi_dcmpun+0x2e>
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <__aeabi_dcmpun+0x38>)
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <__aeabi_dcmpun+0x2c>
 8002a74:	0020      	movs	r0, r4
 8002a76:	4330      	orrs	r0, r6
 8002a78:	1e43      	subs	r3, r0, #1
 8002a7a:	4198      	sbcs	r0, r3
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2001      	movs	r0, #1
 8002a80:	432a      	orrs	r2, r5
 8002a82:	d1fb      	bne.n	8002a7c <__aeabi_dcmpun+0x2c>
 8002a84:	e7f2      	b.n	8002a6c <__aeabi_dcmpun+0x1c>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	000007ff 	.word	0x000007ff

08002a8c <__aeabi_i2d>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d016      	beq.n	8002ac0 <__aeabi_i2d+0x34>
 8002a92:	17c3      	asrs	r3, r0, #31
 8002a94:	18c5      	adds	r5, r0, r3
 8002a96:	405d      	eors	r5, r3
 8002a98:	0fc4      	lsrs	r4, r0, #31
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	f000 f8f6 	bl	8002c8c <__clzsi2>
 8002aa0:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <__aeabi_i2d+0x5c>)
 8002aa2:	1a12      	subs	r2, r2, r0
 8002aa4:	280a      	cmp	r0, #10
 8002aa6:	dc16      	bgt.n	8002ad6 <__aeabi_i2d+0x4a>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	002e      	movs	r6, r5
 8002aac:	3315      	adds	r3, #21
 8002aae:	409e      	lsls	r6, r3
 8002ab0:	230b      	movs	r3, #11
 8002ab2:	1a18      	subs	r0, r3, r0
 8002ab4:	40c5      	lsrs	r5, r0
 8002ab6:	0552      	lsls	r2, r2, #21
 8002ab8:	032d      	lsls	r5, r5, #12
 8002aba:	0b2d      	lsrs	r5, r5, #12
 8002abc:	0d53      	lsrs	r3, r2, #21
 8002abe:	e003      	b.n	8002ac8 <__aeabi_i2d+0x3c>
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2500      	movs	r5, #0
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	051b      	lsls	r3, r3, #20
 8002aca:	432b      	orrs	r3, r5
 8002acc:	07e4      	lsls	r4, r4, #31
 8002ace:	4323      	orrs	r3, r4
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4085      	lsls	r5, r0
 8002ada:	0552      	lsls	r2, r2, #21
 8002adc:	032d      	lsls	r5, r5, #12
 8002ade:	2600      	movs	r6, #0
 8002ae0:	0b2d      	lsrs	r5, r5, #12
 8002ae2:	0d53      	lsrs	r3, r2, #21
 8002ae4:	e7f0      	b.n	8002ac8 <__aeabi_i2d+0x3c>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	0000041e 	.word	0x0000041e

08002aec <__aeabi_f2d>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	0043      	lsls	r3, r0, #1
 8002af0:	0246      	lsls	r6, r0, #9
 8002af2:	0fc4      	lsrs	r4, r0, #31
 8002af4:	20fe      	movs	r0, #254	; 0xfe
 8002af6:	0e1b      	lsrs	r3, r3, #24
 8002af8:	1c59      	adds	r1, r3, #1
 8002afa:	0a75      	lsrs	r5, r6, #9
 8002afc:	4208      	tst	r0, r1
 8002afe:	d00c      	beq.n	8002b1a <__aeabi_f2d+0x2e>
 8002b00:	22e0      	movs	r2, #224	; 0xe0
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	4694      	mov	ip, r2
 8002b06:	076d      	lsls	r5, r5, #29
 8002b08:	0b36      	lsrs	r6, r6, #12
 8002b0a:	4463      	add	r3, ip
 8002b0c:	051b      	lsls	r3, r3, #20
 8002b0e:	4333      	orrs	r3, r6
 8002b10:	07e4      	lsls	r4, r4, #31
 8002b12:	4323      	orrs	r3, r4
 8002b14:	0028      	movs	r0, r5
 8002b16:	0019      	movs	r1, r3
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <__aeabi_f2d+0x5c>
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	d01b      	beq.n	8002b5a <__aeabi_f2d+0x6e>
 8002b22:	0028      	movs	r0, r5
 8002b24:	f000 f8b2 	bl	8002c8c <__clzsi2>
 8002b28:	280a      	cmp	r0, #10
 8002b2a:	dc1c      	bgt.n	8002b66 <__aeabi_f2d+0x7a>
 8002b2c:	230b      	movs	r3, #11
 8002b2e:	002e      	movs	r6, r5
 8002b30:	1a1b      	subs	r3, r3, r0
 8002b32:	40de      	lsrs	r6, r3
 8002b34:	0003      	movs	r3, r0
 8002b36:	3315      	adds	r3, #21
 8002b38:	409d      	lsls	r5, r3
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	; (8002b74 <__aeabi_f2d+0x88>)
 8002b3c:	0336      	lsls	r6, r6, #12
 8002b3e:	1a12      	subs	r2, r2, r0
 8002b40:	0552      	lsls	r2, r2, #21
 8002b42:	0b36      	lsrs	r6, r6, #12
 8002b44:	0d53      	lsrs	r3, r2, #21
 8002b46:	e7e1      	b.n	8002b0c <__aeabi_f2d+0x20>
 8002b48:	2d00      	cmp	r5, #0
 8002b4a:	d009      	beq.n	8002b60 <__aeabi_f2d+0x74>
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	0b36      	lsrs	r6, r6, #12
 8002b50:	0312      	lsls	r2, r2, #12
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <__aeabi_f2d+0x8c>)
 8002b54:	076d      	lsls	r5, r5, #29
 8002b56:	4316      	orrs	r6, r2
 8002b58:	e7d8      	b.n	8002b0c <__aeabi_f2d+0x20>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2600      	movs	r6, #0
 8002b5e:	e7d5      	b.n	8002b0c <__aeabi_f2d+0x20>
 8002b60:	2600      	movs	r6, #0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <__aeabi_f2d+0x8c>)
 8002b64:	e7d2      	b.n	8002b0c <__aeabi_f2d+0x20>
 8002b66:	0003      	movs	r3, r0
 8002b68:	3b0b      	subs	r3, #11
 8002b6a:	409d      	lsls	r5, r3
 8002b6c:	002e      	movs	r6, r5
 8002b6e:	2500      	movs	r5, #0
 8002b70:	e7e3      	b.n	8002b3a <__aeabi_f2d+0x4e>
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	00000389 	.word	0x00000389
 8002b78:	000007ff 	.word	0x000007ff

08002b7c <__aeabi_d2f>:
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	004b      	lsls	r3, r1, #1
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	0d5b      	lsrs	r3, r3, #21
 8002b84:	030c      	lsls	r4, r1, #12
 8002b86:	4e3d      	ldr	r6, [pc, #244]	; (8002c7c <__aeabi_d2f+0x100>)
 8002b88:	0a64      	lsrs	r4, r4, #9
 8002b8a:	0f40      	lsrs	r0, r0, #29
 8002b8c:	1c5f      	adds	r7, r3, #1
 8002b8e:	0fc9      	lsrs	r1, r1, #31
 8002b90:	4304      	orrs	r4, r0
 8002b92:	00d5      	lsls	r5, r2, #3
 8002b94:	4237      	tst	r7, r6
 8002b96:	d00a      	beq.n	8002bae <__aeabi_d2f+0x32>
 8002b98:	4839      	ldr	r0, [pc, #228]	; (8002c80 <__aeabi_d2f+0x104>)
 8002b9a:	181e      	adds	r6, r3, r0
 8002b9c:	2efe      	cmp	r6, #254	; 0xfe
 8002b9e:	dd16      	ble.n	8002bce <__aeabi_d2f+0x52>
 8002ba0:	20ff      	movs	r0, #255	; 0xff
 8002ba2:	2400      	movs	r4, #0
 8002ba4:	05c0      	lsls	r0, r0, #23
 8002ba6:	4320      	orrs	r0, r4
 8002ba8:	07c9      	lsls	r1, r1, #31
 8002baa:	4308      	orrs	r0, r1
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <__aeabi_d2f+0x44>
 8002bb2:	432c      	orrs	r4, r5
 8002bb4:	d026      	beq.n	8002c04 <__aeabi_d2f+0x88>
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	0192      	lsls	r2, r2, #6
 8002bba:	0a54      	lsrs	r4, r2, #9
 8002bbc:	b2d8      	uxtb	r0, r3
 8002bbe:	e7f1      	b.n	8002ba4 <__aeabi_d2f+0x28>
 8002bc0:	4325      	orrs	r5, r4
 8002bc2:	d0ed      	beq.n	8002ba0 <__aeabi_d2f+0x24>
 8002bc4:	2080      	movs	r0, #128	; 0x80
 8002bc6:	03c0      	lsls	r0, r0, #15
 8002bc8:	4304      	orrs	r4, r0
 8002bca:	20ff      	movs	r0, #255	; 0xff
 8002bcc:	e7ea      	b.n	8002ba4 <__aeabi_d2f+0x28>
 8002bce:	2e00      	cmp	r6, #0
 8002bd0:	dd1b      	ble.n	8002c0a <__aeabi_d2f+0x8e>
 8002bd2:	0192      	lsls	r2, r2, #6
 8002bd4:	1e53      	subs	r3, r2, #1
 8002bd6:	419a      	sbcs	r2, r3
 8002bd8:	00e4      	lsls	r4, r4, #3
 8002bda:	0f6d      	lsrs	r5, r5, #29
 8002bdc:	4322      	orrs	r2, r4
 8002bde:	432a      	orrs	r2, r5
 8002be0:	0753      	lsls	r3, r2, #29
 8002be2:	d048      	beq.n	8002c76 <__aeabi_d2f+0xfa>
 8002be4:	230f      	movs	r3, #15
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d000      	beq.n	8002bee <__aeabi_d2f+0x72>
 8002bec:	3204      	adds	r2, #4
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	04db      	lsls	r3, r3, #19
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d03f      	beq.n	8002c76 <__aeabi_d2f+0xfa>
 8002bf6:	1c70      	adds	r0, r6, #1
 8002bf8:	2efe      	cmp	r6, #254	; 0xfe
 8002bfa:	d0d1      	beq.n	8002ba0 <__aeabi_d2f+0x24>
 8002bfc:	0192      	lsls	r2, r2, #6
 8002bfe:	0a54      	lsrs	r4, r2, #9
 8002c00:	b2c0      	uxtb	r0, r0
 8002c02:	e7cf      	b.n	8002ba4 <__aeabi_d2f+0x28>
 8002c04:	2000      	movs	r0, #0
 8002c06:	2400      	movs	r4, #0
 8002c08:	e7cc      	b.n	8002ba4 <__aeabi_d2f+0x28>
 8002c0a:	0032      	movs	r2, r6
 8002c0c:	3217      	adds	r2, #23
 8002c0e:	db22      	blt.n	8002c56 <__aeabi_d2f+0xda>
 8002c10:	2080      	movs	r0, #128	; 0x80
 8002c12:	0400      	lsls	r0, r0, #16
 8002c14:	4320      	orrs	r0, r4
 8002c16:	241e      	movs	r4, #30
 8002c18:	1ba4      	subs	r4, r4, r6
 8002c1a:	2c1f      	cmp	r4, #31
 8002c1c:	dd1d      	ble.n	8002c5a <__aeabi_d2f+0xde>
 8002c1e:	2202      	movs	r2, #2
 8002c20:	4252      	negs	r2, r2
 8002c22:	1b96      	subs	r6, r2, r6
 8002c24:	0002      	movs	r2, r0
 8002c26:	40f2      	lsrs	r2, r6
 8002c28:	0016      	movs	r6, r2
 8002c2a:	2c20      	cmp	r4, #32
 8002c2c:	d004      	beq.n	8002c38 <__aeabi_d2f+0xbc>
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <__aeabi_d2f+0x108>)
 8002c30:	4694      	mov	ip, r2
 8002c32:	4463      	add	r3, ip
 8002c34:	4098      	lsls	r0, r3
 8002c36:	4305      	orrs	r5, r0
 8002c38:	002a      	movs	r2, r5
 8002c3a:	1e53      	subs	r3, r2, #1
 8002c3c:	419a      	sbcs	r2, r3
 8002c3e:	4332      	orrs	r2, r6
 8002c40:	2600      	movs	r6, #0
 8002c42:	0753      	lsls	r3, r2, #29
 8002c44:	d1ce      	bne.n	8002be4 <__aeabi_d2f+0x68>
 8002c46:	2480      	movs	r4, #128	; 0x80
 8002c48:	0013      	movs	r3, r2
 8002c4a:	04e4      	lsls	r4, r4, #19
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	4023      	ands	r3, r4
 8002c50:	4222      	tst	r2, r4
 8002c52:	d1d3      	bne.n	8002bfc <__aeabi_d2f+0x80>
 8002c54:	e7b0      	b.n	8002bb8 <__aeabi_d2f+0x3c>
 8002c56:	2300      	movs	r3, #0
 8002c58:	e7ad      	b.n	8002bb6 <__aeabi_d2f+0x3a>
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <__aeabi_d2f+0x10c>)
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	002a      	movs	r2, r5
 8002c60:	40e2      	lsrs	r2, r4
 8002c62:	0014      	movs	r4, r2
 8002c64:	002a      	movs	r2, r5
 8002c66:	4463      	add	r3, ip
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	4098      	lsls	r0, r3
 8002c6c:	1e55      	subs	r5, r2, #1
 8002c6e:	41aa      	sbcs	r2, r5
 8002c70:	4302      	orrs	r2, r0
 8002c72:	4322      	orrs	r2, r4
 8002c74:	e7e4      	b.n	8002c40 <__aeabi_d2f+0xc4>
 8002c76:	0033      	movs	r3, r6
 8002c78:	e79e      	b.n	8002bb8 <__aeabi_d2f+0x3c>
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	000007fe 	.word	0x000007fe
 8002c80:	fffffc80 	.word	0xfffffc80
 8002c84:	fffffca2 	.word	0xfffffca2
 8002c88:	fffffc82 	.word	0xfffffc82

08002c8c <__clzsi2>:
 8002c8c:	211c      	movs	r1, #28
 8002c8e:	2301      	movs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	4298      	cmp	r0, r3
 8002c94:	d301      	bcc.n	8002c9a <__clzsi2+0xe>
 8002c96:	0c00      	lsrs	r0, r0, #16
 8002c98:	3910      	subs	r1, #16
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	d301      	bcc.n	8002ca4 <__clzsi2+0x18>
 8002ca0:	0a00      	lsrs	r0, r0, #8
 8002ca2:	3908      	subs	r1, #8
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	d301      	bcc.n	8002cae <__clzsi2+0x22>
 8002caa:	0900      	lsrs	r0, r0, #4
 8002cac:	3904      	subs	r1, #4
 8002cae:	a202      	add	r2, pc, #8	; (adr r2, 8002cb8 <__clzsi2+0x2c>)
 8002cb0:	5c10      	ldrb	r0, [r2, r0]
 8002cb2:	1840      	adds	r0, r0, r1
 8002cb4:	4770      	bx	lr
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	02020304 	.word	0x02020304
 8002cbc:	01010101 	.word	0x01010101
	...

08002cc8 <f>:
#include <string.h>
#include "blowfish/constants.h"

#define SWAP(x, y, temp) {temp = (x); (x) = (y); (y) = temp;}

uint32_t f(uint32_t x) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    uint32_t h = S[x >> 24] + S[x >> 16 & 0xff];
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0e1a      	lsrs	r2, r3, #24
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <f+0x4c>)
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	58d2      	ldr	r2, [r2, r3]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	21ff      	movs	r1, #255	; 0xff
 8002ce0:	4019      	ands	r1, r3
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <f+0x4c>)
 8002ce4:	0089      	lsls	r1, r1, #2
 8002ce6:	58cb      	ldr	r3, [r1, r3]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	60fb      	str	r3, [r7, #12]
    return ( h ^ S[x >> 8 & 0xff] ) + S[x & 0xff];
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <f+0x4c>)
 8002cf6:	0092      	lsls	r2, r2, #2
 8002cf8:	58d2      	ldr	r2, [r2, r3]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	405a      	eors	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	21ff      	movs	r1, #255	; 0xff
 8002d02:	4019      	ands	r1, r3
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <f+0x4c>)
 8002d06:	0089      	lsls	r1, r1, #2
 8002d08:	58cb      	ldr	r3, [r1, r3]
 8002d0a:	18d3      	adds	r3, r2, r3
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b004      	add	sp, #16
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000000 	.word	0x20000000

08002d18 <encrypt>:

void encrypt(uint32_t *left, uint32_t *right) {
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    uint32_t temp;
    for (short r = 0; r < 16; r++) {
 8002d22:	230e      	movs	r3, #14
 8002d24:	18fb      	adds	r3, r7, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e028      	b.n	8002d7e <encrypt+0x66>
        *left = *left ^ P[r];
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	240e      	movs	r4, #14
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	2100      	movs	r1, #0
 8002d36:	5e59      	ldrsh	r1, [r3, r1]
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <encrypt+0xac>)
 8002d3a:	0089      	lsls	r1, r1, #2
 8002d3c:	58cb      	ldr	r3, [r1, r3]
 8002d3e:	405a      	eors	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
        *right = f(*left) ^ *right;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff ffbd 	bl	8002cc8 <f>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	405a      	eors	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	601a      	str	r2, [r3, #0]
        SWAP(*left, *right, temp)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	601a      	str	r2, [r3, #0]
    for (short r = 0; r < 16; r++) {
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	5e9b      	ldrsh	r3, [r3, r2]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	230e      	movs	r3, #14
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2200      	movs	r2, #0
 8002d84:	5e9b      	ldrsh	r3, [r3, r2]
 8002d86:	2b0f      	cmp	r3, #15
 8002d88:	ddd0      	ble.n	8002d2c <encrypt+0x14>
    }
    SWAP(*left, *right, temp)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	601a      	str	r2, [r3, #0]
    *right = *right ^ P[16];
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <encrypt+0xac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	405a      	eors	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	601a      	str	r2, [r3, #0]
    *left = *left ^ P[17];
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <encrypt+0xac>)
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	405a      	eors	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b005      	add	sp, #20
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000400 	.word	0x20000400

08002dc8 <decrypt>:

void decrypt(uint32_t *left, uint32_t *right) {
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    uint32_t temp;
    for (short r = 17; r > 1; r--) {
 8002dd2:	230e      	movs	r3, #14
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2211      	movs	r2, #17
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	e028      	b.n	8002e2e <decrypt+0x66>
        *left = *left ^ P[r];
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	240e      	movs	r4, #14
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2100      	movs	r1, #0
 8002de6:	5e59      	ldrsh	r1, [r3, r1]
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <decrypt+0xac>)
 8002dea:	0089      	lsls	r1, r1, #2
 8002dec:	58cb      	ldr	r3, [r1, r3]
 8002dee:	405a      	eors	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	601a      	str	r2, [r3, #0]
        *right = f(*left) ^ *right;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ff65 	bl	8002cc8 <f>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	405a      	eors	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	601a      	str	r2, [r3, #0]
        SWAP(*left, *right, temp)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	601a      	str	r2, [r3, #0]
    for (short r = 17; r > 1; r--) {
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2200      	movs	r2, #0
 8002e22:	5e9b      	ldrsh	r3, [r3, r2]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	230e      	movs	r3, #14
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	5e9b      	ldrsh	r3, [r3, r2]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	dcd0      	bgt.n	8002ddc <decrypt+0x14>
    }
    SWAP(*left, *right, temp)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	601a      	str	r2, [r3, #0]
    *right = *right ^ P[1];
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <decrypt+0xac>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	405a      	eors	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	601a      	str	r2, [r3, #0]
    *left = *left ^ P[0];
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <decrypt+0xac>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	405a      	eors	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b005      	add	sp, #20
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	20000400 	.word	0x20000400

08002e78 <blowfish_init>:

void blowfish_init(const uint32_t *key, uint8_t key_len) {
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	000a      	movs	r2, r1
 8002e82:	1cfb      	adds	r3, r7, #3
 8002e84:	701a      	strb	r2, [r3, #0]
    // initialize P box w/ key
    uint32_t k;

    for (short i = 0, p = 0; i < 18; i++) {
 8002e86:	231a      	movs	r3, #26
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	2318      	movs	r3, #24
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	801a      	strh	r2, [r3, #0]
 8002e96:	e049      	b.n	8002f2c <blowfish_init+0xb4>
        k = 0x00;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
        for (short j = 0; j < 4; j++) {
 8002e9c:	2316      	movs	r3, #22
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	e024      	b.n	8002ef0 <blowfish_init+0x78>
            k = (k << 8) | (uint8_t) key[p];
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	2018      	movs	r0, #24
 8002eac:	183b      	adds	r3, r7, r0
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5e5b      	ldrsh	r3, [r3, r1]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	18cb      	adds	r3, r1, r3
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
            p = (p + 1) % key_len;
 8002ec0:	0004      	movs	r4, r0
 8002ec2:	183b      	adds	r3, r7, r0
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	1cfb      	adds	r3, r7, #3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	0019      	movs	r1, r3
 8002ed0:	0010      	movs	r0, r2
 8002ed2:	f7fd fa93 	bl	80003fc <__aeabi_idivmod>
 8002ed6:	000b      	movs	r3, r1
 8002ed8:	001a      	movs	r2, r3
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	801a      	strh	r2, [r3, #0]
        for (short j = 0; j < 4; j++) {
 8002ede:	2116      	movs	r1, #22
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	2316      	movs	r3, #22
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	ddd4      	ble.n	8002ea6 <blowfish_init+0x2e>
        }
        P[i] ^= k;
 8002efc:	201a      	movs	r0, #26
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	2200      	movs	r2, #0
 8002f02:	5e9a      	ldrsh	r2, [r3, r2]
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <blowfish_init+0x17c>)
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	58d1      	ldr	r1, [r2, r3]
 8002f0a:	183b      	adds	r3, r7, r0
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	5e9a      	ldrsh	r2, [r3, r2]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4059      	eors	r1, r3
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <blowfish_init+0x17c>)
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	50d1      	str	r1, [r2, r3]
    for (short i = 0, p = 0; i < 18; i++) {
 8002f1a:	0001      	movs	r1, r0
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2200      	movs	r2, #0
 8002f20:	5e9b      	ldrsh	r3, [r3, r2]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	231a      	movs	r3, #26
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	5e9b      	ldrsh	r3, [r3, r2]
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	ddaf      	ble.n	8002e98 <blowfish_init+0x20>
    }

    // blowfish key expansion (521 iterations)
    uint32_t l = 0x00, r = 0x00;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
    for (short i = 0; i < 18; i+=2) {
 8002f40:	2314      	movs	r3, #20
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	e01e      	b.n	8002f88 <blowfish_init+0x110>
        encrypt(&l, &r);
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	18fa      	adds	r2, r7, r3
 8002f4e:	230c      	movs	r3, #12
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff fedf 	bl	8002d18 <encrypt>
        P[i] = l;
 8002f5a:	2014      	movs	r0, #20
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	2200      	movs	r2, #0
 8002f60:	5e9a      	ldrsh	r2, [r3, r2]
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <blowfish_init+0x17c>)
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	50d1      	str	r1, [r2, r3]
        P[i+1] = r;
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <blowfish_init+0x17c>)
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	50d1      	str	r1, [r2, r3]
    for (short i = 0; i < 18; i+=2) {
 8002f7a:	0001      	movs	r1, r0
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	3302      	adds	r3, #2
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	2314      	movs	r3, #20
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f90:	2b11      	cmp	r3, #17
 8002f92:	ddda      	ble.n	8002f4a <blowfish_init+0xd2>
    }

    for (short j = 0; j < 256; j+=2) {
 8002f94:	2312      	movs	r3, #18
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e01e      	b.n	8002fdc <blowfish_init+0x164>
        encrypt(&l, &r);
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	18fa      	adds	r2, r7, r3
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff feb5 	bl	8002d18 <encrypt>
        S[j] = l;
 8002fae:	2012      	movs	r0, #18
 8002fb0:	183b      	adds	r3, r7, r0
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	5e9a      	ldrsh	r2, [r3, r2]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <blowfish_init+0x180>)
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	50d1      	str	r1, [r2, r3]
        S[j+1] = r;
 8002fbe:	183b      	adds	r3, r7, r0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <blowfish_init+0x180>)
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	50d1      	str	r1, [r2, r3]
    for (short j = 0; j < 256; j+=2) {
 8002fce:	0001      	movs	r1, r0
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	2312      	movs	r3, #18
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	ddda      	ble.n	8002f9e <blowfish_init+0x126>
    }
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b009      	add	sp, #36	; 0x24
 8002ff0:	bd90      	pop	{r4, r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	20000400 	.word	0x20000400
 8002ff8:	20000000 	.word	0x20000000

08002ffc <blowfish_encrypt>:

void blowfish_encrypt(uint8_t data[], uint32_t data_size, uint8_t *output)
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	b095      	sub	sp, #84	; 0x54
 8003000:	af00      	add	r7, sp, #0
 8003002:	6378      	str	r0, [r7, #52]	; 0x34
 8003004:	6339      	str	r1, [r7, #48]	; 0x30
 8003006:	62fa      	str	r2, [r7, #44]	; 0x2c
    uint8_t *encrypted = calloc(data_size, sizeof(uint8_t));
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2101      	movs	r1, #1
 800300c:	0018      	movs	r0, r3
 800300e:	f006 f85f 	bl	80090d0 <calloc>
 8003012:	0003      	movs	r3, r0
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t i;
    uint32_t left, right;
    uint64_t chunk;

    for (i = 0; i < data_size; i += 8) {
 8003016:	2300      	movs	r3, #0
 8003018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800301a:	e065      	b.n	80030e8 <blowfish_encrypt+0xec>
        /* make 8 byte chunks */
        chunk = 0x00;
 800301c:	2200      	movs	r2, #0
 800301e:	2300      	movs	r3, #0
 8003020:	63ba      	str	r2, [r7, #56]	; 0x38
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
        memmove(&chunk, data + i, sizeof(chunk));
 8003024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	18d1      	adds	r1, r2, r3
 800302a:	2610      	movs	r6, #16
 800302c:	2328      	movs	r3, #40	; 0x28
 800302e:	18f2      	adds	r2, r6, r3
 8003030:	19d3      	adds	r3, r2, r7
 8003032:	2208      	movs	r2, #8
 8003034:	0018      	movs	r0, r3
 8003036:	f006 f8a0 	bl	800917a <memmove>

        /* split into two 4 byte chunks */
        left = right = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	643b      	str	r3, [r7, #64]	; 0x40
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
        left   = (uint32_t)(chunk >> 32);
 8003042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	001b      	movs	r3, r3
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	2300      	movs	r3, #0
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
        right  = (uint32_t)(chunk);
 8003052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003056:	0013      	movs	r3, r2
 8003058:	643b      	str	r3, [r7, #64]	; 0x40

        encrypt(&left, &right);
 800305a:	2318      	movs	r3, #24
 800305c:	2128      	movs	r1, #40	; 0x28
 800305e:	185b      	adds	r3, r3, r1
 8003060:	19da      	adds	r2, r3, r7
 8003062:	231c      	movs	r3, #28
 8003064:	185b      	adds	r3, r3, r1
 8003066:	19db      	adds	r3, r3, r7
 8003068:	0011      	movs	r1, r2
 800306a:	0018      	movs	r0, r3
 800306c:	f7ff fe54 	bl	8002d18 <encrypt>

        /* merge encrypted halves into a single 8 byte chunk again */
        chunk = 0x00;
 8003070:	2200      	movs	r2, #0
 8003072:	2300      	movs	r3, #0
 8003074:	63ba      	str	r2, [r7, #56]	; 0x38
 8003076:	63fb      	str	r3, [r7, #60]	; 0x3c
        chunk |= left; chunk <<= 32;
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003084:	69b8      	ldr	r0, [r7, #24]
 8003086:	69f9      	ldr	r1, [r7, #28]
 8003088:	0006      	movs	r6, r0
 800308a:	4316      	orrs	r6, r2
 800308c:	0034      	movs	r4, r6
 800308e:	4319      	orrs	r1, r3
 8003090:	000d      	movs	r5, r1
 8003092:	63bc      	str	r4, [r7, #56]	; 0x38
 8003094:	63fd      	str	r5, [r7, #60]	; 0x3c
 8003096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	0013      	movs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        chunk |= right;
 80030aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b6:	68b8      	ldr	r0, [r7, #8]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	0006      	movs	r6, r0
 80030bc:	4316      	orrs	r6, r2
 80030be:	603e      	str	r6, [r7, #0]
 80030c0:	4319      	orrs	r1, r3
 80030c2:	6079      	str	r1, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* append the chunk into the answer */
        memmove(encrypted + i, &chunk, sizeof(chunk));
 80030cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	18d0      	adds	r0, r2, r3
 80030d2:	2610      	movs	r6, #16
 80030d4:	2128      	movs	r1, #40	; 0x28
 80030d6:	1873      	adds	r3, r6, r1
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	2208      	movs	r2, #8
 80030dc:	0019      	movs	r1, r3
 80030de:	f006 f84c 	bl	800917a <memmove>
    for (i = 0; i < data_size; i += 8) {
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	3308      	adds	r3, #8
 80030e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d395      	bcc.n	800301c <blowfish_encrypt+0x20>
    }

    memmove(output, encrypted, data_size);
 80030f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	0018      	movs	r0, r3
 80030f8:	f006 f83f 	bl	800917a <memmove>
    free(encrypted);
 80030fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fe:	0018      	movs	r0, r3
 8003100:	f006 f81a 	bl	8009138 <free>
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	b015      	add	sp, #84	; 0x54
 800310a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800310c <blowfish_decrypt>:

void blowfish_decrypt(uint8_t data[], uint32_t data_size, uint8_t *output)
{
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b095      	sub	sp, #84	; 0x54
 8003110:	af00      	add	r7, sp, #0
 8003112:	6378      	str	r0, [r7, #52]	; 0x34
 8003114:	6339      	str	r1, [r7, #48]	; 0x30
 8003116:	62fa      	str	r2, [r7, #44]	; 0x2c
    uint8_t *decrypted = calloc(data_size, sizeof(uint8_t));
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	2101      	movs	r1, #1
 800311c:	0018      	movs	r0, r3
 800311e:	f005 ffd7 	bl	80090d0 <calloc>
 8003122:	0003      	movs	r3, r0
 8003124:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t i;
    uint32_t left, right;
    uint64_t chunk;

    for (i = 0; i < data_size; i += 8) {
 8003126:	2300      	movs	r3, #0
 8003128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800312a:	e065      	b.n	80031f8 <blowfish_decrypt+0xec>
        chunk = 0x00;
 800312c:	2200      	movs	r2, #0
 800312e:	2300      	movs	r3, #0
 8003130:	63ba      	str	r2, [r7, #56]	; 0x38
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
        memmove(&chunk, data + i, sizeof(chunk));
 8003134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	18d1      	adds	r1, r2, r3
 800313a:	2610      	movs	r6, #16
 800313c:	2328      	movs	r3, #40	; 0x28
 800313e:	18f2      	adds	r2, r6, r3
 8003140:	19d3      	adds	r3, r2, r7
 8003142:	2208      	movs	r2, #8
 8003144:	0018      	movs	r0, r3
 8003146:	f006 f818 	bl	800917a <memmove>

        left = right = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
 800314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003150:	647b      	str	r3, [r7, #68]	; 0x44
        left   = (uint32_t)(chunk >> 32);
 8003152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003156:	001b      	movs	r3, r3
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
        right  = (uint32_t)(chunk);
 8003162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003166:	0013      	movs	r3, r2
 8003168:	643b      	str	r3, [r7, #64]	; 0x40

        decrypt(&left, &right);
 800316a:	2318      	movs	r3, #24
 800316c:	2128      	movs	r1, #40	; 0x28
 800316e:	185b      	adds	r3, r3, r1
 8003170:	19da      	adds	r2, r3, r7
 8003172:	231c      	movs	r3, #28
 8003174:	185b      	adds	r3, r3, r1
 8003176:	19db      	adds	r3, r3, r7
 8003178:	0011      	movs	r1, r2
 800317a:	0018      	movs	r0, r3
 800317c:	f7ff fe24 	bl	8002dc8 <decrypt>

        chunk = 0x00;
 8003180:	2200      	movs	r2, #0
 8003182:	2300      	movs	r3, #0
 8003184:	63ba      	str	r2, [r7, #56]	; 0x38
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
        chunk |= left; chunk <<= 32;
 8003188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	69b8      	ldr	r0, [r7, #24]
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	0006      	movs	r6, r0
 800319a:	4316      	orrs	r6, r2
 800319c:	0034      	movs	r4, r6
 800319e:	4319      	orrs	r1, r3
 80031a0:	000d      	movs	r5, r1
 80031a2:	63bc      	str	r4, [r7, #56]	; 0x38
 80031a4:	63fd      	str	r5, [r7, #60]	; 0x3c
 80031a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	0013      	movs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        chunk |= right;
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	68b8      	ldr	r0, [r7, #8]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	0006      	movs	r6, r0
 80031cc:	4316      	orrs	r6, r2
 80031ce:	603e      	str	r6, [r7, #0]
 80031d0:	4319      	orrs	r1, r3
 80031d2:	6079      	str	r1, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c

        memmove(decrypted + i, &chunk, sizeof(chunk));
 80031dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e0:	18d0      	adds	r0, r2, r3
 80031e2:	2610      	movs	r6, #16
 80031e4:	2128      	movs	r1, #40	; 0x28
 80031e6:	1873      	adds	r3, r6, r1
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2208      	movs	r2, #8
 80031ec:	0019      	movs	r1, r3
 80031ee:	f005 ffc4 	bl	800917a <memmove>
    for (i = 0; i < data_size; i += 8) {
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	3308      	adds	r3, #8
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d395      	bcc.n	800312c <blowfish_decrypt+0x20>
    }

    memmove(output, decrypted, data_size);
 8003200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003202:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	0018      	movs	r0, r3
 8003208:	f005 ffb7 	bl	800917a <memmove>
    free(decrypted);
 800320c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320e:	0018      	movs	r0, r3
 8003210:	f005 ff92 	bl	8009138 <free>
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b015      	add	sp, #84	; 0x54
 800321a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800321c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <MX_GPIO_Init+0x64>)
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <MX_GPIO_Init+0x64>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0349      	lsls	r1, r1, #13
 800322c:	430a      	orrs	r2, r1
 800322e:	615a      	str	r2, [r3, #20]
 8003230:	4b13      	ldr	r3, [pc, #76]	; (8003280 <MX_GPIO_Init+0x64>)
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	035b      	lsls	r3, r3, #13
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <MX_GPIO_Init+0x64>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <MX_GPIO_Init+0x64>)
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	0289      	lsls	r1, r1, #10
 8003248:	430a      	orrs	r2, r1
 800324a:	615a      	str	r2, [r3, #20]
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <MX_GPIO_Init+0x64>)
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <MX_GPIO_Init+0x64>)
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <MX_GPIO_Init+0x64>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	02c9      	lsls	r1, r1, #11
 8003264:	430a      	orrs	r2, r1
 8003266:	615a      	str	r2, [r3, #20]
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <MX_GPIO_Init+0x64>)
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	02db      	lsls	r3, r3, #11
 8003270:	4013      	ands	r3, r2
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]

}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	40021000 	.word	0x40021000

08003284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MX_I2C1_Init+0x74>)
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <MX_I2C1_Init+0x78>)
 800328c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <MX_I2C1_Init+0x74>)
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <MX_I2C1_Init+0x7c>)
 8003292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_I2C1_Init+0x74>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_I2C1_Init+0x74>)
 800329c:	2201      	movs	r2, #1
 800329e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032c0:	0018      	movs	r0, r3
 80032c2:	f003 feff 	bl	80070c4 <HAL_I2C_Init>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d001      	beq.n	80032ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032ca:	f000 fd41 	bl	8003d50 <Error_Handler>
  }

  /** Configure Analogue filter HAL_I2C_MspInit
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032d0:	2100      	movs	r1, #0
 80032d2:	0018      	movs	r0, r3
 80032d4:	f004 fc40 	bl	8007b58 <HAL_I2CEx_ConfigAnalogFilter>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d001      	beq.n	80032e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032dc:	f000 fd38 	bl	8003d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <MX_I2C1_Init+0x74>)
 80032e2:	2100      	movs	r1, #0
 80032e4:	0018      	movs	r0, r3
 80032e6:	f004 fc83 	bl	8007bf0 <HAL_I2CEx_ConfigDigitalFilter>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d001      	beq.n	80032f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80032ee:	f000 fd2f 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000530 	.word	0x20000530
 80032fc:	40005400 	.word	0x40005400
 8003300:	2000090e 	.word	0x2000090e

08003304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	2414      	movs	r4, #20
 800330e:	193b      	adds	r3, r7, r4
 8003310:	0018      	movs	r0, r3
 8003312:	2314      	movs	r3, #20
 8003314:	001a      	movs	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f005 ff42 	bl	80091a0 <memset>
  if(hi2c->Instance==I2C1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_I2C_MspInit+0x90>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d131      	bne.n	800338a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_I2C_MspInit+0x94>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	02c9      	lsls	r1, r1, #11
 8003330:	430a      	orrs	r2, r1
 8003332:	615a      	str	r2, [r3, #20]
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	02db      	lsls	r3, r3, #11
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003342:	0021      	movs	r1, r4
 8003344:	187b      	adds	r3, r7, r1
 8003346:	22c0      	movs	r2, #192	; 0xc0
 8003348:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2212      	movs	r2, #18
 800334e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2203      	movs	r2, #3
 800335a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800335c:	187b      	adds	r3, r7, r1
 800335e:	2201      	movs	r2, #1
 8003360:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	187b      	adds	r3, r7, r1
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_I2C_MspInit+0x98>)
 8003366:	0019      	movs	r1, r3
 8003368:	0010      	movs	r0, r2
 800336a:	f003 fd3b 	bl	8006de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0389      	lsls	r1, r1, #14
 8003378:	430a      	orrs	r2, r1
 800337a:	61da      	str	r2, [r3, #28]
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_I2C_MspInit+0x94>)
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	039b      	lsls	r3, r3, #14
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b00b      	add	sp, #44	; 0x2c
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	40005400 	.word	0x40005400
 8003398:	40021000 	.word	0x40021000
 800339c:	48000400 	.word	0x48000400

080033a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a2:	b09d      	sub	sp, #116	; 0x74
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033a6:	f003 fbe1 	bl	8006b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033aa:	f000 fafb 	bl	80039a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ae:	f7ff ff35 	bl	800321c <MX_GPIO_Init>
  MX_I2C1_Init();
 80033b2:	f7ff ff67 	bl	8003284 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033b6:	f000 fdad 	bl	8003f14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  IMU_Init();
 80033ba:	f002 fbed 	bl	8005b98 <IMU_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // End sequence used after each transmission of data during non-IMU module tests
  char text[10] = "\rEEEEEEE\r\n";
 80033be:	2448      	movs	r4, #72	; 0x48
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	4aee      	ldr	r2, [pc, #952]	; (800377c <main+0x3dc>)
 80033c4:	ca03      	ldmia	r2!, {r0, r1}
 80033c6:	c303      	stmia	r3!, {r0, r1}
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	801a      	strh	r2, [r3, #0]
  // Buffer array for end sequence
  char buf[10] = {0};
 80033cc:	253c      	movs	r5, #60	; 0x3c
 80033ce:	197b      	adds	r3, r7, r5
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2206      	movs	r2, #6
 80033d8:	2100      	movs	r1, #0
 80033da:	0018      	movs	r0, r3
 80033dc:	f005 fee0 	bl	80091a0 <memset>
  // print the end sequence to the buffer array
  sprintf(buf, text, sizeof(text));
 80033e0:	1939      	adds	r1, r7, r4
 80033e2:	197b      	adds	r3, r7, r5
 80033e4:	220a      	movs	r2, #10
 80033e6:	0018      	movs	r0, r3
 80033e8:	f006 f898 	bl	800951c <siprintf>
  // Ready to transmit data sequence used by client and STMs
  char ready[3] = "RDY";
 80033ec:	2338      	movs	r3, #56	; 0x38
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	4ae3      	ldr	r2, [pc, #908]	; (8003780 <main+0x3e0>)
 80033f2:	8811      	ldrh	r1, [r2, #0]
 80033f4:	8019      	strh	r1, [r3, #0]
 80033f6:	7892      	ldrb	r2, [r2, #2]
 80033f8:	709a      	strb	r2, [r3, #2]
  // Ready to receive data from the client
  char gimmeData[3] = "GMD";
 80033fa:	2334      	movs	r3, #52	; 0x34
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	4ae1      	ldr	r2, [pc, #900]	; (8003784 <main+0x3e4>)
 8003400:	8811      	ldrh	r1, [r2, #0]
 8003402:	8019      	strh	r1, [r3, #0]
 8003404:	7892      	ldrb	r2, [r2, #2]
 8003406:	709a      	strb	r2, [r3, #2]
  // Skip receiving this set of data from the client
  char skip[3] = "SKP";
 8003408:	2330      	movs	r3, #48	; 0x30
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	4ade      	ldr	r2, [pc, #888]	; (8003788 <main+0x3e8>)
 800340e:	8811      	ldrh	r1, [r2, #0]
 8003410:	8019      	strh	r1, [r3, #0]
 8003412:	7892      	ldrb	r2, [r2, #2]
 8003414:	709a      	strb	r2, [r3, #2]
  // Buffer used for ready, gimmeData, and skip
  uint8_t buf2[3] = {0};
 8003416:	232c      	movs	r3, #44	; 0x2c
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	4adc      	ldr	r2, [pc, #880]	; (800378c <main+0x3ec>)
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	2202      	movs	r2, #2
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

  // compressed data size
  uint32_t comp_size;
  // padding length for encryption/decryption
  uint8_t padding_len[1] = {0};
 8003426:	2328      	movs	r3, #40	; 0x28
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	4ad9      	ldr	r2, [pc, #868]	; (8003790 <main+0x3f0>)
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
  // int time value
  uint32_t time_val;
  // checksum array
  uint8_t *crc = calloc(4, sizeof(uint8_t));
 8003430:	2101      	movs	r1, #1
 8003432:	2004      	movs	r0, #4
 8003434:	f005 fe4c 	bl	80090d0 <calloc>
 8003438:	0003      	movs	r3, r0
 800343a:	66bb      	str	r3, [r7, #104]	; 0x68

  // Generate encryption key
  uint32_t *key = calloc(KEYSIZE, sizeof(uint32_t));
 800343c:	2104      	movs	r1, #4
 800343e:	2020      	movs	r0, #32
 8003440:	f005 fe46 	bl	80090d0 <calloc>
 8003444:	0003      	movs	r3, r0
 8003446:	667b      	str	r3, [r7, #100]	; 0x64
  key[0] = 0x11;
 8003448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344a:	2211      	movs	r2, #17
 800344c:	601a      	str	r2, [r3, #0]
  key[31] = 0xFF;
 800344e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003450:	337c      	adds	r3, #124	; 0x7c
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	601a      	str	r2, [r3, #0]

  blowfish_init(key, KEYSIZE);
 8003456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003458:	2120      	movs	r1, #32
 800345a:	0018      	movs	r0, r3
 800345c:	f7ff fd0c 	bl	8002e78 <blowfish_init>
  free(key);
 8003460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003462:	0018      	movs	r0, r3
 8003464:	f005 fe68 	bl	8009138 <free>

  // count is used for tracking how many insertions to arr1 have occurred (how much data is in arr1)
  uint32_t count = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	66fb      	str	r3, [r7, #108]	; 0x6c
  // Used for indicating to the client that DATASIZE sensor data has been collected
  char text2[14] = "Data Collected";
 800346c:	2414      	movs	r4, #20
 800346e:	193b      	adds	r3, r7, r4
 8003470:	4ac8      	ldr	r2, [pc, #800]	; (8003794 <main+0x3f4>)
 8003472:	ca23      	ldmia	r2!, {r0, r1, r5}
 8003474:	c323      	stmia	r3!, {r0, r1, r5}
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	801a      	strh	r2, [r3, #0]
  // Buffer used for "Data Collected"
  char buf3[14] = {0};
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	3304      	adds	r3, #4
 8003482:	220a      	movs	r2, #10
 8003484:	2100      	movs	r1, #0
 8003486:	0018      	movs	r0, r3
 8003488:	f005 fe8a 	bl	80091a0 <memset>
  // print "Data Collected" to buf3
  sprintf(buf3, text2, sizeof(text2));
 800348c:	1939      	adds	r1, r7, r4
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	220e      	movs	r2, #14
 8003492:	0018      	movs	r0, r3
 8003494:	f006 f842 	bl	800951c <siprintf>

  // single byte int time array
  uint8_t *time_arr = calloc(4, sizeof(uint8_t));
 8003498:	2101      	movs	r1, #1
 800349a:	2004      	movs	r0, #4
 800349c:	f005 fe18 	bl	80090d0 <calloc>
 80034a0:	0003      	movs	r3, r0
 80034a2:	663b      	str	r3, [r7, #96]	; 0x60

  // Temporary data array 1
  uint8_t *arr1 = calloc(DATASIZE, sizeof(uint8_t));
 80034a4:	2101      	movs	r1, #1
 80034a6:	2084      	movs	r0, #132	; 0x84
 80034a8:	f005 fe12 	bl	80090d0 <calloc>
 80034ac:	0003      	movs	r3, r0
 80034ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  // Temporary data array 2
  uint8_t *arr2 = calloc(DATASIZE, sizeof(uint8_t));
 80034b0:	2101      	movs	r1, #1
 80034b2:	2084      	movs	r0, #132	; 0x84
 80034b4:	f005 fe0c 	bl	80090d0 <calloc>
 80034b8:	0003      	movs	r3, r0
 80034ba:	65bb      	str	r3, [r7, #88]	; 0x58

  while (1)
  {
    IMU_GetQuater();
 80034bc:	f003 f910 	bl	80066e0 <IMU_GetQuater>

    if (count == DATASIZE) {
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	2b84      	cmp	r3, #132	; 0x84
 80034c4:	d000      	beq.n	80034c8 <main+0x128>
 80034c6:	e16d      	b.n	80037a4 <main+0x404>
    	// TRANSMIT the DATA COLLECTED sequence
    	HAL_UART_Transmit(&huart1, (uint8_t*)buf3, sizeof(buf3), 1000);
 80034c8:	23fa      	movs	r3, #250	; 0xfa
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	1d39      	adds	r1, r7, #4
 80034ce:	48b2      	ldr	r0, [pc, #712]	; (8003798 <main+0x3f8>)
 80034d0:	220e      	movs	r2, #14
 80034d2:	f005 f977 	bl	80087c4 <HAL_UART_Transmit>
    	// TRANSMIT the END SEQUENCE
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 80034d6:	23fa      	movs	r3, #250	; 0xfa
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	223c      	movs	r2, #60	; 0x3c
 80034dc:	18b9      	adds	r1, r7, r2
 80034de:	48ae      	ldr	r0, [pc, #696]	; (8003798 <main+0x3f8>)
 80034e0:	220a      	movs	r2, #10
 80034e2:	f005 f96f 	bl	80087c4 <HAL_UART_Transmit>
		HAL_Delay(100);
 80034e6:	2064      	movs	r0, #100	; 0x64
 80034e8:	f003 fba4 	bl	8006c34 <HAL_Delay>

    	while (1)
    	{
			// RECEIVE directive from USER
			HAL_UART_Receive(&huart1, buf2, 3, 500);
 80034ec:	23fa      	movs	r3, #250	; 0xfa
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	262c      	movs	r6, #44	; 0x2c
 80034f2:	19b9      	adds	r1, r7, r6
 80034f4:	48a8      	ldr	r0, [pc, #672]	; (8003798 <main+0x3f8>)
 80034f6:	2203      	movs	r2, #3
 80034f8:	f005 fa0e 	bl	8008918 <HAL_UART_Receive>
			if (memcmp(ready, buf2, 3) == 0) {
 80034fc:	19b9      	adds	r1, r7, r6
 80034fe:	2338      	movs	r3, #56	; 0x38
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2203      	movs	r2, #3
 8003504:	0018      	movs	r0, r3
 8003506:	f005 fe21 	bl	800914c <memcmp>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d000      	beq.n	8003510 <main+0x170>
 800350e:	e08f      	b.n	8003630 <main+0x290>
				// CALCULATE the CRC32 Checksum
				xcrc32(arr1, DATASIZE, crc);
 8003510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	2184      	movs	r1, #132	; 0x84
 8003516:	0018      	movs	r0, r3
 8003518:	f000 fbee 	bl	8003cf8 <xcrc32>
				// TRANSMIT the CRC32 Checksum
				HAL_UART_Transmit(&huart1, crc, 4, 1000);
 800351c:	23fa      	movs	r3, #250	; 0xfa
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003522:	489d      	ldr	r0, [pc, #628]	; (8003798 <main+0x3f8>)
 8003524:	2204      	movs	r2, #4
 8003526:	f005 f94d 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 800352a:	23fa      	movs	r3, #250	; 0xfa
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	243c      	movs	r4, #60	; 0x3c
 8003530:	1939      	adds	r1, r7, r4
 8003532:	4899      	ldr	r0, [pc, #612]	; (8003798 <main+0x3f8>)
 8003534:	220a      	movs	r2, #10
 8003536:	f005 f945 	bl	80087c4 <HAL_UART_Transmit>
				HAL_Delay(100);
 800353a:	2064      	movs	r0, #100	; 0x64
 800353c:	f003 fb7a 	bl	8006c34 <HAL_Delay>

				// COMPRESS the data
				Compress(arr1, DATASIZE, arr2);
 8003540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	2184      	movs	r1, #132	; 0x84
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fa86 	bl	8003a58 <Compress>
				// CALCULATE the compressed size
				comp_size = compressed_size[0] + (compressed_size[1] << 8) + (compressed_size[2] << 16) + (compressed_size[3] << 24);
 800354c:	4b93      	ldr	r3, [pc, #588]	; (800379c <main+0x3fc>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	001a      	movs	r2, r3
 8003552:	4b92      	ldr	r3, [pc, #584]	; (800379c <main+0x3fc>)
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	18d2      	adds	r2, r2, r3
 800355a:	4b90      	ldr	r3, [pc, #576]	; (800379c <main+0x3fc>)
 800355c:	789b      	ldrb	r3, [r3, #2]
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	4b8e      	ldr	r3, [pc, #568]	; (800379c <main+0x3fc>)
 8003564:	78db      	ldrb	r3, [r3, #3]
 8003566:	061b      	lsls	r3, r3, #24
 8003568:	18d3      	adds	r3, r2, r3
 800356a:	657b      	str	r3, [r7, #84]	; 0x54
				// ENCRYPT the data
				padding_len[0] = Encrypt(arr2, comp_size, arr1);
 800356c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800356e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003572:	0018      	movs	r0, r3
 8003574:	f000 fb48 	bl	8003c08 <Encrypt>
 8003578:	0003      	movs	r3, r0
 800357a:	001a      	movs	r2, r3
 800357c:	2528      	movs	r5, #40	; 0x28
 800357e:	197b      	adds	r3, r7, r5
 8003580:	701a      	strb	r2, [r3, #0]

				// TRANSMIT the encrypted DATA
				HAL_UART_Transmit(&huart1, arr1, DATASIZE + padding_len[0], 5000);
 8003582:	197b      	adds	r3, r7, r5
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	3384      	adds	r3, #132	; 0x84
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b84      	ldr	r3, [pc, #528]	; (80037a0 <main+0x400>)
 800358e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003590:	4881      	ldr	r0, [pc, #516]	; (8003798 <main+0x3f8>)
 8003592:	f005 f917 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 8003596:	23fa      	movs	r3, #250	; 0xfa
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	1939      	adds	r1, r7, r4
 800359c:	487e      	ldr	r0, [pc, #504]	; (8003798 <main+0x3f8>)
 800359e:	220a      	movs	r2, #10
 80035a0:	f005 f910 	bl	80087c4 <HAL_UART_Transmit>
				HAL_Delay(100);
 80035a4:	2064      	movs	r0, #100	; 0x64
 80035a6:	f003 fb45 	bl	8006c34 <HAL_Delay>

				// TRANSMIT the COMPRESSED SIZE data
				HAL_UART_Transmit(&huart1, compressed_size, 4, 1000);
 80035aa:	23fa      	movs	r3, #250	; 0xfa
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	497b      	ldr	r1, [pc, #492]	; (800379c <main+0x3fc>)
 80035b0:	4879      	ldr	r0, [pc, #484]	; (8003798 <main+0x3f8>)
 80035b2:	2204      	movs	r2, #4
 80035b4:	f005 f906 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 80035b8:	23fa      	movs	r3, #250	; 0xfa
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	1939      	adds	r1, r7, r4
 80035be:	4876      	ldr	r0, [pc, #472]	; (8003798 <main+0x3f8>)
 80035c0:	220a      	movs	r2, #10
 80035c2:	f005 f8ff 	bl	80087c4 <HAL_UART_Transmit>
				HAL_Delay(100);
 80035c6:	2064      	movs	r0, #100	; 0x64
 80035c8:	f003 fb34 	bl	8006c34 <HAL_Delay>

				// TRANSMIT the PADDING LENGTH data
				HAL_UART_Transmit(&huart1, padding_len, 1, 1000);
 80035cc:	23fa      	movs	r3, #250	; 0xfa
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	1979      	adds	r1, r7, r5
 80035d2:	4871      	ldr	r0, [pc, #452]	; (8003798 <main+0x3f8>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	f005 f8f5 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 80035da:	23fa      	movs	r3, #250	; 0xfa
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	1939      	adds	r1, r7, r4
 80035e0:	486d      	ldr	r0, [pc, #436]	; (8003798 <main+0x3f8>)
 80035e2:	220a      	movs	r2, #10
 80035e4:	f005 f8ee 	bl	80087c4 <HAL_UART_Transmit>

				// Reset all arrays and variables in preparation for the next iteration
				memset(buf2, 0, sizeof(buf2));
 80035e8:	19bb      	adds	r3, r7, r6
 80035ea:	2203      	movs	r2, #3
 80035ec:	2100      	movs	r1, #0
 80035ee:	0018      	movs	r0, r3
 80035f0:	f005 fdd6 	bl	80091a0 <memset>
				memset(compressed_size, 0, 4);
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <main+0x3fc>)
 80035f6:	2204      	movs	r2, #4
 80035f8:	2100      	movs	r1, #0
 80035fa:	0018      	movs	r0, r3
 80035fc:	f005 fdd0 	bl	80091a0 <memset>
 8003600:	197b      	adds	r3, r7, r5
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
				memset(padding_len, 0, 1);
				memset(arr1, 0, DATASIZE);
 8003606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003608:	2284      	movs	r2, #132	; 0x84
 800360a:	2100      	movs	r1, #0
 800360c:	0018      	movs	r0, r3
 800360e:	f005 fdc7 	bl	80091a0 <memset>
				memset(arr2, 0, DATASIZE);
 8003612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003614:	2284      	movs	r2, #132	; 0x84
 8003616:	2100      	movs	r1, #0
 8003618:	0018      	movs	r0, r3
 800361a:	f005 fdc1 	bl	80091a0 <memset>
				memset(crc, 0, 4);
 800361e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003620:	2204      	movs	r2, #4
 8003622:	2100      	movs	r1, #0
 8003624:	0018      	movs	r0, r3
 8003626:	f005 fdbb 	bl	80091a0 <memset>
				comp_size = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	657b      	str	r3, [r7, #84]	; 0x54
 800362e:	e75d      	b.n	80034ec <main+0x14c>
			} else if (memcmp(gimmeData, buf2, 3) == 0) {
 8003630:	232c      	movs	r3, #44	; 0x2c
 8003632:	18f9      	adds	r1, r7, r3
 8003634:	2334      	movs	r3, #52	; 0x34
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2203      	movs	r2, #3
 800363a:	0018      	movs	r0, r3
 800363c:	f005 fd86 	bl	800914c <memcmp>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d166      	bne.n	8003712 <main+0x372>
				// RECEIVE the PADDING LENGTH data
				HAL_UART_Receive(&huart1, padding_len, 1, 1000);
 8003644:	23fa      	movs	r3, #250	; 0xfa
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	2428      	movs	r4, #40	; 0x28
 800364a:	1939      	adds	r1, r7, r4
 800364c:	4852      	ldr	r0, [pc, #328]	; (8003798 <main+0x3f8>)
 800364e:	2201      	movs	r2, #1
 8003650:	f005 f962 	bl	8008918 <HAL_UART_Receive>
				HAL_Delay(100);
 8003654:	2064      	movs	r0, #100	; 0x64
 8003656:	f003 faed 	bl	8006c34 <HAL_Delay>

				// RECEIVE the COMPRESSED SIZE data
				HAL_UART_Receive(&huart1, compressed_size, 4, 1000);
 800365a:	23fa      	movs	r3, #250	; 0xfa
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	494f      	ldr	r1, [pc, #316]	; (800379c <main+0x3fc>)
 8003660:	484d      	ldr	r0, [pc, #308]	; (8003798 <main+0x3f8>)
 8003662:	2204      	movs	r2, #4
 8003664:	f005 f958 	bl	8008918 <HAL_UART_Receive>
				HAL_Delay(100);
 8003668:	2064      	movs	r0, #100	; 0x64
 800366a:	f003 fae3 	bl	8006c34 <HAL_Delay>

				// CALCULATE THE COMPRESSED DATA SIZE
				comp_size = compressed_size[0] + (compressed_size[1] << 8) + (compressed_size[2] << 16) + (compressed_size[3] << 24);
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <main+0x3fc>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	001a      	movs	r2, r3
 8003674:	4b49      	ldr	r3, [pc, #292]	; (800379c <main+0x3fc>)
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	18d2      	adds	r2, r2, r3
 800367c:	4b47      	ldr	r3, [pc, #284]	; (800379c <main+0x3fc>)
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	18d2      	adds	r2, r2, r3
 8003684:	4b45      	ldr	r3, [pc, #276]	; (800379c <main+0x3fc>)
 8003686:	78db      	ldrb	r3, [r3, #3]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	657b      	str	r3, [r7, #84]	; 0x54

				// RECEIVE the encrypted DATA
				HAL_UART_Receive(&huart1, arr1, comp_size + padding_len[0], 5000);
 800368e:	193b      	adds	r3, r7, r4
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b29a      	uxth	r2, r3
 8003694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003696:	b29b      	uxth	r3, r3
 8003698:	18d3      	adds	r3, r2, r3
 800369a:	b29a      	uxth	r2, r3
 800369c:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <main+0x400>)
 800369e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80036a0:	483d      	ldr	r0, [pc, #244]	; (8003798 <main+0x3f8>)
 80036a2:	f005 f939 	bl	8008918 <HAL_UART_Receive>

				// DECRYPT the DATA
				Decrypt(arr1, comp_size, padding_len[0], arr2);
 80036a6:	193b      	adds	r3, r7, r4
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80036b0:	f000 fafc 	bl	8003cac <Decrypt>
				// DECOMPRESS the DATA
				Decompress(arr2, DATASIZE, comp_size, arr1);
 80036b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80036ba:	2184      	movs	r1, #132	; 0x84
 80036bc:	f000 fa3a 	bl	8003b34 <Decompress>

				// TRANSMIT the decompressed DATA
				HAL_UART_Transmit(&huart1, arr1, DATASIZE, 5000);
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <main+0x400>)
 80036c2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80036c4:	4834      	ldr	r0, [pc, #208]	; (8003798 <main+0x3f8>)
 80036c6:	2284      	movs	r2, #132	; 0x84
 80036c8:	f005 f87c 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 80036cc:	23fa      	movs	r3, #250	; 0xfa
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	243c      	movs	r4, #60	; 0x3c
 80036d2:	1939      	adds	r1, r7, r4
 80036d4:	4830      	ldr	r0, [pc, #192]	; (8003798 <main+0x3f8>)
 80036d6:	220a      	movs	r2, #10
 80036d8:	f005 f874 	bl	80087c4 <HAL_UART_Transmit>
				HAL_Delay(100);
 80036dc:	2064      	movs	r0, #100	; 0x64
 80036de:	f003 faa9 	bl	8006c34 <HAL_Delay>

				// CALCULATE the CRC32 checksum
				xcrc32(arr1, DATASIZE, crc);
 80036e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e6:	2184      	movs	r1, #132	; 0x84
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 fb05 	bl	8003cf8 <xcrc32>
				// TRANSMIT the CRC32 checksum
				HAL_UART_Transmit(&huart1, crc, 4, 1000);
 80036ee:	23fa      	movs	r3, #250	; 0xfa
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036f4:	4828      	ldr	r0, [pc, #160]	; (8003798 <main+0x3f8>)
 80036f6:	2204      	movs	r2, #4
 80036f8:	f005 f864 	bl	80087c4 <HAL_UART_Transmit>
				// TRANSMIT the END SEQUENCE
				HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
 80036fc:	23fa      	movs	r3, #250	; 0xfa
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	1939      	adds	r1, r7, r4
 8003702:	4825      	ldr	r0, [pc, #148]	; (8003798 <main+0x3f8>)
 8003704:	220a      	movs	r2, #10
 8003706:	f005 f85d 	bl	80087c4 <HAL_UART_Transmit>
				HAL_Delay(100);
 800370a:	2064      	movs	r0, #100	; 0x64
 800370c:	f003 fa92 	bl	8006c34 <HAL_Delay>
				break;
 8003710:	e00b      	b.n	800372a <main+0x38a>
			} else if (memcmp(skip, buf2, 3) == 0) {
 8003712:	232c      	movs	r3, #44	; 0x2c
 8003714:	18f9      	adds	r1, r7, r3
 8003716:	2330      	movs	r3, #48	; 0x30
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2203      	movs	r2, #3
 800371c:	0018      	movs	r0, r3
 800371e:	f005 fd15 	bl	800914c <memcmp>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d000      	beq.n	8003728 <main+0x388>
			HAL_UART_Receive(&huart1, buf2, 3, 500);
 8003726:	e6e1      	b.n	80034ec <main+0x14c>
				break;
 8003728:	46c0      	nop			; (mov r8, r8)
			}
    	}
    	// Reset all arrays and variables in preparation for the next iteration
    	memset(buf2, 0, sizeof(buf2));
 800372a:	232c      	movs	r3, #44	; 0x2c
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2203      	movs	r2, #3
 8003730:	2100      	movs	r1, #0
 8003732:	0018      	movs	r0, r3
 8003734:	f005 fd34 	bl	80091a0 <memset>
		memset(compressed_size, 0, 4);
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <main+0x3fc>)
 800373a:	2204      	movs	r2, #4
 800373c:	2100      	movs	r1, #0
 800373e:	0018      	movs	r0, r3
 8003740:	f005 fd2e 	bl	80091a0 <memset>
 8003744:	2328      	movs	r3, #40	; 0x28
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
		memset(padding_len, 0, 1);
		memset(arr1, 0, DATASIZE);
 800374c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374e:	2284      	movs	r2, #132	; 0x84
 8003750:	2100      	movs	r1, #0
 8003752:	0018      	movs	r0, r3
 8003754:	f005 fd24 	bl	80091a0 <memset>
		memset(arr2, 0, DATASIZE);
 8003758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375a:	2284      	movs	r2, #132	; 0x84
 800375c:	2100      	movs	r1, #0
 800375e:	0018      	movs	r0, r3
 8003760:	f005 fd1e 	bl	80091a0 <memset>
		memset(crc, 0, 4);
 8003764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003766:	2204      	movs	r2, #4
 8003768:	2100      	movs	r1, #0
 800376a:	0018      	movs	r0, r3
 800376c:	f005 fd18 	bl	80091a0 <memset>
		comp_size = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	657b      	str	r3, [r7, #84]	; 0x54
		count = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003778:	e6a0      	b.n	80034bc <main+0x11c>
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	0800a858 	.word	0x0800a858
 8003780:	0800a864 	.word	0x0800a864
 8003784:	0800a868 	.word	0x0800a868
 8003788:	0800a86c 	.word	0x0800a86c
 800378c:	0800a870 	.word	0x0800a870
 8003790:	0800a874 	.word	0x0800a874
 8003794:	0800a878 	.word	0x0800a878
 8003798:	20000ce0 	.word	0x20000ce0
 800379c:	20000594 	.word	0x20000594
 80037a0:	00001388 	.word	0x00001388
    } else {
    	// READ TIME DATA
		time_val = time(0);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f005 fed9 	bl	800955c <time>
 80037aa:	0002      	movs	r2, r0
 80037ac:	000b      	movs	r3, r1
 80037ae:	0013      	movs	r3, r2
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
		memcpy(time_arr, &time_val, sizeof(uint32_t));
 80037b2:	2324      	movs	r3, #36	; 0x24
 80037b4:	18f9      	adds	r1, r7, r3
 80037b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b8:	2204      	movs	r2, #4
 80037ba:	0018      	movs	r0, r3
 80037bc:	f005 fcd4 	bl	8009168 <memcpy>
		arr1[count++] = time_arr[0];
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	701a      	strb	r2, [r3, #0]
		arr1[count++] = time_arr[1];
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037dc:	7852      	ldrb	r2, [r2, #1]
 80037de:	701a      	strb	r2, [r3, #0]
		arr1[count++] = time_arr[2];
 80037e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ec:	7892      	ldrb	r2, [r2, #2]
 80037ee:	701a      	strb	r2, [r3, #0]
		arr1[count++] = time_arr[3];
 80037f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037f8:	18d3      	adds	r3, r2, r3
 80037fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fc:	78d2      	ldrb	r2, [r2, #3]
 80037fe:	701a      	strb	r2, [r3, #0]
		// READ ACCELERATION DATA
		arr1[count++] = (accel[0] >> 8) & 0x00FF;
 8003800:	4b65      	ldr	r3, [pc, #404]	; (8003998 <main+0x5f8>)
 8003802:	2200      	movs	r2, #0
 8003804:	5e9b      	ldrsh	r3, [r3, r2]
 8003806:	121b      	asrs	r3, r3, #8
 8003808:	b219      	sxth	r1, r3
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003812:	18d3      	adds	r3, r2, r3
 8003814:	b2ca      	uxtb	r2, r1
 8003816:	701a      	strb	r2, [r3, #0]
		arr1[count++] = accel[0] & 0x00FF;
 8003818:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <main+0x5f8>)
 800381a:	2100      	movs	r1, #0
 800381c:	5e59      	ldrsh	r1, [r3, r1]
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003826:	18d3      	adds	r3, r2, r3
 8003828:	b2ca      	uxtb	r2, r1
 800382a:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (accel[1] >> 8) & 0x00FF;
 800382c:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <main+0x5f8>)
 800382e:	2202      	movs	r2, #2
 8003830:	5e9b      	ldrsh	r3, [r3, r2]
 8003832:	121b      	asrs	r3, r3, #8
 8003834:	b219      	sxth	r1, r3
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800383c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800383e:	18d3      	adds	r3, r2, r3
 8003840:	b2ca      	uxtb	r2, r1
 8003842:	701a      	strb	r2, [r3, #0]
		arr1[count++] = accel[1] & 0x00FF;
 8003844:	4b54      	ldr	r3, [pc, #336]	; (8003998 <main+0x5f8>)
 8003846:	2102      	movs	r1, #2
 8003848:	5e59      	ldrsh	r1, [r3, r1]
 800384a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003852:	18d3      	adds	r3, r2, r3
 8003854:	b2ca      	uxtb	r2, r1
 8003856:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (accel[2] >> 8) & 0x00FF;
 8003858:	4b4f      	ldr	r3, [pc, #316]	; (8003998 <main+0x5f8>)
 800385a:	2204      	movs	r2, #4
 800385c:	5e9b      	ldrsh	r3, [r3, r2]
 800385e:	121b      	asrs	r3, r3, #8
 8003860:	b219      	sxth	r1, r3
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800386a:	18d3      	adds	r3, r2, r3
 800386c:	b2ca      	uxtb	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
		arr1[count++] = accel[2] & 0x00FF;
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <main+0x5f8>)
 8003872:	2104      	movs	r1, #4
 8003874:	5e59      	ldrsh	r1, [r3, r1]
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800387c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800387e:	18d3      	adds	r3, r2, r3
 8003880:	b2ca      	uxtb	r2, r1
 8003882:	701a      	strb	r2, [r3, #0]
		// READ GYROSCOPE DATA
		arr1[count++] = (gyro[0] >> 8) & 0x00FF;
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <main+0x5fc>)
 8003886:	2200      	movs	r2, #0
 8003888:	5e9b      	ldrsh	r3, [r3, r2]
 800388a:	121b      	asrs	r3, r3, #8
 800388c:	b219      	sxth	r1, r3
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003896:	18d3      	adds	r3, r2, r3
 8003898:	b2ca      	uxtb	r2, r1
 800389a:	701a      	strb	r2, [r3, #0]
		arr1[count++] = gyro[0] & 0x00FF;
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <main+0x5fc>)
 800389e:	2100      	movs	r1, #0
 80038a0:	5e59      	ldrsh	r1, [r3, r1]
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	b2ca      	uxtb	r2, r1
 80038ae:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (gyro[1] >> 8) & 0x00FF;
 80038b0:	4b3a      	ldr	r3, [pc, #232]	; (800399c <main+0x5fc>)
 80038b2:	2202      	movs	r2, #2
 80038b4:	5e9b      	ldrsh	r3, [r3, r2]
 80038b6:	121b      	asrs	r3, r3, #8
 80038b8:	b219      	sxth	r1, r3
 80038ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	b2ca      	uxtb	r2, r1
 80038c6:	701a      	strb	r2, [r3, #0]
		arr1[count++] = gyro[1] & 0x00FF;
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <main+0x5fc>)
 80038ca:	2102      	movs	r1, #2
 80038cc:	5e59      	ldrsh	r1, [r3, r1]
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	b2ca      	uxtb	r2, r1
 80038da:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (gyro[2] >> 8) & 0x00FF;
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <main+0x5fc>)
 80038de:	2204      	movs	r2, #4
 80038e0:	5e9b      	ldrsh	r3, [r3, r2]
 80038e2:	121b      	asrs	r3, r3, #8
 80038e4:	b219      	sxth	r1, r3
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	b2ca      	uxtb	r2, r1
 80038f2:	701a      	strb	r2, [r3, #0]
		arr1[count++] = gyro[2] & 0x00FF;
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <main+0x5fc>)
 80038f6:	2104      	movs	r1, #4
 80038f8:	5e59      	ldrsh	r1, [r3, r1]
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	b2ca      	uxtb	r2, r1
 8003906:	701a      	strb	r2, [r3, #0]
		// READ MAGNETOMETER DATA
		arr1[count++] = (magn[0] >> 8) & 0x00FF;
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <main+0x600>)
 800390a:	2200      	movs	r2, #0
 800390c:	5e9b      	ldrsh	r3, [r3, r2]
 800390e:	121b      	asrs	r3, r3, #8
 8003910:	b219      	sxth	r1, r3
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003918:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	b2ca      	uxtb	r2, r1
 800391e:	701a      	strb	r2, [r3, #0]
		arr1[count++] = magn[0] & 0x00FF;
 8003920:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <main+0x600>)
 8003922:	2100      	movs	r1, #0
 8003924:	5e59      	ldrsh	r1, [r3, r1]
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800392c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800392e:	18d3      	adds	r3, r2, r3
 8003930:	b2ca      	uxtb	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (magn[1] >> 8) & 0x00FF;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <main+0x600>)
 8003936:	2202      	movs	r2, #2
 8003938:	5e9b      	ldrsh	r3, [r3, r2]
 800393a:	121b      	asrs	r3, r3, #8
 800393c:	b219      	sxth	r1, r3
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003946:	18d3      	adds	r3, r2, r3
 8003948:	b2ca      	uxtb	r2, r1
 800394a:	701a      	strb	r2, [r3, #0]
		arr1[count++] = magn[1] & 0x00FF;
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <main+0x600>)
 800394e:	2102      	movs	r1, #2
 8003950:	5e59      	ldrsh	r1, [r3, r1]
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800395a:	18d3      	adds	r3, r2, r3
 800395c:	b2ca      	uxtb	r2, r1
 800395e:	701a      	strb	r2, [r3, #0]
		arr1[count++] = (magn[2] >> 8) & 0x00FF;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <main+0x600>)
 8003962:	2204      	movs	r2, #4
 8003964:	5e9b      	ldrsh	r3, [r3, r2]
 8003966:	121b      	asrs	r3, r3, #8
 8003968:	b219      	sxth	r1, r3
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	b2ca      	uxtb	r2, r1
 8003976:	701a      	strb	r2, [r3, #0]
		arr1[count++] = magn[2] & 0x00FF;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <main+0x600>)
 800397a:	2104      	movs	r1, #4
 800397c:	5e59      	ldrsh	r1, [r3, r1]
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	b2ca      	uxtb	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]

		// DELAY READING FROM THE SENSOR FOR 500ms
		DEV_Delay_ms(500);
 800398c:	23fa      	movs	r3, #250	; 0xfa
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	0018      	movs	r0, r3
 8003992:	f003 f94f 	bl	8006c34 <HAL_Delay>
    IMU_GetQuater();
 8003996:	e591      	b.n	80034bc <main+0x11c>
 8003998:	20000584 	.word	0x20000584
 800399c:	2000058c 	.word	0x2000058c
 80039a0:	2000057c 	.word	0x2000057c

080039a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b097      	sub	sp, #92	; 0x5c
 80039a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039aa:	2428      	movs	r4, #40	; 0x28
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	0018      	movs	r0, r3
 80039b0:	2330      	movs	r3, #48	; 0x30
 80039b2:	001a      	movs	r2, r3
 80039b4:	2100      	movs	r1, #0
 80039b6:	f005 fbf3 	bl	80091a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039ba:	2318      	movs	r3, #24
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	0018      	movs	r0, r3
 80039c0:	2310      	movs	r3, #16
 80039c2:	001a      	movs	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	f005 fbeb 	bl	80091a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	0018      	movs	r0, r3
 80039ce:	2314      	movs	r3, #20
 80039d0:	001a      	movs	r2, r3
 80039d2:	2100      	movs	r1, #0
 80039d4:	f005 fbe4 	bl	80091a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039d8:	0021      	movs	r1, r4
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2202      	movs	r2, #2
 80039de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2201      	movs	r2, #1
 80039e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2210      	movs	r2, #16
 80039ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2200      	movs	r2, #0
 80039f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	0018      	movs	r0, r3
 80039f6:	f004 f947 	bl	8007c88 <HAL_RCC_OscConfig>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d001      	beq.n	8003a02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80039fe:	f000 f9a7 	bl	8003d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a02:	2118      	movs	r1, #24
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	2207      	movs	r2, #7
 8003a08:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a10:	187b      	adds	r3, r7, r1
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2100      	movs	r1, #0
 8003a20:	0018      	movs	r0, r3
 8003a22:	f004 fc4b 	bl	80082bc <HAL_RCC_ClockConfig>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003a2a:	f000 f991 	bl	8003d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003a2e:	1d3b      	adds	r3, r7, #4
 8003a30:	2221      	movs	r2, #33	; 0x21
 8003a32:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a3a:	1d3b      	adds	r3, r7, #4
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	0018      	movs	r0, r3
 8003a44:	f004 fd8c 	bl	8008560 <HAL_RCCEx_PeriphCLKConfig>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d001      	beq.n	8003a50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003a4c:	f000 f980 	bl	8003d50 <Error_Handler>
  }
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b017      	add	sp, #92	; 0x5c
 8003a56:	bd90      	pop	{r4, r7, pc}

08003a58 <Compress>:

/* USER CODE BEGIN 4 */
void Compress(uint8_t *input, uint32_t input_size, uint8_t *output)
{
 8003a58:	b5b0      	push	{r4, r5, r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
    static heatshrink_encoder hse;

    heatshrink_encoder_reset(&hse);
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <Compress+0xd4>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fe32 	bl	80046d0 <heatshrink_encoder_reset>
    size_t comp_sz = input_size + (input_size/2) + 4;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	085a      	lsrs	r2, r3, #1
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	18d3      	adds	r3, r2, r3
 8003a74:	3304      	adds	r3, #4
 8003a76:	623b      	str	r3, [r7, #32]
    uint8_t *comp = calloc(input_size, sizeof(uint8_t));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f005 fb27 	bl	80090d0 <calloc>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61fb      	str	r3, [r7, #28]

    size_t count = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
    uint32_t sunk = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t polled = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
    while (sunk < input_size) {
 8003a92:	e036      	b.n	8003b02 <Compress+0xaa>
        heatshrink_encoder_sink(&hse, &input[sunk], input_size - sunk, &count);
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	18d1      	adds	r1, r2, r3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	1ad2      	subs	r2, r2, r3
 8003aa0:	2314      	movs	r3, #20
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	4821      	ldr	r0, [pc, #132]	; (8003b2c <Compress+0xd4>)
 8003aa6:	f000 fe45 	bl	8004734 <heatshrink_encoder_sink>
        sunk += count;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
        if (sunk == input_size) {
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d103      	bne.n	8003ac2 <Compress+0x6a>
            heatshrink_encoder_finish(&hse);
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <Compress+0xd4>)
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 ff53 	bl	8004968 <heatshrink_encoder_finish>
        }

        HSE_poll_res pres;
        do {
            pres = heatshrink_encoder_poll(&hse, &comp[polled], comp_sz - polled, &count);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	18d1      	adds	r1, r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6a3a      	ldr	r2, [r7, #32]
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	251b      	movs	r5, #27
 8003ad0:	197c      	adds	r4, r7, r5
 8003ad2:	2314      	movs	r3, #20
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	4815      	ldr	r0, [pc, #84]	; (8003b2c <Compress+0xd4>)
 8003ad8:	f000 fea2 	bl	8004820 <heatshrink_encoder_poll>
 8003adc:	0003      	movs	r3, r0
 8003ade:	7023      	strb	r3, [r4, #0]
            polled += count;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	18d3      	adds	r3, r2, r3
 8003ae6:	613b      	str	r3, [r7, #16]
        } while (pres == HSER_POLL_MORE);
 8003ae8:	197b      	adds	r3, r7, r5
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b25b      	sxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d0e7      	beq.n	8003ac2 <Compress+0x6a>
        if (sunk == input_size) {
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d103      	bne.n	8003b02 <Compress+0xaa>
            heatshrink_encoder_finish(&hse);
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <Compress+0xd4>)
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 ff33 	bl	8004968 <heatshrink_encoder_finish>
    while (sunk < input_size) {
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d3c4      	bcc.n	8003a94 <Compress+0x3c>
 8003b0a:	693a      	ldr	r2, [r7, #16]
        }
    }

    memmove(compressed_size, &polled, sizeof(uint32_t));
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <Compress+0xd8>)
 8003b0e:	601a      	str	r2, [r3, #0]

    memcpy(output, comp, polled);
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	69f9      	ldr	r1, [r7, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f005 fb26 	bl	8009168 <memcpy>
    free(comp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f005 fb0a 	bl	8009138 <free>
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b00a      	add	sp, #40	; 0x28
 8003b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b2c:	20000598 	.word	0x20000598
 8003b30:	20000594 	.word	0x20000594

08003b34 <Decompress>:

void Decompress(uint8_t *input, uint32_t input_size, uint32_t comp_size, uint8_t *output)
{
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
    static heatshrink_decoder hsd;
    heatshrink_decoder_reset(&hsd);
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <Decompress+0xd0>)
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 fa63 	bl	8004010 <heatshrink_decoder_reset>

    size_t decomp_sz = input_size + (input_size/2) + 4;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	085a      	lsrs	r2, r3, #1
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	3304      	adds	r3, #4
 8003b54:	61fb      	str	r3, [r7, #28]
    uint8_t *decomp = calloc(input_size, sizeof(uint8_t));
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f005 fab8 	bl	80090d0 <calloc>
 8003b60:	0003      	movs	r3, r0
 8003b62:	61bb      	str	r3, [r7, #24]
    uint32_t sunk = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t polled = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	623b      	str	r3, [r7, #32]
    size_t count = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]

    while (sunk < comp_size) {
 8003b70:	e036      	b.n	8003be0 <Decompress+0xac>
        heatshrink_decoder_sink(&hsd, &input[sunk], comp_size - sunk, &count);
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	18d1      	adds	r1, r2, r3
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	2310      	movs	r3, #16
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	4820      	ldr	r0, [pc, #128]	; (8003c04 <Decompress+0xd0>)
 8003b84:	f000 fa73 	bl	800406e <heatshrink_decoder_sink>
        sunk += count;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
        if (sunk == comp_size) {
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d103      	bne.n	8003ba0 <Decompress+0x6c>
            heatshrink_decoder_finish(&hsd);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <Decompress+0xd0>)
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 fd52 	bl	8004644 <heatshrink_decoder_finish>
        }

        HSD_poll_res pres;
        do {
            pres = heatshrink_decoder_poll(&hsd, &decomp[polled],decomp_sz - polled, &count);
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	18d1      	adds	r1, r2, r3
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	1ad2      	subs	r2, r2, r3
 8003bac:	2517      	movs	r5, #23
 8003bae:	197c      	adds	r4, r7, r5
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	4813      	ldr	r0, [pc, #76]	; (8003c04 <Decompress+0xd0>)
 8003bb6:	f000 fa9d 	bl	80040f4 <heatshrink_decoder_poll>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	7023      	strb	r3, [r4, #0]
            polled += count;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	623b      	str	r3, [r7, #32]
        } while (pres == HSDR_POLL_MORE);
 8003bc6:	197b      	adds	r3, r7, r5
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d0e7      	beq.n	8003ba0 <Decompress+0x6c>
        if (sunk == comp_size) {
 8003bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d103      	bne.n	8003be0 <Decompress+0xac>
            heatshrink_decoder_finish(&hsd);
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <Decompress+0xd0>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 fd32 	bl	8004644 <heatshrink_decoder_finish>
    while (sunk < comp_size) {
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3c4      	bcc.n	8003b72 <Decompress+0x3e>
        }
    }

    memcpy(output, decomp, polled);
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f005 faba 	bl	8009168 <memcpy>
    free(decomp);
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f005 fa9e 	bl	8009138 <free>
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b00a      	add	sp, #40	; 0x28
 8003c02:	bdb0      	pop	{r4, r5, r7, pc}
 8003c04:	20000bac 	.word	0x20000bac

08003c08 <Encrypt>:

uint8_t Encrypt(uint8_t *input, uint32_t input_size, uint8_t *output) {
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b089      	sub	sp, #36	; 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
	uint8_t padding = input_size%8;  // Get trailing bytes
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	201f      	movs	r0, #31
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	2107      	movs	r1, #7
 8003c1e:	400a      	ands	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]

	// Determine how many bytes should be added to allow for complete encryption
	if (padding != 0) {
 8003c22:	183b      	adds	r3, r7, r0
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <Encrypt+0x2e>
		padding = 8 - padding;
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	183a      	adds	r2, r7, r0
 8003c2e:	7812      	ldrb	r2, [r2, #0]
 8003c30:	2108      	movs	r1, #8
 8003c32:	1a8a      	subs	r2, r1, r2
 8003c34:	701a      	strb	r2, [r3, #0]
	}

	// Adding padding to the data
	uint8_t *temp_input = calloc(input_size + padding, sizeof(uint8_t));
 8003c36:	241f      	movs	r4, #31
 8003c38:	193b      	adds	r3, r7, r4
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	18d3      	adds	r3, r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	0018      	movs	r0, r3
 8003c44:	f005 fa44 	bl	80090d0 <calloc>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	61bb      	str	r3, [r7, #24]
	memmove(temp_input, input, input_size);
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	68f9      	ldr	r1, [r7, #12]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f005 fa91 	bl	800917a <memmove>

	uint8_t *encrypted = calloc(input_size + padding, sizeof(uint8_t));
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	2101      	movs	r1, #1
 8003c62:	0018      	movs	r0, r3
 8003c64:	f005 fa34 	bl	80090d0 <calloc>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	617b      	str	r3, [r7, #20]
	blowfish_encrypt(temp_input, input_size + padding, encrypted);
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	18d1      	adds	r1, r2, r3
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff f9bf 	bl	8002ffc <blowfish_encrypt>
	free(temp_input);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f005 fa59 	bl	8009138 <free>

	memmove(output, encrypted, input_size + padding);
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	18d2      	adds	r2, r2, r3
 8003c8e:	6979      	ldr	r1, [r7, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f005 fa71 	bl	800917a <memmove>
	free(encrypted);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f005 fa4c 	bl	8009138 <free>

	return padding;
 8003ca0:	193b      	adds	r3, r7, r4
 8003ca2:	781b      	ldrb	r3, [r3, #0]
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b009      	add	sp, #36	; 0x24
 8003caa:	bd90      	pop	{r4, r7, pc}

08003cac <Decrypt>:

void Decrypt(uint8_t *input, uint32_t input_size, uint8_t padding, uint8_t *output) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	1dfb      	adds	r3, r7, #7
 8003cba:	701a      	strb	r2, [r3, #0]
	uint8_t *decrypted = calloc(input_size, sizeof(uint8_t));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	f005 fa05 	bl	80090d0 <calloc>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	617b      	str	r3, [r7, #20]
	blowfish_decrypt(input, input_size, decrypted);
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff fa1b 	bl	800310c <blowfish_decrypt>
	memmove(output, decrypted, input_size + padding);
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	18d2      	adds	r2, r2, r3
 8003cde:	6979      	ldr	r1, [r7, #20]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f005 fa49 	bl	800917a <memmove>
	free(decrypted);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f005 fa24 	bl	8009138 <free>
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b006      	add	sp, #24
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <xcrc32>:

void xcrc32(const uint8_t *buf, uint32_t len, uint8_t *output)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
    uint32_t crc = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
    while (len--)
 8003d08:	e010      	b.n	8003d2c <xcrc32+0x34>
    {
        crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	021a      	lsls	r2, r3, #8
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	7809      	ldrb	r1, [r1, #0]
 8003d16:	404b      	eors	r3, r1
 8003d18:	21ff      	movs	r1, #255	; 0xff
 8003d1a:	4019      	ands	r1, r3
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <xcrc32+0x54>)
 8003d1e:	0089      	lsls	r1, r1, #2
 8003d20:	58cb      	ldr	r3, [r1, r3]
 8003d22:	4053      	eors	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
        buf++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
    while (len--)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	60ba      	str	r2, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e9      	bne.n	8003d0a <xcrc32+0x12>
    }

    memmove(output, &crc, sizeof(uint32_t));
 8003d36:	2314      	movs	r3, #20
 8003d38:	18f9      	adds	r1, r7, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f005 fa1b 	bl	800917a <memmove>
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	0800a9f0 	.word	0x0800a9f0

08003d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d58:	e7fe      	b.n	8003d58 <Error_Handler+0x8>
	...

08003d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_MspInit+0x44>)
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_MspInit+0x44>)
 8003d68:	2101      	movs	r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_MspInit+0x44>)
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2201      	movs	r2, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_MspInit+0x44>)
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_MspInit+0x44>)
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	0549      	lsls	r1, r1, #21
 8003d84:	430a      	orrs	r2, r1
 8003d86:	61da      	str	r2, [r3, #28]
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_MspInit+0x44>)
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	055b      	lsls	r3, r3, #21
 8003d90:	4013      	ands	r3, r2
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000

08003da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <NMI_Handler+0x4>

08003daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <HardFault_Handler+0x4>

08003db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dc8:	f002 ff18 	bl	8006bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e00a      	b.n	8003dfa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003de4:	e000      	b.n	8003de8 <_read+0x16>
 8003de6:	bf00      	nop
 8003de8:	0001      	movs	r1, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	b2ca      	uxtb	r2, r1
 8003df2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3301      	adds	r3, #1
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	dbf0      	blt.n	8003de4 <_read+0x12>
	}

return len;
 8003e02:	687b      	ldr	r3, [r7, #4]
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e009      	b.n	8003e32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	60ba      	str	r2, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	0018      	movs	r0, r3
 8003e28:	e000      	b.n	8003e2c <_write+0x20>
 8003e2a:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dbf1      	blt.n	8003e1e <_write+0x12>
	}
	return len;
 8003e3a:	687b      	ldr	r3, [r7, #4]
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b006      	add	sp, #24
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_close>:

int _close(int file)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	return -1;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	425b      	negs	r3, r3
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b002      	add	sp, #8
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	0192      	lsls	r2, r2, #6
 8003e68:	605a      	str	r2, [r3, #4]
	return 0;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_isatty>:

int _isatty(int file)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
	return 0;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f005 f90a 	bl	80090e4 <__errno>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	425b      	negs	r3, r3
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	18d2      	adds	r2, r2, r3
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_sbrk+0x64>)
 8003eec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b006      	add	sp, #24
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20002000 	.word	0x20002000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	20000cdc 	.word	0x20000cdc
 8003f04:	20000e40 	.word	0x20000e40

08003f08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f1a:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <MX_USART1_UART_Init+0x5c>)
 8003f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f20:	2296      	movs	r2, #150	; 0x96
 8003f22:	0192      	lsls	r2, r2, #6
 8003f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <MX_USART1_UART_Init+0x58>)
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f004 fbdf 	bl	800871c <HAL_UART_Init>
 8003f5e:	1e03      	subs	r3, r0, #0
 8003f60:	d001      	beq.n	8003f66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003f62:	f7ff fef5 	bl	8003d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000ce0 	.word	0x20000ce0
 8003f70:	40013800 	.word	0x40013800

08003f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b08b      	sub	sp, #44	; 0x2c
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7c:	2414      	movs	r4, #20
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	0018      	movs	r0, r3
 8003f82:	2314      	movs	r3, #20
 8003f84:	001a      	movs	r2, r3
 8003f86:	2100      	movs	r1, #0
 8003f88:	f005 f90a 	bl	80091a0 <memset>
  if(huart->Instance==USART1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_UART_MspInit+0x94>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d133      	bne.n	8003ffe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_UART_MspInit+0x98>)
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <HAL_UART_MspInit+0x98>)
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	01c9      	lsls	r1, r1, #7
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	619a      	str	r2, [r3, #24]
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_UART_MspInit+0x98>)
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	01db      	lsls	r3, r3, #7
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <HAL_UART_MspInit+0x98>)
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_UART_MspInit+0x98>)
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0289      	lsls	r1, r1, #10
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	615a      	str	r2, [r3, #20]
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_UART_MspInit+0x98>)
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	22c0      	movs	r2, #192	; 0xc0
 8003fd2:	00d2      	lsls	r2, r2, #3
 8003fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	0021      	movs	r1, r4
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	2202      	movs	r2, #2
 8003fdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fe4:	187b      	adds	r3, r7, r1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	2201      	movs	r2, #1
 8003fee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff0:	187a      	adds	r2, r7, r1
 8003ff2:	2390      	movs	r3, #144	; 0x90
 8003ff4:	05db      	lsls	r3, r3, #23
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f002 fef3 	bl	8006de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b00b      	add	sp, #44	; 0x2c
 8004004:	bd90      	pop	{r4, r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000

08004010 <heatshrink_decoder_reset>:
#define NO_BITS ((uint16_t)-1)

static uint16_t get_bits(heatshrink_decoder *hsd, uint8_t count);
static void push_byte(heatshrink_decoder *hsd, output_info *oi, uint8_t byte);

void heatshrink_decoder_reset(heatshrink_decoder *hsd) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    size_t buf_sz = 1 << HEATSHRINK_DECODER_WINDOW_BITS(hsd);
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
    size_t input_sz = HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd);
 800401e:	2320      	movs	r3, #32
 8004020:	60bb      	str	r3, [r7, #8]
    memset(hsd->buffers, 0, buf_sz + input_sz);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	330d      	adds	r3, #13
 8004026:	0018      	movs	r0, r3
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	001a      	movs	r2, r3
 8004030:	2100      	movs	r1, #0
 8004032:	f005 f8b5 	bl	80091a0 <memset>
    hsd->state = HSDS_TAG_BIT;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	729a      	strb	r2, [r3, #10]
    hsd->input_size = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	801a      	strh	r2, [r3, #0]
    hsd->input_index = 0;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	805a      	strh	r2, [r3, #2]
    hsd->bit_index = 0x00;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	731a      	strb	r2, [r3, #12]
    hsd->current_byte = 0x00;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	72da      	strb	r2, [r3, #11]
    hsd->output_count = 0;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	809a      	strh	r2, [r3, #4]
    hsd->output_index = 0;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	80da      	strh	r2, [r3, #6]
    hsd->head_index = 0;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	811a      	strh	r2, [r3, #8]
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <heatshrink_decoder_sink>:

HSD_sink_res heatshrink_decoder_sink(heatshrink_decoder *hsd, uint8_t *in_buf, size_t size, size_t *input_size) {
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	603b      	str	r3, [r7, #0]
    if ((hsd == NULL) || (in_buf == NULL) || (input_size == NULL)) {
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <heatshrink_decoder_sink+0x20>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <heatshrink_decoder_sink+0x20>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <heatshrink_decoder_sink+0x26>
        return HSDR_SINK_ERROR_NULL;
 800408e:	2301      	movs	r3, #1
 8004090:	425b      	negs	r3, r3
 8004092:	e02a      	b.n	80040ea <heatshrink_decoder_sink+0x7c>
    }
    size_t rem = HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd) - hsd->input_size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	001a      	movs	r2, r3
 800409a:	2320      	movs	r3, #32
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    if (rem == 0) {
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <heatshrink_decoder_sink+0x42>
        *input_size = 0;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
        return HSDR_SINK_FULL;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e01c      	b.n	80040ea <heatshrink_decoder_sink+0x7c>
    }
    size = rem < size ? rem : size;
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d900      	bls.n	80040ba <heatshrink_decoder_sink+0x4c>
 80040b8:	0013      	movs	r3, r2
 80040ba:	607b      	str	r3, [r7, #4]
    memcpy(&hsd->buffers[hsd->input_size], in_buf, size);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	3305      	adds	r3, #5
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f005 f84b 	bl	8009168 <memcpy>
    hsd->input_size += size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	18d3      	adds	r3, r2, r3
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	801a      	strh	r2, [r3, #0]
    *input_size = size;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]
    return HSDR_SINK_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b006      	add	sp, #24
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <heatshrink_decoder_poll>:
static HSD_state st_backref_index_lsb(heatshrink_decoder *hsd);
static HSD_state st_backref_count_msb(heatshrink_decoder *hsd);
static HSD_state st_backref_count_lsb(heatshrink_decoder *hsd);
static HSD_state st_yield_backref(heatshrink_decoder *hsd, output_info *oi);

HSD_poll_res heatshrink_decoder_poll(heatshrink_decoder *hsd, uint8_t *out_buf, size_t out_buf_size, size_t *output_size) {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
    if ((hsd == NULL) || (out_buf == NULL) || (output_size == NULL)) {
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <heatshrink_decoder_poll+0x20>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <heatshrink_decoder_poll+0x20>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <heatshrink_decoder_poll+0x26>
        return HSDR_POLL_ERROR_NULL;
 8004114:	2301      	movs	r3, #1
 8004116:	425b      	negs	r3, r3
 8004118:	e071      	b.n	80041fe <heatshrink_decoder_poll+0x10a>
    }
    *output_size = 0;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
    output_info oi;
    oi.buf = out_buf;
 8004120:	2110      	movs	r1, #16
 8004122:	187b      	adds	r3, r7, r1
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	601a      	str	r2, [r3, #0]
    oi.buf_size = out_buf_size;
 8004128:	187b      	adds	r3, r7, r1
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	605a      	str	r2, [r3, #4]
    oi.output_size = output_size;
 800412e:	187b      	adds	r3, r7, r1
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	609a      	str	r2, [r3, #8]
    while (1) {
        uint8_t in_state = hsd->state;
 8004134:	211f      	movs	r1, #31
 8004136:	187b      	adds	r3, r7, r1
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	7a92      	ldrb	r2, [r2, #10]
 800413c:	701a      	strb	r2, [r3, #0]
        switch (in_state) {
 800413e:	187b      	adds	r3, r7, r1
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b06      	cmp	r3, #6
 8004144:	d849      	bhi.n	80041da <heatshrink_decoder_poll+0xe6>
 8004146:	009a      	lsls	r2, r3, #2
 8004148:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <heatshrink_decoder_poll+0x114>)
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	469f      	mov	pc, r3
            case HSDS_TAG_BIT:
                hsd->state = st_tag_bit(hsd);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f85a 	bl	800420c <st_tag_bit>
 8004158:	0003      	movs	r3, r0
 800415a:	001a      	movs	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	729a      	strb	r2, [r3, #10]
                break;
 8004160:	e03e      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_YIELD_LITERAL:
                hsd->state = st_yield_literal(hsd, &oi);
 8004162:	2310      	movs	r3, #16
 8004164:	18fa      	adds	r2, r7, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	0011      	movs	r1, r2
 800416a:	0018      	movs	r0, r3
 800416c:	f000 f86e 	bl	800424c <st_yield_literal>
 8004170:	0003      	movs	r3, r0
 8004172:	001a      	movs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	729a      	strb	r2, [r3, #10]
                break;
 8004178:	e032      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_BACKREF_INDEX_MSB:
                hsd->state = st_backref_index_msb(hsd);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f8af 	bl	80042e0 <st_backref_index_msb>
 8004182:	0003      	movs	r3, r0
 8004184:	001a      	movs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	729a      	strb	r2, [r3, #10]
                break;
 800418a:	e029      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_BACKREF_INDEX_LSB:
                hsd->state = st_backref_index_lsb(hsd);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f8d0 	bl	8004334 <st_backref_index_lsb>
 8004194:	0003      	movs	r3, r0
 8004196:	001a      	movs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	729a      	strb	r2, [r3, #10]
                break;
 800419c:	e020      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_BACKREF_COUNT_MSB:
                hsd->state = st_backref_count_msb(hsd);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 f909 	bl	80043b8 <st_backref_count_msb>
 80041a6:	0003      	movs	r3, r0
 80041a8:	001a      	movs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	729a      	strb	r2, [r3, #10]
                break;
 80041ae:	e017      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_BACKREF_COUNT_LSB:
                hsd->state = st_backref_count_lsb(hsd);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 f92a 	bl	800440c <st_backref_count_lsb>
 80041b8:	0003      	movs	r3, r0
 80041ba:	001a      	movs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	729a      	strb	r2, [r3, #10]
                break;
 80041c0:	e00e      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            case HSDS_YIELD_BACKREF:
                hsd->state = st_yield_backref(hsd, &oi);
 80041c2:	2310      	movs	r3, #16
 80041c4:	18fa      	adds	r2, r7, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f954 	bl	8004478 <st_yield_backref>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	729a      	strb	r2, [r3, #10]
                break;
 80041d8:	e002      	b.n	80041e0 <heatshrink_decoder_poll+0xec>
            default:
                return HSDR_POLL_ERROR_UNKNOWN;
 80041da:	2302      	movs	r3, #2
 80041dc:	425b      	negs	r3, r3
 80041de:	e00e      	b.n	80041fe <heatshrink_decoder_poll+0x10a>
        }

        if (hsd->state == in_state) {
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	7a9b      	ldrb	r3, [r3, #10]
 80041e4:	221f      	movs	r2, #31
 80041e6:	18ba      	adds	r2, r7, r2
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d1a2      	bne.n	8004134 <heatshrink_decoder_poll+0x40>
            if (*output_size == out_buf_size) { return HSDR_POLL_MORE; }
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d101      	bne.n	80041fc <heatshrink_decoder_poll+0x108>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <heatshrink_decoder_poll+0x10a>
            return HSDR_POLL_EMPTY;
 80041fc:	2300      	movs	r3, #0
        }
    }
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	b008      	add	sp, #32
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	0800ae08 	.word	0x0800ae08

0800420c <st_tag_bit>:

static HSD_state st_tag_bit(heatshrink_decoder *hsd) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
    uint32_t bits = get_bits(hsd, 1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2101      	movs	r1, #1
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f99b 	bl	8004554 <get_bits>
 800421e:	0003      	movs	r3, r0
 8004220:	60fb      	str	r3, [r7, #12]
    if (bits == NO_BITS) {
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <st_tag_bit+0x3c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <st_tag_bit+0x22>
        return HSDS_TAG_BIT;
 800422a:	2300      	movs	r3, #0
 800422c:	e008      	b.n	8004240 <st_tag_bit+0x34>
    } else if (bits) {
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <st_tag_bit+0x2c>
        return HSDS_YIELD_LITERAL;
 8004234:	2301      	movs	r3, #1
 8004236:	e003      	b.n	8004240 <st_tag_bit+0x34>
    } else if (HEATSHRINK_DECODER_WINDOW_BITS(hsd) > 8) {
        return HSDS_BACKREF_INDEX_MSB;
    } else {
        hsd->output_index = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	80da      	strh	r2, [r3, #6]
        return HSDS_BACKREF_INDEX_LSB;
 800423e:	2303      	movs	r3, #3
    }
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b004      	add	sp, #16
 8004246:	bd80      	pop	{r7, pc}
 8004248:	0000ffff 	.word	0x0000ffff

0800424c <st_yield_literal>:

static HSD_state st_yield_literal(heatshrink_decoder *hsd, output_info *oi) {
 800424c:	b5b0      	push	{r4, r5, r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

    if (*oi->output_size < oi->buf_size) {
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d235      	bcs.n	80042d0 <st_yield_literal+0x84>
        uint16_t byte = get_bits(hsd, 8);
 8004264:	2516      	movs	r5, #22
 8004266:	197c      	adds	r4, r7, r5
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2108      	movs	r1, #8
 800426c:	0018      	movs	r0, r3
 800426e:	f000 f971 	bl	8004554 <get_bits>
 8004272:	0003      	movs	r3, r0
 8004274:	8023      	strh	r3, [r4, #0]
        if (byte == NO_BITS) { return HSDS_YIELD_LITERAL; }
 8004276:	197b      	adds	r3, r7, r5
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <st_yield_literal+0x90>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <st_yield_literal+0x38>
 8004280:	2301      	movs	r3, #1
 8004282:	e026      	b.n	80042d2 <st_yield_literal+0x86>
        uint8_t *buf = &hsd->buffers[HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd)];
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	332d      	adds	r3, #45	; 0x2d
 8004288:	613b      	str	r3, [r7, #16]
        uint16_t mask = (1 << HEATSHRINK_DECODER_WINDOW_BITS(hsd))  - 1;
 800428a:	240e      	movs	r4, #14
 800428c:	193b      	adds	r3, r7, r4
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	801a      	strh	r2, [r3, #0]
        uint8_t c = byte & 0xFF;
 8004292:	200d      	movs	r0, #13
 8004294:	183b      	adds	r3, r7, r0
 8004296:	2216      	movs	r2, #22
 8004298:	18ba      	adds	r2, r7, r2
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	701a      	strb	r2, [r3, #0]
        buf[hsd->head_index++ & mask] = c;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	891b      	ldrh	r3, [r3, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	b291      	uxth	r1, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	8111      	strh	r1, [r2, #8]
 80042aa:	193a      	adds	r2, r7, r4
 80042ac:	8812      	ldrh	r2, [r2, #0]
 80042ae:	4013      	ands	r3, r2
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	001a      	movs	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	183a      	adds	r2, r7, r0
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
        push_byte(hsd, oi, c);
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f9eb 	bl	80046a2 <push_byte>
        return HSDS_TAG_BIT;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <st_yield_literal+0x86>
    } else {
        return HSDS_YIELD_LITERAL;
 80042d0:	2301      	movs	r3, #1
    }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bdb0      	pop	{r4, r5, r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	0000ffff 	.word	0x0000ffff

080042e0 <st_backref_index_msb>:

static HSD_state st_backref_index_msb(heatshrink_decoder *hsd) {
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    uint8_t bit_ct = BACKREF_INDEX_BITS(hsd);
 80042e8:	210f      	movs	r1, #15
 80042ea:	187b      	adds	r3, r7, r1
 80042ec:	2208      	movs	r2, #8
 80042ee:	701a      	strb	r2, [r3, #0]
    ASSERT(bit_ct > 8);
    uint16_t bits = get_bits(hsd, bit_ct - 8);
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	3b08      	subs	r3, #8
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	250c      	movs	r5, #12
 80042fa:	197c      	adds	r4, r7, r5
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f000 f927 	bl	8004554 <get_bits>
 8004306:	0003      	movs	r3, r0
 8004308:	8023      	strh	r3, [r4, #0]
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_MSB; }
 800430a:	197b      	adds	r3, r7, r5
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <st_backref_index_msb+0x50>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <st_backref_index_msb+0x38>
 8004314:	2302      	movs	r3, #2
 8004316:	e007      	b.n	8004328 <st_backref_index_msb+0x48>
    hsd->output_index = bits << 8;
 8004318:	230c      	movs	r3, #12
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	80da      	strh	r2, [r3, #6]
    return HSDS_BACKREF_INDEX_LSB;
 8004326:	2303      	movs	r3, #3
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bdb0      	pop	{r4, r5, r7, pc}
 8004330:	0000ffff 	.word	0x0000ffff

08004334 <st_backref_index_lsb>:

static HSD_state st_backref_index_lsb(heatshrink_decoder *hsd) {
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    uint8_t bit_ct = BACKREF_INDEX_BITS(hsd);
 800433c:	210f      	movs	r1, #15
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2208      	movs	r2, #8
 8004342:	701a      	strb	r2, [r3, #0]
    uint16_t bits = get_bits(hsd, bit_ct < 8 ? bit_ct : 8);
 8004344:	187b      	adds	r3, r7, r1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	2a08      	cmp	r2, #8
 800434c:	d900      	bls.n	8004350 <st_backref_index_lsb+0x1c>
 800434e:	2308      	movs	r3, #8
 8004350:	b2da      	uxtb	r2, r3
 8004352:	250c      	movs	r5, #12
 8004354:	197c      	adds	r4, r7, r5
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0011      	movs	r1, r2
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f8fa 	bl	8004554 <get_bits>
 8004360:	0003      	movs	r3, r0
 8004362:	8023      	strh	r3, [r4, #0]
    if (bits == NO_BITS) { return HSDS_BACKREF_INDEX_LSB; }
 8004364:	197b      	adds	r3, r7, r5
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <st_backref_index_lsb+0x80>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d101      	bne.n	8004372 <st_backref_index_lsb+0x3e>
 800436e:	2303      	movs	r3, #3
 8004370:	e01c      	b.n	80043ac <st_backref_index_lsb+0x78>
    hsd->output_index |= bits;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	88da      	ldrh	r2, [r3, #6]
 8004376:	230c      	movs	r3, #12
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	80da      	strh	r2, [r3, #6]
    hsd->output_index++;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	88db      	ldrh	r3, [r3, #6]
 8004388:	3301      	adds	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	80da      	strh	r2, [r3, #6]
    uint8_t br_bit_ct = BACKREF_COUNT_BITS(hsd);
 8004390:	210b      	movs	r1, #11
 8004392:	187b      	adds	r3, r7, r1
 8004394:	2204      	movs	r2, #4
 8004396:	701a      	strb	r2, [r3, #0]
    hsd->output_count = 0;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	809a      	strh	r2, [r3, #4]
    return (br_bit_ct > 8) ? HSDS_BACKREF_COUNT_MSB : HSDS_BACKREF_COUNT_LSB;
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d901      	bls.n	80043aa <st_backref_index_lsb+0x76>
 80043a6:	2304      	movs	r3, #4
 80043a8:	e000      	b.n	80043ac <st_backref_index_lsb+0x78>
 80043aa:	2305      	movs	r3, #5
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b004      	add	sp, #16
 80043b2:	bdb0      	pop	{r4, r5, r7, pc}
 80043b4:	0000ffff 	.word	0x0000ffff

080043b8 <st_backref_count_msb>:

static HSD_state st_backref_count_msb(heatshrink_decoder *hsd) {
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
    uint8_t br_bit_ct = BACKREF_COUNT_BITS(hsd);
 80043c0:	210f      	movs	r1, #15
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	2204      	movs	r2, #4
 80043c6:	701a      	strb	r2, [r3, #0]
    ASSERT(br_bit_ct > 8);
    uint16_t bits = get_bits(hsd, br_bit_ct - 8);
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	3b08      	subs	r3, #8
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	250c      	movs	r5, #12
 80043d2:	197c      	adds	r4, r7, r5
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0011      	movs	r1, r2
 80043d8:	0018      	movs	r0, r3
 80043da:	f000 f8bb 	bl	8004554 <get_bits>
 80043de:	0003      	movs	r3, r0
 80043e0:	8023      	strh	r3, [r4, #0]
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_MSB; }
 80043e2:	197b      	adds	r3, r7, r5
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <st_backref_count_msb+0x50>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d101      	bne.n	80043f0 <st_backref_count_msb+0x38>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e007      	b.n	8004400 <st_backref_count_msb+0x48>
    hsd->output_count = bits << 8;
 80043f0:	230c      	movs	r3, #12
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	809a      	strh	r2, [r3, #4]
    return HSDS_BACKREF_COUNT_LSB;
 80043fe:	2305      	movs	r3, #5
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b004      	add	sp, #16
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	0000ffff 	.word	0x0000ffff

0800440c <st_backref_count_lsb>:

static HSD_state st_backref_count_lsb(heatshrink_decoder *hsd) {
 800440c:	b5b0      	push	{r4, r5, r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
    uint8_t br_bit_ct = BACKREF_COUNT_BITS(hsd);
 8004414:	210f      	movs	r1, #15
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2204      	movs	r2, #4
 800441a:	701a      	strb	r2, [r3, #0]
    uint16_t bits = get_bits(hsd, br_bit_ct < 8 ? br_bit_ct : 8);
 800441c:	187b      	adds	r3, r7, r1
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	2a08      	cmp	r2, #8
 8004424:	d900      	bls.n	8004428 <st_backref_count_lsb+0x1c>
 8004426:	2308      	movs	r3, #8
 8004428:	b2da      	uxtb	r2, r3
 800442a:	250c      	movs	r5, #12
 800442c:	197c      	adds	r4, r7, r5
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0011      	movs	r1, r2
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f88e 	bl	8004554 <get_bits>
 8004438:	0003      	movs	r3, r0
 800443a:	8023      	strh	r3, [r4, #0]
    if (bits == NO_BITS) { return HSDS_BACKREF_COUNT_LSB; }
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <st_backref_count_lsb+0x68>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <st_backref_count_lsb+0x3e>
 8004446:	2305      	movs	r3, #5
 8004448:	e00f      	b.n	800446a <st_backref_count_lsb+0x5e>
    hsd->output_count |= bits;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	889a      	ldrh	r2, [r3, #4]
 800444e:	230c      	movs	r3, #12
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	809a      	strh	r2, [r3, #4]
    hsd->output_count++;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	3301      	adds	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	809a      	strh	r2, [r3, #4]
    return HSDS_YIELD_BACKREF;
 8004468:	2306      	movs	r3, #6
}
 800446a:	0018      	movs	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	b004      	add	sp, #16
 8004470:	bdb0      	pop	{r4, r5, r7, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	0000ffff 	.word	0x0000ffff

08004478 <st_yield_backref>:

static HSD_state st_yield_backref(heatshrink_decoder *hsd, output_info *oi) {
 8004478:	b5b0      	push	{r4, r5, r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
    size_t count = oi->buf_size - *oi->output_size;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	61fb      	str	r3, [r7, #28]
    if (count > 0) {
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d059      	beq.n	800454a <st_yield_backref+0xd2>
        size_t i = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
        if (hsd->output_count < count) count = hsd->output_count;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	889b      	ldrh	r3, [r3, #4]
 800449e:	001a      	movs	r2, r3
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d902      	bls.n	80044ac <st_yield_backref+0x34>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	889b      	ldrh	r3, [r3, #4]
 80044aa:	61fb      	str	r3, [r7, #28]
        uint8_t *buf = &hsd->buffers[HEATSHRINK_DECODER_INPUT_BUFFER_SIZE(hsd)];
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	332d      	adds	r3, #45	; 0x2d
 80044b0:	617b      	str	r3, [r7, #20]
        uint16_t mask = (1 << HEATSHRINK_DECODER_WINDOW_BITS(hsd)) - 1;
 80044b2:	2312      	movs	r3, #18
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	801a      	strh	r2, [r3, #0]
        uint16_t neg_offset = hsd->output_index;
 80044ba:	2310      	movs	r3, #16
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	88d2      	ldrh	r2, [r2, #6]
 80044c2:	801a      	strh	r2, [r3, #0]
        ASSERT(neg_offset <= mask + 1);
        ASSERT(count <= (size_t)(1 << BACKREF_COUNT_BITS(hsd)));
        for (i=0; i<count; i++) {
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e02d      	b.n	8004526 <st_yield_backref+0xae>
            uint8_t c = buf[(hsd->head_index - neg_offset) & mask];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	891b      	ldrh	r3, [r3, #8]
 80044ce:	001a      	movs	r2, r3
 80044d0:	2310      	movs	r3, #16
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2512      	movs	r5, #18
 80044da:	197a      	adds	r2, r7, r5
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	4013      	ands	r3, r2
 80044e0:	001a      	movs	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	189a      	adds	r2, r3, r2
 80044e6:	240f      	movs	r4, #15
 80044e8:	193b      	adds	r3, r7, r4
 80044ea:	7812      	ldrb	r2, [r2, #0]
 80044ec:	701a      	strb	r2, [r3, #0]
            push_byte(hsd, oi, c);
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	781a      	ldrb	r2, [r3, #0]
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 f8d3 	bl	80046a2 <push_byte>
            buf[hsd->head_index & mask] = c;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	891b      	ldrh	r3, [r3, #8]
 8004500:	197a      	adds	r2, r7, r5
 8004502:	8812      	ldrh	r2, [r2, #0]
 8004504:	4013      	ands	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	001a      	movs	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	189b      	adds	r3, r3, r2
 800450e:	193a      	adds	r2, r7, r4
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	701a      	strb	r2, [r3, #0]
            hsd->head_index++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	891b      	ldrh	r3, [r3, #8]
 8004518:	3301      	adds	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	811a      	strh	r2, [r3, #8]
        for (i=0; i<count; i++) {
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	3301      	adds	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	d3cd      	bcc.n	80044ca <st_yield_backref+0x52>
        }
        hsd->output_count -= count;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	889a      	ldrh	r2, [r3, #4]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	809a      	strh	r2, [r3, #4]
        if (hsd->output_count == 0) { return HSDS_TAG_BIT; }
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	889b      	ldrh	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <st_yield_backref+0xd2>
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <st_yield_backref+0xd4>
    }
    return HSDS_YIELD_BACKREF;
 800454a:	2306      	movs	r3, #6
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b008      	add	sp, #32
 8004552:	bdb0      	pop	{r4, r5, r7, pc}

08004554 <get_bits>:

static uint16_t get_bits(heatshrink_decoder *hsd, uint8_t count) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	000a      	movs	r2, r1
 800455e:	1cfb      	adds	r3, r7, #3
 8004560:	701a      	strb	r2, [r3, #0]
    uint16_t accumulator = 0;
 8004562:	230e      	movs	r3, #14
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2200      	movs	r2, #0
 8004568:	801a      	strh	r2, [r3, #0]
    int i = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]
    if (count > 15) { return NO_BITS; }
 800456e:	1cfb      	adds	r3, r7, #3
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d901      	bls.n	800457a <get_bits+0x26>
 8004576:	4b32      	ldr	r3, [pc, #200]	; (8004640 <get_bits+0xec>)
 8004578:	e05d      	b.n	8004636 <get_bits+0xe2>

    if (hsd->input_size == 0) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <get_bits+0x48>
        if (hsd->bit_index < (1 << (count - 1))) { return NO_BITS; }
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	7b1b      	ldrb	r3, [r3, #12]
 8004586:	0019      	movs	r1, r3
 8004588:	1cfb      	adds	r3, r7, #3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	3b01      	subs	r3, #1
 800458e:	2201      	movs	r2, #1
 8004590:	409a      	lsls	r2, r3
 8004592:	0013      	movs	r3, r2
 8004594:	4299      	cmp	r1, r3
 8004596:	da01      	bge.n	800459c <get_bits+0x48>
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <get_bits+0xec>)
 800459a:	e04c      	b.n	8004636 <get_bits+0xe2>
    }
    for (i = 0; i < count; i++) {
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	e041      	b.n	8004626 <get_bits+0xd2>
        if (hsd->bit_index == 0x00) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7b1b      	ldrb	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d120      	bne.n	80045ec <get_bits+0x98>
            if (hsd->input_size == 0) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <get_bits+0x62>
                return NO_BITS;
 80045b2:	4b23      	ldr	r3, [pc, #140]	; (8004640 <get_bits+0xec>)
 80045b4:	e03f      	b.n	8004636 <get_bits+0xe2>
            }
            hsd->current_byte = hsd->buffers[hsd->input_index++];
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	885b      	ldrh	r3, [r3, #2]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	b291      	uxth	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	8051      	strh	r1, [r2, #2]
 80045c2:	001a      	movs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	7b5a      	ldrb	r2, [r3, #13]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	72da      	strb	r2, [r3, #11]
            if (hsd->input_index == hsd->input_size) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	885a      	ldrh	r2, [r3, #2]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d105      	bne.n	80045e6 <get_bits+0x92>
                hsd->input_index = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	805a      	strh	r2, [r3, #2]
                hsd->input_size = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	801a      	strh	r2, [r3, #0]
            }
            hsd->bit_index = 0x80;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	731a      	strb	r2, [r3, #12]
        }
        accumulator <<= 1;
 80045ec:	210e      	movs	r1, #14
 80045ee:	187a      	adds	r2, r7, r1
 80045f0:	187b      	adds	r3, r7, r1
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
        if (hsd->current_byte & hsd->bit_index) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7adb      	ldrb	r3, [r3, #11]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	7b12      	ldrb	r2, [r2, #12]
 8004600:	4013      	ands	r3, r2
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <get_bits+0xc0>
            accumulator |= 0x01;
 8004608:	187b      	adds	r3, r7, r1
 800460a:	187a      	adds	r2, r7, r1
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	430a      	orrs	r2, r1
 8004612:	801a      	strh	r2, [r3, #0]
        }
        hsd->bit_index >>= 1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7b1b      	ldrb	r3, [r3, #12]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	731a      	strb	r2, [r3, #12]
    for (i = 0; i < count; i++) {
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	3301      	adds	r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	1cfb      	adds	r3, r7, #3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	dbb8      	blt.n	80045a2 <get_bits+0x4e>
    }
    return accumulator;
 8004630:	230e      	movs	r3, #14
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	881b      	ldrh	r3, [r3, #0]
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	0000ffff 	.word	0x0000ffff

08004644 <heatshrink_decoder_finish>:

HSD_finish_res heatshrink_decoder_finish(heatshrink_decoder *hsd) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    if (hsd == NULL) { return HSDR_FINISH_ERROR_NULL; }
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <heatshrink_decoder_finish+0x14>
 8004652:	2301      	movs	r3, #1
 8004654:	425b      	negs	r3, r3
 8004656:	e020      	b.n	800469a <heatshrink_decoder_finish+0x56>
    switch (hsd->state) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7a9b      	ldrb	r3, [r3, #10]
 800465c:	2b05      	cmp	r3, #5
 800465e:	dc1b      	bgt.n	8004698 <heatshrink_decoder_finish+0x54>
 8004660:	2b02      	cmp	r3, #2
 8004662:	da0b      	bge.n	800467c <heatshrink_decoder_finish+0x38>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <heatshrink_decoder_finish+0x2a>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d00e      	beq.n	800468a <heatshrink_decoder_finish+0x46>
 800466c:	e014      	b.n	8004698 <heatshrink_decoder_finish+0x54>
        case HSDS_TAG_BIT:
            return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	4193      	sbcs	r3, r2
 8004676:	b2db      	uxtb	r3, r3
 8004678:	b25b      	sxtb	r3, r3
 800467a:	e00e      	b.n	800469a <heatshrink_decoder_finish+0x56>

        case HSDS_BACKREF_INDEX_LSB:
        case HSDS_BACKREF_INDEX_MSB:
        case HSDS_BACKREF_COUNT_LSB:
        case HSDS_BACKREF_COUNT_MSB:
            return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	4193      	sbcs	r3, r2
 8004684:	b2db      	uxtb	r3, r3
 8004686:	b25b      	sxtb	r3, r3
 8004688:	e007      	b.n	800469a <heatshrink_decoder_finish+0x56>

        case HSDS_YIELD_LITERAL:
            return hsd->input_size == 0 ? HSDR_FINISH_DONE : HSDR_FINISH_MORE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	4193      	sbcs	r3, r2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	b25b      	sxtb	r3, r3
 8004696:	e000      	b.n	800469a <heatshrink_decoder_finish+0x56>
        default:
            return HSDR_FINISH_MORE;
 8004698:	2301      	movs	r3, #1
    }
}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <push_byte>:

static void push_byte(heatshrink_decoder *hsd, output_info *oi, uint8_t byte) {
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	701a      	strb	r2, [r3, #0]
    oi->buf[(*oi->output_size)++] = byte;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	1c50      	adds	r0, r2, #1
 80046bc:	6018      	str	r0, [r3, #0]
 80046be:	188b      	adds	r3, r1, r2
 80046c0:	1dfa      	adds	r2, r7, #7
 80046c2:	7812      	ldrb	r2, [r2, #0]
 80046c4:	701a      	strb	r2, [r3, #0]
    (void)hsd;
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b004      	add	sp, #16
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <heatshrink_encoder_reset>:

static void push_bits(heatshrink_encoder *hse, uint8_t count, uint8_t bits, output_info *oi);
static uint8_t push_outgoing_bits(heatshrink_encoder *hse, output_info *oi);
static void push_literal_byte(heatshrink_encoder *hse, output_info *oi);

void heatshrink_encoder_reset(heatshrink_encoder *hse) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
    size_t buf_sz = (2 << HEATSHRINK_ENCODER_WINDOW_BITS(hse));
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	60fb      	str	r3, [r7, #12]
    memset(hse->buffer, 0, buf_sz);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a13      	ldr	r2, [pc, #76]	; (8004730 <heatshrink_encoder_reset+0x60>)
 80046e2:	4694      	mov	ip, r2
 80046e4:	4463      	add	r3, ip
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	2100      	movs	r1, #0
 80046ea:	0018      	movs	r0, r3
 80046ec:	f004 fd58 	bl	80091a0 <memset>
    hse->input_size = 0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	801a      	strh	r2, [r3, #0]
    hse->state = HSES_NOT_FULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	731a      	strb	r2, [r3, #12]
    hse->match_scan_index = 0;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	805a      	strh	r2, [r3, #2]
    hse->flags = 0;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	72da      	strb	r2, [r3, #11]
    hse->bit_index = 0x80;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	739a      	strb	r2, [r3, #14]
    hse->current_byte = 0x00;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	735a      	strb	r2, [r3, #13]
    hse->match_length = 0;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	809a      	strh	r2, [r3, #4]

    hse->outgoing_bits = 0x0000;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	811a      	strh	r2, [r3, #8]
    hse->outgoing_bits_count = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	729a      	strb	r2, [r3, #10]

    #ifdef LOOP_DETECT
    hse->loop_detect = (uint32_t)-1;
    #endif
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	00000412 	.word	0x00000412

08004734 <heatshrink_encoder_sink>:

HSE_sink_res heatshrink_encoder_sink(heatshrink_encoder *hse, uint8_t *in_buf, size_t size, size_t *input_size) {
 8004734:	b5b0      	push	{r4, r5, r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
    if ((hse == NULL) || (in_buf == NULL) || (input_size == NULL)) {
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <heatshrink_encoder_sink+0x20>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <heatshrink_encoder_sink+0x20>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <heatshrink_encoder_sink+0x26>
        return HSER_SINK_ERROR_NULL;
 8004754:	2301      	movs	r3, #1
 8004756:	425b      	negs	r3, r3
 8004758:	e05d      	b.n	8004816 <heatshrink_encoder_sink+0xe2>
    }


    if (is_finishing(hse)) { return HSER_SINK_ERROR_MISUSE; }
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 fb4b 	bl	8004df8 <is_finishing>
 8004762:	1e03      	subs	r3, r0, #0
 8004764:	d002      	beq.n	800476c <heatshrink_encoder_sink+0x38>
 8004766:	2302      	movs	r3, #2
 8004768:	425b      	negs	r3, r3
 800476a:	e054      	b.n	8004816 <heatshrink_encoder_sink+0xe2>


    if (hse->state != HSES_NOT_FULL) { return HSER_SINK_ERROR_MISUSE; }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	7b1b      	ldrb	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <heatshrink_encoder_sink+0x46>
 8004774:	2302      	movs	r3, #2
 8004776:	425b      	negs	r3, r3
 8004778:	e04d      	b.n	8004816 <heatshrink_encoder_sink+0xe2>

    uint16_t write_offset = get_input_offset(hse) + hse->input_size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fa93 	bl	8004ca8 <get_input_offset>
 8004782:	0003      	movs	r3, r0
 8004784:	0019      	movs	r1, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	2316      	movs	r3, #22
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	188a      	adds	r2, r1, r2
 8004790:	801a      	strh	r2, [r3, #0]
    uint16_t ibs = get_input_buffer_size(hse);
 8004792:	2514      	movs	r5, #20
 8004794:	197c      	adds	r4, r7, r5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	0018      	movs	r0, r3
 800479a:	f000 fa92 	bl	8004cc2 <get_input_buffer_size>
 800479e:	0003      	movs	r3, r0
 80047a0:	8023      	strh	r3, [r4, #0]
    uint16_t rem = ibs - hse->input_size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	881a      	ldrh	r2, [r3, #0]
 80047a6:	2012      	movs	r0, #18
 80047a8:	183b      	adds	r3, r7, r0
 80047aa:	1979      	adds	r1, r7, r5
 80047ac:	8809      	ldrh	r1, [r1, #0]
 80047ae:	1a8a      	subs	r2, r1, r2
 80047b0:	801a      	strh	r2, [r3, #0]
    uint16_t cp_sz = rem < size ? rem : size;
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d900      	bls.n	80047be <heatshrink_encoder_sink+0x8a>
 80047bc:	0013      	movs	r3, r2
 80047be:	2110      	movs	r1, #16
 80047c0:	187a      	adds	r2, r7, r1
 80047c2:	8013      	strh	r3, [r2, #0]

    memcpy(&hse->buffer[write_offset], in_buf, cp_sz);
 80047c4:	2316      	movs	r3, #22
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2282      	movs	r2, #130	; 0x82
 80047cc:	00d2      	lsls	r2, r2, #3
 80047ce:	4694      	mov	ip, r2
 80047d0:	4463      	add	r3, ip
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	1c98      	adds	r0, r3, #2
 80047d8:	000c      	movs	r4, r1
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	0019      	movs	r1, r3
 80047e2:	f004 fcc1 	bl	8009168 <memcpy>
    *input_size = cp_sz;
 80047e6:	0021      	movs	r1, r4
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	601a      	str	r2, [r3, #0]
    hse->input_size += cp_sz;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	801a      	strh	r2, [r3, #0]

    if (cp_sz == rem) {
 8004800:	187a      	adds	r2, r7, r1
 8004802:	2312      	movs	r3, #18
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	8812      	ldrh	r2, [r2, #0]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d102      	bne.n	8004814 <heatshrink_encoder_sink+0xe0>
        hse->state = HSES_FILLED;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	731a      	strb	r2, [r3, #12]
    }

    return HSER_SINK_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b006      	add	sp, #24
 800481c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004820 <heatshrink_encoder_poll>:
static HSE_state st_yield_br_index(heatshrink_encoder *hse, output_info *oi);
static HSE_state st_yield_br_length(heatshrink_encoder *hse, output_info *oi);
static HSE_state st_save_backlog(heatshrink_encoder *hse);
static HSE_state st_flush_bit_buffer(heatshrink_encoder *hse, output_info *oi);

HSE_poll_res heatshrink_encoder_poll(heatshrink_encoder *hse, uint8_t *out_buf, size_t out_buf_size, size_t *output_size) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
    if ((hse == NULL) || (out_buf == NULL) || (output_size == NULL)) {
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <heatshrink_encoder_poll+0x20>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <heatshrink_encoder_poll+0x20>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <heatshrink_encoder_poll+0x26>
        return HSER_POLL_ERROR_NULL;
 8004840:	2301      	movs	r3, #1
 8004842:	425b      	negs	r3, r3
 8004844:	e089      	b.n	800495a <heatshrink_encoder_poll+0x13a>
    }
    if (out_buf_size == 0) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <heatshrink_encoder_poll+0x32>
        return HSER_POLL_ERROR_MISUSE;
 800484c:	2302      	movs	r3, #2
 800484e:	425b      	negs	r3, r3
 8004850:	e083      	b.n	800495a <heatshrink_encoder_poll+0x13a>
    }
    *output_size = 0;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

    output_info oi;
    oi.buf = out_buf;
 8004858:	2110      	movs	r1, #16
 800485a:	187b      	adds	r3, r7, r1
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	601a      	str	r2, [r3, #0]
    oi.buf_size = out_buf_size;
 8004860:	187b      	adds	r3, r7, r1
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	605a      	str	r2, [r3, #4]
    oi.output_size = output_size;
 8004866:	187b      	adds	r3, r7, r1
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	609a      	str	r2, [r3, #8]

    while (1) {
        uint8_t in_state = hse->state;
 800486c:	211f      	movs	r1, #31
 800486e:	187b      	adds	r3, r7, r1
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	7b12      	ldrb	r2, [r2, #12]
 8004874:	701a      	strb	r2, [r3, #0]
        switch (in_state) {
 8004876:	187b      	adds	r3, r7, r1
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b09      	cmp	r3, #9
 800487c:	d85d      	bhi.n	800493a <heatshrink_encoder_poll+0x11a>
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	4b38      	ldr	r3, [pc, #224]	; (8004964 <heatshrink_encoder_poll+0x144>)
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	469f      	mov	pc, r3
        case HSES_NOT_FULL:
            return HSER_POLL_EMPTY;
 8004888:	2300      	movs	r3, #0
 800488a:	e066      	b.n	800495a <heatshrink_encoder_poll+0x13a>
        case HSES_FILLED:
            do_indexing(hse);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	0018      	movs	r0, r3
 8004890:	f000 fa2a 	bl	8004ce8 <do_indexing>
            hse->state = HSES_SEARCH;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2202      	movs	r2, #2
 8004898:	731a      	strb	r2, [r3, #12]
            break;
 800489a:	e051      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_SEARCH:
            hse->state = st_step_search(hse);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 f886 	bl	80049b0 <st_step_search>
 80048a4:	0003      	movs	r3, r0
 80048a6:	001a      	movs	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	731a      	strb	r2, [r3, #12]
            break;
 80048ac:	e048      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_YIELD_TAG_BIT:
            hse->state = st_yield_tag_bit(hse, &oi);
 80048ae:	2310      	movs	r3, #16
 80048b0:	18fa      	adds	r2, r7, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0011      	movs	r1, r2
 80048b6:	0018      	movs	r0, r3
 80048b8:	f000 f922 	bl	8004b00 <st_yield_tag_bit>
 80048bc:	0003      	movs	r3, r0
 80048be:	001a      	movs	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	731a      	strb	r2, [r3, #12]
            break;
 80048c4:	e03c      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_YIELD_LITERAL:
            hse->state = st_yield_literal(hse, &oi);
 80048c6:	2310      	movs	r3, #16
 80048c8:	18fa      	adds	r2, r7, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f943 	bl	8004b5a <st_yield_literal>
 80048d4:	0003      	movs	r3, r0
 80048d6:	001a      	movs	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	731a      	strb	r2, [r3, #12]
            break;
 80048dc:	e030      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_YIELD_BR_INDEX:
            hse->state = st_yield_br_index(hse, &oi);
 80048de:	2310      	movs	r3, #16
 80048e0:	18fa      	adds	r2, r7, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 f94f 	bl	8004b8a <st_yield_br_index>
 80048ec:	0003      	movs	r3, r0
 80048ee:	001a      	movs	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	731a      	strb	r2, [r3, #12]
            break;
 80048f4:	e024      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_YIELD_BR_LENGTH:
            hse->state = st_yield_br_length(hse, &oi);
 80048f6:	2310      	movs	r3, #16
 80048f8:	18fa      	adds	r2, r7, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	0011      	movs	r1, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 f968 	bl	8004bd4 <st_yield_br_length>
 8004904:	0003      	movs	r3, r0
 8004906:	001a      	movs	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	731a      	strb	r2, [r3, #12]
            break;
 800490c:	e018      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_SAVE_BACKLOG:
            hse->state = st_save_backlog(hse);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f986 	bl	8004c22 <st_save_backlog>
 8004916:	0003      	movs	r3, r0
 8004918:	001a      	movs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	731a      	strb	r2, [r3, #12]
            break;
 800491e:	e00f      	b.n	8004940 <heatshrink_encoder_poll+0x120>
        case HSES_FLUSH_BITS:
            hse->state = st_flush_bit_buffer(hse, &oi);
 8004920:	2310      	movs	r3, #16
 8004922:	18fa      	adds	r2, r7, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	0011      	movs	r1, r2
 8004928:	0018      	movs	r0, r3
 800492a:	f000 f987 	bl	8004c3c <st_flush_bit_buffer>
 800492e:	0003      	movs	r3, r0
 8004930:	001a      	movs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	731a      	strb	r2, [r3, #12]
        case HSES_DONE:
            return HSER_POLL_EMPTY;
 8004936:	2300      	movs	r3, #0
 8004938:	e00f      	b.n	800495a <heatshrink_encoder_poll+0x13a>
        default:
            return HSER_POLL_ERROR_MISUSE;
 800493a:	2302      	movs	r3, #2
 800493c:	425b      	negs	r3, r3
 800493e:	e00c      	b.n	800495a <heatshrink_encoder_poll+0x13a>
        }

        if (hse->state == in_state) {
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	7b1b      	ldrb	r3, [r3, #12]
 8004944:	221f      	movs	r2, #31
 8004946:	18ba      	adds	r2, r7, r2
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d18e      	bne.n	800486c <heatshrink_encoder_poll+0x4c>

            if (*output_size == out_buf_size) return HSER_POLL_MORE;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d189      	bne.n	800486c <heatshrink_encoder_poll+0x4c>
 8004958:	2301      	movs	r3, #1
        }
    }
}
 800495a:	0018      	movs	r0, r3
 800495c:	46bd      	mov	sp, r7
 800495e:	b008      	add	sp, #32
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	0800ae24 	.word	0x0800ae24

08004968 <heatshrink_encoder_finish>:

HSE_finish_res heatshrink_encoder_finish(heatshrink_encoder *hse) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
    if (hse == NULL) { return HSER_FINISH_ERROR_NULL; }
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <heatshrink_encoder_finish+0x14>
 8004976:	2301      	movs	r3, #1
 8004978:	425b      	negs	r3, r3
 800497a:	e014      	b.n	80049a6 <heatshrink_encoder_finish+0x3e>
    hse->flags |= FLAG_IS_FINISHING;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7adb      	ldrb	r3, [r3, #11]
 8004980:	2201      	movs	r2, #1
 8004982:	4313      	orrs	r3, r2
 8004984:	b2da      	uxtb	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	72da      	strb	r2, [r3, #11]
    if (hse->state == HSES_NOT_FULL) { hse->state = HSES_FILLED; }
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7b1b      	ldrb	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <heatshrink_encoder_finish+0x30>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	731a      	strb	r2, [r3, #12]
    return hse->state == HSES_DONE ? HSER_FINISH_DONE : HSER_FINISH_MORE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7b1b      	ldrb	r3, [r3, #12]
 800499c:	3b09      	subs	r3, #9
 800499e:	1e5a      	subs	r2, r3, #1
 80049a0:	4193      	sbcs	r3, r2
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	b25b      	sxtb	r3, r3
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <st_step_search>:

static HSE_state st_step_search(heatshrink_encoder *hse) {
 80049b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b2:	b08b      	sub	sp, #44	; 0x2c
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
    uint16_t window_length = get_input_buffer_size(hse);
 80049b8:	231c      	movs	r3, #28
 80049ba:	18fc      	adds	r4, r7, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0018      	movs	r0, r3
 80049c0:	f000 f97f 	bl	8004cc2 <get_input_buffer_size>
 80049c4:	0003      	movs	r3, r0
 80049c6:	8023      	strh	r3, [r4, #0]
    uint16_t lookahead_sz = get_lookahead_size(hse);
 80049c8:	231a      	movs	r3, #26
 80049ca:	18fc      	adds	r4, r7, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f981 	bl	8004cd6 <get_lookahead_size>
 80049d4:	0003      	movs	r3, r0
 80049d6:	8023      	strh	r3, [r4, #0]
    uint16_t msi = hse->match_scan_index;
 80049d8:	2418      	movs	r4, #24
 80049da:	193b      	adds	r3, r7, r4
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	8852      	ldrh	r2, [r2, #2]
 80049e0:	801a      	strh	r2, [r3, #0]

    bool fin = is_finishing(hse);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fa07 	bl	8004df8 <is_finishing>
 80049ea:	0002      	movs	r2, r0
 80049ec:	2017      	movs	r0, #23
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	1e51      	subs	r1, r2, #1
 80049f2:	418a      	sbcs	r2, r1
 80049f4:	701a      	strb	r2, [r3, #0]
    if (msi > hse->input_size - (fin ? 1 : lookahead_sz)) {
 80049f6:	193b      	adds	r3, r7, r4
 80049f8:	881a      	ldrh	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	0019      	movs	r1, r3
 8004a00:	183b      	adds	r3, r7, r0
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <st_step_search+0x5c>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e002      	b.n	8004a12 <st_step_search+0x62>
 8004a0c:	231a      	movs	r3, #26
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	1acb      	subs	r3, r1, r3
 8004a14:	429a      	cmp	r2, r3
 8004a16:	dd08      	ble.n	8004a2a <st_step_search+0x7a>
        return fin ? HSES_FLUSH_BITS : HSES_SAVE_BACKLOG;
 8004a18:	2317      	movs	r3, #23
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <st_step_search+0x76>
 8004a22:	2308      	movs	r3, #8
 8004a24:	e065      	b.n	8004af2 <st_step_search+0x142>
 8004a26:	2307      	movs	r3, #7
 8004a28:	e063      	b.n	8004af2 <st_step_search+0x142>
    }

    uint16_t input_offset = get_input_offset(hse);
 8004a2a:	2514      	movs	r5, #20
 8004a2c:	197c      	adds	r4, r7, r5
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f939 	bl	8004ca8 <get_input_offset>
 8004a36:	0003      	movs	r3, r0
 8004a38:	8023      	strh	r3, [r4, #0]
    uint16_t end = input_offset + msi;
 8004a3a:	2412      	movs	r4, #18
 8004a3c:	193b      	adds	r3, r7, r4
 8004a3e:	1979      	adds	r1, r7, r5
 8004a40:	2018      	movs	r0, #24
 8004a42:	183a      	adds	r2, r7, r0
 8004a44:	8809      	ldrh	r1, [r1, #0]
 8004a46:	8812      	ldrh	r2, [r2, #0]
 8004a48:	188a      	adds	r2, r1, r2
 8004a4a:	801a      	strh	r2, [r3, #0]
    uint16_t start = end - window_length;
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	1939      	adds	r1, r7, r4
 8004a52:	221c      	movs	r2, #28
 8004a54:	18ba      	adds	r2, r7, r2
 8004a56:	8809      	ldrh	r1, [r1, #0]
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	1a8a      	subs	r2, r1, r2
 8004a5c:	801a      	strh	r2, [r3, #0]

    uint16_t max_possible = lookahead_sz;
 8004a5e:	241e      	movs	r4, #30
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	211a      	movs	r1, #26
 8004a64:	187a      	adds	r2, r7, r1
 8004a66:	8812      	ldrh	r2, [r2, #0]
 8004a68:	801a      	strh	r2, [r3, #0]
    if (hse->input_size - msi < lookahead_sz) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	001a      	movs	r2, r3
 8004a70:	183b      	adds	r3, r7, r0
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	1ad2      	subs	r2, r2, r3
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	da06      	bge.n	8004a8c <st_step_search+0xdc>
        max_possible = hse->input_size - msi;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8819      	ldrh	r1, [r3, #0]
 8004a82:	193b      	adds	r3, r7, r4
 8004a84:	183a      	adds	r2, r7, r0
 8004a86:	8812      	ldrh	r2, [r2, #0]
 8004a88:	1a8a      	subs	r2, r1, r2
 8004a8a:	801a      	strh	r2, [r3, #0]
    }

    uint16_t match_length = 0;
 8004a8c:	260c      	movs	r6, #12
 8004a8e:	19bb      	adds	r3, r7, r6
 8004a90:	2200      	movs	r2, #0
 8004a92:	801a      	strh	r2, [r3, #0]
    uint16_t match_pos = find_longest_match(hse,
 8004a94:	230e      	movs	r3, #14
 8004a96:	18fc      	adds	r4, r7, r3
 8004a98:	221e      	movs	r2, #30
 8004a9a:	18bb      	adds	r3, r7, r2
 8004a9c:	881d      	ldrh	r5, [r3, #0]
 8004a9e:	2212      	movs	r2, #18
 8004aa0:	18bb      	adds	r3, r7, r2
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	187b      	adds	r3, r7, r1
 8004aa8:	8819      	ldrh	r1, [r3, #0]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	19bb      	adds	r3, r7, r6
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	002b      	movs	r3, r5
 8004ab2:	f000 f9bf 	bl	8004e34 <find_longest_match>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	8023      	strh	r3, [r4, #0]
        start, end, max_possible, &match_length);

    if (match_pos == MATCH_NOT_FOUND) {
 8004aba:	230e      	movs	r3, #14
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <st_step_search+0x14c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10a      	bne.n	8004adc <st_step_search+0x12c>
        hse->match_scan_index++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	885b      	ldrh	r3, [r3, #2]
 8004aca:	3301      	adds	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	805a      	strh	r2, [r3, #2]
        hse->match_length = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	809a      	strh	r2, [r3, #4]
        return HSES_YIELD_TAG_BIT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e00a      	b.n	8004af2 <st_step_search+0x142>
    } else {
        hse->match_pos = match_pos;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	220e      	movs	r2, #14
 8004ae0:	18ba      	adds	r2, r7, r2
 8004ae2:	8812      	ldrh	r2, [r2, #0]
 8004ae4:	80da      	strh	r2, [r3, #6]
        hse->match_length = match_length;
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	809a      	strh	r2, [r3, #4]
        ASSERT(match_pos <= 1 << HEATSHRINK_ENCODER_WINDOW_BITS(hse) );

        return HSES_YIELD_TAG_BIT;
 8004af0:	2303      	movs	r3, #3
    }
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b009      	add	sp, #36	; 0x24
 8004af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	0000ffff 	.word	0x0000ffff

08004b00 <st_yield_tag_bit>:

static HSE_state st_yield_tag_bit(heatshrink_encoder *hse, output_info *oi) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
    if (can_take_byte(oi)) {
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 f980 	bl	8004e12 <can_take_byte>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d01c      	beq.n	8004b50 <st_yield_tag_bit+0x50>
        if (hse->match_length == 0) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	889b      	ldrh	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <st_yield_tag_bit+0x2e>
            add_tag_bit(hse, oi, HEATSHRINK_LITERAL_MARKER);
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f8ac 	bl	8004c82 <add_tag_bit>
            return HSES_YIELD_LITERAL;
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	e011      	b.n	8004b52 <st_yield_tag_bit+0x52>
        } else {
            add_tag_bit(hse, oi, HEATSHRINK_BACKREF_MARKER);
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f8a4 	bl	8004c82 <add_tag_bit>
            hse->outgoing_bits = hse->match_pos - 1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	88db      	ldrh	r3, [r3, #6]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	811a      	strh	r2, [r3, #8]
            hse->outgoing_bits_count = HEATSHRINK_ENCODER_WINDOW_BITS(hse);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	729a      	strb	r2, [r3, #10]
            return HSES_YIELD_BR_INDEX;
 8004b4c:	2305      	movs	r3, #5
 8004b4e:	e000      	b.n	8004b52 <st_yield_tag_bit+0x52>
        }
    } else {
        return HSES_YIELD_TAG_BIT;
 8004b50:	2303      	movs	r3, #3
    }
}
 8004b52:	0018      	movs	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <st_yield_literal>:

static HSE_state st_yield_literal(heatshrink_encoder *hse, output_info *oi) {
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
    if (can_take_byte(oi)) {
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f953 	bl	8004e12 <can_take_byte>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d007      	beq.n	8004b80 <st_yield_literal+0x26>
        push_literal_byte(hse, oi);
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 fad6 	bl	8005128 <push_literal_byte>
        return HSES_SEARCH;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e000      	b.n	8004b82 <st_yield_literal+0x28>
    } else {
        return HSES_YIELD_LITERAL;
 8004b80:	2304      	movs	r3, #4
    }
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <st_yield_br_index>:

static HSE_state st_yield_br_index(heatshrink_encoder *hse, output_info *oi) {
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
    if (can_take_byte(oi)) {
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f93b 	bl	8004e12 <can_take_byte>
 8004b9c:	1e03      	subs	r3, r0, #0
 8004b9e:	d014      	beq.n	8004bca <st_yield_br_index+0x40>
        if (push_outgoing_bits(hse, oi) > 0) {
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0011      	movs	r1, r2
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fa0e 	bl	8004fc8 <push_outgoing_bits>
 8004bac:	1e03      	subs	r3, r0, #0
 8004bae:	d001      	beq.n	8004bb4 <st_yield_br_index+0x2a>
            return HSES_YIELD_BR_INDEX;
 8004bb0:	2305      	movs	r3, #5
 8004bb2:	e00b      	b.n	8004bcc <st_yield_br_index+0x42>
        } else {
            hse->outgoing_bits = hse->match_length - 1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	889b      	ldrh	r3, [r3, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	811a      	strh	r2, [r3, #8]
            hse->outgoing_bits_count = HEATSHRINK_ENCODER_LOOKAHEAD_BITS(hse);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	729a      	strb	r2, [r3, #10]
            return HSES_YIELD_BR_LENGTH;
 8004bc6:	2306      	movs	r3, #6
 8004bc8:	e000      	b.n	8004bcc <st_yield_br_index+0x42>
        }
    } else {
        return HSES_YIELD_BR_INDEX;
 8004bca:	2305      	movs	r3, #5
    }
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <st_yield_br_length>:

static HSE_state st_yield_br_length(heatshrink_encoder *hse, output_info *oi) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
    if (can_take_byte(oi)) {
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 f916 	bl	8004e12 <can_take_byte>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d016      	beq.n	8004c18 <st_yield_br_length+0x44>
        if (push_outgoing_bits(hse, oi) > 0) {
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0011      	movs	r1, r2
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f9e9 	bl	8004fc8 <push_outgoing_bits>
 8004bf6:	1e03      	subs	r3, r0, #0
 8004bf8:	d001      	beq.n	8004bfe <st_yield_br_length+0x2a>
            return HSES_YIELD_BR_LENGTH;
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	e00d      	b.n	8004c1a <st_yield_br_length+0x46>
        } else {
            hse->match_scan_index += hse->match_length;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	885a      	ldrh	r2, [r3, #2]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	889b      	ldrh	r3, [r3, #4]
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	805a      	strh	r2, [r3, #2]
            hse->match_length = 0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	809a      	strh	r2, [r3, #4]
            return HSES_SEARCH;
 8004c14:	2302      	movs	r3, #2
 8004c16:	e000      	b.n	8004c1a <st_yield_br_length+0x46>
        }
    } else {
        return HSES_YIELD_BR_LENGTH;
 8004c18:	2306      	movs	r3, #6
    }
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <st_save_backlog>:

static HSE_state st_save_backlog(heatshrink_encoder *hse) {
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
    save_backlog(hse);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 faab 	bl	8005188 <save_backlog>
    return HSES_NOT_FULL;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <st_flush_bit_buffer>:

static HSE_state st_flush_bit_buffer(heatshrink_encoder *hse, output_info *oi) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    if (hse->bit_index == 0x80) {
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7b9b      	ldrb	r3, [r3, #14]
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d101      	bne.n	8004c52 <st_flush_bit_buffer+0x16>
        return HSES_DONE;
 8004c4e:	2309      	movs	r3, #9
 8004c50:	e013      	b.n	8004c7a <st_flush_bit_buffer+0x3e>
    } else if (can_take_byte(oi)) {
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 f8dc 	bl	8004e12 <can_take_byte>
 8004c5a:	1e03      	subs	r3, r0, #0
 8004c5c:	d00c      	beq.n	8004c78 <st_flush_bit_buffer+0x3c>
        oi->buf[(*oi->output_size)++] = hse->current_byte;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6819      	ldr	r1, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	1c50      	adds	r0, r2, #1
 8004c6a:	6018      	str	r0, [r3, #0]
 8004c6c:	188b      	adds	r3, r1, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	7b52      	ldrb	r2, [r2, #13]
 8004c72:	701a      	strb	r2, [r3, #0]
        return HSES_DONE;
 8004c74:	2309      	movs	r3, #9
 8004c76:	e000      	b.n	8004c7a <st_flush_bit_buffer+0x3e>
    } else {
        return HSES_FLUSH_BITS;
 8004c78:	2308      	movs	r3, #8
    }
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <add_tag_bit>:

static void add_tag_bit(heatshrink_encoder *hse, output_info *oi, uint8_t tag) {
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	1dfb      	adds	r3, r7, #7
 8004c8e:	701a      	strb	r2, [r3, #0]
    push_bits(hse, 1, tag, oi);
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	1dfb      	adds	r3, r7, #7
 8004c94:	781a      	ldrb	r2, [r3, #0]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	000b      	movs	r3, r1
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	f000 f9db 	bl	8005056 <push_bits>
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b004      	add	sp, #16
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <get_input_offset>:

static uint16_t get_input_offset(heatshrink_encoder *hse) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    return get_input_buffer_size(hse);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f805 	bl	8004cc2 <get_input_buffer_size>
 8004cb8:	0003      	movs	r3, r0
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <get_input_buffer_size>:

static uint16_t get_input_buffer_size(heatshrink_encoder *hse) {
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
    return (1 << HEATSHRINK_ENCODER_WINDOW_BITS(hse));
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	005b      	lsls	r3, r3, #1
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b002      	add	sp, #8
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <get_lookahead_size>:

static uint16_t get_lookahead_size(heatshrink_encoder *hse) {
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
    return (1 << HEATSHRINK_ENCODER_LOOKAHEAD_BITS(hse));
 8004cde:	2310      	movs	r3, #16
}
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <do_indexing>:

static void do_indexing(heatshrink_encoder *hse) {
 8004ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cea:	4c3d      	ldr	r4, [pc, #244]	; (8004de0 <do_indexing+0xf8>)
 8004cec:	44a5      	add	sp, r4
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
#if HEATSHRINK_USE_INDEX

    struct hs_index *hsi = HEATSHRINK_ENCODER_INDEX(hse);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	2486      	movs	r4, #134	; 0x86
 8004cf8:	00a4      	lsls	r4, r4, #2
 8004cfa:	193a      	adds	r2, r7, r4
 8004cfc:	6013      	str	r3, [r2, #0]
    int16_t last[256];
    memset(last, 0xFF, sizeof(last));
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	009a      	lsls	r2, r3, #2
 8004d02:	2308      	movs	r3, #8
 8004d04:	18fb      	adds	r3, r7, r3
 8004d06:	21ff      	movs	r1, #255	; 0xff
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f004 fa49 	bl	80091a0 <memset>

    uint8_t * const data = hse->buffer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a34      	ldr	r2, [pc, #208]	; (8004de4 <do_indexing+0xfc>)
 8004d12:	4694      	mov	ip, r2
 8004d14:	4463      	add	r3, ip
 8004d16:	2285      	movs	r2, #133	; 0x85
 8004d18:	0092      	lsls	r2, r2, #2
 8004d1a:	18ba      	adds	r2, r7, r2
 8004d1c:	6013      	str	r3, [r2, #0]
    int16_t * const index = hsi->index;
 8004d1e:	193b      	adds	r3, r7, r4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3302      	adds	r3, #2
 8004d24:	2284      	movs	r2, #132	; 0x84
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	18ba      	adds	r2, r7, r2
 8004d2a:	6013      	str	r3, [r2, #0]

    const uint16_t input_offset = get_input_offset(hse);
 8004d2c:	4d2e      	ldr	r5, [pc, #184]	; (8004de8 <do_indexing+0x100>)
 8004d2e:	197c      	adds	r4, r7, r5
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff ffb8 	bl	8004ca8 <get_input_offset>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	8023      	strh	r3, [r4, #0]
    const uint16_t end = input_offset + hse->input_size;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8819      	ldrh	r1, [r3, #0]
 8004d40:	2383      	movs	r3, #131	; 0x83
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	197a      	adds	r2, r7, r5
 8004d48:	8812      	ldrh	r2, [r2, #0]
 8004d4a:	188a      	adds	r2, r1, r2
 8004d4c:	801a      	strh	r2, [r3, #0]

    for (uint16_t i=0; i<end; i++) {
 8004d4e:	4b27      	ldr	r3, [pc, #156]	; (8004dec <do_indexing+0x104>)
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	e032      	b.n	8004dbe <do_indexing+0xd6>
        uint8_t v = data[i];
 8004d58:	4824      	ldr	r0, [pc, #144]	; (8004dec <do_indexing+0x104>)
 8004d5a:	183b      	adds	r3, r7, r0
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	2285      	movs	r2, #133	; 0x85
 8004d60:	0092      	lsls	r2, r2, #2
 8004d62:	18ba      	adds	r2, r7, r2
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	18d2      	adds	r2, r2, r3
 8004d68:	4c21      	ldr	r4, [pc, #132]	; (8004df0 <do_indexing+0x108>)
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	701a      	strb	r2, [r3, #0]
        int16_t lv = last[v];
 8004d70:	193b      	adds	r3, r7, r4
 8004d72:	7819      	ldrb	r1, [r3, #0]
 8004d74:	2582      	movs	r5, #130	; 0x82
 8004d76:	00ad      	lsls	r5, r5, #2
 8004d78:	197b      	adds	r3, r7, r5
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	; (8004df4 <do_indexing+0x10c>)
 8004d7c:	2688      	movs	r6, #136	; 0x88
 8004d7e:	00b6      	lsls	r6, r6, #2
 8004d80:	1992      	adds	r2, r2, r6
 8004d82:	19d2      	adds	r2, r2, r7
 8004d84:	0049      	lsls	r1, r1, #1
 8004d86:	5a8a      	ldrh	r2, [r1, r2]
 8004d88:	801a      	strh	r2, [r3, #0]
        index[i] = lv;
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	2284      	movs	r2, #132	; 0x84
 8004d92:	0092      	lsls	r2, r2, #2
 8004d94:	18ba      	adds	r2, r7, r2
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	18d3      	adds	r3, r2, r3
 8004d9a:	197a      	adds	r2, r7, r5
 8004d9c:	8812      	ldrh	r2, [r2, #0]
 8004d9e:	801a      	strh	r2, [r3, #0]
        last[v] = i;
 8004da0:	193b      	adds	r3, r7, r4
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	183b      	adds	r3, r7, r0
 8004da6:	2100      	movs	r1, #0
 8004da8:	5e59      	ldrsh	r1, [r3, r1]
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <do_indexing+0x10c>)
 8004dac:	199b      	adds	r3, r3, r6
 8004dae:	19db      	adds	r3, r3, r7
 8004db0:	0052      	lsls	r2, r2, #1
 8004db2:	52d1      	strh	r1, [r2, r3]
    for (uint16_t i=0; i<end; i++) {
 8004db4:	183b      	adds	r3, r7, r0
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	3201      	adds	r2, #1
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <do_indexing+0x104>)
 8004dc0:	18fa      	adds	r2, r7, r3
 8004dc2:	2383      	movs	r3, #131	; 0x83
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	8812      	ldrh	r2, [r2, #0]
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d3c3      	bcc.n	8004d58 <do_indexing+0x70>
    }
#else
    (void)hse;
#endif
}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	2389      	movs	r3, #137	; 0x89
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	449d      	add	sp, r3
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	fffffddc 	.word	0xfffffddc
 8004de4:	00000412 	.word	0x00000412
 8004de8:	0000020e 	.word	0x0000020e
 8004dec:	0000021e 	.word	0x0000021e
 8004df0:	0000020b 	.word	0x0000020b
 8004df4:	fffffde8 	.word	0xfffffde8

08004df8 <is_finishing>:

static int is_finishing(heatshrink_encoder *hse) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
    return hse->flags & FLAG_IS_FINISHING;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7adb      	ldrb	r3, [r3, #11]
 8004e04:	001a      	movs	r2, r3
 8004e06:	2301      	movs	r3, #1
 8004e08:	4013      	ands	r3, r2
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b002      	add	sp, #8
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <can_take_byte>:

static int can_take_byte(output_info *oi) {
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
    return *oi->output_size < oi->buf_size;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	419b      	sbcs	r3, r3
 8004e28:	425b      	negs	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <find_longest_match>:

static uint16_t find_longest_match(heatshrink_encoder *hse, uint16_t start, uint16_t end, const uint16_t maxlen, uint16_t *match_length) {
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b08d      	sub	sp, #52	; 0x34
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	000c      	movs	r4, r1
 8004e3e:	0010      	movs	r0, r2
 8004e40:	0019      	movs	r1, r3
 8004e42:	230a      	movs	r3, #10
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	1c22      	adds	r2, r4, #0
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	2408      	movs	r4, #8
 8004e4c:	193b      	adds	r3, r7, r4
 8004e4e:	1c02      	adds	r2, r0, #0
 8004e50:	801a      	strh	r2, [r3, #0]
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	1c0a      	adds	r2, r1, #0
 8004e56:	801a      	strh	r2, [r3, #0]
    uint8_t *buf = hse->buffer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a59      	ldr	r2, [pc, #356]	; (8004fc0 <find_longest_match+0x18c>)
 8004e5c:	4694      	mov	ip, r2
 8004e5e:	4463      	add	r3, ip
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24

    uint16_t match_maxlen = 0;
 8004e62:	232e      	movs	r3, #46	; 0x2e
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
    uint16_t match_index = MATCH_NOT_FOUND;
 8004e6a:	232c      	movs	r3, #44	; 0x2c
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4252      	negs	r2, r2
 8004e72:	801a      	strh	r2, [r3, #0]

    uint16_t len = 0;
 8004e74:	232a      	movs	r3, #42	; 0x2a
 8004e76:	18fb      	adds	r3, r7, r3
 8004e78:	2200      	movs	r2, #0
 8004e7a:	801a      	strh	r2, [r3, #0]
    uint8_t * const needlepoint = &buf[end];
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	623b      	str	r3, [r7, #32]

    struct hs_index *hsi = HEATSHRINK_ENCODER_INDEX(hse);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3310      	adds	r3, #16
 8004e8a:	61fb      	str	r3, [r7, #28]
    int16_t pos = hsi->index[end];
 8004e8c:	193b      	adds	r3, r7, r4
 8004e8e:	881a      	ldrh	r2, [r3, #0]
 8004e90:	2328      	movs	r3, #40	; 0x28
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	0052      	lsls	r2, r2, #1
 8004e98:	188a      	adds	r2, r1, r2
 8004e9a:	3202      	adds	r2, #2
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	801a      	strh	r2, [r3, #0]

    while (pos - (int16_t)start >= 0) {
 8004ea0:	e065      	b.n	8004f6e <find_longest_match+0x13a>
        uint8_t * const pospoint = &buf[pos];
 8004ea2:	2028      	movs	r0, #40	; 0x28
 8004ea4:	183b      	adds	r3, r7, r0
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	5e9b      	ldrsh	r3, [r3, r2]
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eac:	18d3      	adds	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
        len = 0;
 8004eb0:	232a      	movs	r3, #42	; 0x2a
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	801a      	strh	r2, [r3, #0]


        if (pospoint[match_maxlen] != needlepoint[match_maxlen]) {
 8004eb8:	212e      	movs	r1, #46	; 0x2e
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	18d3      	adds	r3, r2, r3
 8004ec2:	781a      	ldrb	r2, [r3, #0]
 8004ec4:	187b      	adds	r3, r7, r1
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	18cb      	adds	r3, r1, r3
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d00a      	beq.n	8004ee8 <find_longest_match+0xb4>
            pos = hsi->index[pos];
 8004ed2:	183b      	adds	r3, r7, r0
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	5e9a      	ldrsh	r2, [r3, r2]
 8004ed8:	183b      	adds	r3, r7, r0
 8004eda:	69f9      	ldr	r1, [r7, #28]
 8004edc:	0052      	lsls	r2, r2, #1
 8004ede:	188a      	adds	r2, r1, r2
 8004ee0:	3202      	adds	r2, #2
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	801a      	strh	r2, [r3, #0]
            continue;
 8004ee6:	e042      	b.n	8004f6e <find_longest_match+0x13a>
        }

        for (len = 1; len < maxlen; len++) {
 8004ee8:	232a      	movs	r3, #42	; 0x2a
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	2201      	movs	r2, #1
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e011      	b.n	8004f16 <find_longest_match+0xe2>
            if (pospoint[len] != needlepoint[len]) break;
 8004ef2:	202a      	movs	r0, #42	; 0x2a
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	6a39      	ldr	r1, [r7, #32]
 8004f04:	18cb      	adds	r3, r1, r3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d10c      	bne.n	8004f26 <find_longest_match+0xf2>
        for (len = 1; len < maxlen; len++) {
 8004f0c:	183b      	adds	r3, r7, r0
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	183b      	adds	r3, r7, r0
 8004f12:	3201      	adds	r2, #1
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	232a      	movs	r3, #42	; 0x2a
 8004f18:	18fa      	adds	r2, r7, r3
 8004f1a:	1dbb      	adds	r3, r7, #6
 8004f1c:	8812      	ldrh	r2, [r2, #0]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3e6      	bcc.n	8004ef2 <find_longest_match+0xbe>
 8004f24:	e000      	b.n	8004f28 <find_longest_match+0xf4>
            if (pospoint[len] != needlepoint[len]) break;
 8004f26:	46c0      	nop			; (mov r8, r8)
        }

        if (len > match_maxlen) {
 8004f28:	212a      	movs	r1, #42	; 0x2a
 8004f2a:	187a      	adds	r2, r7, r1
 8004f2c:	202e      	movs	r0, #46	; 0x2e
 8004f2e:	183b      	adds	r3, r7, r0
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d90f      	bls.n	8004f58 <find_longest_match+0x124>
            match_maxlen = len;
 8004f38:	183b      	adds	r3, r7, r0
 8004f3a:	187a      	adds	r2, r7, r1
 8004f3c:	8812      	ldrh	r2, [r2, #0]
 8004f3e:	801a      	strh	r2, [r3, #0]
            match_index = pos;
 8004f40:	232c      	movs	r3, #44	; 0x2c
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2228      	movs	r2, #40	; 0x28
 8004f46:	18ba      	adds	r2, r7, r2
 8004f48:	8812      	ldrh	r2, [r2, #0]
 8004f4a:	801a      	strh	r2, [r3, #0]
            if (len == maxlen) { break; }
 8004f4c:	187a      	adds	r2, r7, r1
 8004f4e:	1dbb      	adds	r3, r7, #6
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d016      	beq.n	8004f86 <find_longest_match+0x152>
        }
        pos = hsi->index[pos];
 8004f58:	2128      	movs	r1, #40	; 0x28
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	5e9a      	ldrsh	r2, [r3, r2]
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	69f9      	ldr	r1, [r7, #28]
 8004f64:	0052      	lsls	r2, r2, #1
 8004f66:	188a      	adds	r2, r1, r2
 8004f68:	3202      	adds	r2, #2
 8004f6a:	8812      	ldrh	r2, [r2, #0]
 8004f6c:	801a      	strh	r2, [r3, #0]
    while (pos - (int16_t)start >= 0) {
 8004f6e:	2328      	movs	r3, #40	; 0x28
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	2200      	movs	r2, #0
 8004f74:	5e9b      	ldrsh	r3, [r3, r2]
 8004f76:	220a      	movs	r2, #10
 8004f78:	18ba      	adds	r2, r7, r2
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5e52      	ldrsh	r2, [r2, r1]
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	d400      	bmi.n	8004f84 <find_longest_match+0x150>
 8004f82:	e78e      	b.n	8004ea2 <find_longest_match+0x6e>
 8004f84:	e000      	b.n	8004f88 <find_longest_match+0x154>
            if (len == maxlen) { break; }
 8004f86:	46c0      	nop			; (mov r8, r8)
    }

    const size_t break_even_point = (1 + HEATSHRINK_ENCODER_WINDOW_BITS(hse) + HEATSHRINK_ENCODER_LOOKAHEAD_BITS(hse));
 8004f88:	230d      	movs	r3, #13
 8004f8a:	617b      	str	r3, [r7, #20]

    if (match_maxlen > (break_even_point / 8)) {
 8004f8c:	212e      	movs	r1, #46	; 0x2e
 8004f8e:	187b      	adds	r3, r7, r1
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	08db      	lsrs	r3, r3, #3
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d90c      	bls.n	8004fb4 <find_longest_match+0x180>
        *match_length = match_maxlen;
 8004f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9c:	187a      	adds	r2, r7, r1
 8004f9e:	8812      	ldrh	r2, [r2, #0]
 8004fa0:	801a      	strh	r2, [r3, #0]
        return end - match_index;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	18fa      	adds	r2, r7, r3
 8004fa6:	232c      	movs	r3, #44	; 0x2c
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	8812      	ldrh	r2, [r2, #0]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	e000      	b.n	8004fb6 <find_longest_match+0x182>
    }
    return MATCH_NOT_FOUND;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <find_longest_match+0x190>)
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b00d      	add	sp, #52	; 0x34
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	00000412 	.word	0x00000412
 8004fc4:	0000ffff 	.word	0x0000ffff

08004fc8 <push_outgoing_bits>:

static uint8_t push_outgoing_bits(heatshrink_encoder *hse, output_info *oi) {
 8004fc8:	b5b0      	push	{r4, r5, r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    uint8_t count = 0;
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
    uint8_t bits = 0;
 8004fda:	200e      	movs	r0, #14
 8004fdc:	183b      	adds	r3, r7, r0
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
    if (hse->outgoing_bits_count > 8) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7a9b      	ldrb	r3, [r3, #10]
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d90c      	bls.n	8005004 <push_outgoing_bits+0x3c>
        count = 8;
 8004fea:	187b      	adds	r3, r7, r1
 8004fec:	2208      	movs	r2, #8
 8004fee:	701a      	strb	r2, [r3, #0]
        bits = hse->outgoing_bits >> (hse->outgoing_bits_count - 8);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	891b      	ldrh	r3, [r3, #8]
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	7a9b      	ldrb	r3, [r3, #10]
 8004ffa:	3b08      	subs	r3, #8
 8004ffc:	411a      	asrs	r2, r3
 8004ffe:	183b      	adds	r3, r7, r0
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e009      	b.n	8005018 <push_outgoing_bits+0x50>
    } else {
        count = hse->outgoing_bits_count;
 8005004:	230f      	movs	r3, #15
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	7a92      	ldrb	r2, [r2, #10]
 800500c:	701a      	strb	r2, [r3, #0]
        bits = hse->outgoing_bits;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	891a      	ldrh	r2, [r3, #8]
 8005012:	230e      	movs	r3, #14
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	701a      	strb	r2, [r3, #0]
    }

    if (count > 0) {
 8005018:	210f      	movs	r1, #15
 800501a:	187b      	adds	r3, r7, r1
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <push_outgoing_bits+0x80>
        push_bits(hse, count, bits, oi);
 8005022:	683c      	ldr	r4, [r7, #0]
 8005024:	230e      	movs	r3, #14
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	000d      	movs	r5, r1
 800502c:	187b      	adds	r3, r7, r1
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	0023      	movs	r3, r4
 8005034:	f000 f80f 	bl	8005056 <push_bits>
        hse->outgoing_bits_count -= count;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7a9a      	ldrb	r2, [r3, #10]
 800503c:	197b      	adds	r3, r7, r5
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	b2da      	uxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	729a      	strb	r2, [r3, #10]
    }
    return count;
 8005048:	230f      	movs	r3, #15
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	781b      	ldrb	r3, [r3, #0]
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b004      	add	sp, #16
 8005054:	bdb0      	pop	{r4, r5, r7, pc}

08005056 <push_bits>:

static void push_bits(heatshrink_encoder *hse, uint8_t count, uint8_t bits, output_info *oi) {
 8005056:	b5b0      	push	{r4, r5, r7, lr}
 8005058:	b086      	sub	sp, #24
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	0008      	movs	r0, r1
 8005060:	0011      	movs	r1, r2
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	240b      	movs	r4, #11
 8005066:	193b      	adds	r3, r7, r4
 8005068:	1c02      	adds	r2, r0, #0
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	250a      	movs	r5, #10
 800506e:	197b      	adds	r3, r7, r5
 8005070:	1c0a      	adds	r2, r1, #0
 8005072:	701a      	strb	r2, [r3, #0]
    ASSERT(count <= 8);

    if (count == 8 && hse->bit_index == 0x80) {
 8005074:	193b      	adds	r3, r7, r4
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d10f      	bne.n	800509c <push_bits+0x46>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	7b9b      	ldrb	r3, [r3, #14]
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d10b      	bne.n	800509c <push_bits+0x46>
        oi->buf[(*oi->output_size)++] = bits;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6819      	ldr	r1, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	1c50      	adds	r0, r2, #1
 8005090:	6018      	str	r0, [r3, #0]
 8005092:	188b      	adds	r3, r1, r2
 8005094:	197a      	adds	r2, r7, r5
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e040      	b.n	800511e <push_bits+0xc8>
    } else {
        for (int i=count - 1; i>=0; i--) {
 800509c:	230b      	movs	r3, #11
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e036      	b.n	8005116 <push_bits+0xc0>
            bool bit = bits & (1 << i);
 80050a8:	230a      	movs	r3, #10
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4091      	lsls	r1, r2
 80050b4:	000a      	movs	r2, r1
 80050b6:	401a      	ands	r2, r3
 80050b8:	2013      	movs	r0, #19
 80050ba:	183b      	adds	r3, r7, r0
 80050bc:	1e51      	subs	r1, r2, #1
 80050be:	418a      	sbcs	r2, r1
 80050c0:	701a      	strb	r2, [r3, #0]
            if (bit) { hse->current_byte |= hse->bit_index; }
 80050c2:	183b      	adds	r3, r7, r0
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <push_bits+0x84>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	7b5a      	ldrb	r2, [r3, #13]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	7b9b      	ldrb	r3, [r3, #14]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	735a      	strb	r2, [r3, #13]

            hse->bit_index >>= 1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	7b9b      	ldrb	r3, [r3, #14]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	739a      	strb	r2, [r3, #14]
            if (hse->bit_index == 0x00) {
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	7b9b      	ldrb	r3, [r3, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d110      	bne.n	8005110 <push_bits+0xba>
                hse->bit_index = 0x80;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	739a      	strb	r2, [r3, #14]
                oi->buf[(*oi->output_size)++] = hse->current_byte;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6819      	ldr	r1, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	1c50      	adds	r0, r2, #1
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	188b      	adds	r3, r1, r2
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	7b52      	ldrb	r2, [r2, #13]
 8005108:	701a      	strb	r2, [r3, #0]
                hse->current_byte = 0x00;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	735a      	strb	r2, [r3, #13]
        for (int i=count - 1; i>=0; i--) {
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3b01      	subs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	dac5      	bge.n	80050a8 <push_bits+0x52>
            }
        }
    }
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b006      	add	sp, #24
 8005124:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005128 <push_literal_byte>:

static void push_literal_byte(heatshrink_encoder *hse, output_info *oi) {
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
    uint16_t processed_offset = hse->match_scan_index - 1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	885a      	ldrh	r2, [r3, #2]
 8005136:	240e      	movs	r4, #14
 8005138:	193b      	adds	r3, r7, r4
 800513a:	3a01      	subs	r2, #1
 800513c:	801a      	strh	r2, [r3, #0]
    uint16_t input_offset = get_input_offset(hse) + processed_offset;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f7ff fdb1 	bl	8004ca8 <get_input_offset>
 8005146:	0003      	movs	r3, r0
 8005148:	0019      	movs	r1, r3
 800514a:	200c      	movs	r0, #12
 800514c:	183b      	adds	r3, r7, r0
 800514e:	193a      	adds	r2, r7, r4
 8005150:	8812      	ldrh	r2, [r2, #0]
 8005152:	188a      	adds	r2, r1, r2
 8005154:	801a      	strh	r2, [r3, #0]
    uint8_t c = hse->buffer[input_offset];
 8005156:	183b      	adds	r3, r7, r0
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	240b      	movs	r4, #11
 800515c:	193b      	adds	r3, r7, r4
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4808      	ldr	r0, [pc, #32]	; (8005184 <push_literal_byte+0x5c>)
 8005162:	188a      	adds	r2, r1, r2
 8005164:	1812      	adds	r2, r2, r0
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
    push_bits(hse, 8, c, oi);
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	193b      	adds	r3, r7, r4
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	000b      	movs	r3, r1
 8005174:	2108      	movs	r1, #8
 8005176:	f7ff ff6e 	bl	8005056 <push_bits>
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b005      	add	sp, #20
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	00000412 	.word	0x00000412

08005188 <save_backlog>:

static void save_backlog(heatshrink_encoder *hse) {
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
    size_t input_buf_sz = get_input_buffer_size(hse);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff fd95 	bl	8004cc2 <get_input_buffer_size>
 8005198:	0003      	movs	r3, r0
 800519a:	617b      	str	r3, [r7, #20]

    uint16_t msi = hse->match_scan_index;
 800519c:	2012      	movs	r0, #18
 800519e:	183b      	adds	r3, r7, r0
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	8852      	ldrh	r2, [r2, #2]
 80051a4:	801a      	strh	r2, [r3, #0]

    uint16_t rem = input_buf_sz - msi;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	b299      	uxth	r1, r3
 80051aa:	2410      	movs	r4, #16
 80051ac:	193b      	adds	r3, r7, r4
 80051ae:	183a      	adds	r2, r7, r0
 80051b0:	8812      	ldrh	r2, [r2, #0]
 80051b2:	1a8a      	subs	r2, r1, r2
 80051b4:	801a      	strh	r2, [r3, #0]
    uint16_t shift_sz = input_buf_sz + rem;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	b299      	uxth	r1, r3
 80051ba:	250e      	movs	r5, #14
 80051bc:	197b      	adds	r3, r7, r5
 80051be:	193a      	adds	r2, r7, r4
 80051c0:	8812      	ldrh	r2, [r2, #0]
 80051c2:	188a      	adds	r2, r1, r2
 80051c4:	801a      	strh	r2, [r3, #0]

    memmove(&hse->buffer[0],
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a12      	ldr	r2, [pc, #72]	; (8005214 <save_backlog+0x8c>)
 80051ca:	1898      	adds	r0, r3, r2
        &hse->buffer[input_buf_sz - rem],
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2282      	movs	r2, #130	; 0x82
 80051d6:	00d2      	lsls	r2, r2, #3
 80051d8:	4694      	mov	ip, r2
 80051da:	4463      	add	r3, ip
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	18d3      	adds	r3, r2, r3
 80051e0:	1c99      	adds	r1, r3, #2
    memmove(&hse->buffer[0],
 80051e2:	197b      	adds	r3, r7, r5
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	001a      	movs	r2, r3
 80051e8:	f003 ffc7 	bl	800917a <memmove>
        shift_sz);

    hse->match_scan_index = 0;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	805a      	strh	r2, [r3, #2]
    hse->input_size -= input_buf_sz - rem;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	881a      	ldrh	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	1939      	adds	r1, r7, r4
 80051fc:	8809      	ldrh	r1, [r1, #0]
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	b29b      	uxth	r3, r3
 8005202:	18d3      	adds	r3, r2, r3
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	801a      	strh	r2, [r3, #0]
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bdb0      	pop	{r4, r5, r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	00000412 	.word	0x00000412

08005218 <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af04      	add	r7, sp, #16
 800521e:	0002      	movs	r2, r0
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	1dbb      	adds	r3, r7, #6
 8005226:	1c0a      	adds	r2, r1, #0
 8005228:	701a      	strb	r2, [r3, #0]
	UBYTE Buf[1] = {0};
 800522a:	240c      	movs	r4, #12
 800522c:	193b      	adds	r3, r7, r4
 800522e:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <DEV_I2C_WriteByte+0x4c>)
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	701a      	strb	r2, [r3, #0]
	Buf[0] = data_;
 8005234:	193b      	adds	r3, r7, r4
 8005236:	1dba      	adds	r2, r7, #6
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <DEV_I2C_WriteByte+0x50>)
 800523e:	8819      	ldrh	r1, [r3, #0]
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	4809      	ldr	r0, [pc, #36]	; (800526c <DEV_I2C_WriteByte+0x54>)
 8005248:	2310      	movs	r3, #16
 800524a:	9302      	str	r3, [sp, #8]
 800524c:	2301      	movs	r3, #1
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	193b      	adds	r3, r7, r4
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2301      	movs	r3, #1
 8005256:	f001 ffcb 	bl	80071f0 <HAL_I2C_Mem_Write>
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b005      	add	sp, #20
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	0800a888 	.word	0x0800a888
 8005268:	2000044c 	.word	0x2000044c
 800526c:	20000530 	.word	0x20000530

08005270 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af04      	add	r7, sp, #16
 8005276:	0002      	movs	r2, r0
 8005278:	1dfb      	adds	r3, r7, #7
 800527a:	701a      	strb	r2, [r3, #0]
	UBYTE Buf[1]={add_};
 800527c:	240c      	movs	r4, #12
 800527e:	193b      	adds	r3, r7, r4
 8005280:	1dfa      	adds	r2, r7, #7
 8005282:	7812      	ldrb	r2, [r2, #0]
 8005284:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <DEV_I2C_ReadByte+0x40>)
 8005288:	8819      	ldrh	r1, [r3, #0]
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b29a      	uxth	r2, r3
 8005290:	4808      	ldr	r0, [pc, #32]	; (80052b4 <DEV_I2C_ReadByte+0x44>)
 8005292:	2310      	movs	r3, #16
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	2301      	movs	r3, #1
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	193b      	adds	r3, r7, r4
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2301      	movs	r3, #1
 80052a0:	f002 f8d4 	bl	800744c <HAL_I2C_Mem_Read>
	return Buf[0];
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	781b      	ldrb	r3, [r3, #0]
}
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b005      	add	sp, #20
 80052ae:	bd90      	pop	{r4, r7, pc}
 80052b0:	2000044c 	.word	0x2000044c
 80052b4:	20000530 	.word	0x20000530

080052b8 <invmsICM20948Check>:
static void invmsICM20948GyroOffset(void);

static void invmsICM20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data);
static void invmsICM20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data);
extern bool invmsICM20948Check(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
    bool bRet = false;
 80052be:	1dfb      	adds	r3, r7, #7
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
    if(REG_VAL_WIA == DEV_I2C_ReadByte( REG_ADD_WIA))
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff ffd3 	bl	8005270 <DEV_I2C_ReadByte>
 80052ca:	0003      	movs	r3, r0
 80052cc:	2bea      	cmp	r3, #234	; 0xea
 80052ce:	d102      	bne.n	80052d6 <invmsICM20948Check+0x1e>
    {
        bRet = true;
 80052d0:	1dfb      	adds	r3, r7, #7
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
    }
    return bRet;
 80052d6:	1dfb      	adds	r3, r7, #7
 80052d8:	781b      	ldrb	r3, [r3, #0]
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b002      	add	sp, #8
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <invmsICM20948Init>:

extern void invmsICM20948Init(void)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	af00      	add	r7, sp, #0
    /* user bank 0 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80052e6:	2100      	movs	r1, #0
 80052e8:	207f      	movs	r0, #127	; 0x7f
 80052ea:	f7ff ff95 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_PWR_MIGMT_1,  REG_VAL_ALL_RGE_RESET);
 80052ee:	2101      	movs	r1, #1
 80052f0:	2006      	movs	r0, #6
 80052f2:	f7ff ff91 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_Delay_ms(10);
 80052f6:	200a      	movs	r0, #10
 80052f8:	f001 fc9c 	bl	8006c34 <HAL_Delay>
    DEV_I2C_WriteByte( REG_ADD_PWR_MIGMT_1,  REG_VAL_RUN_MODE);
 80052fc:	2101      	movs	r1, #1
 80052fe:	2006      	movs	r0, #6
 8005300:	f7ff ff8a 	bl	8005218 <DEV_I2C_WriteByte>

    /* user bank 2 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8005304:	2120      	movs	r1, #32
 8005306:	207f      	movs	r0, #127	; 0x7f
 8005308:	f7ff ff86 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_GYRO_SMPLRT_DIV, 0x07);
 800530c:	2107      	movs	r1, #7
 800530e:	2000      	movs	r0, #0
 8005310:	f7ff ff82 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_GYRO_CONFIG_1,
 8005314:	2135      	movs	r1, #53	; 0x35
 8005316:	2001      	movs	r0, #1
 8005318:	f7ff ff7e 	bl	8005218 <DEV_I2C_WriteByte>
                      REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_1000DPS | REG_VAL_BIT_GYRO_DLPF);
    DEV_I2C_WriteByte( REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07);
 800531c:	2107      	movs	r1, #7
 800531e:	2011      	movs	r0, #17
 8005320:	f7ff ff7a 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_ACCEL_CONFIG,
 8005324:	2131      	movs	r1, #49	; 0x31
 8005326:	2014      	movs	r0, #20
 8005328:	f7ff ff76 	bl	8005218 <DEV_I2C_WriteByte>
                      REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

    /* user bank 0 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800532c:	2100      	movs	r1, #0
 800532e:	207f      	movs	r0, #127	; 0x7f
 8005330:	f7ff ff72 	bl	8005218 <DEV_I2C_WriteByte>

    DEV_Delay_ms(100);
 8005334:	2064      	movs	r0, #100	; 0x64
 8005336:	f001 fc7d 	bl	8006c34 <HAL_Delay>
    /* offset */
    invmsICM20948GyroOffset();
 800533a:	f000 fb9b 	bl	8005a74 <invmsICM20948GyroOffset>

    invmsICM20948MagCheck();
 800533e:	f000 fa3b 	bl	80057b8 <invmsICM20948MagCheck>

    invmsICM20948WriteSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_WRITE,
 8005342:	2204      	movs	r2, #4
 8005344:	2131      	movs	r1, #49	; 0x31
 8005346:	200c      	movs	r0, #12
 8005348:	f000 fae2 	bl	8005910 <invmsICM20948WriteSecondary>
                                 REG_ADD_MAG_CNTL2, REG_VAL_MAG_MODE_20HZ);
    return;
 800534c:	46c0      	nop			; (mov r8, r8)
}
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <invmsICM20948GyroRead>:
extern void invmsICM20948GyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 8005354:	b5b0      	push	{r4, r5, r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0};
 8005360:	2520      	movs	r5, #32
 8005362:	197b      	adds	r3, r7, r5
 8005364:	0018      	movs	r0, r3
 8005366:	2306      	movs	r3, #6
 8005368:	001a      	movs	r2, r3
 800536a:	2100      	movs	r1, #0
 800536c:	f003 ff18 	bl	80091a0 <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8005370:	2314      	movs	r3, #20
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	0018      	movs	r0, r3
 8005376:	230c      	movs	r3, #12
 8005378:	001a      	movs	r2, r3
 800537a:	2100      	movs	r1, #0
 800537c:	f003 ff10 	bl	80091a0 <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 8005380:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <invmsICM20948GyroRead+0x18c>)
 8005382:	2200      	movs	r2, #0
 8005384:	5e9b      	ldrsh	r3, [r3, r2]
 8005386:	b29b      	uxth	r3, r3
 8005388:	3301      	adds	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	b21a      	sxth	r2, r3
 800538e:	4b54      	ldr	r3, [pc, #336]	; (80054e0 <invmsICM20948GyroRead+0x18c>)
 8005390:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_XOUT_L);
 8005392:	2034      	movs	r0, #52	; 0x34
 8005394:	f7ff ff6c 	bl	8005270 <DEV_I2C_ReadByte>
 8005398:	0003      	movs	r3, r0
 800539a:	001a      	movs	r2, r3
 800539c:	2428      	movs	r4, #40	; 0x28
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_XOUT_H);
 80053a2:	2033      	movs	r0, #51	; 0x33
 80053a4:	f7ff ff64 	bl	8005270 <DEV_I2C_ReadByte>
 80053a8:	0003      	movs	r3, r0
 80053aa:	001a      	movs	r2, r3
 80053ac:	193b      	adds	r3, r7, r4
 80053ae:	705a      	strb	r2, [r3, #1]
    s16Buf[0]=	(u8Buf[1]<<8)|u8Buf[0];
 80053b0:	193b      	adds	r3, r7, r4
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	021b      	lsls	r3, r3, #8
 80053b6:	b21a      	sxth	r2, r3
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b21b      	sxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b21a      	sxth	r2, r3
 80053c2:	197b      	adds	r3, r7, r5
 80053c4:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_YOUT_L);
 80053c6:	2036      	movs	r0, #54	; 0x36
 80053c8:	f7ff ff52 	bl	8005270 <DEV_I2C_ReadByte>
 80053cc:	0003      	movs	r3, r0
 80053ce:	001a      	movs	r2, r3
 80053d0:	193b      	adds	r3, r7, r4
 80053d2:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_YOUT_H);
 80053d4:	2035      	movs	r0, #53	; 0x35
 80053d6:	f7ff ff4b 	bl	8005270 <DEV_I2C_ReadByte>
 80053da:	0003      	movs	r3, r0
 80053dc:	001a      	movs	r2, r3
 80053de:	193b      	adds	r3, r7, r4
 80053e0:	705a      	strb	r2, [r3, #1]
    s16Buf[1]=	(u8Buf[1]<<8)|u8Buf[0];
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	b21a      	sxth	r2, r3
 80053ea:	193b      	adds	r3, r7, r4
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	197b      	adds	r3, r7, r5
 80053f6:	805a      	strh	r2, [r3, #2]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_ZOUT_L);
 80053f8:	2038      	movs	r0, #56	; 0x38
 80053fa:	f7ff ff39 	bl	8005270 <DEV_I2C_ReadByte>
 80053fe:	0003      	movs	r3, r0
 8005400:	001a      	movs	r2, r3
 8005402:	193b      	adds	r3, r7, r4
 8005404:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_ZOUT_H);
 8005406:	2037      	movs	r0, #55	; 0x37
 8005408:	f7ff ff32 	bl	8005270 <DEV_I2C_ReadByte>
 800540c:	0003      	movs	r3, r0
 800540e:	001a      	movs	r2, r3
 8005410:	193b      	adds	r3, r7, r4
 8005412:	705a      	strb	r2, [r3, #1]
    s16Buf[2]=	(u8Buf[1]<<8)|u8Buf[0];
 8005414:	193b      	adds	r3, r7, r4
 8005416:	785b      	ldrb	r3, [r3, #1]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	b21a      	sxth	r2, r3
 800541c:	193b      	adds	r3, r7, r4
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21a      	sxth	r2, r3
 8005426:	197b      	adds	r3, r7, r5
 8005428:	809a      	strh	r2, [r3, #4]

#if 1
    for(i = 0; i < 3; i ++)
 800542a:	232f      	movs	r3, #47	; 0x2f
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e026      	b.n	8005482 <invmsICM20948GyroRead+0x12e>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8005434:	242f      	movs	r4, #47	; 0x2f
 8005436:	193b      	adds	r3, r7, r4
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	0013      	movs	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	189b      	adds	r3, r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <invmsICM20948GyroRead+0x190>)
 8005444:	1898      	adds	r0, r3, r2
 8005446:	193b      	adds	r3, r7, r4
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	0013      	movs	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	189b      	adds	r3, r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4a24      	ldr	r2, [pc, #144]	; (80054e4 <invmsICM20948GyroRead+0x190>)
 8005454:	189b      	adds	r3, r3, r2
 8005456:	1c99      	adds	r1, r3, #2
 8005458:	0025      	movs	r5, r4
 800545a:	197b      	adds	r3, r7, r5
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	2320      	movs	r3, #32
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	0052      	lsls	r2, r2, #1
 8005464:	5ed4      	ldrsh	r4, [r2, r3]
 8005466:	197b      	adds	r3, r7, r5
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	2214      	movs	r2, #20
 800546e:	18ba      	adds	r2, r7, r2
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	0022      	movs	r2, r4
 8005474:	f000 fabb 	bl	80059ee <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 8005478:	197b      	adds	r3, r7, r5
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	197b      	adds	r3, r7, r5
 800547e:	3201      	adds	r2, #1
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	232f      	movs	r3, #47	; 0x2f
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d9d3      	bls.n	8005434 <invmsICM20948GyroRead+0xe0>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 800548c:	2114      	movs	r1, #20
 800548e:	187b      	adds	r3, r7, r1
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	b29a      	uxth	r2, r3
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <invmsICM20948GyroRead+0x194>)
 8005496:	2000      	movs	r0, #0
 8005498:	5e1b      	ldrsh	r3, [r3, r0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	b29b      	uxth	r3, r3
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <invmsICM20948GyroRead+0x194>)
 80054ae:	2002      	movs	r0, #2
 80054b0:	5e1b      	ldrsh	r3, [r3, r0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b21a      	sxth	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <invmsICM20948GyroRead+0x194>)
 80054c6:	2104      	movs	r1, #4
 80054c8:	5e5b      	ldrsh	r3, [r3, r1]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	b21a      	sxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	801a      	strh	r2, [r3, #0]
#else
    *ps16X = s16Buf[0];
    *ps16Y = s16Buf[1];
    *ps16Z = s16Buf[2];
#endif
    return;
 80054d6:	46c0      	nop			; (mov r8, r8)
}
 80054d8:	46bd      	mov	sp, r7
 80054da:	b00c      	add	sp, #48	; 0x30
 80054dc:	bdb0      	pop	{r4, r5, r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	20000d6a 	.word	0x20000d6a
 80054e4:	20000d6c 	.word	0x20000d6c
 80054e8:	20000d64 	.word	0x20000d64

080054ec <invmsICM20948AccelRead>:

extern void invmsICM20948AccelRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80054ec:	b5b0      	push	{r4, r5, r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[2];
    int16_t s16Buf[3] = {0};
 80054f8:	251c      	movs	r5, #28
 80054fa:	197b      	adds	r3, r7, r5
 80054fc:	0018      	movs	r0, r3
 80054fe:	2306      	movs	r3, #6
 8005500:	001a      	movs	r2, r3
 8005502:	2100      	movs	r1, #0
 8005504:	f003 fe4c 	bl	80091a0 <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8005508:	2310      	movs	r3, #16
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	0018      	movs	r0, r3
 800550e:	230c      	movs	r3, #12
 8005510:	001a      	movs	r2, r3
 8005512:	2100      	movs	r1, #0
 8005514:	f003 fe44 	bl	80091a0 <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_XOUT_L);
 8005518:	202e      	movs	r0, #46	; 0x2e
 800551a:	f7ff fea9 	bl	8005270 <DEV_I2C_ReadByte>
 800551e:	0003      	movs	r3, r0
 8005520:	001a      	movs	r2, r3
 8005522:	2424      	movs	r4, #36	; 0x24
 8005524:	193b      	adds	r3, r7, r4
 8005526:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_XOUT_H);
 8005528:	202d      	movs	r0, #45	; 0x2d
 800552a:	f7ff fea1 	bl	8005270 <DEV_I2C_ReadByte>
 800552e:	0003      	movs	r3, r0
 8005530:	001a      	movs	r2, r3
 8005532:	193b      	adds	r3, r7, r4
 8005534:	705a      	strb	r2, [r3, #1]
    s16Buf[0]=	(u8Buf[1]<<8)|u8Buf[0];
 8005536:	193b      	adds	r3, r7, r4
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	b21a      	sxth	r2, r3
 800553e:	193b      	adds	r3, r7, r4
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b21b      	sxth	r3, r3
 8005544:	4313      	orrs	r3, r2
 8005546:	b21a      	sxth	r2, r3
 8005548:	197b      	adds	r3, r7, r5
 800554a:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_YOUT_L);
 800554c:	2030      	movs	r0, #48	; 0x30
 800554e:	f7ff fe8f 	bl	8005270 <DEV_I2C_ReadByte>
 8005552:	0003      	movs	r3, r0
 8005554:	001a      	movs	r2, r3
 8005556:	193b      	adds	r3, r7, r4
 8005558:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_YOUT_H);
 800555a:	202f      	movs	r0, #47	; 0x2f
 800555c:	f7ff fe88 	bl	8005270 <DEV_I2C_ReadByte>
 8005560:	0003      	movs	r3, r0
 8005562:	001a      	movs	r2, r3
 8005564:	193b      	adds	r3, r7, r4
 8005566:	705a      	strb	r2, [r3, #1]
    s16Buf[1]=	(u8Buf[1]<<8)|u8Buf[0];
 8005568:	193b      	adds	r3, r7, r4
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	b21a      	sxth	r2, r3
 8005570:	193b      	adds	r3, r7, r4
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	b21b      	sxth	r3, r3
 8005576:	4313      	orrs	r3, r2
 8005578:	b21a      	sxth	r2, r3
 800557a:	197b      	adds	r3, r7, r5
 800557c:	805a      	strh	r2, [r3, #2]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_ZOUT_L);
 800557e:	2032      	movs	r0, #50	; 0x32
 8005580:	f7ff fe76 	bl	8005270 <DEV_I2C_ReadByte>
 8005584:	0003      	movs	r3, r0
 8005586:	001a      	movs	r2, r3
 8005588:	193b      	adds	r3, r7, r4
 800558a:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_ZOUT_H);
 800558c:	2031      	movs	r0, #49	; 0x31
 800558e:	f7ff fe6f 	bl	8005270 <DEV_I2C_ReadByte>
 8005592:	0003      	movs	r3, r0
 8005594:	001a      	movs	r2, r3
 8005596:	193b      	adds	r3, r7, r4
 8005598:	705a      	strb	r2, [r3, #1]
    s16Buf[2]=	(u8Buf[1]<<8)|u8Buf[0];
 800559a:	193b      	adds	r3, r7, r4
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	b21a      	sxth	r2, r3
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b21a      	sxth	r2, r3
 80055ac:	197b      	adds	r3, r7, r5
 80055ae:	809a      	strh	r2, [r3, #4]

    #if 1
    for(i = 0; i < 3; i ++)
 80055b0:	2327      	movs	r3, #39	; 0x27
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	e026      	b.n	8005608 <invmsICM20948AccelRead+0x11c>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 80055ba:	2427      	movs	r4, #39	; 0x27
 80055bc:	193b      	adds	r3, r7, r4
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	0013      	movs	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4a1c      	ldr	r2, [pc, #112]	; (800563c <invmsICM20948AccelRead+0x150>)
 80055ca:	1898      	adds	r0, r3, r2
 80055cc:	193b      	adds	r3, r7, r4
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	0013      	movs	r3, r2
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	189b      	adds	r3, r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4a18      	ldr	r2, [pc, #96]	; (800563c <invmsICM20948AccelRead+0x150>)
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	1c99      	adds	r1, r3, #2
 80055de:	0025      	movs	r5, r4
 80055e0:	197b      	adds	r3, r7, r5
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	231c      	movs	r3, #28
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	0052      	lsls	r2, r2, #1
 80055ea:	5ed4      	ldrsh	r4, [r2, r3]
 80055ec:	197b      	adds	r3, r7, r5
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	2210      	movs	r2, #16
 80055f4:	18ba      	adds	r2, r7, r2
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	0022      	movs	r2, r4
 80055fa:	f000 f9f8 	bl	80059ee <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 80055fe:	197b      	adds	r3, r7, r5
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	197b      	adds	r3, r7, r5
 8005604:	3201      	adds	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	2327      	movs	r3, #39	; 0x27
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d9d3      	bls.n	80055ba <invmsICM20948AccelRead+0xce>
    }
    *ps16X = s32OutBuf[0];
 8005612:	2110      	movs	r1, #16
 8005614:	187b      	adds	r3, r7, r1
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b21a      	sxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1];
 800561e:	187b      	adds	r3, r7, r1
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b21a      	sxth	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2];
 8005628:	187b      	adds	r3, r7, r1
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	b21a      	sxth	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	801a      	strh	r2, [r3, #0]
    #else
    *ps16X = s16Buf[0];
    *ps16Y = s16Buf[1];
    *ps16Z = s16Buf[2];
    #endif
    return;
 8005632:	46c0      	nop			; (mov r8, r8)

}
 8005634:	46bd      	mov	sp, r7
 8005636:	b00a      	add	sp, #40	; 0x28
 8005638:	bdb0      	pop	{r4, r5, r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	20000da4 	.word	0x20000da4

08005640 <invmsICM20948MagRead>:

extern void invmsICM20948MagRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b08c      	sub	sp, #48	; 0x30
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
    uint8_t counter = 20;
 800564c:	232f      	movs	r3, #47	; 0x2f
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2214      	movs	r2, #20
 8005652:	701a      	strb	r2, [r3, #0]
    uint8_t u8Data[MAG_DATA_LEN];
    int16_t s16Buf[3] = {0};
 8005654:	2320      	movs	r3, #32
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	0018      	movs	r0, r3
 800565a:	2306      	movs	r3, #6
 800565c:	001a      	movs	r2, r3
 800565e:	2100      	movs	r1, #0
 8005660:	f003 fd9e 	bl	80091a0 <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8005664:	2314      	movs	r3, #20
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	0018      	movs	r0, r3
 800566a:	230c      	movs	r3, #12
 800566c:	001a      	movs	r2, r3
 800566e:	2100      	movs	r1, #0
 8005670:	f003 fd96 	bl	80091a0 <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    while( counter>0 )
 8005674:	e015      	b.n	80056a2 <invmsICM20948MagRead+0x62>
    {
        DEV_Delay_ms(10);
 8005676:	200a      	movs	r0, #10
 8005678:	f001 fadc 	bl	8006c34 <HAL_Delay>
        invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 800567c:	2428      	movs	r4, #40	; 0x28
 800567e:	193b      	adds	r3, r7, r4
 8005680:	2201      	movs	r2, #1
 8005682:	2110      	movs	r1, #16
 8005684:	208c      	movs	r0, #140	; 0x8c
 8005686:	f000 f8b4 	bl	80057f2 <invmsICM20948ReadSecondary>
                                    REG_ADD_MAG_ST2, 1, u8Data);

        if ((u8Data[0] & 0x01) != 0)
 800568a:	193b      	adds	r3, r7, r4
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	001a      	movs	r2, r3
 8005690:	2301      	movs	r3, #1
 8005692:	4013      	ands	r3, r2
 8005694:	d10b      	bne.n	80056ae <invmsICM20948MagRead+0x6e>
            break;

        counter--;
 8005696:	212f      	movs	r1, #47	; 0x2f
 8005698:	187b      	adds	r3, r7, r1
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	187b      	adds	r3, r7, r1
 800569e:	3a01      	subs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
    while( counter>0 )
 80056a2:	232f      	movs	r3, #47	; 0x2f
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e4      	bne.n	8005676 <invmsICM20948MagRead+0x36>
 80056ac:	e000      	b.n	80056b0 <invmsICM20948MagRead+0x70>
            break;
 80056ae:	46c0      	nop			; (mov r8, r8)
    }

    if(counter != 0)
 80056b0:	232f      	movs	r3, #47	; 0x2f
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02a      	beq.n	8005710 <invmsICM20948MagRead+0xd0>
    {
        invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 80056ba:	2428      	movs	r4, #40	; 0x28
 80056bc:	193b      	adds	r3, r7, r4
 80056be:	2206      	movs	r2, #6
 80056c0:	2111      	movs	r1, #17
 80056c2:	208c      	movs	r0, #140	; 0x8c
 80056c4:	f000 f895 	bl	80057f2 <invmsICM20948ReadSecondary>
                                    REG_ADD_MAG_DATA,
                                    MAG_DATA_LEN,
                                    u8Data);
        s16Buf[0] = ((int16_t)u8Data[1]<<8) | u8Data[0];
 80056c8:	0021      	movs	r1, r4
 80056ca:	187b      	adds	r3, r7, r1
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	b21a      	sxth	r2, r3
 80056d2:	187b      	adds	r3, r7, r1
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	4313      	orrs	r3, r2
 80056da:	b21a      	sxth	r2, r3
 80056dc:	2020      	movs	r0, #32
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	801a      	strh	r2, [r3, #0]
        s16Buf[1] = ((int16_t)u8Data[3]<<8) | u8Data[2];
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	78db      	ldrb	r3, [r3, #3]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	187b      	adds	r3, r7, r1
 80056ec:	789b      	ldrb	r3, [r3, #2]
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b21a      	sxth	r2, r3
 80056f4:	183b      	adds	r3, r7, r0
 80056f6:	805a      	strh	r2, [r3, #2]
        s16Buf[2] = ((int16_t)u8Data[5]<<8) | u8Data[4];
 80056f8:	187b      	adds	r3, r7, r1
 80056fa:	795b      	ldrb	r3, [r3, #5]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	b21a      	sxth	r2, r3
 8005700:	187b      	adds	r3, r7, r1
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	b21b      	sxth	r3, r3
 8005706:	4313      	orrs	r3, r2
 8005708:	b21a      	sxth	r2, r3
 800570a:	183b      	adds	r3, r7, r0
 800570c:	809a      	strh	r2, [r3, #4]
 800570e:	e003      	b.n	8005718 <invmsICM20948MagRead+0xd8>
    }
    else
    {
        printf("\r\n Mag is bussy \r\n");
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <invmsICM20948MagRead+0x170>)
 8005712:	0018      	movs	r0, r3
 8005714:	f003 fee6 	bl	80094e4 <puts>
    }
#if 1
    for(i = 0; i < 3; i ++)
 8005718:	232e      	movs	r3, #46	; 0x2e
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e026      	b.n	8005770 <invmsICM20948MagRead+0x130>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8005722:	242e      	movs	r4, #46	; 0x2e
 8005724:	193b      	adds	r3, r7, r4
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	0013      	movs	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	189b      	adds	r3, r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <invmsICM20948MagRead+0x174>)
 8005732:	1898      	adds	r0, r3, r2
 8005734:	193b      	adds	r3, r7, r4
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	0013      	movs	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	189b      	adds	r3, r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <invmsICM20948MagRead+0x174>)
 8005742:	189b      	adds	r3, r3, r2
 8005744:	1c99      	adds	r1, r3, #2
 8005746:	0025      	movs	r5, r4
 8005748:	197b      	adds	r3, r7, r5
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	2320      	movs	r3, #32
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	0052      	lsls	r2, r2, #1
 8005752:	5ed4      	ldrsh	r4, [r2, r3]
 8005754:	197b      	adds	r3, r7, r5
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	2214      	movs	r2, #20
 800575c:	18ba      	adds	r2, r7, r2
 800575e:	18d3      	adds	r3, r2, r3
 8005760:	0022      	movs	r2, r4
 8005762:	f000 f944 	bl	80059ee <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 8005766:	197b      	adds	r3, r7, r5
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	197b      	adds	r3, r7, r5
 800576c:	3201      	adds	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	232e      	movs	r3, #46	; 0x2e
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d9d3      	bls.n	8005722 <invmsICM20948MagRead+0xe2>
    }

    *ps16X =  s32OutBuf[0];
 800577a:	2114      	movs	r1, #20
 800577c:	187b      	adds	r3, r7, r1
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b21a      	sxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	801a      	strh	r2, [r3, #0]
    *ps16Y = -s32OutBuf[1];
 8005786:	187b      	adds	r3, r7, r1
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	b29b      	uxth	r3, r3
 800578c:	425b      	negs	r3, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	b21a      	sxth	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	801a      	strh	r2, [r3, #0]
    *ps16Z = -s32OutBuf[2];
 8005796:	187b      	adds	r3, r7, r1
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	b29b      	uxth	r3, r3
 800579c:	425b      	negs	r3, r3
 800579e:	b29b      	uxth	r3, r3
 80057a0:	b21a      	sxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	801a      	strh	r2, [r3, #0]
#else
    *ps16X = s16Buf[0];
    *ps16Y = -s16Buf[1];
    *ps16Z = -s16Buf[2];
#endif
    return;
 80057a6:	46c0      	nop			; (mov r8, r8)
}
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b00c      	add	sp, #48	; 0x30
 80057ac:	bdb0      	pop	{r4, r5, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	0800a88c 	.word	0x0800a88c
 80057b4:	20000ddc 	.word	0x20000ddc

080057b8 <invmsICM20948MagCheck>:

static bool invmsICM20948MagCheck(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
    bool bRet = false;
 80057be:	1dfb      	adds	r3, r7, #7
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
    uint8_t u8Ret[2];

    invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	2202      	movs	r2, #2
 80057c8:	2100      	movs	r1, #0
 80057ca:	208c      	movs	r0, #140	; 0x8c
 80057cc:	f000 f811 	bl	80057f2 <invmsICM20948ReadSecondary>
                                REG_ADD_MAG_WIA1, 2,u8Ret);
    if( (u8Ret[0] == REG_VAL_MAG_WIA1) && ( u8Ret[1] == REG_VAL_MAG_WIA2) )
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b48      	cmp	r3, #72	; 0x48
 80057d6:	d106      	bne.n	80057e6 <invmsICM20948MagCheck+0x2e>
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b09      	cmp	r3, #9
 80057de:	d102      	bne.n	80057e6 <invmsICM20948MagCheck+0x2e>
    {
        bRet = true;
 80057e0:	1dfb      	adds	r3, r7, #7
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
    }

    return bRet;
 80057e6:	1dfb      	adds	r3, r7, #7
 80057e8:	781b      	ldrb	r3, [r3, #0]
}
 80057ea:	0018      	movs	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b002      	add	sp, #8
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <invmsICM20948ReadSecondary>:

static void invmsICM20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data)
{
 80057f2:	b5b0      	push	{r4, r5, r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	0004      	movs	r4, r0
 80057fa:	0008      	movs	r0, r1
 80057fc:	0011      	movs	r1, r2
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	1dfb      	adds	r3, r7, #7
 8005802:	1c22      	adds	r2, r4, #0
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	1dbb      	adds	r3, r7, #6
 8005808:	1c02      	adds	r2, r0, #0
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	1d7b      	adds	r3, r7, #5
 800580e:	1c0a      	adds	r2, r1, #0
 8005810:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t u8Temp;

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 8005812:	2130      	movs	r1, #48	; 0x30
 8005814:	207f      	movs	r0, #127	; 0x7f
 8005816:	f7ff fcff 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_ADDR, u8I2CAddr);
 800581a:	1dfb      	adds	r3, r7, #7
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	0019      	movs	r1, r3
 8005820:	2003      	movs	r0, #3
 8005822:	f7ff fcf9 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_REG,  u8RegAddr);
 8005826:	1dbb      	adds	r3, r7, #6
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	0019      	movs	r1, r3
 800582c:	2004      	movs	r0, #4
 800582e:	f7ff fcf3 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL, REG_VAL_BIT_SLV0_EN|u8Len);
 8005832:	1d7b      	adds	r3, r7, #5
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	4252      	negs	r2, r2
 800583a:	4313      	orrs	r3, r2
 800583c:	b2db      	uxtb	r3, r3
 800583e:	0019      	movs	r1, r3
 8005840:	2005      	movs	r0, #5
 8005842:	f7ff fce9 	bl	8005218 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8005846:	2100      	movs	r1, #0
 8005848:	207f      	movs	r0, #127	; 0x7f
 800584a:	f7ff fce5 	bl	8005218 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_USER_CTRL);
 800584e:	250e      	movs	r5, #14
 8005850:	197c      	adds	r4, r7, r5
 8005852:	2003      	movs	r0, #3
 8005854:	f7ff fd0c 	bl	8005270 <DEV_I2C_ReadByte>
 8005858:	0003      	movs	r3, r0
 800585a:	7023      	strb	r3, [r4, #0]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 800585c:	0028      	movs	r0, r5
 800585e:	183b      	adds	r3, r7, r0
 8005860:	183a      	adds	r2, r7, r0
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	2120      	movs	r1, #32
 8005866:	430a      	orrs	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 800586a:	0004      	movs	r4, r0
 800586c:	183b      	adds	r3, r7, r0
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	0019      	movs	r1, r3
 8005872:	2003      	movs	r0, #3
 8005874:	f7ff fcd0 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_Delay_ms(5);
 8005878:	2005      	movs	r0, #5
 800587a:	f001 f9db 	bl	8006c34 <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 800587e:	0020      	movs	r0, r4
 8005880:	183b      	adds	r3, r7, r0
 8005882:	183a      	adds	r2, r7, r0
 8005884:	7812      	ldrb	r2, [r2, #0]
 8005886:	2120      	movs	r1, #32
 8005888:	438a      	bics	r2, r1
 800588a:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 800588c:	183b      	adds	r3, r7, r0
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	0019      	movs	r1, r3
 8005892:	2003      	movs	r0, #3
 8005894:	f7ff fcc0 	bl	8005218 <DEV_I2C_WriteByte>

    for(i=0; i<u8Len; i++)
 8005898:	230f      	movs	r3, #15
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e012      	b.n	80058c8 <invmsICM20948ReadSecondary+0xd6>
    {
        *(pu8data+i) = DEV_I2C_ReadByte( REG_ADD_EXT_SENS_DATA_00+i);
 80058a2:	250f      	movs	r5, #15
 80058a4:	197b      	adds	r3, r7, r5
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	333b      	adds	r3, #59	; 0x3b
 80058aa:	b2d9      	uxtb	r1, r3
 80058ac:	197b      	adds	r3, r7, r5
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	18d4      	adds	r4, r2, r3
 80058b4:	0008      	movs	r0, r1
 80058b6:	f7ff fcdb 	bl	8005270 <DEV_I2C_ReadByte>
 80058ba:	0003      	movs	r3, r0
 80058bc:	7023      	strb	r3, [r4, #0]
    for(i=0; i<u8Len; i++)
 80058be:	197b      	adds	r3, r7, r5
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	197b      	adds	r3, r7, r5
 80058c4:	3201      	adds	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	230f      	movs	r3, #15
 80058ca:	18fa      	adds	r2, r7, r3
 80058cc:	1d7b      	adds	r3, r7, #5
 80058ce:	7812      	ldrb	r2, [r2, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3e5      	bcc.n	80058a2 <invmsICM20948ReadSecondary+0xb0>

    }
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80058d6:	2130      	movs	r1, #48	; 0x30
 80058d8:	207f      	movs	r0, #127	; 0x7f
 80058da:	f7ff fc9d 	bl	8005218 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_I2C_SLV0_CTRL);
 80058de:	250e      	movs	r5, #14
 80058e0:	197c      	adds	r4, r7, r5
 80058e2:	2005      	movs	r0, #5
 80058e4:	f7ff fcc4 	bl	8005270 <DEV_I2C_ReadByte>
 80058e8:	0003      	movs	r3, r0
 80058ea:	7023      	strb	r3, [r4, #0]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
 80058ec:	197b      	adds	r3, r7, r5
 80058ee:	197a      	adds	r2, r7, r5
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 80058f4:	197b      	adds	r3, r7, r5
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	0019      	movs	r1, r3
 80058fa:	2005      	movs	r0, #5
 80058fc:	f7ff fc8c 	bl	8005218 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8005900:	2100      	movs	r1, #0
 8005902:	207f      	movs	r0, #127	; 0x7f
 8005904:	f7ff fc88 	bl	8005218 <DEV_I2C_WriteByte>

}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b004      	add	sp, #16
 800590e:	bdb0      	pop	{r4, r5, r7, pc}

08005910 <invmsICM20948WriteSecondary>:

static void invmsICM20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data)
{
 8005910:	b5b0      	push	{r4, r5, r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	0004      	movs	r4, r0
 8005918:	0008      	movs	r0, r1
 800591a:	0011      	movs	r1, r2
 800591c:	1dfb      	adds	r3, r7, #7
 800591e:	1c22      	adds	r2, r4, #0
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	1dbb      	adds	r3, r7, #6
 8005924:	1c02      	adds	r2, r0, #0
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	1d7b      	adds	r3, r7, #5
 800592a:	1c0a      	adds	r2, r1, #0
 800592c:	701a      	strb	r2, [r3, #0]
    uint8_t u8Temp;
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 800592e:	2130      	movs	r1, #48	; 0x30
 8005930:	207f      	movs	r0, #127	; 0x7f
 8005932:	f7ff fc71 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_ADDR, u8I2CAddr);
 8005936:	1dfb      	adds	r3, r7, #7
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	0019      	movs	r1, r3
 800593c:	2007      	movs	r0, #7
 800593e:	f7ff fc6b 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_REG,  u8RegAddr);
 8005942:	1dbb      	adds	r3, r7, #6
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	0019      	movs	r1, r3
 8005948:	2008      	movs	r0, #8
 800594a:	f7ff fc65 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_DO,   u8data);
 800594e:	1d7b      	adds	r3, r7, #5
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	0019      	movs	r1, r3
 8005954:	200a      	movs	r0, #10
 8005956:	f7ff fc5f 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_CTRL, REG_VAL_BIT_SLV0_EN|1);
 800595a:	2181      	movs	r1, #129	; 0x81
 800595c:	2009      	movs	r0, #9
 800595e:	f7ff fc5b 	bl	8005218 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8005962:	2100      	movs	r1, #0
 8005964:	207f      	movs	r0, #127	; 0x7f
 8005966:	f7ff fc57 	bl	8005218 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_USER_CTRL);
 800596a:	250f      	movs	r5, #15
 800596c:	197c      	adds	r4, r7, r5
 800596e:	2003      	movs	r0, #3
 8005970:	f7ff fc7e 	bl	8005270 <DEV_I2C_ReadByte>
 8005974:	0003      	movs	r3, r0
 8005976:	7023      	strb	r3, [r4, #0]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8005978:	0028      	movs	r0, r5
 800597a:	183b      	adds	r3, r7, r0
 800597c:	183a      	adds	r2, r7, r0
 800597e:	7812      	ldrb	r2, [r2, #0]
 8005980:	2120      	movs	r1, #32
 8005982:	430a      	orrs	r2, r1
 8005984:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 8005986:	0004      	movs	r4, r0
 8005988:	183b      	adds	r3, r7, r0
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	0019      	movs	r1, r3
 800598e:	2003      	movs	r0, #3
 8005990:	f7ff fc42 	bl	8005218 <DEV_I2C_WriteByte>
    DEV_Delay_ms(5);
 8005994:	2005      	movs	r0, #5
 8005996:	f001 f94d 	bl	8006c34 <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 800599a:	0020      	movs	r0, r4
 800599c:	183b      	adds	r3, r7, r0
 800599e:	183a      	adds	r2, r7, r0
 80059a0:	7812      	ldrb	r2, [r2, #0]
 80059a2:	2120      	movs	r1, #32
 80059a4:	438a      	bics	r2, r1
 80059a6:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 80059a8:	0005      	movs	r5, r0
 80059aa:	197b      	adds	r3, r7, r5
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	0019      	movs	r1, r3
 80059b0:	2003      	movs	r0, #3
 80059b2:	f7ff fc31 	bl	8005218 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80059b6:	2130      	movs	r1, #48	; 0x30
 80059b8:	207f      	movs	r0, #127	; 0x7f
 80059ba:	f7ff fc2d 	bl	8005218 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_I2C_SLV0_CTRL);
 80059be:	197c      	adds	r4, r7, r5
 80059c0:	2005      	movs	r0, #5
 80059c2:	f7ff fc55 	bl	8005270 <DEV_I2C_ReadByte>
 80059c6:	0003      	movs	r3, r0
 80059c8:	7023      	strb	r3, [r4, #0]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
 80059ca:	197b      	adds	r3, r7, r5
 80059cc:	197a      	adds	r2, r7, r5
 80059ce:	7812      	ldrb	r2, [r2, #0]
 80059d0:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 80059d2:	197b      	adds	r3, r7, r5
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	0019      	movs	r1, r3
 80059d8:	2005      	movs	r0, #5
 80059da:	f7ff fc1d 	bl	8005218 <DEV_I2C_WriteByte>

   DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 80059de:	2100      	movs	r1, #0
 80059e0:	207f      	movs	r0, #127	; 0x7f
 80059e2:	f7ff fc19 	bl	8005218 <DEV_I2C_WriteByte>

    return;
 80059e6:	46c0      	nop			; (mov r8, r8)
}
 80059e8:	46bd      	mov	sp, r7
 80059ea:	b004      	add	sp, #16
 80059ec:	bdb0      	pop	{r4, r5, r7, pc}

080059ee <invmsICM20948CalAvgValue>:

static void invmsICM20948CalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	1dbb      	adds	r3, r7, #6
 80059fc:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	*(pAvgBuffer + ((*pIndex) ++)) = InVal;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	b2d1      	uxtb	r1, r2
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	7011      	strb	r1, [r2, #0]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	1dba      	adds	r2, r7, #6
 8005a12:	8812      	ldrh	r2, [r2, #0]
 8005a14:	801a      	strh	r2, [r3, #0]
  	*pIndex &= 0x07;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2207      	movs	r2, #7
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	701a      	strb	r2, [r3, #0]

  	*pOutVal = 0;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 8005a2a:	2317      	movs	r3, #23
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e011      	b.n	8005a58 <invmsICM20948CalAvgValue+0x6a>
  	{
    	*pOutVal += *(pAvgBuffer + i);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2017      	movs	r0, #23
 8005a3a:	183a      	adds	r2, r7, r0
 8005a3c:	7812      	ldrb	r2, [r2, #0]
 8005a3e:	0052      	lsls	r2, r2, #1
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	188a      	adds	r2, r1, r2
 8005a44:	2100      	movs	r1, #0
 8005a46:	5e52      	ldrsh	r2, [r2, r1]
 8005a48:	189a      	adds	r2, r3, r2
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	183b      	adds	r3, r7, r0
 8005a54:	3201      	adds	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	2317      	movs	r3, #23
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b07      	cmp	r3, #7
 8005a60:	d9e8      	bls.n	8005a34 <invmsICM20948CalAvgValue+0x46>
  	}
  	*pOutVal >>= 3;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	10da      	asrs	r2, r3, #3
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b006      	add	sp, #24
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <invmsICM20948GyroOffset>:

static void invmsICM20948GyroOffset(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
	uint8_t i;
    int16_t	s16Gx = 0, s16Gy = 0, s16Gz = 0;
 8005a7a:	1dbb      	adds	r3, r7, #6
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	2200      	movs	r2, #0
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	1cbb      	adds	r3, r7, #2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	801a      	strh	r2, [r3, #0]
	int32_t	s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	2300      	movs	r3, #0
 8005a96:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < 32; i ++)
 8005a98:	2317      	movs	r3, #23
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e023      	b.n	8005aea <invmsICM20948GyroOffset+0x76>
 	{
        invmsICM20948GyroRead(&s16Gx, &s16Gy, &s16Gz);
 8005aa2:	1cba      	adds	r2, r7, #2
 8005aa4:	1d39      	adds	r1, r7, #4
 8005aa6:	1dbb      	adds	r3, r7, #6
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7ff fc53 	bl	8005354 <invmsICM20948GyroRead>
        s32TempGx += s16Gx;
 8005aae:	1dbb      	adds	r3, r7, #6
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	5e9b      	ldrsh	r3, [r3, r2]
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	189b      	adds	r3, r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
		s32TempGy += s16Gy;
 8005abc:	1d3b      	adds	r3, r7, #4
 8005abe:	2200      	movs	r2, #0
 8005ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
		s32TempGz += s16Gz;
 8005aca:	1cbb      	adds	r3, r7, #2
 8005acc:	2200      	movs	r2, #0
 8005ace:	5e9b      	ldrsh	r3, [r3, r2]
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	189b      	adds	r3, r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]
        DEV_Delay_ms(10);
 8005ad8:	200a      	movs	r0, #10
 8005ada:	f001 f8ab 	bl	8006c34 <HAL_Delay>
    for(i = 0; i < 32; i ++)
 8005ade:	2117      	movs	r1, #23
 8005ae0:	187b      	adds	r3, r7, r1
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	3201      	adds	r2, #1
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	2317      	movs	r3, #23
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b1f      	cmp	r3, #31
 8005af2:	d9d6      	bls.n	8005aa2 <invmsICM20948GyroOffset+0x2e>
    }
    gstGyroOffset.s16X = s32TempGx >> 5;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	115b      	asrs	r3, r3, #5
 8005af8:	b21a      	sxth	r2, r3
 8005afa:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <invmsICM20948GyroOffset+0xa8>)
 8005afc:	801a      	strh	r2, [r3, #0]
	gstGyroOffset.s16Y = s32TempGy >> 5;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	115b      	asrs	r3, r3, #5
 8005b02:	b21a      	sxth	r2, r3
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <invmsICM20948GyroOffset+0xa8>)
 8005b06:	805a      	strh	r2, [r3, #2]
	gstGyroOffset.s16Z = s32TempGz >> 5;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	115b      	asrs	r3, r3, #5
 8005b0c:	b21a      	sxth	r2, r3
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <invmsICM20948GyroOffset+0xa8>)
 8005b10:	809a      	strh	r2, [r3, #4]
    return;
 8005b12:	46c0      	nop			; (mov r8, r8)
}
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b006      	add	sp, #24
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	20000d64 	.word	0x20000d64

08005b20 <invSqrt>:
  * @param
  * @retval
  */

float invSqrt(float x)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8005b28:	21fc      	movs	r1, #252	; 0xfc
 8005b2a:	0589      	lsls	r1, r1, #22
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fa ff31 	bl	8000994 <__aeabi_fmul>
 8005b32:	1c03      	adds	r3, r0, #0
 8005b34:	617b      	str	r3, [r7, #20]
	float y = x;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	613b      	str	r3, [r7, #16]

	long i = *(long*)&y;                //get bits for floating value
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);          //gives initial guss you
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	105b      	asrs	r3, r3, #1
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <invSqrt+0x74>)
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;                    //convert bits back to float
 8005b4c:	230c      	movs	r3, #12
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));   //newtop step, repeating increases accuracy
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6979      	ldr	r1, [r7, #20]
 8005b58:	1c18      	adds	r0, r3, #0
 8005b5a:	f7fa ff1b 	bl	8000994 <__aeabi_fmul>
 8005b5e:	1c03      	adds	r3, r0, #0
 8005b60:	1c1a      	adds	r2, r3, #0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1c19      	adds	r1, r3, #0
 8005b66:	1c10      	adds	r0, r2, #0
 8005b68:	f7fa ff14 	bl	8000994 <__aeabi_fmul>
 8005b6c:	1c03      	adds	r3, r0, #0
 8005b6e:	1c19      	adds	r1, r3, #0
 8005b70:	20ff      	movs	r0, #255	; 0xff
 8005b72:	0580      	lsls	r0, r0, #22
 8005b74:	f7fb f834 	bl	8000be0 <__aeabi_fsub>
 8005b78:	1c03      	adds	r3, r0, #0
 8005b7a:	1c1a      	adds	r2, r3, #0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1c19      	adds	r1, r3, #0
 8005b80:	1c10      	adds	r0, r2, #0
 8005b82:	f7fa ff07 	bl	8000994 <__aeabi_fmul>
 8005b86:	1c03      	adds	r3, r0, #0
 8005b88:	613b      	str	r3, [r7, #16]

	return y;
 8005b8a:	693b      	ldr	r3, [r7, #16]
}
 8005b8c:	1c18      	adds	r0, r3, #0
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b006      	add	sp, #24
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	5f3759df 	.word	0x5f3759df

08005b98 <IMU_Init>:
  * @brief  initializes IMU
  * @param  None
  * @retval None
  */
void IMU_Init(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0

    invMSInit();
 8005b9c:	f000 fed2 	bl	8006944 <invMSInit>

  	q0 = 1.0f;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <IMU_Init+0x28>)
 8005ba2:	22fe      	movs	r2, #254	; 0xfe
 8005ba4:	0592      	lsls	r2, r2, #22
 8005ba6:	601a      	str	r2, [r3, #0]
  	q1 = 0.0f;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <IMU_Init+0x2c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
  	q2 = 0.0f;
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <IMU_Init+0x30>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
  	q3 = 0.0f;
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <IMU_Init+0x34>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000e14 	.word	0x20000e14
 8005bc4:	20000e18 	.word	0x20000e18
 8005bc8:	20000e1c 	.word	0x20000e1c
 8005bcc:	20000e20 	.word	0x20000e20

08005bd0 <IMU_AHRSupdate>:
  * @param  my: magnetometer Y
  * @param  mz: magnetometer Z
  * @retval None
  */
void IMU_AHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	b0a7      	sub	sp, #156	; 0x9c
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	61f8      	str	r0, [r7, #28]
 8005bd8:	61b9      	str	r1, [r7, #24]
 8005bda:	617a      	str	r2, [r7, #20]
 8005bdc:	613b      	str	r3, [r7, #16]
	float norm;
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float exInt = 0.0, eyInt = 0.0, ezInt = 0.0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	2484      	movs	r4, #132	; 0x84
 8005be2:	2610      	movs	r6, #16
 8005be4:	19a2      	adds	r2, r4, r6
 8005be6:	19d2      	adds	r2, r2, r7
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	2580      	movs	r5, #128	; 0x80
 8005bee:	19aa      	adds	r2, r5, r6
 8005bf0:	19d2      	adds	r2, r2, r7
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	228c      	movs	r2, #140	; 0x8c
 8005bf8:	18b9      	adds	r1, r7, r2
 8005bfa:	600b      	str	r3, [r1, #0]
	float ex, ey, ez, halfT = 0.024f;
 8005bfc:	4bfe      	ldr	r3, [pc, #1016]	; (8005ff8 <IMU_AHRSupdate+0x428>)
 8005bfe:	2588      	movs	r5, #136	; 0x88
 8005c00:	1979      	adds	r1, r7, r5
 8005c02:	600b      	str	r3, [r1, #0]

	float q0q0 = q0 * q0;
 8005c04:	4bfd      	ldr	r3, [pc, #1012]	; (8005ffc <IMU_AHRSupdate+0x42c>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	4bfc      	ldr	r3, [pc, #1008]	; (8005ffc <IMU_AHRSupdate+0x42c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	1c19      	adds	r1, r3, #0
 8005c0e:	1c10      	adds	r0, r2, #0
 8005c10:	f7fa fec0 	bl	8000994 <__aeabi_fmul>
 8005c14:	1c03      	adds	r3, r0, #0
 8005c16:	2084      	movs	r0, #132	; 0x84
 8005c18:	1839      	adds	r1, r7, r0
 8005c1a:	600b      	str	r3, [r1, #0]
	float q0q1 = q0 * q1;
 8005c1c:	4bf7      	ldr	r3, [pc, #988]	; (8005ffc <IMU_AHRSupdate+0x42c>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4bf7      	ldr	r3, [pc, #988]	; (8006000 <IMU_AHRSupdate+0x430>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	1c19      	adds	r1, r3, #0
 8005c26:	1c10      	adds	r0, r2, #0
 8005c28:	f7fa feb4 	bl	8000994 <__aeabi_fmul>
 8005c2c:	1c03      	adds	r3, r0, #0
 8005c2e:	2180      	movs	r1, #128	; 0x80
 8005c30:	187c      	adds	r4, r7, r1
 8005c32:	6023      	str	r3, [r4, #0]
	float q0q2 = q0 * q2;
 8005c34:	4bf1      	ldr	r3, [pc, #964]	; (8005ffc <IMU_AHRSupdate+0x42c>)
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4bf2      	ldr	r3, [pc, #968]	; (8006004 <IMU_AHRSupdate+0x434>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	1c19      	adds	r1, r3, #0
 8005c3e:	1c10      	adds	r0, r2, #0
 8005c40:	f7fa fea8 	bl	8000994 <__aeabi_fmul>
 8005c44:	1c03      	adds	r3, r0, #0
 8005c46:	67fb      	str	r3, [r7, #124]	; 0x7c
	float q0q3 = q0 * q3;
 8005c48:	4bec      	ldr	r3, [pc, #944]	; (8005ffc <IMU_AHRSupdate+0x42c>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4bee      	ldr	r3, [pc, #952]	; (8006008 <IMU_AHRSupdate+0x438>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	1c19      	adds	r1, r3, #0
 8005c52:	1c10      	adds	r0, r2, #0
 8005c54:	f7fa fe9e 	bl	8000994 <__aeabi_fmul>
 8005c58:	1c03      	adds	r3, r0, #0
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
	float q1q1 = q1 * q1;
 8005c5c:	4be8      	ldr	r3, [pc, #928]	; (8006000 <IMU_AHRSupdate+0x430>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4be7      	ldr	r3, [pc, #924]	; (8006000 <IMU_AHRSupdate+0x430>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	1c19      	adds	r1, r3, #0
 8005c66:	1c10      	adds	r0, r2, #0
 8005c68:	f7fa fe94 	bl	8000994 <__aeabi_fmul>
 8005c6c:	1c03      	adds	r3, r0, #0
 8005c6e:	677b      	str	r3, [r7, #116]	; 0x74
	float q1q2 = q1 * q2;
 8005c70:	4be3      	ldr	r3, [pc, #908]	; (8006000 <IMU_AHRSupdate+0x430>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	4be3      	ldr	r3, [pc, #908]	; (8006004 <IMU_AHRSupdate+0x434>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	1c19      	adds	r1, r3, #0
 8005c7a:	1c10      	adds	r0, r2, #0
 8005c7c:	f7fa fe8a 	bl	8000994 <__aeabi_fmul>
 8005c80:	1c03      	adds	r3, r0, #0
 8005c82:	673b      	str	r3, [r7, #112]	; 0x70
	float q1q3 = q1 * q3;
 8005c84:	4bde      	ldr	r3, [pc, #888]	; (8006000 <IMU_AHRSupdate+0x430>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4bdf      	ldr	r3, [pc, #892]	; (8006008 <IMU_AHRSupdate+0x438>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1c19      	adds	r1, r3, #0
 8005c8e:	1c10      	adds	r0, r2, #0
 8005c90:	f7fa fe80 	bl	8000994 <__aeabi_fmul>
 8005c94:	1c03      	adds	r3, r0, #0
 8005c96:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 8005c98:	4bda      	ldr	r3, [pc, #872]	; (8006004 <IMU_AHRSupdate+0x434>)
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	4bd9      	ldr	r3, [pc, #868]	; (8006004 <IMU_AHRSupdate+0x434>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	1c19      	adds	r1, r3, #0
 8005ca2:	1c10      	adds	r0, r2, #0
 8005ca4:	f7fa fe76 	bl	8000994 <__aeabi_fmul>
 8005ca8:	1c03      	adds	r3, r0, #0
 8005caa:	66bb      	str	r3, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 8005cac:	4bd5      	ldr	r3, [pc, #852]	; (8006004 <IMU_AHRSupdate+0x434>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4bd5      	ldr	r3, [pc, #852]	; (8006008 <IMU_AHRSupdate+0x438>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1c19      	adds	r1, r3, #0
 8005cb6:	1c10      	adds	r0, r2, #0
 8005cb8:	f7fa fe6c 	bl	8000994 <__aeabi_fmul>
 8005cbc:	1c03      	adds	r3, r0, #0
 8005cbe:	667b      	str	r3, [r7, #100]	; 0x64
	float q3q3 = q3 * q3;
 8005cc0:	4bd1      	ldr	r3, [pc, #836]	; (8006008 <IMU_AHRSupdate+0x438>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	4bd0      	ldr	r3, [pc, #832]	; (8006008 <IMU_AHRSupdate+0x438>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c19      	adds	r1, r3, #0
 8005cca:	1c10      	adds	r0, r2, #0
 8005ccc:	f7fa fe62 	bl	8000994 <__aeabi_fmul>
 8005cd0:	1c03      	adds	r3, r0, #0
 8005cd2:	663b      	str	r3, [r7, #96]	; 0x60

	norm = invSqrt(ax * ax + ay * ay + az * az);
 8005cd4:	6939      	ldr	r1, [r7, #16]
 8005cd6:	6938      	ldr	r0, [r7, #16]
 8005cd8:	f7fa fe5c 	bl	8000994 <__aeabi_fmul>
 8005cdc:	1c03      	adds	r3, r0, #0
 8005cde:	1c1c      	adds	r4, r3, #0
 8005ce0:	25a0      	movs	r5, #160	; 0xa0
 8005ce2:	19ab      	adds	r3, r5, r6
 8005ce4:	19db      	adds	r3, r3, r7
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	19ab      	adds	r3, r5, r6
 8005cea:	19db      	adds	r3, r3, r7
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f7fa fe51 	bl	8000994 <__aeabi_fmul>
 8005cf2:	1c03      	adds	r3, r0, #0
 8005cf4:	1c19      	adds	r1, r3, #0
 8005cf6:	1c20      	adds	r0, r4, #0
 8005cf8:	f7fa fbfe 	bl	80004f8 <__aeabi_fadd>
 8005cfc:	1c03      	adds	r3, r0, #0
 8005cfe:	1c1c      	adds	r4, r3, #0
 8005d00:	26a4      	movs	r6, #164	; 0xa4
 8005d02:	2210      	movs	r2, #16
 8005d04:	18b3      	adds	r3, r6, r2
 8005d06:	19db      	adds	r3, r3, r7
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	18b3      	adds	r3, r6, r2
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	f7fa fe40 	bl	8000994 <__aeabi_fmul>
 8005d14:	1c03      	adds	r3, r0, #0
 8005d16:	1c19      	adds	r1, r3, #0
 8005d18:	1c20      	adds	r0, r4, #0
 8005d1a:	f7fa fbed 	bl	80004f8 <__aeabi_fadd>
 8005d1e:	1c03      	adds	r3, r0, #0
 8005d20:	1c18      	adds	r0, r3, #0
 8005d22:	f7ff fefd 	bl	8005b20 <invSqrt>
 8005d26:	1c03      	adds	r3, r0, #0
 8005d28:	65fb      	str	r3, [r7, #92]	; 0x5c
	ax = ax * norm;
 8005d2a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005d2c:	6938      	ldr	r0, [r7, #16]
 8005d2e:	f7fa fe31 	bl	8000994 <__aeabi_fmul>
 8005d32:	1c03      	adds	r3, r0, #0
 8005d34:	613b      	str	r3, [r7, #16]
	ay = ay * norm;
 8005d36:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005d38:	2410      	movs	r4, #16
 8005d3a:	192b      	adds	r3, r5, r4
 8005d3c:	19db      	adds	r3, r3, r7
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	f7fa fe28 	bl	8000994 <__aeabi_fmul>
 8005d44:	1c03      	adds	r3, r0, #0
 8005d46:	1929      	adds	r1, r5, r4
 8005d48:	19ca      	adds	r2, r1, r7
 8005d4a:	6013      	str	r3, [r2, #0]
	az = az * norm;
 8005d4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005d4e:	1933      	adds	r3, r6, r4
 8005d50:	19db      	adds	r3, r3, r7
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	f7fa fe1e 	bl	8000994 <__aeabi_fmul>
 8005d58:	1c03      	adds	r3, r0, #0
 8005d5a:	0022      	movs	r2, r4
 8005d5c:	18b4      	adds	r4, r6, r2
 8005d5e:	19e1      	adds	r1, r4, r7
 8005d60:	600b      	str	r3, [r1, #0]

	norm = invSqrt(mx * mx + my * my + mz * mz);
 8005d62:	26a8      	movs	r6, #168	; 0xa8
 8005d64:	18b4      	adds	r4, r6, r2
 8005d66:	19e3      	adds	r3, r4, r7
 8005d68:	6819      	ldr	r1, [r3, #0]
 8005d6a:	18b4      	adds	r4, r6, r2
 8005d6c:	19e3      	adds	r3, r4, r7
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	f7fa fe10 	bl	8000994 <__aeabi_fmul>
 8005d74:	1c03      	adds	r3, r0, #0
 8005d76:	1c1c      	adds	r4, r3, #0
 8005d78:	25ac      	movs	r5, #172	; 0xac
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	18ab      	adds	r3, r5, r2
 8005d7e:	19db      	adds	r3, r3, r7
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	18ab      	adds	r3, r5, r2
 8005d84:	19db      	adds	r3, r3, r7
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	f7fa fe04 	bl	8000994 <__aeabi_fmul>
 8005d8c:	1c03      	adds	r3, r0, #0
 8005d8e:	1c19      	adds	r1, r3, #0
 8005d90:	1c20      	adds	r0, r4, #0
 8005d92:	f7fa fbb1 	bl	80004f8 <__aeabi_fadd>
 8005d96:	1c03      	adds	r3, r0, #0
 8005d98:	1c1c      	adds	r4, r3, #0
 8005d9a:	23b0      	movs	r3, #176	; 0xb0
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	1899      	adds	r1, r3, r2
 8005da0:	19c9      	adds	r1, r1, r7
 8005da2:	6809      	ldr	r1, [r1, #0]
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	19da      	adds	r2, r3, r7
 8005da8:	6810      	ldr	r0, [r2, #0]
 8005daa:	f7fa fdf3 	bl	8000994 <__aeabi_fmul>
 8005dae:	1c03      	adds	r3, r0, #0
 8005db0:	1c19      	adds	r1, r3, #0
 8005db2:	1c20      	adds	r0, r4, #0
 8005db4:	f7fa fba0 	bl	80004f8 <__aeabi_fadd>
 8005db8:	1c03      	adds	r3, r0, #0
 8005dba:	1c18      	adds	r0, r3, #0
 8005dbc:	f7ff feb0 	bl	8005b20 <invSqrt>
 8005dc0:	1c03      	adds	r3, r0, #0
 8005dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
	mx = mx * norm;
 8005dc4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005dc6:	2410      	movs	r4, #16
 8005dc8:	1933      	adds	r3, r6, r4
 8005dca:	19da      	adds	r2, r3, r7
 8005dcc:	6810      	ldr	r0, [r2, #0]
 8005dce:	f7fa fde1 	bl	8000994 <__aeabi_fmul>
 8005dd2:	1c03      	adds	r3, r0, #0
 8005dd4:	1931      	adds	r1, r6, r4
 8005dd6:	19c9      	adds	r1, r1, r7
 8005dd8:	600b      	str	r3, [r1, #0]
	my = my * norm;
 8005dda:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005ddc:	192b      	adds	r3, r5, r4
 8005dde:	19da      	adds	r2, r3, r7
 8005de0:	6810      	ldr	r0, [r2, #0]
 8005de2:	f7fa fdd7 	bl	8000994 <__aeabi_fmul>
 8005de6:	1c03      	adds	r3, r0, #0
 8005de8:	0022      	movs	r2, r4
 8005dea:	18ac      	adds	r4, r5, r2
 8005dec:	19e1      	adds	r1, r4, r7
 8005dee:	600b      	str	r3, [r1, #0]
	mz = mz * norm;
 8005df0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005df2:	24b0      	movs	r4, #176	; 0xb0
 8005df4:	18a3      	adds	r3, r4, r2
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f7fa fdcb 	bl	8000994 <__aeabi_fmul>
 8005dfe:	1c03      	adds	r3, r0, #0
 8005e00:	2210      	movs	r2, #16
 8005e02:	18a4      	adds	r4, r4, r2
 8005e04:	19e1      	adds	r1, r4, r7
 8005e06:	600b      	str	r3, [r1, #0]

	// compute reference direction of flux
	hx = 2 * mx * (0.5f - q2q2 - q3q3) + 2 * my * (q1q2 - q0q3) + 2 * mz * (q1q3 + q0q2);
 8005e08:	18b4      	adds	r4, r6, r2
 8005e0a:	19e1      	adds	r1, r4, r7
 8005e0c:	680b      	ldr	r3, [r1, #0]
 8005e0e:	1c19      	adds	r1, r3, #0
 8005e10:	1c18      	adds	r0, r3, #0
 8005e12:	f7fa fb71 	bl	80004f8 <__aeabi_fadd>
 8005e16:	1c03      	adds	r3, r0, #0
 8005e18:	1c1c      	adds	r4, r3, #0
 8005e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e1c:	20fc      	movs	r0, #252	; 0xfc
 8005e1e:	0580      	lsls	r0, r0, #22
 8005e20:	f7fa fede 	bl	8000be0 <__aeabi_fsub>
 8005e24:	1c03      	adds	r3, r0, #0
 8005e26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005e28:	1c18      	adds	r0, r3, #0
 8005e2a:	f7fa fed9 	bl	8000be0 <__aeabi_fsub>
 8005e2e:	1c03      	adds	r3, r0, #0
 8005e30:	1c19      	adds	r1, r3, #0
 8005e32:	1c20      	adds	r0, r4, #0
 8005e34:	f7fa fdae 	bl	8000994 <__aeabi_fmul>
 8005e38:	1c03      	adds	r3, r0, #0
 8005e3a:	1c1c      	adds	r4, r3, #0
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	18ab      	adds	r3, r5, r2
 8005e40:	19d9      	adds	r1, r3, r7
 8005e42:	680b      	ldr	r3, [r1, #0]
 8005e44:	1c19      	adds	r1, r3, #0
 8005e46:	1c18      	adds	r0, r3, #0
 8005e48:	f7fa fb56 	bl	80004f8 <__aeabi_fadd>
 8005e4c:	1c03      	adds	r3, r0, #0
 8005e4e:	1c1d      	adds	r5, r3, #0
 8005e50:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005e52:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005e54:	f7fa fec4 	bl	8000be0 <__aeabi_fsub>
 8005e58:	1c03      	adds	r3, r0, #0
 8005e5a:	1c19      	adds	r1, r3, #0
 8005e5c:	1c28      	adds	r0, r5, #0
 8005e5e:	f7fa fd99 	bl	8000994 <__aeabi_fmul>
 8005e62:	1c03      	adds	r3, r0, #0
 8005e64:	1c19      	adds	r1, r3, #0
 8005e66:	1c20      	adds	r0, r4, #0
 8005e68:	f7fa fb46 	bl	80004f8 <__aeabi_fadd>
 8005e6c:	1c03      	adds	r3, r0, #0
 8005e6e:	1c1c      	adds	r4, r3, #0
 8005e70:	23b0      	movs	r3, #176	; 0xb0
 8005e72:	2210      	movs	r2, #16
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	19d9      	adds	r1, r3, r7
 8005e78:	680b      	ldr	r3, [r1, #0]
 8005e7a:	1c19      	adds	r1, r3, #0
 8005e7c:	1c18      	adds	r0, r3, #0
 8005e7e:	f7fa fb3b 	bl	80004f8 <__aeabi_fadd>
 8005e82:	1c03      	adds	r3, r0, #0
 8005e84:	1c1d      	adds	r5, r3, #0
 8005e86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e8a:	f7fa fb35 	bl	80004f8 <__aeabi_fadd>
 8005e8e:	1c03      	adds	r3, r0, #0
 8005e90:	1c19      	adds	r1, r3, #0
 8005e92:	1c28      	adds	r0, r5, #0
 8005e94:	f7fa fd7e 	bl	8000994 <__aeabi_fmul>
 8005e98:	1c03      	adds	r3, r0, #0
 8005e9a:	1c19      	adds	r1, r3, #0
 8005e9c:	1c20      	adds	r0, r4, #0
 8005e9e:	f7fa fb2b 	bl	80004f8 <__aeabi_fadd>
 8005ea2:	1c03      	adds	r3, r0, #0
 8005ea4:	65bb      	str	r3, [r7, #88]	; 0x58
	hy = 2 * mx * (q1q2 + q0q3) + 2 * my * (0.5f - q1q1 - q3q3) + 2 * mz * (q2q3 - q0q1);
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	18b4      	adds	r4, r6, r2
 8005eaa:	19e1      	adds	r1, r4, r7
 8005eac:	680b      	ldr	r3, [r1, #0]
 8005eae:	1c19      	adds	r1, r3, #0
 8005eb0:	1c18      	adds	r0, r3, #0
 8005eb2:	f7fa fb21 	bl	80004f8 <__aeabi_fadd>
 8005eb6:	1c03      	adds	r3, r0, #0
 8005eb8:	1c1c      	adds	r4, r3, #0
 8005eba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005ebc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8005ebe:	f7fa fb1b 	bl	80004f8 <__aeabi_fadd>
 8005ec2:	1c03      	adds	r3, r0, #0
 8005ec4:	1c19      	adds	r1, r3, #0
 8005ec6:	1c20      	adds	r0, r4, #0
 8005ec8:	f7fa fd64 	bl	8000994 <__aeabi_fmul>
 8005ecc:	1c03      	adds	r3, r0, #0
 8005ece:	1c1c      	adds	r4, r3, #0
 8005ed0:	25ac      	movs	r5, #172	; 0xac
 8005ed2:	2210      	movs	r2, #16
 8005ed4:	18ab      	adds	r3, r5, r2
 8005ed6:	19d9      	adds	r1, r3, r7
 8005ed8:	680b      	ldr	r3, [r1, #0]
 8005eda:	1c19      	adds	r1, r3, #0
 8005edc:	1c18      	adds	r0, r3, #0
 8005ede:	f7fa fb0b 	bl	80004f8 <__aeabi_fadd>
 8005ee2:	1c03      	adds	r3, r0, #0
 8005ee4:	1c1d      	adds	r5, r3, #0
 8005ee6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005ee8:	20fc      	movs	r0, #252	; 0xfc
 8005eea:	0580      	lsls	r0, r0, #22
 8005eec:	f7fa fe78 	bl	8000be0 <__aeabi_fsub>
 8005ef0:	1c03      	adds	r3, r0, #0
 8005ef2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005ef4:	1c18      	adds	r0, r3, #0
 8005ef6:	f7fa fe73 	bl	8000be0 <__aeabi_fsub>
 8005efa:	1c03      	adds	r3, r0, #0
 8005efc:	1c19      	adds	r1, r3, #0
 8005efe:	1c28      	adds	r0, r5, #0
 8005f00:	f7fa fd48 	bl	8000994 <__aeabi_fmul>
 8005f04:	1c03      	adds	r3, r0, #0
 8005f06:	1c19      	adds	r1, r3, #0
 8005f08:	1c20      	adds	r0, r4, #0
 8005f0a:	f7fa faf5 	bl	80004f8 <__aeabi_fadd>
 8005f0e:	1c03      	adds	r3, r0, #0
 8005f10:	1c1c      	adds	r4, r3, #0
 8005f12:	23b0      	movs	r3, #176	; 0xb0
 8005f14:	2210      	movs	r2, #16
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	19d9      	adds	r1, r3, r7
 8005f1a:	680b      	ldr	r3, [r1, #0]
 8005f1c:	1c19      	adds	r1, r3, #0
 8005f1e:	1c18      	adds	r0, r3, #0
 8005f20:	f7fa faea 	bl	80004f8 <__aeabi_fadd>
 8005f24:	1c03      	adds	r3, r0, #0
 8005f26:	1c1d      	adds	r5, r3, #0
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	1879      	adds	r1, r7, r1
 8005f2c:	6809      	ldr	r1, [r1, #0]
 8005f2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005f30:	f7fa fe56 	bl	8000be0 <__aeabi_fsub>
 8005f34:	1c03      	adds	r3, r0, #0
 8005f36:	1c19      	adds	r1, r3, #0
 8005f38:	1c28      	adds	r0, r5, #0
 8005f3a:	f7fa fd2b 	bl	8000994 <__aeabi_fmul>
 8005f3e:	1c03      	adds	r3, r0, #0
 8005f40:	1c19      	adds	r1, r3, #0
 8005f42:	1c20      	adds	r0, r4, #0
 8005f44:	f7fa fad8 	bl	80004f8 <__aeabi_fadd>
 8005f48:	1c03      	adds	r3, r0, #0
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
	hz = 2 * mx * (q1q3 - q0q2) + 2 * my * (q2q3 + q0q1) + 2 * mz * (0.5f - q1q1 - q2q2);
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	18f4      	adds	r4, r6, r3
 8005f50:	19e1      	adds	r1, r4, r7
 8005f52:	680b      	ldr	r3, [r1, #0]
 8005f54:	1c19      	adds	r1, r3, #0
 8005f56:	1c18      	adds	r0, r3, #0
 8005f58:	f7fa face 	bl	80004f8 <__aeabi_fadd>
 8005f5c:	1c03      	adds	r3, r0, #0
 8005f5e:	1c1c      	adds	r4, r3, #0
 8005f60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f64:	f7fa fe3c 	bl	8000be0 <__aeabi_fsub>
 8005f68:	1c03      	adds	r3, r0, #0
 8005f6a:	1c19      	adds	r1, r3, #0
 8005f6c:	1c20      	adds	r0, r4, #0
 8005f6e:	f7fa fd11 	bl	8000994 <__aeabi_fmul>
 8005f72:	1c03      	adds	r3, r0, #0
 8005f74:	1c1c      	adds	r4, r3, #0
 8005f76:	25ac      	movs	r5, #172	; 0xac
 8005f78:	2610      	movs	r6, #16
 8005f7a:	19a9      	adds	r1, r5, r6
 8005f7c:	19c9      	adds	r1, r1, r7
 8005f7e:	680b      	ldr	r3, [r1, #0]
 8005f80:	1c19      	adds	r1, r3, #0
 8005f82:	1c18      	adds	r0, r3, #0
 8005f84:	f7fa fab8 	bl	80004f8 <__aeabi_fadd>
 8005f88:	1c03      	adds	r3, r0, #0
 8005f8a:	1c1d      	adds	r5, r3, #0
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	18f9      	adds	r1, r7, r3
 8005f90:	6809      	ldr	r1, [r1, #0]
 8005f92:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005f94:	f7fa fab0 	bl	80004f8 <__aeabi_fadd>
 8005f98:	1c03      	adds	r3, r0, #0
 8005f9a:	1c19      	adds	r1, r3, #0
 8005f9c:	1c28      	adds	r0, r5, #0
 8005f9e:	f7fa fcf9 	bl	8000994 <__aeabi_fmul>
 8005fa2:	1c03      	adds	r3, r0, #0
 8005fa4:	1c19      	adds	r1, r3, #0
 8005fa6:	1c20      	adds	r0, r4, #0
 8005fa8:	f7fa faa6 	bl	80004f8 <__aeabi_fadd>
 8005fac:	1c03      	adds	r3, r0, #0
 8005fae:	1c1c      	adds	r4, r3, #0
 8005fb0:	23b0      	movs	r3, #176	; 0xb0
 8005fb2:	1999      	adds	r1, r3, r6
 8005fb4:	19c9      	adds	r1, r1, r7
 8005fb6:	680b      	ldr	r3, [r1, #0]
 8005fb8:	1c19      	adds	r1, r3, #0
 8005fba:	1c18      	adds	r0, r3, #0
 8005fbc:	f7fa fa9c 	bl	80004f8 <__aeabi_fadd>
 8005fc0:	1c03      	adds	r3, r0, #0
 8005fc2:	1c1d      	adds	r5, r3, #0
 8005fc4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005fc6:	20fc      	movs	r0, #252	; 0xfc
 8005fc8:	0580      	lsls	r0, r0, #22
 8005fca:	f7fa fe09 	bl	8000be0 <__aeabi_fsub>
 8005fce:	1c03      	adds	r3, r0, #0
 8005fd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fd2:	1c18      	adds	r0, r3, #0
 8005fd4:	f7fa fe04 	bl	8000be0 <__aeabi_fsub>
 8005fd8:	1c03      	adds	r3, r0, #0
 8005fda:	1c19      	adds	r1, r3, #0
 8005fdc:	1c28      	adds	r0, r5, #0
 8005fde:	f7fa fcd9 	bl	8000994 <__aeabi_fmul>
 8005fe2:	1c03      	adds	r3, r0, #0
 8005fe4:	1c19      	adds	r1, r3, #0
 8005fe6:	1c20      	adds	r0, r4, #0
 8005fe8:	f7fa fa86 	bl	80004f8 <__aeabi_fadd>
 8005fec:	1c03      	adds	r3, r0, #0
 8005fee:	653b      	str	r3, [r7, #80]	; 0x50
	bx = sqrt((hx * hx) + (hy * hy));
 8005ff0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ff2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005ff4:	e00a      	b.n	800600c <IMU_AHRSupdate+0x43c>
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	3cc49ba6 	.word	0x3cc49ba6
 8005ffc:	20000e14 	.word	0x20000e14
 8006000:	20000e18 	.word	0x20000e18
 8006004:	20000e1c 	.word	0x20000e1c
 8006008:	20000e20 	.word	0x20000e20
 800600c:	f7fa fcc2 	bl	8000994 <__aeabi_fmul>
 8006010:	1c03      	adds	r3, r0, #0
 8006012:	1c1c      	adds	r4, r3, #0
 8006014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006016:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006018:	f7fa fcbc 	bl	8000994 <__aeabi_fmul>
 800601c:	1c03      	adds	r3, r0, #0
 800601e:	1c19      	adds	r1, r3, #0
 8006020:	1c20      	adds	r0, r4, #0
 8006022:	f7fa fa69 	bl	80004f8 <__aeabi_fadd>
 8006026:	1c03      	adds	r3, r0, #0
 8006028:	1c18      	adds	r0, r3, #0
 800602a:	f7fc fd5f 	bl	8002aec <__aeabi_f2d>
 800602e:	0002      	movs	r2, r0
 8006030:	000b      	movs	r3, r1
 8006032:	0010      	movs	r0, r2
 8006034:	0019      	movs	r1, r3
 8006036:	f004 fb1f 	bl	800a678 <sqrt>
 800603a:	0002      	movs	r2, r0
 800603c:	000b      	movs	r3, r1
 800603e:	0010      	movs	r0, r2
 8006040:	0019      	movs	r1, r3
 8006042:	f7fc fd9b 	bl	8002b7c <__aeabi_d2f>
 8006046:	1c03      	adds	r3, r0, #0
 8006048:	64fb      	str	r3, [r7, #76]	; 0x4c
	bz = hz;
 800604a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604c:	64bb      	str	r3, [r7, #72]	; 0x48

	// estimated direction of gravity and flux (v and w)
	vx = 2 * (q1q3 - q0q2);
 800604e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006050:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006052:	f7fa fdc5 	bl	8000be0 <__aeabi_fsub>
 8006056:	1c03      	adds	r3, r0, #0
 8006058:	1c19      	adds	r1, r3, #0
 800605a:	1c18      	adds	r0, r3, #0
 800605c:	f7fa fa4c 	bl	80004f8 <__aeabi_fadd>
 8006060:	1c03      	adds	r3, r0, #0
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
	vy = 2 * (q0q1 + q2q3);
 8006064:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	18fc      	adds	r4, r7, r3
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	f7fa fa44 	bl	80004f8 <__aeabi_fadd>
 8006070:	1c03      	adds	r3, r0, #0
 8006072:	1c19      	adds	r1, r3, #0
 8006074:	1c18      	adds	r0, r3, #0
 8006076:	f7fa fa3f 	bl	80004f8 <__aeabi_fadd>
 800607a:	1c03      	adds	r3, r0, #0
 800607c:	643b      	str	r3, [r7, #64]	; 0x40
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 800607e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006080:	2084      	movs	r0, #132	; 0x84
 8006082:	1838      	adds	r0, r7, r0
 8006084:	6800      	ldr	r0, [r0, #0]
 8006086:	f7fa fdab 	bl	8000be0 <__aeabi_fsub>
 800608a:	1c03      	adds	r3, r0, #0
 800608c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800608e:	1c18      	adds	r0, r3, #0
 8006090:	f7fa fda6 	bl	8000be0 <__aeabi_fsub>
 8006094:	1c03      	adds	r3, r0, #0
 8006096:	1c19      	adds	r1, r3, #0
 8006098:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800609a:	f7fa fa2d 	bl	80004f8 <__aeabi_fadd>
 800609e:	1c03      	adds	r3, r0, #0
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	wx = 2 * bx * (0.5 - q2q2 - q3q3) + 2 * bz * (q1q3 - q0q2);
 80060a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a4:	1c19      	adds	r1, r3, #0
 80060a6:	1c18      	adds	r0, r3, #0
 80060a8:	f7fa fa26 	bl	80004f8 <__aeabi_fadd>
 80060ac:	1c03      	adds	r3, r0, #0
 80060ae:	1c18      	adds	r0, r3, #0
 80060b0:	f7fc fd1c 	bl	8002aec <__aeabi_f2d>
 80060b4:	0004      	movs	r4, r0
 80060b6:	000d      	movs	r5, r1
 80060b8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80060ba:	f7fc fd17 	bl	8002aec <__aeabi_f2d>
 80060be:	0002      	movs	r2, r0
 80060c0:	000b      	movs	r3, r1
 80060c2:	2000      	movs	r0, #0
 80060c4:	49f7      	ldr	r1, [pc, #988]	; (80064a4 <IMU_AHRSupdate+0x8d4>)
 80060c6:	f7fc f931 	bl	800232c <__aeabi_dsub>
 80060ca:	0002      	movs	r2, r0
 80060cc:	000b      	movs	r3, r1
 80060ce:	60ba      	str	r2, [r7, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80060d4:	f7fc fd0a 	bl	8002aec <__aeabi_f2d>
 80060d8:	0002      	movs	r2, r0
 80060da:	000b      	movs	r3, r1
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	68f9      	ldr	r1, [r7, #12]
 80060e0:	f7fc f924 	bl	800232c <__aeabi_dsub>
 80060e4:	0002      	movs	r2, r0
 80060e6:	000b      	movs	r3, r1
 80060e8:	0020      	movs	r0, r4
 80060ea:	0029      	movs	r1, r5
 80060ec:	f7fb feb2 	bl	8001e54 <__aeabi_dmul>
 80060f0:	0002      	movs	r2, r0
 80060f2:	000b      	movs	r3, r1
 80060f4:	0014      	movs	r4, r2
 80060f6:	001d      	movs	r5, r3
 80060f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060fa:	1c19      	adds	r1, r3, #0
 80060fc:	1c18      	adds	r0, r3, #0
 80060fe:	f7fa f9fb 	bl	80004f8 <__aeabi_fadd>
 8006102:	1c03      	adds	r3, r0, #0
 8006104:	1c1e      	adds	r6, r3, #0
 8006106:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006108:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800610a:	f7fa fd69 	bl	8000be0 <__aeabi_fsub>
 800610e:	1c03      	adds	r3, r0, #0
 8006110:	1c19      	adds	r1, r3, #0
 8006112:	1c30      	adds	r0, r6, #0
 8006114:	f7fa fc3e 	bl	8000994 <__aeabi_fmul>
 8006118:	1c03      	adds	r3, r0, #0
 800611a:	1c18      	adds	r0, r3, #0
 800611c:	f7fc fce6 	bl	8002aec <__aeabi_f2d>
 8006120:	0002      	movs	r2, r0
 8006122:	000b      	movs	r3, r1
 8006124:	0020      	movs	r0, r4
 8006126:	0029      	movs	r1, r5
 8006128:	f7fa ff56 	bl	8000fd8 <__aeabi_dadd>
 800612c:	0002      	movs	r2, r0
 800612e:	000b      	movs	r3, r1
 8006130:	0010      	movs	r0, r2
 8006132:	0019      	movs	r1, r3
 8006134:	f7fc fd22 	bl	8002b7c <__aeabi_d2f>
 8006138:	1c03      	adds	r3, r0, #0
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38
	wy = 2 * bx * (q1q2 - q0q3) + 2 * bz * (q0q1 + q2q3);
 800613c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613e:	1c19      	adds	r1, r3, #0
 8006140:	1c18      	adds	r0, r3, #0
 8006142:	f7fa f9d9 	bl	80004f8 <__aeabi_fadd>
 8006146:	1c03      	adds	r3, r0, #0
 8006148:	1c1c      	adds	r4, r3, #0
 800614a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800614c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800614e:	f7fa fd47 	bl	8000be0 <__aeabi_fsub>
 8006152:	1c03      	adds	r3, r0, #0
 8006154:	1c19      	adds	r1, r3, #0
 8006156:	1c20      	adds	r0, r4, #0
 8006158:	f7fa fc1c 	bl	8000994 <__aeabi_fmul>
 800615c:	1c03      	adds	r3, r0, #0
 800615e:	1c1c      	adds	r4, r3, #0
 8006160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006162:	1c19      	adds	r1, r3, #0
 8006164:	1c18      	adds	r0, r3, #0
 8006166:	f7fa f9c7 	bl	80004f8 <__aeabi_fadd>
 800616a:	1c03      	adds	r3, r0, #0
 800616c:	1c1d      	adds	r5, r3, #0
 800616e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	18f8      	adds	r0, r7, r3
 8006174:	6800      	ldr	r0, [r0, #0]
 8006176:	f7fa f9bf 	bl	80004f8 <__aeabi_fadd>
 800617a:	1c03      	adds	r3, r0, #0
 800617c:	1c19      	adds	r1, r3, #0
 800617e:	1c28      	adds	r0, r5, #0
 8006180:	f7fa fc08 	bl	8000994 <__aeabi_fmul>
 8006184:	1c03      	adds	r3, r0, #0
 8006186:	1c19      	adds	r1, r3, #0
 8006188:	1c20      	adds	r0, r4, #0
 800618a:	f7fa f9b5 	bl	80004f8 <__aeabi_fadd>
 800618e:	1c03      	adds	r3, r0, #0
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
	wz = 2 * bx * (q0q2 + q1q3) + 2 * bz * (0.5 - q1q1 - q2q2);
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	1c19      	adds	r1, r3, #0
 8006196:	1c18      	adds	r0, r3, #0
 8006198:	f7fa f9ae 	bl	80004f8 <__aeabi_fadd>
 800619c:	1c03      	adds	r3, r0, #0
 800619e:	1c1c      	adds	r4, r3, #0
 80061a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80061a2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80061a4:	f7fa f9a8 	bl	80004f8 <__aeabi_fadd>
 80061a8:	1c03      	adds	r3, r0, #0
 80061aa:	1c19      	adds	r1, r3, #0
 80061ac:	1c20      	adds	r0, r4, #0
 80061ae:	f7fa fbf1 	bl	8000994 <__aeabi_fmul>
 80061b2:	1c03      	adds	r3, r0, #0
 80061b4:	1c18      	adds	r0, r3, #0
 80061b6:	f7fc fc99 	bl	8002aec <__aeabi_f2d>
 80061ba:	0004      	movs	r4, r0
 80061bc:	000d      	movs	r5, r1
 80061be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c0:	1c19      	adds	r1, r3, #0
 80061c2:	1c18      	adds	r0, r3, #0
 80061c4:	f7fa f998 	bl	80004f8 <__aeabi_fadd>
 80061c8:	1c03      	adds	r3, r0, #0
 80061ca:	1c18      	adds	r0, r3, #0
 80061cc:	f7fc fc8e 	bl	8002aec <__aeabi_f2d>
 80061d0:	60b8      	str	r0, [r7, #8]
 80061d2:	60f9      	str	r1, [r7, #12]
 80061d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80061d6:	f7fc fc89 	bl	8002aec <__aeabi_f2d>
 80061da:	0002      	movs	r2, r0
 80061dc:	000b      	movs	r3, r1
 80061de:	2000      	movs	r0, #0
 80061e0:	49b0      	ldr	r1, [pc, #704]	; (80064a4 <IMU_AHRSupdate+0x8d4>)
 80061e2:	f7fc f8a3 	bl	800232c <__aeabi_dsub>
 80061e6:	0002      	movs	r2, r0
 80061e8:	000b      	movs	r3, r1
 80061ea:	603a      	str	r2, [r7, #0]
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80061f0:	f7fc fc7c 	bl	8002aec <__aeabi_f2d>
 80061f4:	0002      	movs	r2, r0
 80061f6:	000b      	movs	r3, r1
 80061f8:	6838      	ldr	r0, [r7, #0]
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	f7fc f896 	bl	800232c <__aeabi_dsub>
 8006200:	0002      	movs	r2, r0
 8006202:	000b      	movs	r3, r1
 8006204:	68b8      	ldr	r0, [r7, #8]
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f7fb fe24 	bl	8001e54 <__aeabi_dmul>
 800620c:	0002      	movs	r2, r0
 800620e:	000b      	movs	r3, r1
 8006210:	0020      	movs	r0, r4
 8006212:	0029      	movs	r1, r5
 8006214:	f7fa fee0 	bl	8000fd8 <__aeabi_dadd>
 8006218:	0002      	movs	r2, r0
 800621a:	000b      	movs	r3, r1
 800621c:	0010      	movs	r0, r2
 800621e:	0019      	movs	r1, r3
 8006220:	f7fc fcac 	bl	8002b7c <__aeabi_d2f>
 8006224:	1c03      	adds	r3, r0, #0
 8006226:	633b      	str	r3, [r7, #48]	; 0x30

	// error is sum of cross product between reference direction of fields and direction measured by sensors
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8006228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800622a:	20a0      	movs	r0, #160	; 0xa0
 800622c:	2610      	movs	r6, #16
 800622e:	1980      	adds	r0, r0, r6
 8006230:	19c3      	adds	r3, r0, r7
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f7fa fbae 	bl	8000994 <__aeabi_fmul>
 8006238:	1c03      	adds	r3, r0, #0
 800623a:	1c1c      	adds	r4, r3, #0
 800623c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800623e:	22a4      	movs	r2, #164	; 0xa4
 8006240:	1990      	adds	r0, r2, r6
 8006242:	19c3      	adds	r3, r0, r7
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	f7fa fba5 	bl	8000994 <__aeabi_fmul>
 800624a:	1c03      	adds	r3, r0, #0
 800624c:	1c19      	adds	r1, r3, #0
 800624e:	1c20      	adds	r0, r4, #0
 8006250:	f7fa fcc6 	bl	8000be0 <__aeabi_fsub>
 8006254:	1c03      	adds	r3, r0, #0
 8006256:	1c1c      	adds	r4, r3, #0
 8006258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800625a:	25ac      	movs	r5, #172	; 0xac
 800625c:	19a8      	adds	r0, r5, r6
 800625e:	19c0      	adds	r0, r0, r7
 8006260:	6800      	ldr	r0, [r0, #0]
 8006262:	f7fa fb97 	bl	8000994 <__aeabi_fmul>
 8006266:	1c03      	adds	r3, r0, #0
 8006268:	1c1d      	adds	r5, r3, #0
 800626a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800626c:	22b0      	movs	r2, #176	; 0xb0
 800626e:	0016      	movs	r6, r2
 8006270:	2310      	movs	r3, #16
 8006272:	18d0      	adds	r0, r2, r3
 8006274:	19c3      	adds	r3, r0, r7
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	f7fa fb8c 	bl	8000994 <__aeabi_fmul>
 800627c:	1c03      	adds	r3, r0, #0
 800627e:	1c19      	adds	r1, r3, #0
 8006280:	1c28      	adds	r0, r5, #0
 8006282:	f7fa fcad 	bl	8000be0 <__aeabi_fsub>
 8006286:	1c03      	adds	r3, r0, #0
 8006288:	1c19      	adds	r1, r3, #0
 800628a:	1c20      	adds	r0, r4, #0
 800628c:	f7fa f934 	bl	80004f8 <__aeabi_fadd>
 8006290:	1c03      	adds	r3, r0, #0
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8006294:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006296:	22a4      	movs	r2, #164	; 0xa4
 8006298:	2510      	movs	r5, #16
 800629a:	1950      	adds	r0, r2, r5
 800629c:	19c2      	adds	r2, r0, r7
 800629e:	6810      	ldr	r0, [r2, #0]
 80062a0:	f7fa fb78 	bl	8000994 <__aeabi_fmul>
 80062a4:	1c03      	adds	r3, r0, #0
 80062a6:	1c1c      	adds	r4, r3, #0
 80062a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f7fa fb72 	bl	8000994 <__aeabi_fmul>
 80062b0:	1c03      	adds	r3, r0, #0
 80062b2:	1c19      	adds	r1, r3, #0
 80062b4:	1c20      	adds	r0, r4, #0
 80062b6:	f7fa fc93 	bl	8000be0 <__aeabi_fsub>
 80062ba:	1c03      	adds	r3, r0, #0
 80062bc:	1c1c      	adds	r4, r3, #0
 80062be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062c0:	0032      	movs	r2, r6
 80062c2:	1950      	adds	r0, r2, r5
 80062c4:	19c2      	adds	r2, r0, r7
 80062c6:	6810      	ldr	r0, [r2, #0]
 80062c8:	f7fa fb64 	bl	8000994 <__aeabi_fmul>
 80062cc:	1c03      	adds	r3, r0, #0
 80062ce:	1c1d      	adds	r5, r3, #0
 80062d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d2:	26a8      	movs	r6, #168	; 0xa8
 80062d4:	2310      	movs	r3, #16
 80062d6:	18f0      	adds	r0, r6, r3
 80062d8:	19c2      	adds	r2, r0, r7
 80062da:	6810      	ldr	r0, [r2, #0]
 80062dc:	f7fa fb5a 	bl	8000994 <__aeabi_fmul>
 80062e0:	1c03      	adds	r3, r0, #0
 80062e2:	1c19      	adds	r1, r3, #0
 80062e4:	1c28      	adds	r0, r5, #0
 80062e6:	f7fa fc7b 	bl	8000be0 <__aeabi_fsub>
 80062ea:	1c03      	adds	r3, r0, #0
 80062ec:	1c19      	adds	r1, r3, #0
 80062ee:	1c20      	adds	r0, r4, #0
 80062f0:	f7fa f902 	bl	80004f8 <__aeabi_fadd>
 80062f4:	1c03      	adds	r3, r0, #0
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80062f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f7fa fb4a 	bl	8000994 <__aeabi_fmul>
 8006300:	1c03      	adds	r3, r0, #0
 8006302:	1c1c      	adds	r4, r3, #0
 8006304:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006306:	20a0      	movs	r0, #160	; 0xa0
 8006308:	2510      	movs	r5, #16
 800630a:	1940      	adds	r0, r0, r5
 800630c:	19c2      	adds	r2, r0, r7
 800630e:	6810      	ldr	r0, [r2, #0]
 8006310:	f7fa fb40 	bl	8000994 <__aeabi_fmul>
 8006314:	1c03      	adds	r3, r0, #0
 8006316:	1c19      	adds	r1, r3, #0
 8006318:	1c20      	adds	r0, r4, #0
 800631a:	f7fa fc61 	bl	8000be0 <__aeabi_fsub>
 800631e:	1c03      	adds	r3, r0, #0
 8006320:	1c1c      	adds	r4, r3, #0
 8006322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006324:	1970      	adds	r0, r6, r5
 8006326:	19c2      	adds	r2, r0, r7
 8006328:	6810      	ldr	r0, [r2, #0]
 800632a:	f7fa fb33 	bl	8000994 <__aeabi_fmul>
 800632e:	1c03      	adds	r3, r0, #0
 8006330:	1c1d      	adds	r5, r3, #0
 8006332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006334:	23ac      	movs	r3, #172	; 0xac
 8006336:	2610      	movs	r6, #16
 8006338:	1998      	adds	r0, r3, r6
 800633a:	19c3      	adds	r3, r0, r7
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f7fa fb29 	bl	8000994 <__aeabi_fmul>
 8006342:	1c03      	adds	r3, r0, #0
 8006344:	1c19      	adds	r1, r3, #0
 8006346:	1c28      	adds	r0, r5, #0
 8006348:	f7fa fc4a 	bl	8000be0 <__aeabi_fsub>
 800634c:	1c03      	adds	r3, r0, #0
 800634e:	1c19      	adds	r1, r3, #0
 8006350:	1c20      	adds	r0, r4, #0
 8006352:	f7fa f8d1 	bl	80004f8 <__aeabi_fadd>
 8006356:	1c03      	adds	r3, r0, #0
 8006358:	627b      	str	r3, [r7, #36]	; 0x24

	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 800635a:	2100      	movs	r1, #0
 800635c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800635e:	f7fa f89d 	bl	800049c <__aeabi_fcmpeq>
 8006362:	1e03      	subs	r3, r0, #0
 8006364:	d175      	bne.n	8006452 <IMU_AHRSupdate+0x882>
 8006366:	2100      	movs	r1, #0
 8006368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636a:	f7fa f897 	bl	800049c <__aeabi_fcmpeq>
 800636e:	1e03      	subs	r3, r0, #0
 8006370:	d16f      	bne.n	8006452 <IMU_AHRSupdate+0x882>
 8006372:	2100      	movs	r1, #0
 8006374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006376:	f7fa f891 	bl	800049c <__aeabi_fcmpeq>
 800637a:	1e03      	subs	r3, r0, #0
 800637c:	d169      	bne.n	8006452 <IMU_AHRSupdate+0x882>
	{
		exInt = exInt + ex * Ki * halfT;
 800637e:	2588      	movs	r5, #136	; 0x88
 8006380:	1979      	adds	r1, r7, r5
 8006382:	6809      	ldr	r1, [r1, #0]
 8006384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006386:	f7fa fb05 	bl	8000994 <__aeabi_fmul>
 800638a:	1c03      	adds	r3, r0, #0
 800638c:	1c19      	adds	r1, r3, #0
 800638e:	2484      	movs	r4, #132	; 0x84
 8006390:	19a0      	adds	r0, r4, r6
 8006392:	19c3      	adds	r3, r0, r7
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	f7fa f8af 	bl	80004f8 <__aeabi_fadd>
 800639a:	1c03      	adds	r3, r0, #0
 800639c:	19a1      	adds	r1, r4, r6
 800639e:	19ca      	adds	r2, r1, r7
 80063a0:	6013      	str	r3, [r2, #0]
		eyInt = eyInt + ey * Ki * halfT;
 80063a2:	1979      	adds	r1, r7, r5
 80063a4:	6809      	ldr	r1, [r1, #0]
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	f7fa faf4 	bl	8000994 <__aeabi_fmul>
 80063ac:	1c03      	adds	r3, r0, #0
 80063ae:	1c19      	adds	r1, r3, #0
 80063b0:	2580      	movs	r5, #128	; 0x80
 80063b2:	19a8      	adds	r0, r5, r6
 80063b4:	19c3      	adds	r3, r0, r7
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	f7fa f89e 	bl	80004f8 <__aeabi_fadd>
 80063bc:	1c03      	adds	r3, r0, #0
 80063be:	19a9      	adds	r1, r5, r6
 80063c0:	19ca      	adds	r2, r1, r7
 80063c2:	6013      	str	r3, [r2, #0]
		ezInt = ezInt + ez * Ki * halfT;
 80063c4:	2388      	movs	r3, #136	; 0x88
 80063c6:	18f9      	adds	r1, r7, r3
 80063c8:	6809      	ldr	r1, [r1, #0]
 80063ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063cc:	f7fa fae2 	bl	8000994 <__aeabi_fmul>
 80063d0:	1c03      	adds	r3, r0, #0
 80063d2:	1c19      	adds	r1, r3, #0
 80063d4:	228c      	movs	r2, #140	; 0x8c
 80063d6:	18b8      	adds	r0, r7, r2
 80063d8:	6800      	ldr	r0, [r0, #0]
 80063da:	f7fa f88d 	bl	80004f8 <__aeabi_fadd>
 80063de:	1c03      	adds	r3, r0, #0
 80063e0:	228c      	movs	r2, #140	; 0x8c
 80063e2:	18b9      	adds	r1, r7, r2
 80063e4:	600b      	str	r3, [r1, #0]

		gx = gx + Kp * ex + exInt;
 80063e6:	4930      	ldr	r1, [pc, #192]	; (80064a8 <IMU_AHRSupdate+0x8d8>)
 80063e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ea:	f7fa fad3 	bl	8000994 <__aeabi_fmul>
 80063ee:	1c03      	adds	r3, r0, #0
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	1c18      	adds	r0, r3, #0
 80063f4:	f7fa f880 	bl	80004f8 <__aeabi_fadd>
 80063f8:	1c03      	adds	r3, r0, #0
 80063fa:	1c19      	adds	r1, r3, #0
 80063fc:	19a0      	adds	r0, r4, r6
 80063fe:	19c3      	adds	r3, r0, r7
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f7fa f879 	bl	80004f8 <__aeabi_fadd>
 8006406:	1c03      	adds	r3, r0, #0
 8006408:	61fb      	str	r3, [r7, #28]
		gy = gy + Kp * ey + eyInt;
 800640a:	4927      	ldr	r1, [pc, #156]	; (80064a8 <IMU_AHRSupdate+0x8d8>)
 800640c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800640e:	f7fa fac1 	bl	8000994 <__aeabi_fmul>
 8006412:	1c03      	adds	r3, r0, #0
 8006414:	69b9      	ldr	r1, [r7, #24]
 8006416:	1c18      	adds	r0, r3, #0
 8006418:	f7fa f86e 	bl	80004f8 <__aeabi_fadd>
 800641c:	1c03      	adds	r3, r0, #0
 800641e:	1c19      	adds	r1, r3, #0
 8006420:	19a8      	adds	r0, r5, r6
 8006422:	19c3      	adds	r3, r0, r7
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	f7fa f867 	bl	80004f8 <__aeabi_fadd>
 800642a:	1c03      	adds	r3, r0, #0
 800642c:	61bb      	str	r3, [r7, #24]
		gz = gz + Kp * ez + ezInt;
 800642e:	491e      	ldr	r1, [pc, #120]	; (80064a8 <IMU_AHRSupdate+0x8d8>)
 8006430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006432:	f7fa faaf 	bl	8000994 <__aeabi_fmul>
 8006436:	1c03      	adds	r3, r0, #0
 8006438:	6979      	ldr	r1, [r7, #20]
 800643a:	1c18      	adds	r0, r3, #0
 800643c:	f7fa f85c 	bl	80004f8 <__aeabi_fadd>
 8006440:	1c03      	adds	r3, r0, #0
 8006442:	1c19      	adds	r1, r3, #0
 8006444:	238c      	movs	r3, #140	; 0x8c
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f7fa f855 	bl	80004f8 <__aeabi_fadd>
 800644e:	1c03      	adds	r3, r0, #0
 8006450:	617b      	str	r3, [r7, #20]
	}

	q0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <IMU_AHRSupdate+0x8dc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	0612      	lsls	r2, r2, #24
 800645a:	4053      	eors	r3, r2
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	1c18      	adds	r0, r3, #0
 8006460:	f7fa fa98 	bl	8000994 <__aeabi_fmul>
 8006464:	1c03      	adds	r3, r0, #0
 8006466:	1c1c      	adds	r4, r3, #0
 8006468:	4b11      	ldr	r3, [pc, #68]	; (80064b0 <IMU_AHRSupdate+0x8e0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69b9      	ldr	r1, [r7, #24]
 800646e:	1c18      	adds	r0, r3, #0
 8006470:	f7fa fa90 	bl	8000994 <__aeabi_fmul>
 8006474:	1c03      	adds	r3, r0, #0
 8006476:	1c19      	adds	r1, r3, #0
 8006478:	1c20      	adds	r0, r4, #0
 800647a:	f7fa fbb1 	bl	8000be0 <__aeabi_fsub>
 800647e:	1c03      	adds	r3, r0, #0
 8006480:	1c1c      	adds	r4, r3, #0
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <IMU_AHRSupdate+0x8e4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6979      	ldr	r1, [r7, #20]
 8006488:	1c18      	adds	r0, r3, #0
 800648a:	f7fa fa83 	bl	8000994 <__aeabi_fmul>
 800648e:	1c03      	adds	r3, r0, #0
 8006490:	1c19      	adds	r1, r3, #0
 8006492:	1c20      	adds	r0, r4, #0
 8006494:	f7fa fba4 	bl	8000be0 <__aeabi_fsub>
 8006498:	1c03      	adds	r3, r0, #0
 800649a:	2588      	movs	r5, #136	; 0x88
 800649c:	197a      	adds	r2, r7, r5
 800649e:	6811      	ldr	r1, [r2, #0]
 80064a0:	1c18      	adds	r0, r3, #0
 80064a2:	e009      	b.n	80064b8 <IMU_AHRSupdate+0x8e8>
 80064a4:	3fe00000 	.word	0x3fe00000
 80064a8:	40900000 	.word	0x40900000
 80064ac:	20000e18 	.word	0x20000e18
 80064b0:	20000e1c 	.word	0x20000e1c
 80064b4:	20000e20 	.word	0x20000e20
 80064b8:	f7fa fa6c 	bl	8000994 <__aeabi_fmul>
 80064bc:	1c03      	adds	r3, r0, #0
 80064be:	1c1a      	adds	r2, r3, #0
 80064c0:	4b83      	ldr	r3, [pc, #524]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1c19      	adds	r1, r3, #0
 80064c6:	1c10      	adds	r0, r2, #0
 80064c8:	f7fa f816 	bl	80004f8 <__aeabi_fadd>
 80064cc:	1c03      	adds	r3, r0, #0
 80064ce:	1c1a      	adds	r2, r3, #0
 80064d0:	4b7f      	ldr	r3, [pc, #508]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 80064d2:	601a      	str	r2, [r3, #0]
	q1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 80064d4:	4b7e      	ldr	r3, [pc, #504]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	1c18      	adds	r0, r3, #0
 80064dc:	f7fa fa5a 	bl	8000994 <__aeabi_fmul>
 80064e0:	1c03      	adds	r3, r0, #0
 80064e2:	1c1c      	adds	r4, r3, #0
 80064e4:	4b7b      	ldr	r3, [pc, #492]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6979      	ldr	r1, [r7, #20]
 80064ea:	1c18      	adds	r0, r3, #0
 80064ec:	f7fa fa52 	bl	8000994 <__aeabi_fmul>
 80064f0:	1c03      	adds	r3, r0, #0
 80064f2:	1c19      	adds	r1, r3, #0
 80064f4:	1c20      	adds	r0, r4, #0
 80064f6:	f7f9 ffff 	bl	80004f8 <__aeabi_fadd>
 80064fa:	1c03      	adds	r3, r0, #0
 80064fc:	1c1c      	adds	r4, r3, #0
 80064fe:	4b76      	ldr	r3, [pc, #472]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	1c18      	adds	r0, r3, #0
 8006506:	f7fa fa45 	bl	8000994 <__aeabi_fmul>
 800650a:	1c03      	adds	r3, r0, #0
 800650c:	1c19      	adds	r1, r3, #0
 800650e:	1c20      	adds	r0, r4, #0
 8006510:	f7fa fb66 	bl	8000be0 <__aeabi_fsub>
 8006514:	1c03      	adds	r3, r0, #0
 8006516:	197a      	adds	r2, r7, r5
 8006518:	6811      	ldr	r1, [r2, #0]
 800651a:	1c18      	adds	r0, r3, #0
 800651c:	f7fa fa3a 	bl	8000994 <__aeabi_fmul>
 8006520:	1c03      	adds	r3, r0, #0
 8006522:	1c1a      	adds	r2, r3, #0
 8006524:	4b6d      	ldr	r3, [pc, #436]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1c19      	adds	r1, r3, #0
 800652a:	1c10      	adds	r0, r2, #0
 800652c:	f7f9 ffe4 	bl	80004f8 <__aeabi_fadd>
 8006530:	1c03      	adds	r3, r0, #0
 8006532:	1c1a      	adds	r2, r3, #0
 8006534:	4b69      	ldr	r3, [pc, #420]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 8006536:	601a      	str	r2, [r3, #0]
	q2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8006538:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69b9      	ldr	r1, [r7, #24]
 800653e:	1c18      	adds	r0, r3, #0
 8006540:	f7fa fa28 	bl	8000994 <__aeabi_fmul>
 8006544:	1c03      	adds	r3, r0, #0
 8006546:	1c1c      	adds	r4, r3, #0
 8006548:	4b64      	ldr	r3, [pc, #400]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6979      	ldr	r1, [r7, #20]
 800654e:	1c18      	adds	r0, r3, #0
 8006550:	f7fa fa20 	bl	8000994 <__aeabi_fmul>
 8006554:	1c03      	adds	r3, r0, #0
 8006556:	1c19      	adds	r1, r3, #0
 8006558:	1c20      	adds	r0, r4, #0
 800655a:	f7fa fb41 	bl	8000be0 <__aeabi_fsub>
 800655e:	1c03      	adds	r3, r0, #0
 8006560:	1c1c      	adds	r4, r3, #0
 8006562:	4b5d      	ldr	r3, [pc, #372]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69f9      	ldr	r1, [r7, #28]
 8006568:	1c18      	adds	r0, r3, #0
 800656a:	f7fa fa13 	bl	8000994 <__aeabi_fmul>
 800656e:	1c03      	adds	r3, r0, #0
 8006570:	1c19      	adds	r1, r3, #0
 8006572:	1c20      	adds	r0, r4, #0
 8006574:	f7f9 ffc0 	bl	80004f8 <__aeabi_fadd>
 8006578:	1c03      	adds	r3, r0, #0
 800657a:	197a      	adds	r2, r7, r5
 800657c:	6811      	ldr	r1, [r2, #0]
 800657e:	1c18      	adds	r0, r3, #0
 8006580:	f7fa fa08 	bl	8000994 <__aeabi_fmul>
 8006584:	1c03      	adds	r3, r0, #0
 8006586:	1c1a      	adds	r2, r3, #0
 8006588:	4b52      	ldr	r3, [pc, #328]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1c19      	adds	r1, r3, #0
 800658e:	1c10      	adds	r0, r2, #0
 8006590:	f7f9 ffb2 	bl	80004f8 <__aeabi_fadd>
 8006594:	1c03      	adds	r3, r0, #0
 8006596:	1c1a      	adds	r2, r3, #0
 8006598:	4b4e      	ldr	r3, [pc, #312]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 800659a:	601a      	str	r2, [r3, #0]
	q3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 800659c:	4b4c      	ldr	r3, [pc, #304]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	1c18      	adds	r0, r3, #0
 80065a4:	f7fa f9f6 	bl	8000994 <__aeabi_fmul>
 80065a8:	1c03      	adds	r3, r0, #0
 80065aa:	1c1c      	adds	r4, r3, #0
 80065ac:	4b4b      	ldr	r3, [pc, #300]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69b9      	ldr	r1, [r7, #24]
 80065b2:	1c18      	adds	r0, r3, #0
 80065b4:	f7fa f9ee 	bl	8000994 <__aeabi_fmul>
 80065b8:	1c03      	adds	r3, r0, #0
 80065ba:	1c19      	adds	r1, r3, #0
 80065bc:	1c20      	adds	r0, r4, #0
 80065be:	f7f9 ff9b 	bl	80004f8 <__aeabi_fadd>
 80065c2:	1c03      	adds	r3, r0, #0
 80065c4:	1c1c      	adds	r4, r3, #0
 80065c6:	4b43      	ldr	r3, [pc, #268]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69f9      	ldr	r1, [r7, #28]
 80065cc:	1c18      	adds	r0, r3, #0
 80065ce:	f7fa f9e1 	bl	8000994 <__aeabi_fmul>
 80065d2:	1c03      	adds	r3, r0, #0
 80065d4:	1c19      	adds	r1, r3, #0
 80065d6:	1c20      	adds	r0, r4, #0
 80065d8:	f7fa fb02 	bl	8000be0 <__aeabi_fsub>
 80065dc:	1c03      	adds	r3, r0, #0
 80065de:	197a      	adds	r2, r7, r5
 80065e0:	6811      	ldr	r1, [r2, #0]
 80065e2:	1c18      	adds	r0, r3, #0
 80065e4:	f7fa f9d6 	bl	8000994 <__aeabi_fmul>
 80065e8:	1c03      	adds	r3, r0, #0
 80065ea:	1c1a      	adds	r2, r3, #0
 80065ec:	4b3a      	ldr	r3, [pc, #232]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	1c19      	adds	r1, r3, #0
 80065f2:	1c10      	adds	r0, r2, #0
 80065f4:	f7f9 ff80 	bl	80004f8 <__aeabi_fadd>
 80065f8:	1c03      	adds	r3, r0, #0
 80065fa:	1c1a      	adds	r2, r3, #0
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 80065fe:	601a      	str	r2, [r3, #0]

	norm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006600:	4b33      	ldr	r3, [pc, #204]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	1c19      	adds	r1, r3, #0
 800660a:	1c10      	adds	r0, r2, #0
 800660c:	f7fa f9c2 	bl	8000994 <__aeabi_fmul>
 8006610:	1c03      	adds	r3, r0, #0
 8006612:	1c1c      	adds	r4, r3, #0
 8006614:	4b31      	ldr	r3, [pc, #196]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b30      	ldr	r3, [pc, #192]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	1c19      	adds	r1, r3, #0
 800661e:	1c10      	adds	r0, r2, #0
 8006620:	f7fa f9b8 	bl	8000994 <__aeabi_fmul>
 8006624:	1c03      	adds	r3, r0, #0
 8006626:	1c19      	adds	r1, r3, #0
 8006628:	1c20      	adds	r0, r4, #0
 800662a:	f7f9 ff65 	bl	80004f8 <__aeabi_fadd>
 800662e:	1c03      	adds	r3, r0, #0
 8006630:	1c1c      	adds	r4, r3, #0
 8006632:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	1c19      	adds	r1, r3, #0
 800663c:	1c10      	adds	r0, r2, #0
 800663e:	f7fa f9a9 	bl	8000994 <__aeabi_fmul>
 8006642:	1c03      	adds	r3, r0, #0
 8006644:	1c19      	adds	r1, r3, #0
 8006646:	1c20      	adds	r0, r4, #0
 8006648:	f7f9 ff56 	bl	80004f8 <__aeabi_fadd>
 800664c:	1c03      	adds	r3, r0, #0
 800664e:	1c1c      	adds	r4, r3, #0
 8006650:	4b21      	ldr	r3, [pc, #132]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b20      	ldr	r3, [pc, #128]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1c19      	adds	r1, r3, #0
 800665a:	1c10      	adds	r0, r2, #0
 800665c:	f7fa f99a 	bl	8000994 <__aeabi_fmul>
 8006660:	1c03      	adds	r3, r0, #0
 8006662:	1c19      	adds	r1, r3, #0
 8006664:	1c20      	adds	r0, r4, #0
 8006666:	f7f9 ff47 	bl	80004f8 <__aeabi_fadd>
 800666a:	1c03      	adds	r3, r0, #0
 800666c:	1c18      	adds	r0, r3, #0
 800666e:	f7ff fa57 	bl	8005b20 <invSqrt>
 8006672:	1c03      	adds	r3, r0, #0
 8006674:	65fb      	str	r3, [r7, #92]	; 0x5c
	q0 = q0 * norm;
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800667c:	1c18      	adds	r0, r3, #0
 800667e:	f7fa f989 	bl	8000994 <__aeabi_fmul>
 8006682:	1c03      	adds	r3, r0, #0
 8006684:	1c1a      	adds	r2, r3, #0
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <IMU_AHRSupdate+0xb00>)
 8006688:	601a      	str	r2, [r3, #0]
	q1 = q1 * norm;
 800668a:	4b14      	ldr	r3, [pc, #80]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006690:	1c18      	adds	r0, r3, #0
 8006692:	f7fa f97f 	bl	8000994 <__aeabi_fmul>
 8006696:	1c03      	adds	r3, r0, #0
 8006698:	1c1a      	adds	r2, r3, #0
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <IMU_AHRSupdate+0xb0c>)
 800669c:	601a      	str	r2, [r3, #0]
	q2 = q2 * norm;
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80066a4:	1c18      	adds	r0, r3, #0
 80066a6:	f7fa f975 	bl	8000994 <__aeabi_fmul>
 80066aa:	1c03      	adds	r3, r0, #0
 80066ac:	1c1a      	adds	r2, r3, #0
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <IMU_AHRSupdate+0xb04>)
 80066b0:	601a      	str	r2, [r3, #0]
	q3 = q3 * norm;
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80066b8:	1c18      	adds	r0, r3, #0
 80066ba:	f7fa f96b 	bl	8000994 <__aeabi_fmul>
 80066be:	1c03      	adds	r3, r0, #0
 80066c0:	1c1a      	adds	r2, r3, #0
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <IMU_AHRSupdate+0xb08>)
 80066c4:	601a      	str	r2, [r3, #0]
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b027      	add	sp, #156	; 0x9c
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	20000e14 	.word	0x20000e14
 80066d4:	20000e1c 	.word	0x20000e1c
 80066d8:	20000e20 	.word	0x20000e20
 80066dc:	20000e18 	.word	0x20000e18

080066e0 <IMU_GetQuater>:
  * @brief  Get quaters
  * @param  None
  * @retval None
  */
void IMU_GetQuater(void)
{
 80066e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e2:	46c6      	mov	lr, r8
 80066e4:	b500      	push	{lr}
 80066e6:	b096      	sub	sp, #88	; 0x58
 80066e8:	af06      	add	r7, sp, #24
	float MotionVal[9];
    int16_t s16Gyro[3], s16Accel[3], s16Magn[3];

    invMSAccelRead(&s16Accel[0], &s16Accel[1], &s16Accel[2]);
 80066ea:	240c      	movs	r4, #12
 80066ec:	193b      	adds	r3, r7, r4
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	193b      	adds	r3, r7, r4
 80066f2:	1c99      	adds	r1, r3, #2
 80066f4:	193b      	adds	r3, r7, r4
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 f98a 	bl	8006a10 <invMSAccelRead>
    invMSGyroRead(&s16Gyro[0], &s16Gyro[1], &s16Gyro[2]);
 80066fc:	2514      	movs	r5, #20
 80066fe:	197b      	adds	r3, r7, r5
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	197b      	adds	r3, r7, r5
 8006704:	1c99      	adds	r1, r3, #2
 8006706:	197b      	adds	r3, r7, r5
 8006708:	0018      	movs	r0, r3
 800670a:	f000 f9ad 	bl	8006a68 <invMSGyroRead>
    invMSMagRead(&s16Magn[0], &s16Magn[1], &s16Magn[2]);
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	1d1a      	adds	r2, r3, #4
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	1c99      	adds	r1, r3, #2
 8006716:	1d3b      	adds	r3, r7, #4
 8006718:	0018      	movs	r0, r3
 800671a:	f000 f9d1 	bl	8006ac0 <invMSMagRead>

    //for log
    gyro[0] = s16Gyro[0];
 800671e:	197b      	adds	r3, r7, r5
 8006720:	2200      	movs	r2, #0
 8006722:	5e9a      	ldrsh	r2, [r3, r2]
 8006724:	4b7f      	ldr	r3, [pc, #508]	; (8006924 <IMU_GetQuater+0x244>)
 8006726:	801a      	strh	r2, [r3, #0]
    gyro[1] = s16Gyro[1];
 8006728:	197b      	adds	r3, r7, r5
 800672a:	2202      	movs	r2, #2
 800672c:	5e9a      	ldrsh	r2, [r3, r2]
 800672e:	4b7d      	ldr	r3, [pc, #500]	; (8006924 <IMU_GetQuater+0x244>)
 8006730:	805a      	strh	r2, [r3, #2]
    gyro[2] = s16Gyro[2];
 8006732:	197b      	adds	r3, r7, r5
 8006734:	2204      	movs	r2, #4
 8006736:	5e9a      	ldrsh	r2, [r3, r2]
 8006738:	4b7a      	ldr	r3, [pc, #488]	; (8006924 <IMU_GetQuater+0x244>)
 800673a:	809a      	strh	r2, [r3, #4]
    accel[0] = s16Accel[0];
 800673c:	193b      	adds	r3, r7, r4
 800673e:	2200      	movs	r2, #0
 8006740:	5e9a      	ldrsh	r2, [r3, r2]
 8006742:	4b79      	ldr	r3, [pc, #484]	; (8006928 <IMU_GetQuater+0x248>)
 8006744:	801a      	strh	r2, [r3, #0]
    accel[1] = s16Accel[1];
 8006746:	193b      	adds	r3, r7, r4
 8006748:	2202      	movs	r2, #2
 800674a:	5e9a      	ldrsh	r2, [r3, r2]
 800674c:	4b76      	ldr	r3, [pc, #472]	; (8006928 <IMU_GetQuater+0x248>)
 800674e:	805a      	strh	r2, [r3, #2]
    accel[2] = s16Accel[2];
 8006750:	193b      	adds	r3, r7, r4
 8006752:	2204      	movs	r2, #4
 8006754:	5e9a      	ldrsh	r2, [r3, r2]
 8006756:	4b74      	ldr	r3, [pc, #464]	; (8006928 <IMU_GetQuater+0x248>)
 8006758:	809a      	strh	r2, [r3, #4]
    magn[0] = s16Magn[0] - gstMagOffset.s16X;
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	2200      	movs	r2, #0
 800675e:	5e9b      	ldrsh	r3, [r3, r2]
 8006760:	b29a      	uxth	r2, r3
 8006762:	4b72      	ldr	r3, [pc, #456]	; (800692c <IMU_GetQuater+0x24c>)
 8006764:	2100      	movs	r1, #0
 8006766:	5e5b      	ldrsh	r3, [r3, r1]
 8006768:	b29b      	uxth	r3, r3
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	b29b      	uxth	r3, r3
 800676e:	b21a      	sxth	r2, r3
 8006770:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <IMU_GetQuater+0x250>)
 8006772:	801a      	strh	r2, [r3, #0]
    magn[1] = s16Magn[1] - gstMagOffset.s16Y;
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	2202      	movs	r2, #2
 8006778:	5e9b      	ldrsh	r3, [r3, r2]
 800677a:	b29a      	uxth	r2, r3
 800677c:	4b6b      	ldr	r3, [pc, #428]	; (800692c <IMU_GetQuater+0x24c>)
 800677e:	2102      	movs	r1, #2
 8006780:	5e5b      	ldrsh	r3, [r3, r1]
 8006782:	b29b      	uxth	r3, r3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	b21a      	sxth	r2, r3
 800678a:	4b69      	ldr	r3, [pc, #420]	; (8006930 <IMU_GetQuater+0x250>)
 800678c:	805a      	strh	r2, [r3, #2]
    magn[2] = s16Magn[2] - gstMagOffset.s16Z;
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	2204      	movs	r2, #4
 8006792:	5e9b      	ldrsh	r3, [r3, r2]
 8006794:	b29a      	uxth	r2, r3
 8006796:	4b65      	ldr	r3, [pc, #404]	; (800692c <IMU_GetQuater+0x24c>)
 8006798:	2104      	movs	r1, #4
 800679a:	5e5b      	ldrsh	r3, [r3, r1]
 800679c:	b29b      	uxth	r3, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	b21a      	sxth	r2, r3
 80067a4:	4b62      	ldr	r3, [pc, #392]	; (8006930 <IMU_GetQuater+0x250>)
 80067a6:	809a      	strh	r2, [r3, #4]

    MotionVal[0]=gyro[0]/32.8;
 80067a8:	4b5e      	ldr	r3, [pc, #376]	; (8006924 <IMU_GetQuater+0x244>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	5e9b      	ldrsh	r3, [r3, r2]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7fc f96c 	bl	8002a8c <__aeabi_i2d>
 80067b4:	4a5f      	ldr	r2, [pc, #380]	; (8006934 <IMU_GetQuater+0x254>)
 80067b6:	4b60      	ldr	r3, [pc, #384]	; (8006938 <IMU_GetQuater+0x258>)
 80067b8:	f7fa ff4a 	bl	8001650 <__aeabi_ddiv>
 80067bc:	0002      	movs	r2, r0
 80067be:	000b      	movs	r3, r1
 80067c0:	0010      	movs	r0, r2
 80067c2:	0019      	movs	r1, r3
 80067c4:	f7fc f9da 	bl	8002b7c <__aeabi_d2f>
 80067c8:	1c02      	adds	r2, r0, #0
 80067ca:	241c      	movs	r4, #28
 80067cc:	193b      	adds	r3, r7, r4
 80067ce:	601a      	str	r2, [r3, #0]
    MotionVal[1]=gyro[1]/32.8;
 80067d0:	4b54      	ldr	r3, [pc, #336]	; (8006924 <IMU_GetQuater+0x244>)
 80067d2:	2202      	movs	r2, #2
 80067d4:	5e9b      	ldrsh	r3, [r3, r2]
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7fc f958 	bl	8002a8c <__aeabi_i2d>
 80067dc:	4a55      	ldr	r2, [pc, #340]	; (8006934 <IMU_GetQuater+0x254>)
 80067de:	4b56      	ldr	r3, [pc, #344]	; (8006938 <IMU_GetQuater+0x258>)
 80067e0:	f7fa ff36 	bl	8001650 <__aeabi_ddiv>
 80067e4:	0002      	movs	r2, r0
 80067e6:	000b      	movs	r3, r1
 80067e8:	0010      	movs	r0, r2
 80067ea:	0019      	movs	r1, r3
 80067ec:	f7fc f9c6 	bl	8002b7c <__aeabi_d2f>
 80067f0:	1c02      	adds	r2, r0, #0
 80067f2:	193b      	adds	r3, r7, r4
 80067f4:	605a      	str	r2, [r3, #4]
    MotionVal[2]=gyro[2]/32.8;
 80067f6:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <IMU_GetQuater+0x244>)
 80067f8:	2204      	movs	r2, #4
 80067fa:	5e9b      	ldrsh	r3, [r3, r2]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7fc f945 	bl	8002a8c <__aeabi_i2d>
 8006802:	4a4c      	ldr	r2, [pc, #304]	; (8006934 <IMU_GetQuater+0x254>)
 8006804:	4b4c      	ldr	r3, [pc, #304]	; (8006938 <IMU_GetQuater+0x258>)
 8006806:	f7fa ff23 	bl	8001650 <__aeabi_ddiv>
 800680a:	0002      	movs	r2, r0
 800680c:	000b      	movs	r3, r1
 800680e:	0010      	movs	r0, r2
 8006810:	0019      	movs	r1, r3
 8006812:	f7fc f9b3 	bl	8002b7c <__aeabi_d2f>
 8006816:	1c02      	adds	r2, r0, #0
 8006818:	193b      	adds	r3, r7, r4
 800681a:	609a      	str	r2, [r3, #8]
    MotionVal[3]=accel[0];
 800681c:	4b42      	ldr	r3, [pc, #264]	; (8006928 <IMU_GetQuater+0x248>)
 800681e:	2200      	movs	r2, #0
 8006820:	5e9b      	ldrsh	r3, [r3, r2]
 8006822:	0018      	movs	r0, r3
 8006824:	f7fa fb8a 	bl	8000f3c <__aeabi_i2f>
 8006828:	1c02      	adds	r2, r0, #0
 800682a:	193b      	adds	r3, r7, r4
 800682c:	60da      	str	r2, [r3, #12]
    MotionVal[4]=accel[1];
 800682e:	4b3e      	ldr	r3, [pc, #248]	; (8006928 <IMU_GetQuater+0x248>)
 8006830:	2202      	movs	r2, #2
 8006832:	5e9b      	ldrsh	r3, [r3, r2]
 8006834:	0018      	movs	r0, r3
 8006836:	f7fa fb81 	bl	8000f3c <__aeabi_i2f>
 800683a:	1c02      	adds	r2, r0, #0
 800683c:	193b      	adds	r3, r7, r4
 800683e:	611a      	str	r2, [r3, #16]
    MotionVal[5]=accel[2];
 8006840:	4b39      	ldr	r3, [pc, #228]	; (8006928 <IMU_GetQuater+0x248>)
 8006842:	2204      	movs	r2, #4
 8006844:	5e9b      	ldrsh	r3, [r3, r2]
 8006846:	0018      	movs	r0, r3
 8006848:	f7fa fb78 	bl	8000f3c <__aeabi_i2f>
 800684c:	1c02      	adds	r2, r0, #0
 800684e:	193b      	adds	r3, r7, r4
 8006850:	615a      	str	r2, [r3, #20]
    MotionVal[6]=magn[0];
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <IMU_GetQuater+0x250>)
 8006854:	2200      	movs	r2, #0
 8006856:	5e9b      	ldrsh	r3, [r3, r2]
 8006858:	0018      	movs	r0, r3
 800685a:	f7fa fb6f 	bl	8000f3c <__aeabi_i2f>
 800685e:	1c02      	adds	r2, r0, #0
 8006860:	193b      	adds	r3, r7, r4
 8006862:	619a      	str	r2, [r3, #24]
    MotionVal[7]=magn[1];
 8006864:	4b32      	ldr	r3, [pc, #200]	; (8006930 <IMU_GetQuater+0x250>)
 8006866:	2202      	movs	r2, #2
 8006868:	5e9b      	ldrsh	r3, [r3, r2]
 800686a:	0018      	movs	r0, r3
 800686c:	f7fa fb66 	bl	8000f3c <__aeabi_i2f>
 8006870:	1c02      	adds	r2, r0, #0
 8006872:	193b      	adds	r3, r7, r4
 8006874:	61da      	str	r2, [r3, #28]
    MotionVal[8]=magn[2];
 8006876:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <IMU_GetQuater+0x250>)
 8006878:	2204      	movs	r2, #4
 800687a:	5e9b      	ldrsh	r3, [r3, r2]
 800687c:	0018      	movs	r0, r3
 800687e:	f7fa fb5d 	bl	8000f3c <__aeabi_i2f>
 8006882:	1c02      	adds	r2, r0, #0
 8006884:	193b      	adds	r3, r7, r4
 8006886:	621a      	str	r2, [r3, #32]
 	IMU_AHRSupdate((float)MotionVal[0] * 0.0175, (float)MotionVal[1] * 0.0175, (float)MotionVal[2] * 0.0175,
 8006888:	193b      	adds	r3, r7, r4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	1c18      	adds	r0, r3, #0
 800688e:	f7fc f92d 	bl	8002aec <__aeabi_f2d>
 8006892:	4a2a      	ldr	r2, [pc, #168]	; (800693c <IMU_GetQuater+0x25c>)
 8006894:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <IMU_GetQuater+0x260>)
 8006896:	f7fb fadd 	bl	8001e54 <__aeabi_dmul>
 800689a:	0002      	movs	r2, r0
 800689c:	000b      	movs	r3, r1
 800689e:	0010      	movs	r0, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	f7fc f96b 	bl	8002b7c <__aeabi_d2f>
 80068a6:	1c06      	adds	r6, r0, #0
 80068a8:	193b      	adds	r3, r7, r4
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	1c18      	adds	r0, r3, #0
 80068ae:	f7fc f91d 	bl	8002aec <__aeabi_f2d>
 80068b2:	4a22      	ldr	r2, [pc, #136]	; (800693c <IMU_GetQuater+0x25c>)
 80068b4:	4b22      	ldr	r3, [pc, #136]	; (8006940 <IMU_GetQuater+0x260>)
 80068b6:	f7fb facd 	bl	8001e54 <__aeabi_dmul>
 80068ba:	0002      	movs	r2, r0
 80068bc:	000b      	movs	r3, r1
 80068be:	0010      	movs	r0, r2
 80068c0:	0019      	movs	r1, r3
 80068c2:	f7fc f95b 	bl	8002b7c <__aeabi_d2f>
 80068c6:	4680      	mov	r8, r0
 80068c8:	193b      	adds	r3, r7, r4
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	1c18      	adds	r0, r3, #0
 80068ce:	f7fc f90d 	bl	8002aec <__aeabi_f2d>
 80068d2:	4a1a      	ldr	r2, [pc, #104]	; (800693c <IMU_GetQuater+0x25c>)
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <IMU_GetQuater+0x260>)
 80068d6:	f7fb fabd 	bl	8001e54 <__aeabi_dmul>
 80068da:	0002      	movs	r2, r0
 80068dc:	000b      	movs	r3, r1
 80068de:	0010      	movs	r0, r2
 80068e0:	0019      	movs	r1, r3
 80068e2:	f7fc f94b 	bl	8002b7c <__aeabi_d2f>
 80068e6:	4684      	mov	ip, r0
 80068e8:	193b      	adds	r3, r7, r4
 80068ea:	68dd      	ldr	r5, [r3, #12]
 80068ec:	193b      	adds	r3, r7, r4
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	193b      	adds	r3, r7, r4
 80068f2:	6959      	ldr	r1, [r3, #20]
 80068f4:	193b      	adds	r3, r7, r4
 80068f6:	6998      	ldr	r0, [r3, #24]
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	69dc      	ldr	r4, [r3, #28]
 80068fc:	231c      	movs	r3, #28
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	9403      	str	r4, [sp, #12]
 8006906:	9002      	str	r0, [sp, #8]
 8006908:	9101      	str	r1, [sp, #4]
 800690a:	9200      	str	r2, [sp, #0]
 800690c:	1c2b      	adds	r3, r5, #0
 800690e:	4662      	mov	r2, ip
 8006910:	4641      	mov	r1, r8
 8006912:	1c30      	adds	r0, r6, #0
 8006914:	f7ff f95c 	bl	8005bd0 <IMU_AHRSupdate>
   	(float)MotionVal[3], (float)MotionVal[4], (float)MotionVal[5], (float)MotionVal[6], (float)MotionVal[7], MotionVal[8]);
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b010      	add	sp, #64	; 0x40
 800691e:	bc80      	pop	{r7}
 8006920:	46b8      	mov	r8, r7
 8006922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006924:	2000058c 	.word	0x2000058c
 8006928:	20000584 	.word	0x20000584
 800692c:	20000e24 	.word	0x20000e24
 8006930:	2000057c 	.word	0x2000057c
 8006934:	66666666 	.word	0x66666666
 8006938:	40406666 	.word	0x40406666
 800693c:	1eb851ec 	.word	0x1eb851ec
 8006940:	3f91eb85 	.word	0x3f91eb85

08006944 <invMSInit>:
{
    "Motion sersor is ICM-20948"
};

extern void invMSInit()
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
    INVMS_EN_SENSOR_TYPY i;
    //char buf[64] = {""};
    //sprintf(buf, "%s", "\r\nSensor raw data [v0.9]. \r\n");
    //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
    //memset(buf, 0, sizeof(buf));
    printf("\r\nSensor raw data [v0.9]. \r\n");
 800694a:	4b2b      	ldr	r3, [pc, #172]	; (80069f8 <invMSInit+0xb4>)
 800694c:	0018      	movs	r0, r3
 800694e:	f002 fdc9 	bl	80094e4 <puts>
    DEV_Delay_ms(10);
 8006952:	200a      	movs	r0, #10
 8006954:	f000 f96e 	bl	8006c34 <HAL_Delay>
	for(i=INVMS_EN_SENSOR_TYPY_MPU9255; i<INVMS_EN_SENSOR_TYPY_MAX; i++)
 8006958:	1dfb      	adds	r3, r7, #7
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e02d      	b.n	80069bc <invMSInit+0x78>
	{
        if(gsstSensorList[i].pFunCheck != NULL)
 8006960:	1dfb      	adds	r3, r7, #7
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	4925      	ldr	r1, [pc, #148]	; (80069fc <invMSInit+0xb8>)
 8006966:	0013      	movs	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	189b      	adds	r3, r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	18cb      	adds	r3, r1, r3
 8006970:	3304      	adds	r3, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01c      	beq.n	80069b2 <invMSInit+0x6e>
        {
            if( true == gsstSensorList[i].pFunCheck())
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	491f      	ldr	r1, [pc, #124]	; (80069fc <invMSInit+0xb8>)
 800697e:	0013      	movs	r3, r2
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	189b      	adds	r3, r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	18cb      	adds	r3, r1, r3
 8006988:	3304      	adds	r3, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4798      	blx	r3
 800698e:	1e03      	subs	r3, r0, #0
 8006990:	d00f      	beq.n	80069b2 <invMSInit+0x6e>
            {
                genCurrentSensorType = i;
 8006992:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <invMSInit+0xbc>)
 8006994:	1dfa      	adds	r2, r7, #7
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	701a      	strb	r2, [r3, #0]
                printf("\r\n%s\r\n", gstring[genCurrentSensorType]);
 800699a:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <invMSInit+0xbc>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	001a      	movs	r2, r3
 80069a0:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <invMSInit+0xc0>)
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	58d2      	ldr	r2, [r2, r3]
 80069a6:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <invMSInit+0xc4>)
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f002 fd0e 	bl	80093cc <iprintf>
                //sprintf(buf, "\r\n%s\r\n", gstring[genCurrentSensorType]);
                //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
                //memset(buf, 0, sizeof(buf));
                break;
 80069b0:	e008      	b.n	80069c4 <invMSInit+0x80>
	for(i=INVMS_EN_SENSOR_TYPY_MPU9255; i<INVMS_EN_SENSOR_TYPY_MAX; i++)
 80069b2:	1dfb      	adds	r3, r7, #7
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	1dfb      	adds	r3, r7, #7
 80069b8:	3201      	adds	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	1dfb      	adds	r3, r7, #7
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d9cd      	bls.n	8006960 <invMSInit+0x1c>
            }
        }
    }

    if( genCurrentSensorType!= INVMS_EN_SENSOR_TYPY_MAX)
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <invMSInit+0xbc>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d00c      	beq.n	80069e6 <invMSInit+0xa2>
    {
        gsstSensorList[genCurrentSensorType].pFunInit();
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <invMSInit+0xbc>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	0019      	movs	r1, r3
 80069d2:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <invMSInit+0xb8>)
 80069d4:	000b      	movs	r3, r1
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	185b      	adds	r3, r3, r1
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	18d3      	adds	r3, r2, r3
 80069de:	3308      	adds	r3, #8
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4798      	blx	r3
         //sprintf(buf, "%s", "\r\ninvsense motion sensor have not connect. \r\n");
		 //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
		 //memset(buf, 0, sizeof(buf));
    }

    return;
 80069e4:	e004      	b.n	80069f0 <invMSInit+0xac>
         printf("\r\ninvsense motion sensor have not connect. \r\n");
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <invMSInit+0xc8>)
 80069e8:	0018      	movs	r0, r3
 80069ea:	f002 fd7b 	bl	80094e4 <puts>
    return;
 80069ee:	46c0      	nop			; (mov r8, r8)
}
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b002      	add	sp, #8
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	0800a8bc 	.word	0x0800a8bc
 80069fc:	20000450 	.word	0x20000450
 8006a00:	20000498 	.word	0x20000498
 8006a04:	2000049c 	.word	0x2000049c
 8006a08:	0800a8d8 	.word	0x0800a8d8
 8006a0c:	0800a8e0 	.word	0x0800a8e0

08006a10 <invMSAccelRead>:
extern void invMSAccelRead(int16_t* ps16AccelX, int16_t* ps16AccelY, int16_t* ps16AccelZ)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <invMSAccelRead+0x50>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d018      	beq.n	8006a56 <invMSAccelRead+0x46>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d015      	beq.n	8006a56 <invMSAccelRead+0x46>
        (ps16AccelX != NULL) &&
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <invMSAccelRead+0x46>
        (ps16AccelY != NULL) &&
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <invMSAccelRead+0x46>
        (ps16AccelZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunAccelRead(ps16AccelX, ps16AccelY, ps16AccelZ);
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <invMSAccelRead+0x50>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	4a09      	ldr	r2, [pc, #36]	; (8006a64 <invMSAccelRead+0x54>)
 8006a3e:	000b      	movs	r3, r1
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	185b      	adds	r3, r3, r1
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	18d3      	adds	r3, r2, r3
 8006a48:	3310      	adds	r3, #16
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	4798      	blx	r3
    }
    return;
 8006a54:	46c0      	nop			; (mov r8, r8)
 8006a56:	46c0      	nop			; (mov r8, r8)
}
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b004      	add	sp, #16
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	20000498 	.word	0x20000498
 8006a64:	20000450 	.word	0x20000450

08006a68 <invMSGyroRead>:
extern void invMSGyroRead(int16_t* ps16GyroX, int16_t* ps16GyroY, int16_t* ps16GyroZ)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 8006a74:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <invMSGyroRead+0x50>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d018      	beq.n	8006aae <invMSGyroRead+0x46>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d015      	beq.n	8006aae <invMSGyroRead+0x46>
        (ps16GyroX != NULL) &&
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d012      	beq.n	8006aae <invMSGyroRead+0x46>
        (ps16GyroY != NULL) &&
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00f      	beq.n	8006aae <invMSGyroRead+0x46>
        (ps16GyroZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunGyroRead(ps16GyroX, ps16GyroY, ps16GyroZ);
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <invMSGyroRead+0x50>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	0019      	movs	r1, r3
 8006a94:	4a09      	ldr	r2, [pc, #36]	; (8006abc <invMSGyroRead+0x54>)
 8006a96:	000b      	movs	r3, r1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	185b      	adds	r3, r3, r1
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	18d3      	adds	r3, r2, r3
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	4798      	blx	r3
    }
    return;
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	46c0      	nop			; (mov r8, r8)
}
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b004      	add	sp, #16
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	20000498 	.word	0x20000498
 8006abc:	20000450 	.word	0x20000450

08006ac0 <invMSMagRead>:
extern void invMSMagRead(int16_t* ps16MagnX, int16_t* ps16MagnY, int16_t* ps16MagnZ)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 8006acc:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <invMSMagRead+0x50>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d018      	beq.n	8006b06 <invMSMagRead+0x46>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d015      	beq.n	8006b06 <invMSMagRead+0x46>
        (ps16MagnX != NULL) &&
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d012      	beq.n	8006b06 <invMSMagRead+0x46>
        (ps16MagnY != NULL) &&
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <invMSMagRead+0x46>
        (ps16MagnZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunMagRead(ps16MagnX, ps16MagnY, ps16MagnZ);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <invMSMagRead+0x50>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	0019      	movs	r1, r3
 8006aec:	4a09      	ldr	r2, [pc, #36]	; (8006b14 <invMSMagRead+0x54>)
 8006aee:	000b      	movs	r3, r1
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	185b      	adds	r3, r3, r1
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	18d3      	adds	r3, r2, r3
 8006af8:	3314      	adds	r3, #20
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	4798      	blx	r3
    }
    return;
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	46c0      	nop			; (mov r8, r8)
}
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b004      	add	sp, #16
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	20000498 	.word	0x20000498
 8006b14:	20000450 	.word	0x20000450

08006b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006b18:	480d      	ldr	r0, [pc, #52]	; (8006b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006b1a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b1c:	480d      	ldr	r0, [pc, #52]	; (8006b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b1e:	490e      	ldr	r1, [pc, #56]	; (8006b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b20:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <LoopForever+0xe>)
  movs r3, #0
 8006b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b24:	e002      	b.n	8006b2c <LoopCopyDataInit>

08006b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b2a:	3304      	adds	r3, #4

08006b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b30:	d3f9      	bcc.n	8006b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b32:	4a0b      	ldr	r2, [pc, #44]	; (8006b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b34:	4c0b      	ldr	r4, [pc, #44]	; (8006b64 <LoopForever+0x16>)
  movs r3, #0
 8006b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b38:	e001      	b.n	8006b3e <LoopFillZerobss>

08006b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b3c:	3204      	adds	r2, #4

08006b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b40:	d3fb      	bcc.n	8006b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006b42:	f7fd f9e1 	bl	8003f08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006b46:	f002 fad3 	bl	80090f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b4a:	f7fc fc29 	bl	80033a0 <main>

08006b4e <LoopForever>:

LoopForever:
    b LoopForever
 8006b4e:	e7fe      	b.n	8006b4e <LoopForever>
  ldr   r0, =_estack
 8006b50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b58:	20000514 	.word	0x20000514
  ldr r2, =_sidata
 8006b5c:	0800aeec 	.word	0x0800aeec
  ldr r2, =_sbss
 8006b60:	20000514 	.word	0x20000514
  ldr r4, =_ebss
 8006b64:	20000e40 	.word	0x20000e40

08006b68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b68:	e7fe      	b.n	8006b68 <ADC1_COMP_IRQHandler>
	...

08006b6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <HAL_Init+0x24>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_Init+0x24>)
 8006b76:	2110      	movs	r1, #16
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8006b7c:	2003      	movs	r0, #3
 8006b7e:	f000 f809 	bl	8006b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b82:	f7fd f8eb 	bl	8003d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	40022000 	.word	0x40022000

08006b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b9c:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <HAL_InitTick+0x5c>)
 8006b9e:	681c      	ldr	r4, [r3, #0]
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <HAL_InitTick+0x60>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	0019      	movs	r1, r3
 8006ba6:	23fa      	movs	r3, #250	; 0xfa
 8006ba8:	0098      	lsls	r0, r3, #2
 8006baa:	f7f9 fab7 	bl	800011c <__udivsi3>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	f7f9 fab2 	bl	800011c <__udivsi3>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f000 f905 	bl	8006dca <HAL_SYSTICK_Config>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e00f      	b.n	8006be8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d80b      	bhi.n	8006be6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	425b      	negs	r3, r3
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 f8e2 	bl	8006da0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_InitTick+0x64>)
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b003      	add	sp, #12
 8006bee:	bd90      	pop	{r4, r7, pc}
 8006bf0:	20000448 	.word	0x20000448
 8006bf4:	200004ac 	.word	0x200004ac
 8006bf8:	200004a8 	.word	0x200004a8

08006bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HAL_IncTick+0x1c>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	001a      	movs	r2, r3
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_IncTick+0x20>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	18d2      	adds	r2, r2, r3
 8006c0c:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <HAL_IncTick+0x20>)
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	46c0      	nop			; (mov r8, r8)
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	200004ac 	.word	0x200004ac
 8006c1c:	20000e2c 	.word	0x20000e2c

08006c20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  return uwTick;
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <HAL_GetTick+0x10>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	20000e2c 	.word	0x20000e2c

08006c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c3c:	f7ff fff0 	bl	8006c20 <HAL_GetTick>
 8006c40:	0003      	movs	r3, r0
 8006c42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	d005      	beq.n	8006c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <HAL_Delay+0x44>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	001a      	movs	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	f7ff ffe0 	bl	8006c20 <HAL_GetTick>
 8006c60:	0002      	movs	r2, r0
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d8f7      	bhi.n	8006c5c <HAL_Delay+0x28>
  {
  }
}
 8006c6c:	46c0      	nop			; (mov r8, r8)
 8006c6e:	46c0      	nop			; (mov r8, r8)
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b004      	add	sp, #16
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	200004ac 	.word	0x200004ac

08006c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	0002      	movs	r2, r0
 8006c84:	6039      	str	r1, [r7, #0]
 8006c86:	1dfb      	adds	r3, r7, #7
 8006c88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006c8a:	1dfb      	adds	r3, r7, #7
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c90:	d828      	bhi.n	8006ce4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c92:	4a2f      	ldr	r2, [pc, #188]	; (8006d50 <__NVIC_SetPriority+0xd4>)
 8006c94:	1dfb      	adds	r3, r7, #7
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	33c0      	adds	r3, #192	; 0xc0
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	589b      	ldr	r3, [r3, r2]
 8006ca2:	1dfa      	adds	r2, r7, #7
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	2203      	movs	r2, #3
 8006caa:	400a      	ands	r2, r1
 8006cac:	00d2      	lsls	r2, r2, #3
 8006cae:	21ff      	movs	r1, #255	; 0xff
 8006cb0:	4091      	lsls	r1, r2
 8006cb2:	000a      	movs	r2, r1
 8006cb4:	43d2      	mvns	r2, r2
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	019b      	lsls	r3, r3, #6
 8006cbe:	22ff      	movs	r2, #255	; 0xff
 8006cc0:	401a      	ands	r2, r3
 8006cc2:	1dfb      	adds	r3, r7, #7
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	2303      	movs	r3, #3
 8006cca:	4003      	ands	r3, r0
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006cd0:	481f      	ldr	r0, [pc, #124]	; (8006d50 <__NVIC_SetPriority+0xd4>)
 8006cd2:	1dfb      	adds	r3, r7, #7
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	089b      	lsrs	r3, r3, #2
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	33c0      	adds	r3, #192	; 0xc0
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006ce2:	e031      	b.n	8006d48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <__NVIC_SetPriority+0xd8>)
 8006ce6:	1dfb      	adds	r3, r7, #7
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	0019      	movs	r1, r3
 8006cec:	230f      	movs	r3, #15
 8006cee:	400b      	ands	r3, r1
 8006cf0:	3b08      	subs	r3, #8
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	3306      	adds	r3, #6
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	1dfa      	adds	r2, r7, #7
 8006d00:	7812      	ldrb	r2, [r2, #0]
 8006d02:	0011      	movs	r1, r2
 8006d04:	2203      	movs	r2, #3
 8006d06:	400a      	ands	r2, r1
 8006d08:	00d2      	lsls	r2, r2, #3
 8006d0a:	21ff      	movs	r1, #255	; 0xff
 8006d0c:	4091      	lsls	r1, r2
 8006d0e:	000a      	movs	r2, r1
 8006d10:	43d2      	mvns	r2, r2
 8006d12:	401a      	ands	r2, r3
 8006d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	22ff      	movs	r2, #255	; 0xff
 8006d1c:	401a      	ands	r2, r3
 8006d1e:	1dfb      	adds	r3, r7, #7
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	0018      	movs	r0, r3
 8006d24:	2303      	movs	r3, #3
 8006d26:	4003      	ands	r3, r0
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d2c:	4809      	ldr	r0, [pc, #36]	; (8006d54 <__NVIC_SetPriority+0xd8>)
 8006d2e:	1dfb      	adds	r3, r7, #7
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	001c      	movs	r4, r3
 8006d34:	230f      	movs	r3, #15
 8006d36:	4023      	ands	r3, r4
 8006d38:	3b08      	subs	r3, #8
 8006d3a:	089b      	lsrs	r3, r3, #2
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	3306      	adds	r3, #6
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	18c3      	adds	r3, r0, r3
 8006d44:	3304      	adds	r3, #4
 8006d46:	601a      	str	r2, [r3, #0]
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b003      	add	sp, #12
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	e000e100 	.word	0xe000e100
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	1e5a      	subs	r2, r3, #1
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	045b      	lsls	r3, r3, #17
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d301      	bcc.n	8006d70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e010      	b.n	8006d92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <SysTick_Config+0x44>)
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	3a01      	subs	r2, #1
 8006d76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d78:	2301      	movs	r3, #1
 8006d7a:	425b      	negs	r3, r3
 8006d7c:	2103      	movs	r1, #3
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7ff ff7c 	bl	8006c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <SysTick_Config+0x44>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d8a:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <SysTick_Config+0x44>)
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	0018      	movs	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	b002      	add	sp, #8
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	e000e010 	.word	0xe000e010

08006da0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	210f      	movs	r1, #15
 8006dac:	187b      	adds	r3, r7, r1
 8006dae:	1c02      	adds	r2, r0, #0
 8006db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	187b      	adds	r3, r7, r1
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	b25b      	sxtb	r3, r3
 8006dba:	0011      	movs	r1, r2
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7ff ff5d 	bl	8006c7c <__NVIC_SetPriority>
}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff ffbf 	bl	8006d58 <SysTick_Config>
 8006dda:	0003      	movs	r3, r0
}
 8006ddc:	0018      	movs	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006df2:	e14f      	b.n	8007094 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4091      	lsls	r1, r2
 8006dfe:	000a      	movs	r2, r1
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d100      	bne.n	8006e0c <HAL_GPIO_Init+0x28>
 8006e0a:	e140      	b.n	800708e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2203      	movs	r2, #3
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d005      	beq.n	8006e24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d130      	bne.n	8006e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	2203      	movs	r2, #3
 8006e30:	409a      	lsls	r2, r3
 8006e32:	0013      	movs	r3, r2
 8006e34:	43da      	mvns	r2, r3
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	409a      	lsls	r2, r3
 8006e46:	0013      	movs	r3, r2
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	0013      	movs	r3, r2
 8006e62:	43da      	mvns	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4013      	ands	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	2201      	movs	r2, #1
 8006e72:	401a      	ands	r2, r3
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	409a      	lsls	r2, r3
 8006e78:	0013      	movs	r3, r2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d017      	beq.n	8006ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	409a      	lsls	r2, r3
 8006ea0:	0013      	movs	r3, r2
 8006ea2:	43da      	mvns	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	0013      	movs	r3, r2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d123      	bne.n	8006f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	08da      	lsrs	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3208      	adds	r2, #8
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	58d3      	ldr	r3, [r2, r3]
 8006eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2207      	movs	r2, #7
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	220f      	movs	r2, #15
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	0013      	movs	r3, r2
 8006eea:	43da      	mvns	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2107      	movs	r1, #7
 8006efa:	400b      	ands	r3, r1
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	409a      	lsls	r2, r3
 8006f00:	0013      	movs	r3, r2
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	08da      	lsrs	r2, r3, #3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3208      	adds	r2, #8
 8006f10:	0092      	lsls	r2, r2, #2
 8006f12:	6939      	ldr	r1, [r7, #16]
 8006f14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	2203      	movs	r2, #3
 8006f22:	409a      	lsls	r2, r3
 8006f24:	0013      	movs	r3, r2
 8006f26:	43da      	mvns	r2, r3
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2203      	movs	r2, #3
 8006f34:	401a      	ands	r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	0013      	movs	r3, r2
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	23c0      	movs	r3, #192	; 0xc0
 8006f50:	029b      	lsls	r3, r3, #10
 8006f52:	4013      	ands	r3, r2
 8006f54:	d100      	bne.n	8006f58 <HAL_GPIO_Init+0x174>
 8006f56:	e09a      	b.n	800708e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f58:	4b54      	ldr	r3, [pc, #336]	; (80070ac <HAL_GPIO_Init+0x2c8>)
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_GPIO_Init+0x2c8>)
 8006f5e:	2101      	movs	r1, #1
 8006f60:	430a      	orrs	r2, r1
 8006f62:	619a      	str	r2, [r3, #24]
 8006f64:	4b51      	ldr	r3, [pc, #324]	; (80070ac <HAL_GPIO_Init+0x2c8>)
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f70:	4a4f      	ldr	r2, [pc, #316]	; (80070b0 <HAL_GPIO_Init+0x2cc>)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	089b      	lsrs	r3, r3, #2
 8006f76:	3302      	adds	r3, #2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	589b      	ldr	r3, [r3, r2]
 8006f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2203      	movs	r2, #3
 8006f82:	4013      	ands	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	220f      	movs	r2, #15
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	0013      	movs	r3, r2
 8006f8c:	43da      	mvns	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4013      	ands	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	2390      	movs	r3, #144	; 0x90
 8006f98:	05db      	lsls	r3, r3, #23
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d013      	beq.n	8006fc6 <HAL_GPIO_Init+0x1e2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a44      	ldr	r2, [pc, #272]	; (80070b4 <HAL_GPIO_Init+0x2d0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00d      	beq.n	8006fc2 <HAL_GPIO_Init+0x1de>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a43      	ldr	r2, [pc, #268]	; (80070b8 <HAL_GPIO_Init+0x2d4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <HAL_GPIO_Init+0x1da>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a42      	ldr	r2, [pc, #264]	; (80070bc <HAL_GPIO_Init+0x2d8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d101      	bne.n	8006fba <HAL_GPIO_Init+0x1d6>
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e006      	b.n	8006fc8 <HAL_GPIO_Init+0x1e4>
 8006fba:	2305      	movs	r3, #5
 8006fbc:	e004      	b.n	8006fc8 <HAL_GPIO_Init+0x1e4>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e002      	b.n	8006fc8 <HAL_GPIO_Init+0x1e4>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <HAL_GPIO_Init+0x1e4>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	2103      	movs	r1, #3
 8006fcc:	400a      	ands	r2, r1
 8006fce:	0092      	lsls	r2, r2, #2
 8006fd0:	4093      	lsls	r3, r2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006fd8:	4935      	ldr	r1, [pc, #212]	; (80070b0 <HAL_GPIO_Init+0x2cc>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	089b      	lsrs	r3, r3, #2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fe6:	4b36      	ldr	r3, [pc, #216]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	025b      	lsls	r3, r3, #9
 8006ffe:	4013      	ands	r3, r2
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800700a:	4b2d      	ldr	r3, [pc, #180]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007010:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	43da      	mvns	r2, r3
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4013      	ands	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	4013      	ands	r3, r2
 800702a:	d003      	beq.n	8007034 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007034:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	43da      	mvns	r2, r3
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4013      	ands	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	035b      	lsls	r3, r3, #13
 8007052:	4013      	ands	r3, r2
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800705e:	4b18      	ldr	r3, [pc, #96]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	43da      	mvns	r2, r3
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	039b      	lsls	r3, r3, #14
 800707c:	4013      	ands	r3, r2
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <HAL_GPIO_Init+0x2dc>)
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	40da      	lsrs	r2, r3
 800709c:	1e13      	subs	r3, r2, #0
 800709e:	d000      	beq.n	80070a2 <HAL_GPIO_Init+0x2be>
 80070a0:	e6a8      	b.n	8006df4 <HAL_GPIO_Init+0x10>
  } 
}
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021000 	.word	0x40021000
 80070b0:	40010000 	.word	0x40010000
 80070b4:	48000400 	.word	0x48000400
 80070b8:	48000800 	.word	0x48000800
 80070bc:	48000c00 	.word	0x48000c00
 80070c0:	40010400 	.word	0x40010400

080070c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e082      	b.n	80071dc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2241      	movs	r2, #65	; 0x41
 80070da:	5c9b      	ldrb	r3, [r3, r2]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2240      	movs	r2, #64	; 0x40
 80070e6:	2100      	movs	r1, #0
 80070e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7fc f909 	bl	8003304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2241      	movs	r2, #65	; 0x41
 80070f6:	2124      	movs	r1, #36	; 0x24
 80070f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2101      	movs	r1, #1
 8007106:	438a      	bics	r2, r1
 8007108:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4934      	ldr	r1, [pc, #208]	; (80071e4 <HAL_I2C_Init+0x120>)
 8007114:	400a      	ands	r2, r1
 8007116:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4931      	ldr	r1, [pc, #196]	; (80071e8 <HAL_I2C_Init+0x124>)
 8007124:	400a      	ands	r2, r1
 8007126:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d108      	bne.n	8007142 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2180      	movs	r1, #128	; 0x80
 800713a:	0209      	lsls	r1, r1, #8
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
 8007140:	e007      	b.n	8007152 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2184      	movs	r1, #132	; 0x84
 800714c:	0209      	lsls	r1, r1, #8
 800714e:	430a      	orrs	r2, r1
 8007150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d104      	bne.n	8007164 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2280      	movs	r2, #128	; 0x80
 8007160:	0112      	lsls	r2, r2, #4
 8007162:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	491f      	ldr	r1, [pc, #124]	; (80071ec <HAL_I2C_Init+0x128>)
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	491a      	ldr	r1, [pc, #104]	; (80071e8 <HAL_I2C_Init+0x124>)
 8007180:	400a      	ands	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	431a      	orrs	r2, r3
 800718e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69d9      	ldr	r1, [r3, #28]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2101      	movs	r1, #1
 80071ba:	430a      	orrs	r2, r1
 80071bc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2241      	movs	r2, #65	; 0x41
 80071c8:	2120      	movs	r1, #32
 80071ca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2242      	movs	r2, #66	; 0x42
 80071d6:	2100      	movs	r1, #0
 80071d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b002      	add	sp, #8
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	f0ffffff 	.word	0xf0ffffff
 80071e8:	ffff7fff 	.word	0xffff7fff
 80071ec:	02008000 	.word	0x02008000

080071f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b089      	sub	sp, #36	; 0x24
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	000c      	movs	r4, r1
 80071fa:	0010      	movs	r0, r2
 80071fc:	0019      	movs	r1, r3
 80071fe:	230a      	movs	r3, #10
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	1c22      	adds	r2, r4, #0
 8007204:	801a      	strh	r2, [r3, #0]
 8007206:	2308      	movs	r3, #8
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	1c02      	adds	r2, r0, #0
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	1dbb      	adds	r3, r7, #6
 8007210:	1c0a      	adds	r2, r1, #0
 8007212:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2241      	movs	r2, #65	; 0x41
 8007218:	5c9b      	ldrb	r3, [r3, r2]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b20      	cmp	r3, #32
 800721e:	d000      	beq.n	8007222 <HAL_I2C_Mem_Write+0x32>
 8007220:	e10c      	b.n	800743c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <HAL_I2C_Mem_Write+0x42>
 8007228:	232c      	movs	r3, #44	; 0x2c
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	0092      	lsls	r2, r2, #2
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e0ff      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2240      	movs	r2, #64	; 0x40
 8007242:	5c9b      	ldrb	r3, [r3, r2]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_I2C_Mem_Write+0x5c>
 8007248:	2302      	movs	r3, #2
 800724a:	e0f8      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	2101      	movs	r1, #1
 8007252:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007254:	f7ff fce4 	bl	8006c20 <HAL_GetTick>
 8007258:	0003      	movs	r3, r0
 800725a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	0219      	lsls	r1, r3, #8
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	2319      	movs	r3, #25
 8007268:	2201      	movs	r2, #1
 800726a:	f000 fb0b 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 800726e:	1e03      	subs	r3, r0, #0
 8007270:	d001      	beq.n	8007276 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e0e3      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2241      	movs	r2, #65	; 0x41
 800727a:	2121      	movs	r1, #33	; 0x21
 800727c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2242      	movs	r2, #66	; 0x42
 8007282:	2140      	movs	r1, #64	; 0x40
 8007284:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007290:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	222c      	movs	r2, #44	; 0x2c
 8007296:	18ba      	adds	r2, r7, r2
 8007298:	8812      	ldrh	r2, [r2, #0]
 800729a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072a2:	1dbb      	adds	r3, r7, #6
 80072a4:	881c      	ldrh	r4, [r3, #0]
 80072a6:	2308      	movs	r3, #8
 80072a8:	18fb      	adds	r3, r7, r3
 80072aa:	881a      	ldrh	r2, [r3, #0]
 80072ac:	230a      	movs	r3, #10
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	8819      	ldrh	r1, [r3, #0]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	0023      	movs	r3, r4
 80072be:	f000 f9f9 	bl	80076b4 <I2C_RequestMemoryWrite>
 80072c2:	1e03      	subs	r3, r0, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2240      	movs	r2, #64	; 0x40
 80072ca:	2100      	movs	r1, #0
 80072cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0b5      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2bff      	cmp	r3, #255	; 0xff
 80072da:	d911      	bls.n	8007300 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	045c      	lsls	r4, r3, #17
 80072ec:	230a      	movs	r3, #10
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	8819      	ldrh	r1, [r3, #0]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	2300      	movs	r3, #0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	0023      	movs	r3, r4
 80072fa:	f000 fbf7 	bl	8007aec <I2C_TransferConfig>
 80072fe:	e012      	b.n	8007326 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	b2da      	uxtb	r2, r3
 8007310:	2380      	movs	r3, #128	; 0x80
 8007312:	049c      	lsls	r4, r3, #18
 8007314:	230a      	movs	r3, #10
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	8819      	ldrh	r1, [r3, #0]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	2300      	movs	r3, #0
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	0023      	movs	r3, r4
 8007322:	f000 fbe3 	bl	8007aec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	0018      	movs	r0, r3
 800732e:	f000 fae8 	bl	8007902 <I2C_WaitOnTXISFlagUntilTimeout>
 8007332:	1e03      	subs	r3, r0, #0
 8007334:	d001      	beq.n	800733a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e081      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d03a      	beq.n	80073ea <HAL_I2C_Mem_Write+0x1fa>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	2b00      	cmp	r3, #0
 800737a:	d136      	bne.n	80073ea <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800737c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	0013      	movs	r3, r2
 8007386:	2200      	movs	r2, #0
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	f000 fa7b 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 800738e:	1e03      	subs	r3, r0, #0
 8007390:	d001      	beq.n	8007396 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e053      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	2bff      	cmp	r3, #255	; 0xff
 800739e:	d911      	bls.n	80073c4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	22ff      	movs	r2, #255	; 0xff
 80073a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	045c      	lsls	r4, r3, #17
 80073b0:	230a      	movs	r3, #10
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	8819      	ldrh	r1, [r3, #0]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	2300      	movs	r3, #0
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	0023      	movs	r3, r4
 80073be:	f000 fb95 	bl	8007aec <I2C_TransferConfig>
 80073c2:	e012      	b.n	80073ea <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	049c      	lsls	r4, r3, #18
 80073d8:	230a      	movs	r3, #10
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	8819      	ldrh	r1, [r3, #0]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	0023      	movs	r3, r4
 80073e6:	f000 fb81 	bl	8007aec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d198      	bne.n	8007326 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 fac0 	bl	8007980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007400:	1e03      	subs	r3, r0, #0
 8007402:	d001      	beq.n	8007408 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e01a      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2220      	movs	r2, #32
 800740e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	490b      	ldr	r1, [pc, #44]	; (8007448 <HAL_I2C_Mem_Write+0x258>)
 800741c:	400a      	ands	r2, r1
 800741e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2241      	movs	r2, #65	; 0x41
 8007424:	2120      	movs	r1, #32
 8007426:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2242      	movs	r2, #66	; 0x42
 800742c:	2100      	movs	r1, #0
 800742e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2240      	movs	r2, #64	; 0x40
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	0018      	movs	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	b007      	add	sp, #28
 8007444:	bd90      	pop	{r4, r7, pc}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	fe00e800 	.word	0xfe00e800

0800744c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744c:	b590      	push	{r4, r7, lr}
 800744e:	b089      	sub	sp, #36	; 0x24
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	000c      	movs	r4, r1
 8007456:	0010      	movs	r0, r2
 8007458:	0019      	movs	r1, r3
 800745a:	230a      	movs	r3, #10
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	1c22      	adds	r2, r4, #0
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	2308      	movs	r3, #8
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	1c02      	adds	r2, r0, #0
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	1dbb      	adds	r3, r7, #6
 800746c:	1c0a      	adds	r2, r1, #0
 800746e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2241      	movs	r2, #65	; 0x41
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b20      	cmp	r3, #32
 800747a:	d000      	beq.n	800747e <HAL_I2C_Mem_Read+0x32>
 800747c:	e110      	b.n	80076a0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <HAL_I2C_Mem_Read+0x42>
 8007484:	232c      	movs	r3, #44	; 0x2c
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2280      	movs	r2, #128	; 0x80
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e103      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2240      	movs	r2, #64	; 0x40
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x5c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e0fc      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2240      	movs	r2, #64	; 0x40
 80074ac:	2101      	movs	r1, #1
 80074ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b0:	f7ff fbb6 	bl	8006c20 <HAL_GetTick>
 80074b4:	0003      	movs	r3, r0
 80074b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074b8:	2380      	movs	r3, #128	; 0x80
 80074ba:	0219      	lsls	r1, r3, #8
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	2319      	movs	r3, #25
 80074c4:	2201      	movs	r2, #1
 80074c6:	f000 f9dd 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e0e7      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2241      	movs	r2, #65	; 0x41
 80074d6:	2122      	movs	r1, #34	; 0x22
 80074d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2242      	movs	r2, #66	; 0x42
 80074de:	2140      	movs	r1, #64	; 0x40
 80074e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	222c      	movs	r2, #44	; 0x2c
 80074f2:	18ba      	adds	r2, r7, r2
 80074f4:	8812      	ldrh	r2, [r2, #0]
 80074f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074fe:	1dbb      	adds	r3, r7, #6
 8007500:	881c      	ldrh	r4, [r3, #0]
 8007502:	2308      	movs	r3, #8
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	881a      	ldrh	r2, [r3, #0]
 8007508:	230a      	movs	r3, #10
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	8819      	ldrh	r1, [r3, #0]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	0023      	movs	r3, r4
 800751a:	f000 f92f 	bl	800777c <I2C_RequestMemoryRead>
 800751e:	1e03      	subs	r3, r0, #0
 8007520:	d005      	beq.n	800752e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	2100      	movs	r1, #0
 8007528:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e0b9      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007532:	b29b      	uxth	r3, r3
 8007534:	2bff      	cmp	r3, #255	; 0xff
 8007536:	d911      	bls.n	800755c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007542:	b2da      	uxtb	r2, r3
 8007544:	2380      	movs	r3, #128	; 0x80
 8007546:	045c      	lsls	r4, r3, #17
 8007548:	230a      	movs	r3, #10
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	8819      	ldrh	r1, [r3, #0]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	4b56      	ldr	r3, [pc, #344]	; (80076ac <HAL_I2C_Mem_Read+0x260>)
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	0023      	movs	r3, r4
 8007556:	f000 fac9 	bl	8007aec <I2C_TransferConfig>
 800755a:	e012      	b.n	8007582 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756a:	b2da      	uxtb	r2, r3
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	049c      	lsls	r4, r3, #18
 8007570:	230a      	movs	r3, #10
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	8819      	ldrh	r1, [r3, #0]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	4b4c      	ldr	r3, [pc, #304]	; (80076ac <HAL_I2C_Mem_Read+0x260>)
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	0023      	movs	r3, r4
 800757e:	f000 fab5 	bl	8007aec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	0013      	movs	r3, r2
 800758c:	2200      	movs	r2, #0
 800758e:	2104      	movs	r1, #4
 8007590:	f000 f978 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d001      	beq.n	800759c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e082      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d03a      	beq.n	800764e <HAL_I2C_Mem_Read+0x202>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d136      	bne.n	800764e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	0013      	movs	r3, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	f000 f949 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 80075f2:	1e03      	subs	r3, r0, #0
 80075f4:	d001      	beq.n	80075fa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e053      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2bff      	cmp	r3, #255	; 0xff
 8007602:	d911      	bls.n	8007628 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	045c      	lsls	r4, r3, #17
 8007614:	230a      	movs	r3, #10
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	8819      	ldrh	r1, [r3, #0]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0023      	movs	r3, r4
 8007622:	f000 fa63 	bl	8007aec <I2C_TransferConfig>
 8007626:	e012      	b.n	800764e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007636:	b2da      	uxtb	r2, r3
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	049c      	lsls	r4, r3, #18
 800763c:	230a      	movs	r3, #10
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	8819      	ldrh	r1, [r3, #0]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	2300      	movs	r3, #0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	0023      	movs	r3, r4
 800764a:	f000 fa4f 	bl	8007aec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d194      	bne.n	8007582 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	0018      	movs	r0, r3
 8007660:	f000 f98e 	bl	8007980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d001      	beq.n	800766c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e01a      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2220      	movs	r2, #32
 8007672:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	490c      	ldr	r1, [pc, #48]	; (80076b0 <HAL_I2C_Mem_Read+0x264>)
 8007680:	400a      	ands	r2, r1
 8007682:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2241      	movs	r2, #65	; 0x41
 8007688:	2120      	movs	r1, #32
 800768a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2242      	movs	r2, #66	; 0x42
 8007690:	2100      	movs	r1, #0
 8007692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	2100      	movs	r1, #0
 800769a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	e000      	b.n	80076a2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80076a0:	2302      	movs	r3, #2
  }
}
 80076a2:	0018      	movs	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b007      	add	sp, #28
 80076a8:	bd90      	pop	{r4, r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	80002400 	.word	0x80002400
 80076b0:	fe00e800 	.word	0xfe00e800

080076b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	000c      	movs	r4, r1
 80076be:	0010      	movs	r0, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	250a      	movs	r5, #10
 80076c4:	197b      	adds	r3, r7, r5
 80076c6:	1c22      	adds	r2, r4, #0
 80076c8:	801a      	strh	r2, [r3, #0]
 80076ca:	2308      	movs	r3, #8
 80076cc:	18fb      	adds	r3, r7, r3
 80076ce:	1c02      	adds	r2, r0, #0
 80076d0:	801a      	strh	r2, [r3, #0]
 80076d2:	1dbb      	adds	r3, r7, #6
 80076d4:	1c0a      	adds	r2, r1, #0
 80076d6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076d8:	1dbb      	adds	r3, r7, #6
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	045c      	lsls	r4, r3, #17
 80076e2:	197b      	adds	r3, r7, r5
 80076e4:	8819      	ldrh	r1, [r3, #0]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	4b23      	ldr	r3, [pc, #140]	; (8007778 <I2C_RequestMemoryWrite+0xc4>)
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	0023      	movs	r3, r4
 80076ee:	f000 f9fd 	bl	8007aec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f000 f902 	bl	8007902 <I2C_WaitOnTXISFlagUntilTimeout>
 80076fe:	1e03      	subs	r3, r0, #0
 8007700:	d001      	beq.n	8007706 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e033      	b.n	800776e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007706:	1dbb      	adds	r3, r7, #6
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800770e:	2308      	movs	r3, #8
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28
 800771c:	e019      	b.n	8007752 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800771e:	2308      	movs	r3, #8
 8007720:	18fb      	adds	r3, r7, r3
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	b29b      	uxth	r3, r3
 8007728:	b2da      	uxtb	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	6a39      	ldr	r1, [r7, #32]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	0018      	movs	r0, r3
 8007738:	f000 f8e3 	bl	8007902 <I2C_WaitOnTXISFlagUntilTimeout>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d001      	beq.n	8007744 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e014      	b.n	800776e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007744:	2308      	movs	r3, #8
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	0013      	movs	r3, r2
 800775c:	2200      	movs	r2, #0
 800775e:	2180      	movs	r1, #128	; 0x80
 8007760:	f000 f890 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007764:	1e03      	subs	r3, r0, #0
 8007766:	d001      	beq.n	800776c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	0018      	movs	r0, r3
 8007770:	46bd      	mov	sp, r7
 8007772:	b004      	add	sp, #16
 8007774:	bdb0      	pop	{r4, r5, r7, pc}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	80002000 	.word	0x80002000

0800777c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800777c:	b5b0      	push	{r4, r5, r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af02      	add	r7, sp, #8
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	000c      	movs	r4, r1
 8007786:	0010      	movs	r0, r2
 8007788:	0019      	movs	r1, r3
 800778a:	250a      	movs	r5, #10
 800778c:	197b      	adds	r3, r7, r5
 800778e:	1c22      	adds	r2, r4, #0
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	2308      	movs	r3, #8
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	1c02      	adds	r2, r0, #0
 8007798:	801a      	strh	r2, [r3, #0]
 800779a:	1dbb      	adds	r3, r7, #6
 800779c:	1c0a      	adds	r2, r1, #0
 800779e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077a0:	1dbb      	adds	r3, r7, #6
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	197b      	adds	r3, r7, r5
 80077a8:	8819      	ldrh	r1, [r3, #0]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	4b23      	ldr	r3, [pc, #140]	; (800783c <I2C_RequestMemoryRead+0xc0>)
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2300      	movs	r3, #0
 80077b2:	f000 f99b 	bl	8007aec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	6a39      	ldr	r1, [r7, #32]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	0018      	movs	r0, r3
 80077be:	f000 f8a0 	bl	8007902 <I2C_WaitOnTXISFlagUntilTimeout>
 80077c2:	1e03      	subs	r3, r0, #0
 80077c4:	d001      	beq.n	80077ca <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e033      	b.n	8007832 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077ca:	1dbb      	adds	r3, r7, #6
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d2:	2308      	movs	r3, #8
 80077d4:	18fb      	adds	r3, r7, r3
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
 80077e0:	e019      	b.n	8007816 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077e2:	2308      	movs	r3, #8
 80077e4:	18fb      	adds	r3, r7, r3
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	6a39      	ldr	r1, [r7, #32]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	0018      	movs	r0, r3
 80077fc:	f000 f881 	bl	8007902 <I2C_WaitOnTXISFlagUntilTimeout>
 8007800:	1e03      	subs	r3, r0, #0
 8007802:	d001      	beq.n	8007808 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e014      	b.n	8007832 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007808:	2308      	movs	r3, #8
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	0013      	movs	r3, r2
 8007820:	2200      	movs	r2, #0
 8007822:	2140      	movs	r1, #64	; 0x40
 8007824:	f000 f82e 	bl	8007884 <I2C_WaitOnFlagUntilTimeout>
 8007828:	1e03      	subs	r3, r0, #0
 800782a:	d001      	beq.n	8007830 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b004      	add	sp, #16
 8007838:	bdb0      	pop	{r4, r5, r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	80002000 	.word	0x80002000

08007840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2202      	movs	r2, #2
 8007850:	4013      	ands	r3, r2
 8007852:	2b02      	cmp	r3, #2
 8007854:	d103      	bne.n	800785e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	2201      	movs	r2, #1
 8007866:	4013      	ands	r3, r2
 8007868:	2b01      	cmp	r3, #1
 800786a:	d007      	beq.n	800787c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2101      	movs	r1, #1
 8007878:	430a      	orrs	r2, r1
 800787a:	619a      	str	r2, [r3, #24]
  }
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}

08007884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007894:	e021      	b.n	80078da <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	d01e      	beq.n	80078da <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789c:	f7ff f9c0 	bl	8006c20 <HAL_GetTick>
 80078a0:	0002      	movs	r2, r0
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d302      	bcc.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d113      	bne.n	80078da <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	2220      	movs	r2, #32
 80078b8:	431a      	orrs	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2241      	movs	r2, #65	; 0x41
 80078c2:	2120      	movs	r1, #32
 80078c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2242      	movs	r2, #66	; 0x42
 80078ca:	2100      	movs	r1, #0
 80078cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	2100      	movs	r1, #0
 80078d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e00f      	b.n	80078fa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4013      	ands	r3, r2
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	425a      	negs	r2, r3
 80078ea:	4153      	adcs	r3, r2
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	001a      	movs	r2, r3
 80078f0:	1dfb      	adds	r3, r7, #7
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d0ce      	beq.n	8007896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	0018      	movs	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b004      	add	sp, #16
 8007900:	bd80      	pop	{r7, pc}

08007902 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800790e:	e02b      	b.n	8007968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	0018      	movs	r0, r3
 8007918:	f000 f86e 	bl	80079f8 <I2C_IsAcknowledgeFailed>
 800791c:	1e03      	subs	r3, r0, #0
 800791e:	d001      	beq.n	8007924 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e029      	b.n	8007978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3301      	adds	r3, #1
 8007928:	d01e      	beq.n	8007968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792a:	f7ff f979 	bl	8006c20 <HAL_GetTick>
 800792e:	0002      	movs	r2, r0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d113      	bne.n	8007968 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007944:	2220      	movs	r2, #32
 8007946:	431a      	orrs	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2241      	movs	r2, #65	; 0x41
 8007950:	2120      	movs	r1, #32
 8007952:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2242      	movs	r2, #66	; 0x42
 8007958:	2100      	movs	r1, #0
 800795a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2240      	movs	r2, #64	; 0x40
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e007      	b.n	8007978 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	2202      	movs	r2, #2
 8007970:	4013      	ands	r3, r2
 8007972:	2b02      	cmp	r3, #2
 8007974:	d1cc      	bne.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	0018      	movs	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	b004      	add	sp, #16
 800797e:	bd80      	pop	{r7, pc}

08007980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800798c:	e028      	b.n	80079e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	0018      	movs	r0, r3
 8007996:	f000 f82f 	bl	80079f8 <I2C_IsAcknowledgeFailed>
 800799a:	1e03      	subs	r3, r0, #0
 800799c:	d001      	beq.n	80079a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e026      	b.n	80079f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079a2:	f7ff f93d 	bl	8006c20 <HAL_GetTick>
 80079a6:	0002      	movs	r2, r0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d113      	bne.n	80079e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079bc:	2220      	movs	r2, #32
 80079be:	431a      	orrs	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2241      	movs	r2, #65	; 0x41
 80079c8:	2120      	movs	r1, #32
 80079ca:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2242      	movs	r2, #66	; 0x42
 80079d0:	2100      	movs	r1, #0
 80079d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2240      	movs	r2, #64	; 0x40
 80079d8:	2100      	movs	r1, #0
 80079da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e007      	b.n	80079f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2220      	movs	r2, #32
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d1cf      	bne.n	800798e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	0018      	movs	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b004      	add	sp, #16
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2210      	movs	r2, #16
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b10      	cmp	r3, #16
 8007a10:	d164      	bne.n	8007adc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	2380      	movs	r3, #128	; 0x80
 8007a1a:	049b      	lsls	r3, r3, #18
 8007a1c:	401a      	ands	r2, r3
 8007a1e:	2380      	movs	r3, #128	; 0x80
 8007a20:	049b      	lsls	r3, r3, #18
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d02b      	beq.n	8007a7e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	01c9      	lsls	r1, r1, #7
 8007a34:	430a      	orrs	r2, r1
 8007a36:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a38:	e021      	b.n	8007a7e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	d01e      	beq.n	8007a7e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a40:	f7ff f8ee 	bl	8006c20 <HAL_GetTick>
 8007a44:	0002      	movs	r2, r0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d302      	bcc.n	8007a56 <I2C_IsAcknowledgeFailed+0x5e>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d113      	bne.n	8007a7e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2241      	movs	r2, #65	; 0x41
 8007a66:	2120      	movs	r1, #32
 8007a68:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2242      	movs	r2, #66	; 0x42
 8007a6e:	2100      	movs	r1, #0
 8007a70:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2240      	movs	r2, #64	; 0x40
 8007a76:	2100      	movs	r1, #0
 8007a78:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e02f      	b.n	8007ade <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2220      	movs	r2, #32
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d1d6      	bne.n	8007a3a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2210      	movs	r2, #16
 8007a92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7ff fece 	bl	8007840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	490e      	ldr	r1, [pc, #56]	; (8007ae8 <I2C_IsAcknowledgeFailed+0xf0>)
 8007ab0:	400a      	ands	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab8:	2204      	movs	r2, #4
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2241      	movs	r2, #65	; 0x41
 8007ac4:	2120      	movs	r1, #32
 8007ac6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2242      	movs	r2, #66	; 0x42
 8007acc:	2100      	movs	r1, #0
 8007ace:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2240      	movs	r2, #64	; 0x40
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	0018      	movs	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b004      	add	sp, #16
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	fe00e800 	.word	0xfe00e800

08007aec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	0008      	movs	r0, r1
 8007af6:	0011      	movs	r1, r2
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	240a      	movs	r4, #10
 8007afc:	193b      	adds	r3, r7, r4
 8007afe:	1c02      	adds	r2, r0, #0
 8007b00:	801a      	strh	r2, [r3, #0]
 8007b02:	2009      	movs	r0, #9
 8007b04:	183b      	adds	r3, r7, r0
 8007b06:	1c0a      	adds	r2, r1, #0
 8007b08:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	0d51      	lsrs	r1, r2, #21
 8007b14:	2280      	movs	r2, #128	; 0x80
 8007b16:	00d2      	lsls	r2, r2, #3
 8007b18:	400a      	ands	r2, r1
 8007b1a:	490e      	ldr	r1, [pc, #56]	; (8007b54 <I2C_TransferConfig+0x68>)
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	43d2      	mvns	r2, r2
 8007b20:	401a      	ands	r2, r3
 8007b22:	0011      	movs	r1, r2
 8007b24:	193b      	adds	r3, r7, r4
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	059b      	lsls	r3, r3, #22
 8007b2a:	0d9a      	lsrs	r2, r3, #22
 8007b2c:	183b      	adds	r3, r7, r0
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	0418      	lsls	r0, r3, #16
 8007b32:	23ff      	movs	r3, #255	; 0xff
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	4003      	ands	r3, r0
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b005      	add	sp, #20
 8007b50:	bd90      	pop	{r4, r7, pc}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	03ff63ff 	.word	0x03ff63ff

08007b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2241      	movs	r2, #65	; 0x41
 8007b66:	5c9b      	ldrb	r3, [r3, r2]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d138      	bne.n	8007be0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2240      	movs	r2, #64	; 0x40
 8007b72:	5c9b      	ldrb	r3, [r3, r2]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d101      	bne.n	8007b7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e032      	b.n	8007be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2240      	movs	r2, #64	; 0x40
 8007b80:	2101      	movs	r1, #1
 8007b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2241      	movs	r2, #65	; 0x41
 8007b88:	2124      	movs	r1, #36	; 0x24
 8007b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2101      	movs	r1, #1
 8007b98:	438a      	bics	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4911      	ldr	r1, [pc, #68]	; (8007bec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007ba8:	400a      	ands	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2241      	movs	r2, #65	; 0x41
 8007bd0:	2120      	movs	r1, #32
 8007bd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2240      	movs	r2, #64	; 0x40
 8007bd8:	2100      	movs	r1, #0
 8007bda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007be0:	2302      	movs	r3, #2
  }
}
 8007be2:	0018      	movs	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b002      	add	sp, #8
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	ffffefff 	.word	0xffffefff

08007bf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2241      	movs	r2, #65	; 0x41
 8007bfe:	5c9b      	ldrb	r3, [r3, r2]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d139      	bne.n	8007c7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2240      	movs	r2, #64	; 0x40
 8007c0a:	5c9b      	ldrb	r3, [r3, r2]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d101      	bne.n	8007c14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e033      	b.n	8007c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2240      	movs	r2, #64	; 0x40
 8007c18:	2101      	movs	r1, #1
 8007c1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2241      	movs	r2, #65	; 0x41
 8007c20:	2124      	movs	r1, #36	; 0x24
 8007c22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	438a      	bics	r2, r1
 8007c32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007c40:	4013      	ands	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2101      	movs	r1, #1
 8007c62:	430a      	orrs	r2, r1
 8007c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2241      	movs	r2, #65	; 0x41
 8007c6a:	2120      	movs	r1, #32
 8007c6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2240      	movs	r2, #64	; 0x40
 8007c72:	2100      	movs	r1, #0
 8007c74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	e000      	b.n	8007c7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c7a:	2302      	movs	r3, #2
  }
}
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b004      	add	sp, #16
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	fffff0ff 	.word	0xfffff0ff

08007c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e301      	b.n	800829e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	d100      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x1e>
 8007ca4:	e08d      	b.n	8007dc2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007ca6:	4bc3      	ldr	r3, [pc, #780]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	220c      	movs	r2, #12
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007cb2:	4bc0      	ldr	r3, [pc, #768]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	220c      	movs	r2, #12
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d116      	bne.n	8007cec <HAL_RCC_OscConfig+0x64>
 8007cbe:	4bbd      	ldr	r3, [pc, #756]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	2380      	movs	r3, #128	; 0x80
 8007cc4:	025b      	lsls	r3, r3, #9
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d10d      	bne.n	8007cec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd0:	4bb8      	ldr	r3, [pc, #736]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	2380      	movs	r3, #128	; 0x80
 8007cd6:	029b      	lsls	r3, r3, #10
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d100      	bne.n	8007cde <HAL_RCC_OscConfig+0x56>
 8007cdc:	e070      	b.n	8007dc0 <HAL_RCC_OscConfig+0x138>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d000      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x60>
 8007ce6:	e06b      	b.n	8007dc0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e2d8      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d107      	bne.n	8007d04 <HAL_RCC_OscConfig+0x7c>
 8007cf4:	4baf      	ldr	r3, [pc, #700]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4bae      	ldr	r3, [pc, #696]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	0249      	lsls	r1, r1, #9
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e02f      	b.n	8007d64 <HAL_RCC_OscConfig+0xdc>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10c      	bne.n	8007d26 <HAL_RCC_OscConfig+0x9e>
 8007d0c:	4ba9      	ldr	r3, [pc, #676]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4ba8      	ldr	r3, [pc, #672]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d12:	49a9      	ldr	r1, [pc, #676]	; (8007fb8 <HAL_RCC_OscConfig+0x330>)
 8007d14:	400a      	ands	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	4ba6      	ldr	r3, [pc, #664]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	4ba5      	ldr	r3, [pc, #660]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d1e:	49a7      	ldr	r1, [pc, #668]	; (8007fbc <HAL_RCC_OscConfig+0x334>)
 8007d20:	400a      	ands	r2, r1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e01e      	b.n	8007d64 <HAL_RCC_OscConfig+0xdc>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b05      	cmp	r3, #5
 8007d2c:	d10e      	bne.n	8007d4c <HAL_RCC_OscConfig+0xc4>
 8007d2e:	4ba1      	ldr	r3, [pc, #644]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4ba0      	ldr	r3, [pc, #640]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d34:	2180      	movs	r1, #128	; 0x80
 8007d36:	02c9      	lsls	r1, r1, #11
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	4b9d      	ldr	r3, [pc, #628]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4b9c      	ldr	r3, [pc, #624]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d42:	2180      	movs	r1, #128	; 0x80
 8007d44:	0249      	lsls	r1, r1, #9
 8007d46:	430a      	orrs	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e00b      	b.n	8007d64 <HAL_RCC_OscConfig+0xdc>
 8007d4c:	4b99      	ldr	r3, [pc, #612]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4b98      	ldr	r3, [pc, #608]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d52:	4999      	ldr	r1, [pc, #612]	; (8007fb8 <HAL_RCC_OscConfig+0x330>)
 8007d54:	400a      	ands	r2, r1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	4b96      	ldr	r3, [pc, #600]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	4b95      	ldr	r3, [pc, #596]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d5e:	4997      	ldr	r1, [pc, #604]	; (8007fbc <HAL_RCC_OscConfig+0x334>)
 8007d60:	400a      	ands	r2, r1
 8007d62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d014      	beq.n	8007d96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fe ff58 	bl	8006c20 <HAL_GetTick>
 8007d70:	0003      	movs	r3, r0
 8007d72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d74:	e008      	b.n	8007d88 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d76:	f7fe ff53 	bl	8006c20 <HAL_GetTick>
 8007d7a:	0002      	movs	r2, r0
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b64      	cmp	r3, #100	; 0x64
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e28a      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d88:	4b8a      	ldr	r3, [pc, #552]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	4013      	ands	r3, r2
 8007d92:	d0f0      	beq.n	8007d76 <HAL_RCC_OscConfig+0xee>
 8007d94:	e015      	b.n	8007dc2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d96:	f7fe ff43 	bl	8006c20 <HAL_GetTick>
 8007d9a:	0003      	movs	r3, r0
 8007d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fe ff3e 	bl	8006c20 <HAL_GetTick>
 8007da4:	0002      	movs	r2, r0
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	; 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e275      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007db2:	4b80      	ldr	r3, [pc, #512]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	2380      	movs	r3, #128	; 0x80
 8007db8:	029b      	lsls	r3, r3, #10
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0x118>
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	4013      	ands	r3, r2
 8007dca:	d100      	bne.n	8007dce <HAL_RCC_OscConfig+0x146>
 8007dcc:	e069      	b.n	8007ea2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007dce:	4b79      	ldr	r3, [pc, #484]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	220c      	movs	r2, #12
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007dd8:	4b76      	ldr	r3, [pc, #472]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	220c      	movs	r2, #12
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d11c      	bne.n	8007e1e <HAL_RCC_OscConfig+0x196>
 8007de4:	4b73      	ldr	r3, [pc, #460]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	2380      	movs	r3, #128	; 0x80
 8007dea:	025b      	lsls	r3, r3, #9
 8007dec:	4013      	ands	r3, r2
 8007dee:	d116      	bne.n	8007e1e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007df0:	4b70      	ldr	r3, [pc, #448]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2202      	movs	r2, #2
 8007df6:	4013      	ands	r3, r2
 8007df8:	d005      	beq.n	8007e06 <HAL_RCC_OscConfig+0x17e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d001      	beq.n	8007e06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e24b      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e06:	4b6b      	ldr	r3, [pc, #428]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	22f8      	movs	r2, #248	; 0xf8
 8007e0c:	4393      	bics	r3, r2
 8007e0e:	0019      	movs	r1, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	00da      	lsls	r2, r3, #3
 8007e16:	4b67      	ldr	r3, [pc, #412]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1c:	e041      	b.n	8007ea2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d024      	beq.n	8007e70 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e26:	4b63      	ldr	r3, [pc, #396]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b62      	ldr	r3, [pc, #392]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e32:	f7fe fef5 	bl	8006c20 <HAL_GetTick>
 8007e36:	0003      	movs	r3, r0
 8007e38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e3c:	f7fe fef0 	bl	8006c20 <HAL_GetTick>
 8007e40:	0002      	movs	r2, r0
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e227      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e4e:	4b59      	ldr	r3, [pc, #356]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2202      	movs	r2, #2
 8007e54:	4013      	ands	r3, r2
 8007e56:	d0f1      	beq.n	8007e3c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e58:	4b56      	ldr	r3, [pc, #344]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	22f8      	movs	r2, #248	; 0xf8
 8007e5e:	4393      	bics	r3, r2
 8007e60:	0019      	movs	r1, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	00da      	lsls	r2, r3, #3
 8007e68:	4b52      	ldr	r3, [pc, #328]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e018      	b.n	8007ea2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e70:	4b50      	ldr	r3, [pc, #320]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	4b4f      	ldr	r3, [pc, #316]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e76:	2101      	movs	r1, #1
 8007e78:	438a      	bics	r2, r1
 8007e7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7c:	f7fe fed0 	bl	8006c20 <HAL_GetTick>
 8007e80:	0003      	movs	r3, r0
 8007e82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e86:	f7fe fecb 	bl	8006c20 <HAL_GetTick>
 8007e8a:	0002      	movs	r2, r0
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e202      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e98:	4b46      	ldr	r3, [pc, #280]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d1f1      	bne.n	8007e86 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	d036      	beq.n	8007f1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d019      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb4:	4b3f      	ldr	r3, [pc, #252]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007eba:	2101      	movs	r1, #1
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec0:	f7fe feae 	bl	8006c20 <HAL_GetTick>
 8007ec4:	0003      	movs	r3, r0
 8007ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec8:	e008      	b.n	8007edc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007eca:	f7fe fea9 	bl	8006c20 <HAL_GetTick>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e1e0      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007edc:	4b35      	ldr	r3, [pc, #212]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d0f1      	beq.n	8007eca <HAL_RCC_OscConfig+0x242>
 8007ee6:	e018      	b.n	8007f1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee8:	4b32      	ldr	r3, [pc, #200]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eec:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007eee:	2101      	movs	r1, #1
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ef4:	f7fe fe94 	bl	8006c20 <HAL_GetTick>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007efc:	e008      	b.n	8007f10 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007efe:	f7fe fe8f 	bl	8006c20 <HAL_GetTick>
 8007f02:	0002      	movs	r2, r0
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e1c6      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f10:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2202      	movs	r2, #2
 8007f16:	4013      	ands	r3, r2
 8007f18:	d1f1      	bne.n	8007efe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	4013      	ands	r3, r2
 8007f22:	d100      	bne.n	8007f26 <HAL_RCC_OscConfig+0x29e>
 8007f24:	e0b4      	b.n	8008090 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f26:	201f      	movs	r0, #31
 8007f28:	183b      	adds	r3, r7, r0
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007f30:	69da      	ldr	r2, [r3, #28]
 8007f32:	2380      	movs	r3, #128	; 0x80
 8007f34:	055b      	lsls	r3, r3, #21
 8007f36:	4013      	ands	r3, r2
 8007f38:	d110      	bne.n	8007f5c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f3a:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007f3c:	69da      	ldr	r2, [r3, #28]
 8007f3e:	4b1d      	ldr	r3, [pc, #116]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007f40:	2180      	movs	r1, #128	; 0x80
 8007f42:	0549      	lsls	r1, r1, #21
 8007f44:	430a      	orrs	r2, r1
 8007f46:	61da      	str	r2, [r3, #28]
 8007f48:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	055b      	lsls	r3, r3, #21
 8007f50:	4013      	ands	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f56:	183b      	adds	r3, r7, r0
 8007f58:	2201      	movs	r2, #1
 8007f5a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <HAL_RCC_OscConfig+0x338>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	2380      	movs	r3, #128	; 0x80
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4013      	ands	r3, r2
 8007f66:	d11a      	bne.n	8007f9e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f68:	4b15      	ldr	r3, [pc, #84]	; (8007fc0 <HAL_RCC_OscConfig+0x338>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <HAL_RCC_OscConfig+0x338>)
 8007f6e:	2180      	movs	r1, #128	; 0x80
 8007f70:	0049      	lsls	r1, r1, #1
 8007f72:	430a      	orrs	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f76:	f7fe fe53 	bl	8006c20 <HAL_GetTick>
 8007f7a:	0003      	movs	r3, r0
 8007f7c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f80:	f7fe fe4e 	bl	8006c20 <HAL_GetTick>
 8007f84:	0002      	movs	r2, r0
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	; 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e185      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <HAL_RCC_OscConfig+0x338>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d10e      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x33c>
 8007fa6:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007fa8:	6a1a      	ldr	r2, [r3, #32]
 8007faa:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <HAL_RCC_OscConfig+0x32c>)
 8007fac:	2101      	movs	r1, #1
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	621a      	str	r2, [r3, #32]
 8007fb2:	e035      	b.n	8008020 <HAL_RCC_OscConfig+0x398>
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	fffeffff 	.word	0xfffeffff
 8007fbc:	fffbffff 	.word	0xfffbffff
 8007fc0:	40007000 	.word	0x40007000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10c      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x35e>
 8007fcc:	4bb6      	ldr	r3, [pc, #728]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007fce:	6a1a      	ldr	r2, [r3, #32]
 8007fd0:	4bb5      	ldr	r3, [pc, #724]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	438a      	bics	r2, r1
 8007fd6:	621a      	str	r2, [r3, #32]
 8007fd8:	4bb3      	ldr	r3, [pc, #716]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	4bb2      	ldr	r3, [pc, #712]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007fde:	2104      	movs	r1, #4
 8007fe0:	438a      	bics	r2, r1
 8007fe2:	621a      	str	r2, [r3, #32]
 8007fe4:	e01c      	b.n	8008020 <HAL_RCC_OscConfig+0x398>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d10c      	bne.n	8008008 <HAL_RCC_OscConfig+0x380>
 8007fee:	4bae      	ldr	r3, [pc, #696]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	4bad      	ldr	r3, [pc, #692]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	621a      	str	r2, [r3, #32]
 8007ffa:	4bab      	ldr	r3, [pc, #684]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	4baa      	ldr	r3, [pc, #680]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008000:	2101      	movs	r1, #1
 8008002:	430a      	orrs	r2, r1
 8008004:	621a      	str	r2, [r3, #32]
 8008006:	e00b      	b.n	8008020 <HAL_RCC_OscConfig+0x398>
 8008008:	4ba7      	ldr	r3, [pc, #668]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	4ba6      	ldr	r3, [pc, #664]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800800e:	2101      	movs	r1, #1
 8008010:	438a      	bics	r2, r1
 8008012:	621a      	str	r2, [r3, #32]
 8008014:	4ba4      	ldr	r3, [pc, #656]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008016:	6a1a      	ldr	r2, [r3, #32]
 8008018:	4ba3      	ldr	r3, [pc, #652]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800801a:	2104      	movs	r1, #4
 800801c:	438a      	bics	r2, r1
 800801e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d014      	beq.n	8008052 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008028:	f7fe fdfa 	bl	8006c20 <HAL_GetTick>
 800802c:	0003      	movs	r3, r0
 800802e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008030:	e009      	b.n	8008046 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008032:	f7fe fdf5 	bl	8006c20 <HAL_GetTick>
 8008036:	0002      	movs	r2, r0
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	4a9b      	ldr	r2, [pc, #620]	; (80082ac <HAL_RCC_OscConfig+0x624>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e12b      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008046:	4b98      	ldr	r3, [pc, #608]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	2202      	movs	r2, #2
 800804c:	4013      	ands	r3, r2
 800804e:	d0f0      	beq.n	8008032 <HAL_RCC_OscConfig+0x3aa>
 8008050:	e013      	b.n	800807a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008052:	f7fe fde5 	bl	8006c20 <HAL_GetTick>
 8008056:	0003      	movs	r3, r0
 8008058:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800805a:	e009      	b.n	8008070 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800805c:	f7fe fde0 	bl	8006c20 <HAL_GetTick>
 8008060:	0002      	movs	r2, r0
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	4a91      	ldr	r2, [pc, #580]	; (80082ac <HAL_RCC_OscConfig+0x624>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d901      	bls.n	8008070 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e116      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008070:	4b8d      	ldr	r3, [pc, #564]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	2202      	movs	r2, #2
 8008076:	4013      	ands	r3, r2
 8008078:	d1f0      	bne.n	800805c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800807a:	231f      	movs	r3, #31
 800807c:	18fb      	adds	r3, r7, r3
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d105      	bne.n	8008090 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008084:	4b88      	ldr	r3, [pc, #544]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	4b87      	ldr	r3, [pc, #540]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800808a:	4989      	ldr	r1, [pc, #548]	; (80082b0 <HAL_RCC_OscConfig+0x628>)
 800808c:	400a      	ands	r2, r1
 800808e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2210      	movs	r2, #16
 8008096:	4013      	ands	r3, r2
 8008098:	d063      	beq.n	8008162 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d12a      	bne.n	80080f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80080a2:	4b81      	ldr	r3, [pc, #516]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a6:	4b80      	ldr	r3, [pc, #512]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080a8:	2104      	movs	r1, #4
 80080aa:	430a      	orrs	r2, r1
 80080ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80080ae:	4b7e      	ldr	r3, [pc, #504]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b2:	4b7d      	ldr	r3, [pc, #500]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080b4:	2101      	movs	r1, #1
 80080b6:	430a      	orrs	r2, r1
 80080b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ba:	f7fe fdb1 	bl	8006c20 <HAL_GetTick>
 80080be:	0003      	movs	r3, r0
 80080c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80080c4:	f7fe fdac 	bl	8006c20 <HAL_GetTick>
 80080c8:	0002      	movs	r2, r0
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e0e3      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80080d6:	4b74      	ldr	r3, [pc, #464]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080da:	2202      	movs	r2, #2
 80080dc:	4013      	ands	r3, r2
 80080de:	d0f1      	beq.n	80080c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80080e0:	4b71      	ldr	r3, [pc, #452]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	22f8      	movs	r2, #248	; 0xf8
 80080e6:	4393      	bics	r3, r2
 80080e8:	0019      	movs	r1, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	00da      	lsls	r2, r3, #3
 80080f0:	4b6d      	ldr	r3, [pc, #436]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80080f2:	430a      	orrs	r2, r1
 80080f4:	635a      	str	r2, [r3, #52]	; 0x34
 80080f6:	e034      	b.n	8008162 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	3305      	adds	r3, #5
 80080fe:	d111      	bne.n	8008124 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008100:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	4b68      	ldr	r3, [pc, #416]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008106:	2104      	movs	r1, #4
 8008108:	438a      	bics	r2, r1
 800810a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800810c:	4b66      	ldr	r3, [pc, #408]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800810e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008110:	22f8      	movs	r2, #248	; 0xf8
 8008112:	4393      	bics	r3, r2
 8008114:	0019      	movs	r1, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	00da      	lsls	r2, r3, #3
 800811c:	4b62      	ldr	r3, [pc, #392]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800811e:	430a      	orrs	r2, r1
 8008120:	635a      	str	r2, [r3, #52]	; 0x34
 8008122:	e01e      	b.n	8008162 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008124:	4b60      	ldr	r3, [pc, #384]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008128:	4b5f      	ldr	r3, [pc, #380]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800812a:	2104      	movs	r1, #4
 800812c:	430a      	orrs	r2, r1
 800812e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008130:	4b5d      	ldr	r3, [pc, #372]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008134:	4b5c      	ldr	r3, [pc, #368]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008136:	2101      	movs	r1, #1
 8008138:	438a      	bics	r2, r1
 800813a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800813c:	f7fe fd70 	bl	8006c20 <HAL_GetTick>
 8008140:	0003      	movs	r3, r0
 8008142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008144:	e008      	b.n	8008158 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008146:	f7fe fd6b 	bl	8006c20 <HAL_GetTick>
 800814a:	0002      	movs	r2, r0
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e0a2      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008158:	4b53      	ldr	r3, [pc, #332]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	2202      	movs	r2, #2
 800815e:	4013      	ands	r3, r2
 8008160:	d1f1      	bne.n	8008146 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d100      	bne.n	800816c <HAL_RCC_OscConfig+0x4e4>
 800816a:	e097      	b.n	800829c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800816c:	4b4e      	ldr	r3, [pc, #312]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	220c      	movs	r2, #12
 8008172:	4013      	ands	r3, r2
 8008174:	2b08      	cmp	r3, #8
 8008176:	d100      	bne.n	800817a <HAL_RCC_OscConfig+0x4f2>
 8008178:	e06b      	b.n	8008252 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d14c      	bne.n	800821c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008182:	4b49      	ldr	r3, [pc, #292]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b48      	ldr	r3, [pc, #288]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008188:	494a      	ldr	r1, [pc, #296]	; (80082b4 <HAL_RCC_OscConfig+0x62c>)
 800818a:	400a      	ands	r2, r1
 800818c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800818e:	f7fe fd47 	bl	8006c20 <HAL_GetTick>
 8008192:	0003      	movs	r3, r0
 8008194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008196:	e008      	b.n	80081aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008198:	f7fe fd42 	bl	8006c20 <HAL_GetTick>
 800819c:	0002      	movs	r2, r0
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e079      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081aa:	4b3f      	ldr	r3, [pc, #252]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	2380      	movs	r3, #128	; 0x80
 80081b0:	049b      	lsls	r3, r3, #18
 80081b2:	4013      	ands	r3, r2
 80081b4:	d1f0      	bne.n	8008198 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081b6:	4b3c      	ldr	r3, [pc, #240]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	220f      	movs	r2, #15
 80081bc:	4393      	bics	r3, r2
 80081be:	0019      	movs	r1, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4b38      	ldr	r3, [pc, #224]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081c6:	430a      	orrs	r2, r1
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80081ca:	4b37      	ldr	r3, [pc, #220]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	4a3a      	ldr	r2, [pc, #232]	; (80082b8 <HAL_RCC_OscConfig+0x630>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	0019      	movs	r1, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	431a      	orrs	r2, r3
 80081de:	4b32      	ldr	r3, [pc, #200]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081e4:	4b30      	ldr	r3, [pc, #192]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b2f      	ldr	r3, [pc, #188]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 80081ea:	2180      	movs	r1, #128	; 0x80
 80081ec:	0449      	lsls	r1, r1, #17
 80081ee:	430a      	orrs	r2, r1
 80081f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081f2:	f7fe fd15 	bl	8006c20 <HAL_GetTick>
 80081f6:	0003      	movs	r3, r0
 80081f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081fc:	f7fe fd10 	bl	8006c20 <HAL_GetTick>
 8008200:	0002      	movs	r2, r0
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e047      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800820e:	4b26      	ldr	r3, [pc, #152]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	2380      	movs	r3, #128	; 0x80
 8008214:	049b      	lsls	r3, r3, #18
 8008216:	4013      	ands	r3, r2
 8008218:	d0f0      	beq.n	80081fc <HAL_RCC_OscConfig+0x574>
 800821a:	e03f      	b.n	800829c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800821c:	4b22      	ldr	r3, [pc, #136]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008222:	4924      	ldr	r1, [pc, #144]	; (80082b4 <HAL_RCC_OscConfig+0x62c>)
 8008224:	400a      	ands	r2, r1
 8008226:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008228:	f7fe fcfa 	bl	8006c20 <HAL_GetTick>
 800822c:	0003      	movs	r3, r0
 800822e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008230:	e008      	b.n	8008244 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008232:	f7fe fcf5 	bl	8006c20 <HAL_GetTick>
 8008236:	0002      	movs	r2, r0
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e02c      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008244:	4b18      	ldr	r3, [pc, #96]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	049b      	lsls	r3, r3, #18
 800824c:	4013      	ands	r3, r2
 800824e:	d1f0      	bne.n	8008232 <HAL_RCC_OscConfig+0x5aa>
 8008250:	e024      	b.n	800829c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d101      	bne.n	800825e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e01f      	b.n	800829e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008264:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <HAL_RCC_OscConfig+0x620>)
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	025b      	lsls	r3, r3, #9
 8008270:	401a      	ands	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	429a      	cmp	r2, r3
 8008278:	d10e      	bne.n	8008298 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	220f      	movs	r2, #15
 800827e:	401a      	ands	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d107      	bne.n	8008298 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	23f0      	movs	r3, #240	; 0xf0
 800828c:	039b      	lsls	r3, r3, #14
 800828e:	401a      	ands	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008294:	429a      	cmp	r2, r3
 8008296:	d001      	beq.n	800829c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	0018      	movs	r0, r3
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b008      	add	sp, #32
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	40021000 	.word	0x40021000
 80082ac:	00001388 	.word	0x00001388
 80082b0:	efffffff 	.word	0xefffffff
 80082b4:	feffffff 	.word	0xfeffffff
 80082b8:	ffc2ffff 	.word	0xffc2ffff

080082bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0b3      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082d0:	4b5b      	ldr	r3, [pc, #364]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4013      	ands	r3, r2
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d911      	bls.n	8008302 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082de:	4b58      	ldr	r3, [pc, #352]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2201      	movs	r2, #1
 80082e4:	4393      	bics	r3, r2
 80082e6:	0019      	movs	r1, r3
 80082e8:	4b55      	ldr	r3, [pc, #340]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f0:	4b53      	ldr	r3, [pc, #332]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2201      	movs	r2, #1
 80082f6:	4013      	ands	r3, r2
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d001      	beq.n	8008302 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e09a      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2202      	movs	r2, #2
 8008308:	4013      	ands	r3, r2
 800830a:	d015      	beq.n	8008338 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2204      	movs	r2, #4
 8008312:	4013      	ands	r3, r2
 8008314:	d006      	beq.n	8008324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008316:	4b4b      	ldr	r3, [pc, #300]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	4b4a      	ldr	r3, [pc, #296]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 800831c:	21e0      	movs	r1, #224	; 0xe0
 800831e:	00c9      	lsls	r1, r1, #3
 8008320:	430a      	orrs	r2, r1
 8008322:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008324:	4b47      	ldr	r3, [pc, #284]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	22f0      	movs	r2, #240	; 0xf0
 800832a:	4393      	bics	r3, r2
 800832c:	0019      	movs	r1, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	4b44      	ldr	r3, [pc, #272]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2201      	movs	r2, #1
 800833e:	4013      	ands	r3, r2
 8008340:	d040      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d107      	bne.n	800835a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800834a:	4b3e      	ldr	r3, [pc, #248]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	2380      	movs	r3, #128	; 0x80
 8008350:	029b      	lsls	r3, r3, #10
 8008352:	4013      	ands	r3, r2
 8008354:	d114      	bne.n	8008380 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e06e      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d107      	bne.n	8008372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008362:	4b38      	ldr	r3, [pc, #224]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	2380      	movs	r3, #128	; 0x80
 8008368:	049b      	lsls	r3, r3, #18
 800836a:	4013      	ands	r3, r2
 800836c:	d108      	bne.n	8008380 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e062      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008372:	4b34      	ldr	r3, [pc, #208]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2202      	movs	r2, #2
 8008378:	4013      	ands	r3, r2
 800837a:	d101      	bne.n	8008380 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e05b      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008380:	4b30      	ldr	r3, [pc, #192]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2203      	movs	r2, #3
 8008386:	4393      	bics	r3, r2
 8008388:	0019      	movs	r1, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	4b2d      	ldr	r3, [pc, #180]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008394:	f7fe fc44 	bl	8006c20 <HAL_GetTick>
 8008398:	0003      	movs	r3, r0
 800839a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839c:	e009      	b.n	80083b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800839e:	f7fe fc3f 	bl	8006c20 <HAL_GetTick>
 80083a2:	0002      	movs	r2, r0
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	4a27      	ldr	r2, [pc, #156]	; (8008448 <HAL_RCC_ClockConfig+0x18c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e042      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b2:	4b24      	ldr	r3, [pc, #144]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	220c      	movs	r2, #12
 80083b8:	401a      	ands	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d1ec      	bne.n	800839e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c4:	4b1e      	ldr	r3, [pc, #120]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	4013      	ands	r3, r2
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d211      	bcs.n	80083f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2201      	movs	r2, #1
 80083d8:	4393      	bics	r3, r2
 80083da:	0019      	movs	r1, r3
 80083dc:	4b18      	ldr	r3, [pc, #96]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083e4:	4b16      	ldr	r3, [pc, #88]	; (8008440 <HAL_RCC_ClockConfig+0x184>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	4013      	ands	r3, r2
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d001      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e020      	b.n	8008438 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2204      	movs	r2, #4
 80083fc:	4013      	ands	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008400:	4b10      	ldr	r3, [pc, #64]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a11      	ldr	r2, [pc, #68]	; (800844c <HAL_RCC_ClockConfig+0x190>)
 8008406:	4013      	ands	r3, r2
 8008408:	0019      	movs	r1, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 8008410:	430a      	orrs	r2, r1
 8008412:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008414:	f000 f820 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 8008418:	0001      	movs	r1, r0
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <HAL_RCC_ClockConfig+0x188>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	220f      	movs	r2, #15
 8008422:	4013      	ands	r3, r2
 8008424:	4a0a      	ldr	r2, [pc, #40]	; (8008450 <HAL_RCC_ClockConfig+0x194>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	000a      	movs	r2, r1
 800842a:	40da      	lsrs	r2, r3
 800842c:	4b09      	ldr	r3, [pc, #36]	; (8008454 <HAL_RCC_ClockConfig+0x198>)
 800842e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008430:	2003      	movs	r0, #3
 8008432:	f7fe fbaf 	bl	8006b94 <HAL_InitTick>
  
  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	0018      	movs	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	b004      	add	sp, #16
 800843e:	bd80      	pop	{r7, pc}
 8008440:	40022000 	.word	0x40022000
 8008444:	40021000 	.word	0x40021000
 8008448:	00001388 	.word	0x00001388
 800844c:	fffff8ff 	.word	0xfffff8ff
 8008450:	0800adf0 	.word	0x0800adf0
 8008454:	20000448 	.word	0x20000448

08008458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b08f      	sub	sp, #60	; 0x3c
 800845c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800845e:	2314      	movs	r3, #20
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	4a2b      	ldr	r2, [pc, #172]	; (8008510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008464:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008466:	c313      	stmia	r3!, {r0, r1, r4}
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800846c:	1d3b      	adds	r3, r7, #4
 800846e:	4a29      	ldr	r2, [pc, #164]	; (8008514 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008470:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008472:	c313      	stmia	r3!, {r0, r1, r4}
 8008474:	6812      	ldr	r2, [r2, #0]
 8008476:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847c:	2300      	movs	r3, #0
 800847e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008480:	2300      	movs	r3, #0
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800848c:	4b22      	ldr	r3, [pc, #136]	; (8008518 <HAL_RCC_GetSysClockFreq+0xc0>)
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	220c      	movs	r2, #12
 8008496:	4013      	ands	r3, r2
 8008498:	2b04      	cmp	r3, #4
 800849a:	d002      	beq.n	80084a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800849c:	2b08      	cmp	r3, #8
 800849e:	d003      	beq.n	80084a8 <HAL_RCC_GetSysClockFreq+0x50>
 80084a0:	e02d      	b.n	80084fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084a2:	4b1e      	ldr	r3, [pc, #120]	; (800851c <HAL_RCC_GetSysClockFreq+0xc4>)
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80084a6:	e02d      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	0c9b      	lsrs	r3, r3, #18
 80084ac:	220f      	movs	r2, #15
 80084ae:	4013      	ands	r3, r2
 80084b0:	2214      	movs	r2, #20
 80084b2:	18ba      	adds	r2, r7, r2
 80084b4:	5cd3      	ldrb	r3, [r2, r3]
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80084b8:	4b17      	ldr	r3, [pc, #92]	; (8008518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	220f      	movs	r2, #15
 80084be:	4013      	ands	r3, r2
 80084c0:	1d3a      	adds	r2, r7, #4
 80084c2:	5cd3      	ldrb	r3, [r2, r3]
 80084c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	025b      	lsls	r3, r3, #9
 80084cc:	4013      	ands	r3, r2
 80084ce:	d009      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80084d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084d2:	4812      	ldr	r0, [pc, #72]	; (800851c <HAL_RCC_GetSysClockFreq+0xc4>)
 80084d4:	f7f7 fe22 	bl	800011c <__udivsi3>
 80084d8:	0003      	movs	r3, r0
 80084da:	001a      	movs	r2, r3
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	4353      	muls	r3, r2
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
 80084e2:	e009      	b.n	80084f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80084e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084e6:	000a      	movs	r2, r1
 80084e8:	0152      	lsls	r2, r2, #5
 80084ea:	1a52      	subs	r2, r2, r1
 80084ec:	0193      	lsls	r3, r2, #6
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	185b      	adds	r3, r3, r1
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80084fc:	e002      	b.n	8008504 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008500:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008502:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8008506:	0018      	movs	r0, r3
 8008508:	46bd      	mov	sp, r7
 800850a:	b00f      	add	sp, #60	; 0x3c
 800850c:	bd90      	pop	{r4, r7, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	0800a910 	.word	0x0800a910
 8008514:	0800a920 	.word	0x0800a920
 8008518:	40021000 	.word	0x40021000
 800851c:	007a1200 	.word	0x007a1200

08008520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008524:	4b02      	ldr	r3, [pc, #8]	; (8008530 <HAL_RCC_GetHCLKFreq+0x10>)
 8008526:	681b      	ldr	r3, [r3, #0]
}
 8008528:	0018      	movs	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	20000448 	.word	0x20000448

08008534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8008538:	f7ff fff2 	bl	8008520 <HAL_RCC_GetHCLKFreq>
 800853c:	0001      	movs	r1, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	2207      	movs	r2, #7
 8008546:	4013      	ands	r3, r2
 8008548:	4a04      	ldr	r2, [pc, #16]	; (800855c <HAL_RCC_GetPCLK1Freq+0x28>)
 800854a:	5cd3      	ldrb	r3, [r2, r3]
 800854c:	40d9      	lsrs	r1, r3
 800854e:	000b      	movs	r3, r1
}    
 8008550:	0018      	movs	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	40021000 	.word	0x40021000
 800855c:	0800ae00 	.word	0x0800ae00

08008560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	025b      	lsls	r3, r3, #9
 8008578:	4013      	ands	r3, r2
 800857a:	d100      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800857c:	e08e      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800857e:	2017      	movs	r0, #23
 8008580:	183b      	adds	r3, r7, r0
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008586:	4b5f      	ldr	r3, [pc, #380]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008588:	69da      	ldr	r2, [r3, #28]
 800858a:	2380      	movs	r3, #128	; 0x80
 800858c:	055b      	lsls	r3, r3, #21
 800858e:	4013      	ands	r3, r2
 8008590:	d110      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008592:	4b5c      	ldr	r3, [pc, #368]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008594:	69da      	ldr	r2, [r3, #28]
 8008596:	4b5b      	ldr	r3, [pc, #364]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008598:	2180      	movs	r1, #128	; 0x80
 800859a:	0549      	lsls	r1, r1, #21
 800859c:	430a      	orrs	r2, r1
 800859e:	61da      	str	r2, [r3, #28]
 80085a0:	4b58      	ldr	r3, [pc, #352]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80085a2:	69da      	ldr	r2, [r3, #28]
 80085a4:	2380      	movs	r3, #128	; 0x80
 80085a6:	055b      	lsls	r3, r3, #21
 80085a8:	4013      	ands	r3, r2
 80085aa:	60bb      	str	r3, [r7, #8]
 80085ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ae:	183b      	adds	r3, r7, r0
 80085b0:	2201      	movs	r2, #1
 80085b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b4:	4b54      	ldr	r3, [pc, #336]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	d11a      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085c0:	4b51      	ldr	r3, [pc, #324]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b50      	ldr	r3, [pc, #320]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80085c6:	2180      	movs	r1, #128	; 0x80
 80085c8:	0049      	lsls	r1, r1, #1
 80085ca:	430a      	orrs	r2, r1
 80085cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ce:	f7fe fb27 	bl	8006c20 <HAL_GetTick>
 80085d2:	0003      	movs	r3, r0
 80085d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d6:	e008      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085d8:	f7fe fb22 	bl	8006c20 <HAL_GetTick>
 80085dc:	0002      	movs	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b64      	cmp	r3, #100	; 0x64
 80085e4:	d901      	bls.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e087      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	2380      	movs	r3, #128	; 0x80
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	4013      	ands	r3, r2
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085f6:	4b43      	ldr	r3, [pc, #268]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	23c0      	movs	r3, #192	; 0xc0
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4013      	ands	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d034      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	23c0      	movs	r3, #192	; 0xc0
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4013      	ands	r3, r2
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	429a      	cmp	r2, r3
 8008616:	d02c      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008618:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	4a3b      	ldr	r2, [pc, #236]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800861e:	4013      	ands	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008622:	4b38      	ldr	r3, [pc, #224]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008624:	6a1a      	ldr	r2, [r3, #32]
 8008626:	4b37      	ldr	r3, [pc, #220]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008628:	2180      	movs	r1, #128	; 0x80
 800862a:	0249      	lsls	r1, r1, #9
 800862c:	430a      	orrs	r2, r1
 800862e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008630:	4b34      	ldr	r3, [pc, #208]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008632:	6a1a      	ldr	r2, [r3, #32]
 8008634:	4b33      	ldr	r3, [pc, #204]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008636:	4936      	ldr	r1, [pc, #216]	; (8008710 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008638:	400a      	ands	r2, r1
 800863a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800863c:	4b31      	ldr	r3, [pc, #196]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	4013      	ands	r3, r2
 8008648:	d013      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800864a:	f7fe fae9 	bl	8006c20 <HAL_GetTick>
 800864e:	0003      	movs	r3, r0
 8008650:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008652:	e009      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008654:	f7fe fae4 	bl	8006c20 <HAL_GetTick>
 8008658:	0002      	movs	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	4a2d      	ldr	r2, [pc, #180]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e048      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008668:	4b26      	ldr	r3, [pc, #152]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	2202      	movs	r2, #2
 800866e:	4013      	ands	r3, r2
 8008670:	d0f0      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008672:	4b24      	ldr	r3, [pc, #144]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	4a25      	ldr	r2, [pc, #148]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008678:	4013      	ands	r3, r2
 800867a:	0019      	movs	r1, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008682:	430a      	orrs	r2, r1
 8008684:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008686:	2317      	movs	r3, #23
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d105      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008690:	4b1c      	ldr	r3, [pc, #112]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008696:	4920      	ldr	r1, [pc, #128]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008698:	400a      	ands	r2, r1
 800869a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2201      	movs	r2, #1
 80086a2:	4013      	ands	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086a6:	4b17      	ldr	r3, [pc, #92]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	2203      	movs	r2, #3
 80086ac:	4393      	bics	r3, r2
 80086ae:	0019      	movs	r1, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	4b13      	ldr	r3, [pc, #76]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086b6:	430a      	orrs	r2, r1
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2220      	movs	r2, #32
 80086c0:	4013      	ands	r3, r2
 80086c2:	d009      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	2210      	movs	r2, #16
 80086ca:	4393      	bics	r3, r2
 80086cc:	0019      	movs	r1, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086d4:	430a      	orrs	r2, r1
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	2380      	movs	r3, #128	; 0x80
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	4013      	ands	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	2240      	movs	r2, #64	; 0x40
 80086ea:	4393      	bics	r3, r2
 80086ec:	0019      	movs	r1, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	4b04      	ldr	r3, [pc, #16]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80086f4:	430a      	orrs	r2, r1
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	0018      	movs	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b006      	add	sp, #24
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	40021000 	.word	0x40021000
 8008708:	40007000 	.word	0x40007000
 800870c:	fffffcff 	.word	0xfffffcff
 8008710:	fffeffff 	.word	0xfffeffff
 8008714:	00001388 	.word	0x00001388
 8008718:	efffffff 	.word	0xefffffff

0800871c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e044      	b.n	80087b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008732:	2b00      	cmp	r3, #0
 8008734:	d107      	bne.n	8008746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2274      	movs	r2, #116	; 0x74
 800873a:	2100      	movs	r1, #0
 800873c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	0018      	movs	r0, r3
 8008742:	f7fb fc17 	bl	8003f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2224      	movs	r2, #36	; 0x24
 800874a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2101      	movs	r1, #1
 8008758:	438a      	bics	r2, r1
 800875a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	0018      	movs	r0, r3
 8008760:	f000 f9b6 	bl	8008ad0 <UART_SetConfig>
 8008764:	0003      	movs	r3, r0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e024      	b.n	80087b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	0018      	movs	r0, r3
 800877a:	f000 fae9 	bl	8008d50 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	490d      	ldr	r1, [pc, #52]	; (80087c0 <HAL_UART_Init+0xa4>)
 800878a:	400a      	ands	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	212a      	movs	r1, #42	; 0x2a
 800879a:	438a      	bics	r2, r1
 800879c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2101      	movs	r1, #1
 80087aa:	430a      	orrs	r2, r1
 80087ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	0018      	movs	r0, r3
 80087b2:	f000 fb81 	bl	8008eb8 <UART_CheckIdleState>
 80087b6:	0003      	movs	r3, r0
}
 80087b8:	0018      	movs	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b002      	add	sp, #8
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	ffffb7ff 	.word	0xffffb7ff

080087c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08a      	sub	sp, #40	; 0x28
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	1dbb      	adds	r3, r7, #6
 80087d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d000      	beq.n	80087de <HAL_UART_Transmit+0x1a>
 80087dc:	e096      	b.n	800890c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <HAL_UART_Transmit+0x28>
 80087e4:	1dbb      	adds	r3, r7, #6
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e08e      	b.n	800890e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	2380      	movs	r3, #128	; 0x80
 80087f6:	015b      	lsls	r3, r3, #5
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d109      	bne.n	8008810 <HAL_UART_Transmit+0x4c>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2201      	movs	r2, #1
 8008808:	4013      	ands	r3, r2
 800880a:	d001      	beq.n	8008810 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e07e      	b.n	800890e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2274      	movs	r2, #116	; 0x74
 8008814:	5c9b      	ldrb	r3, [r3, r2]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d101      	bne.n	800881e <HAL_UART_Transmit+0x5a>
 800881a:	2302      	movs	r3, #2
 800881c:	e077      	b.n	800890e <HAL_UART_Transmit+0x14a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2274      	movs	r2, #116	; 0x74
 8008822:	2101      	movs	r1, #1
 8008824:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2280      	movs	r2, #128	; 0x80
 800882a:	2100      	movs	r1, #0
 800882c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2221      	movs	r2, #33	; 0x21
 8008832:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008834:	f7fe f9f4 	bl	8006c20 <HAL_GetTick>
 8008838:	0003      	movs	r3, r0
 800883a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	1dba      	adds	r2, r7, #6
 8008840:	2150      	movs	r1, #80	; 0x50
 8008842:	8812      	ldrh	r2, [r2, #0]
 8008844:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	1dba      	adds	r2, r7, #6
 800884a:	2152      	movs	r1, #82	; 0x52
 800884c:	8812      	ldrh	r2, [r2, #0]
 800884e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	015b      	lsls	r3, r3, #5
 8008858:	429a      	cmp	r2, r3
 800885a:	d108      	bne.n	800886e <HAL_UART_Transmit+0xaa>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61bb      	str	r3, [r7, #24]
 800886c:	e003      	b.n	8008876 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2274      	movs	r2, #116	; 0x74
 800887a:	2100      	movs	r1, #0
 800887c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800887e:	e02d      	b.n	80088dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	0013      	movs	r3, r2
 800888a:	2200      	movs	r2, #0
 800888c:	2180      	movs	r1, #128	; 0x80
 800888e:	f000 fb5b 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008892:	1e03      	subs	r3, r0, #0
 8008894:	d001      	beq.n	800889a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e039      	b.n	800890e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10b      	bne.n	80088b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	881a      	ldrh	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	05d2      	lsls	r2, r2, #23
 80088aa:	0dd2      	lsrs	r2, r2, #23
 80088ac:	b292      	uxth	r2, r2
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	3302      	adds	r3, #2
 80088b4:	61bb      	str	r3, [r7, #24]
 80088b6:	e008      	b.n	80088ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	b292      	uxth	r2, r2
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	3301      	adds	r3, #1
 80088c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2252      	movs	r2, #82	; 0x52
 80088ce:	5a9b      	ldrh	r3, [r3, r2]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b299      	uxth	r1, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2252      	movs	r2, #82	; 0x52
 80088da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2252      	movs	r2, #82	; 0x52
 80088e0:	5a9b      	ldrh	r3, [r3, r2]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1cb      	bne.n	8008880 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	0013      	movs	r3, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	2140      	movs	r1, #64	; 0x40
 80088f6:	f000 fb27 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 80088fa:	1e03      	subs	r3, r0, #0
 80088fc:	d001      	beq.n	8008902 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e005      	b.n	800890e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	e000      	b.n	800890e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800890c:	2302      	movs	r3, #2
  }
}
 800890e:	0018      	movs	r0, r3
 8008910:	46bd      	mov	sp, r7
 8008912:	b008      	add	sp, #32
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	1dbb      	adds	r3, r7, #6
 8008926:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800892c:	2b20      	cmp	r3, #32
 800892e:	d000      	beq.n	8008932 <HAL_UART_Receive+0x1a>
 8008930:	e0c6      	b.n	8008ac0 <HAL_UART_Receive+0x1a8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_UART_Receive+0x28>
 8008938:	1dbb      	adds	r3, r7, #6
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0be      	b.n	8008ac2 <HAL_UART_Receive+0x1aa>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	2380      	movs	r3, #128	; 0x80
 800894a:	015b      	lsls	r3, r3, #5
 800894c:	429a      	cmp	r2, r3
 800894e:	d109      	bne.n	8008964 <HAL_UART_Receive+0x4c>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d105      	bne.n	8008964 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2201      	movs	r2, #1
 800895c:	4013      	ands	r3, r2
 800895e:	d001      	beq.n	8008964 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0ae      	b.n	8008ac2 <HAL_UART_Receive+0x1aa>
      }
    }

    __HAL_LOCK(huart);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2274      	movs	r2, #116	; 0x74
 8008968:	5c9b      	ldrb	r3, [r3, r2]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_UART_Receive+0x5a>
 800896e:	2302      	movs	r3, #2
 8008970:	e0a7      	b.n	8008ac2 <HAL_UART_Receive+0x1aa>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2274      	movs	r2, #116	; 0x74
 8008976:	2101      	movs	r1, #1
 8008978:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2280      	movs	r2, #128	; 0x80
 800897e:	2100      	movs	r1, #0
 8008980:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2222      	movs	r2, #34	; 0x22
 8008986:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800898e:	f7fe f947 	bl	8006c20 <HAL_GetTick>
 8008992:	0003      	movs	r3, r0
 8008994:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1dba      	adds	r2, r7, #6
 800899a:	2158      	movs	r1, #88	; 0x58
 800899c:	8812      	ldrh	r2, [r2, #0]
 800899e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	1dba      	adds	r2, r7, #6
 80089a4:	215a      	movs	r1, #90	; 0x5a
 80089a6:	8812      	ldrh	r2, [r2, #0]
 80089a8:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	015b      	lsls	r3, r3, #5
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d10d      	bne.n	80089d2 <HAL_UART_Receive+0xba>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <HAL_UART_Receive+0xb0>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	225c      	movs	r2, #92	; 0x5c
 80089c2:	4942      	ldr	r1, [pc, #264]	; (8008acc <HAL_UART_Receive+0x1b4>)
 80089c4:	5299      	strh	r1, [r3, r2]
 80089c6:	e01a      	b.n	80089fe <HAL_UART_Receive+0xe6>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	225c      	movs	r2, #92	; 0x5c
 80089cc:	21ff      	movs	r1, #255	; 0xff
 80089ce:	5299      	strh	r1, [r3, r2]
 80089d0:	e015      	b.n	80089fe <HAL_UART_Receive+0xe6>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <HAL_UART_Receive+0xde>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <HAL_UART_Receive+0xd4>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	225c      	movs	r2, #92	; 0x5c
 80089e6:	21ff      	movs	r1, #255	; 0xff
 80089e8:	5299      	strh	r1, [r3, r2]
 80089ea:	e008      	b.n	80089fe <HAL_UART_Receive+0xe6>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	225c      	movs	r2, #92	; 0x5c
 80089f0:	217f      	movs	r1, #127	; 0x7f
 80089f2:	5299      	strh	r1, [r3, r2]
 80089f4:	e003      	b.n	80089fe <HAL_UART_Receive+0xe6>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	225c      	movs	r2, #92	; 0x5c
 80089fa:	2100      	movs	r1, #0
 80089fc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80089fe:	2312      	movs	r3, #18
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	215c      	movs	r1, #92	; 0x5c
 8008a06:	5a52      	ldrh	r2, [r2, r1]
 8008a08:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	2380      	movs	r3, #128	; 0x80
 8008a10:	015b      	lsls	r3, r3, #5
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d108      	bne.n	8008a28 <HAL_UART_Receive+0x110>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_Receive+0x110>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	e003      	b.n	8008a30 <HAL_UART_Receive+0x118>
    }
    else
    {
      pdata8bits  = pData;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2274      	movs	r2, #116	; 0x74
 8008a34:	2100      	movs	r1, #0
 8008a36:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a38:	e037      	b.n	8008aaa <HAL_UART_Receive+0x192>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	0013      	movs	r3, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	2120      	movs	r1, #32
 8008a48:	f000 fa7e 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008a4c:	1e03      	subs	r3, r0, #0
 8008a4e:	d001      	beq.n	8008a54 <HAL_UART_Receive+0x13c>
      {
        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e036      	b.n	8008ac2 <HAL_UART_Receive+0x1aa>
      }
      if (pdata8bits == NULL)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10e      	bne.n	8008a78 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2212      	movs	r2, #18
 8008a64:	18ba      	adds	r2, r7, r2
 8008a66:	8812      	ldrh	r2, [r2, #0]
 8008a68:	4013      	ands	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	3302      	adds	r3, #2
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	e00f      	b.n	8008a98 <HAL_UART_Receive+0x180>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2212      	movs	r2, #18
 8008a84:	18ba      	adds	r2, r7, r2
 8008a86:	8812      	ldrh	r2, [r2, #0]
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	3301      	adds	r3, #1
 8008a96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	225a      	movs	r2, #90	; 0x5a
 8008a9c:	5a9b      	ldrh	r3, [r3, r2]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b299      	uxth	r1, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	225a      	movs	r2, #90	; 0x5a
 8008aa8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	225a      	movs	r2, #90	; 0x5a
 8008aae:	5a9b      	ldrh	r3, [r3, r2]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1c1      	bne.n	8008a3a <HAL_UART_Receive+0x122>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e000      	b.n	8008ac2 <HAL_UART_Receive+0x1aa>
  }
  else
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
  }
}
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b008      	add	sp, #32
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	000001ff 	.word	0x000001ff

08008ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ad8:	231e      	movs	r3, #30
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a8d      	ldr	r2, [pc, #564]	; (8008d34 <UART_SetConfig+0x264>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	0019      	movs	r1, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	4a88      	ldr	r2, [pc, #544]	; (8008d38 <UART_SetConfig+0x268>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	0019      	movs	r1, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4a7f      	ldr	r2, [pc, #508]	; (8008d3c <UART_SetConfig+0x26c>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	0019      	movs	r1, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a7b      	ldr	r2, [pc, #492]	; (8008d40 <UART_SetConfig+0x270>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d127      	bne.n	8008ba6 <UART_SetConfig+0xd6>
 8008b56:	4b7b      	ldr	r3, [pc, #492]	; (8008d44 <UART_SetConfig+0x274>)
 8008b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d00d      	beq.n	8008b7e <UART_SetConfig+0xae>
 8008b62:	d81b      	bhi.n	8008b9c <UART_SetConfig+0xcc>
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d014      	beq.n	8008b92 <UART_SetConfig+0xc2>
 8008b68:	d818      	bhi.n	8008b9c <UART_SetConfig+0xcc>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <UART_SetConfig+0xa4>
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d00a      	beq.n	8008b88 <UART_SetConfig+0xb8>
 8008b72:	e013      	b.n	8008b9c <UART_SetConfig+0xcc>
 8008b74:	231f      	movs	r3, #31
 8008b76:	18fb      	adds	r3, r7, r3
 8008b78:	2200      	movs	r2, #0
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e021      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008b7e:	231f      	movs	r3, #31
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	2202      	movs	r2, #2
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e01c      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008b88:	231f      	movs	r3, #31
 8008b8a:	18fb      	adds	r3, r7, r3
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	e017      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008b92:	231f      	movs	r3, #31
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	2208      	movs	r2, #8
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e012      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008b9c:	231f      	movs	r3, #31
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	e00d      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a67      	ldr	r2, [pc, #412]	; (8008d48 <UART_SetConfig+0x278>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d104      	bne.n	8008bba <UART_SetConfig+0xea>
 8008bb0:	231f      	movs	r3, #31
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	e003      	b.n	8008bc2 <UART_SetConfig+0xf2>
 8008bba:	231f      	movs	r3, #31
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	2210      	movs	r2, #16
 8008bc0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69da      	ldr	r2, [r3, #28]
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	021b      	lsls	r3, r3, #8
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d15d      	bne.n	8008c8a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8008bce:	231f      	movs	r3, #31
 8008bd0:	18fb      	adds	r3, r7, r3
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d015      	beq.n	8008c04 <UART_SetConfig+0x134>
 8008bd8:	dc18      	bgt.n	8008c0c <UART_SetConfig+0x13c>
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d00d      	beq.n	8008bfa <UART_SetConfig+0x12a>
 8008bde:	dc15      	bgt.n	8008c0c <UART_SetConfig+0x13c>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <UART_SetConfig+0x11a>
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d005      	beq.n	8008bf4 <UART_SetConfig+0x124>
 8008be8:	e010      	b.n	8008c0c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bea:	f7ff fca3 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 8008bee:	0003      	movs	r3, r0
 8008bf0:	61bb      	str	r3, [r7, #24]
        break;
 8008bf2:	e012      	b.n	8008c1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf4:	4b55      	ldr	r3, [pc, #340]	; (8008d4c <UART_SetConfig+0x27c>)
 8008bf6:	61bb      	str	r3, [r7, #24]
        break;
 8008bf8:	e00f      	b.n	8008c1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfa:	f7ff fc2d 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 8008bfe:	0003      	movs	r3, r0
 8008c00:	61bb      	str	r3, [r7, #24]
        break;
 8008c02:	e00a      	b.n	8008c1a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	61bb      	str	r3, [r7, #24]
        break;
 8008c0a:	e006      	b.n	8008c1a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c10:	231e      	movs	r3, #30
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	2201      	movs	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
        break;
 8008c18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d100      	bne.n	8008c22 <UART_SetConfig+0x152>
 8008c20:	e07b      	b.n	8008d1a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	005a      	lsls	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	085b      	lsrs	r3, r3, #1
 8008c2c:	18d2      	adds	r2, r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	0019      	movs	r1, r3
 8008c34:	0010      	movs	r0, r2
 8008c36:	f7f7 fa71 	bl	800011c <__udivsi3>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b0f      	cmp	r3, #15
 8008c44:	d91c      	bls.n	8008c80 <UART_SetConfig+0x1b0>
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	2380      	movs	r3, #128	; 0x80
 8008c4a:	025b      	lsls	r3, r3, #9
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d217      	bcs.n	8008c80 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	200e      	movs	r0, #14
 8008c56:	183b      	adds	r3, r7, r0
 8008c58:	210f      	movs	r1, #15
 8008c5a:	438a      	bics	r2, r1
 8008c5c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2207      	movs	r2, #7
 8008c66:	4013      	ands	r3, r2
 8008c68:	b299      	uxth	r1, r3
 8008c6a:	183b      	adds	r3, r7, r0
 8008c6c:	183a      	adds	r2, r7, r0
 8008c6e:	8812      	ldrh	r2, [r2, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	183a      	adds	r2, r7, r0
 8008c7a:	8812      	ldrh	r2, [r2, #0]
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	e04c      	b.n	8008d1a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8008c80:	231e      	movs	r3, #30
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	2201      	movs	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e047      	b.n	8008d1a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c8a:	231f      	movs	r3, #31
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d015      	beq.n	8008cc0 <UART_SetConfig+0x1f0>
 8008c94:	dc18      	bgt.n	8008cc8 <UART_SetConfig+0x1f8>
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d00d      	beq.n	8008cb6 <UART_SetConfig+0x1e6>
 8008c9a:	dc15      	bgt.n	8008cc8 <UART_SetConfig+0x1f8>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <UART_SetConfig+0x1d6>
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d005      	beq.n	8008cb0 <UART_SetConfig+0x1e0>
 8008ca4:	e010      	b.n	8008cc8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca6:	f7ff fc45 	bl	8008534 <HAL_RCC_GetPCLK1Freq>
 8008caa:	0003      	movs	r3, r0
 8008cac:	61bb      	str	r3, [r7, #24]
        break;
 8008cae:	e012      	b.n	8008cd6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cb0:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <UART_SetConfig+0x27c>)
 8008cb2:	61bb      	str	r3, [r7, #24]
        break;
 8008cb4:	e00f      	b.n	8008cd6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb6:	f7ff fbcf 	bl	8008458 <HAL_RCC_GetSysClockFreq>
 8008cba:	0003      	movs	r3, r0
 8008cbc:	61bb      	str	r3, [r7, #24]
        break;
 8008cbe:	e00a      	b.n	8008cd6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cc0:	2380      	movs	r3, #128	; 0x80
 8008cc2:	021b      	lsls	r3, r3, #8
 8008cc4:	61bb      	str	r3, [r7, #24]
        break;
 8008cc6:	e006      	b.n	8008cd6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ccc:	231e      	movs	r3, #30
 8008cce:	18fb      	adds	r3, r7, r3
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	701a      	strb	r2, [r3, #0]
        break;
 8008cd4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01e      	beq.n	8008d1a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	085a      	lsrs	r2, r3, #1
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	18d2      	adds	r2, r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	0019      	movs	r1, r3
 8008cec:	0010      	movs	r0, r2
 8008cee:	f7f7 fa15 	bl	800011c <__udivsi3>
 8008cf2:	0003      	movs	r3, r0
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b0f      	cmp	r3, #15
 8008cfc:	d909      	bls.n	8008d12 <UART_SetConfig+0x242>
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	2380      	movs	r3, #128	; 0x80
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d204      	bcs.n	8008d12 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	60da      	str	r2, [r3, #12]
 8008d10:	e003      	b.n	8008d1a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8008d12:	231e      	movs	r3, #30
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	2201      	movs	r2, #1
 8008d18:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008d26:	231e      	movs	r3, #30
 8008d28:	18fb      	adds	r3, r7, r3
 8008d2a:	781b      	ldrb	r3, [r3, #0]
}
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	b008      	add	sp, #32
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	ffff69f3 	.word	0xffff69f3
 8008d38:	ffffcfff 	.word	0xffffcfff
 8008d3c:	fffff4ff 	.word	0xfffff4ff
 8008d40:	40013800 	.word	0x40013800
 8008d44:	40021000 	.word	0x40021000
 8008d48:	40004400 	.word	0x40004400
 8008d4c:	007a1200 	.word	0x007a1200

08008d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	4013      	ands	r3, r2
 8008d60:	d00b      	beq.n	8008d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4a4a      	ldr	r2, [pc, #296]	; (8008e94 <UART_AdvFeatureConfig+0x144>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2202      	movs	r2, #2
 8008d80:	4013      	ands	r3, r2
 8008d82:	d00b      	beq.n	8008d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4a43      	ldr	r2, [pc, #268]	; (8008e98 <UART_AdvFeatureConfig+0x148>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	0019      	movs	r1, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	2204      	movs	r2, #4
 8008da2:	4013      	ands	r3, r2
 8008da4:	d00b      	beq.n	8008dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4a3b      	ldr	r2, [pc, #236]	; (8008e9c <UART_AdvFeatureConfig+0x14c>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	0019      	movs	r1, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	d00b      	beq.n	8008de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	4a34      	ldr	r2, [pc, #208]	; (8008ea0 <UART_AdvFeatureConfig+0x150>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	0019      	movs	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2210      	movs	r2, #16
 8008de6:	4013      	ands	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	4a2c      	ldr	r2, [pc, #176]	; (8008ea4 <UART_AdvFeatureConfig+0x154>)
 8008df2:	4013      	ands	r3, r2
 8008df4:	0019      	movs	r1, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2220      	movs	r2, #32
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d00b      	beq.n	8008e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	4a25      	ldr	r2, [pc, #148]	; (8008ea8 <UART_AdvFeatureConfig+0x158>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2240      	movs	r2, #64	; 0x40
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	d01d      	beq.n	8008e6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	4a1d      	ldr	r2, [pc, #116]	; (8008eac <UART_AdvFeatureConfig+0x15c>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	0019      	movs	r1, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e4a:	2380      	movs	r3, #128	; 0x80
 8008e4c:	035b      	lsls	r3, r3, #13
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d10b      	bne.n	8008e6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4a15      	ldr	r2, [pc, #84]	; (8008eb0 <UART_AdvFeatureConfig+0x160>)
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	0019      	movs	r1, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	4013      	ands	r3, r2
 8008e72:	d00b      	beq.n	8008e8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4a0e      	ldr	r2, [pc, #56]	; (8008eb4 <UART_AdvFeatureConfig+0x164>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	0019      	movs	r1, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	605a      	str	r2, [r3, #4]
  }
}
 8008e8c:	46c0      	nop			; (mov r8, r8)
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	b002      	add	sp, #8
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	fffdffff 	.word	0xfffdffff
 8008e98:	fffeffff 	.word	0xfffeffff
 8008e9c:	fffbffff 	.word	0xfffbffff
 8008ea0:	ffff7fff 	.word	0xffff7fff
 8008ea4:	ffffefff 	.word	0xffffefff
 8008ea8:	ffffdfff 	.word	0xffffdfff
 8008eac:	ffefffff 	.word	0xffefffff
 8008eb0:	ff9fffff 	.word	0xff9fffff
 8008eb4:	fff7ffff 	.word	0xfff7ffff

08008eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2280      	movs	r2, #128	; 0x80
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ec8:	f7fd feaa 	bl	8006c20 <HAL_GetTick>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2208      	movs	r2, #8
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d10c      	bne.n	8008ef8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2280      	movs	r2, #128	; 0x80
 8008ee2:	0391      	lsls	r1, r2, #14
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	4a17      	ldr	r2, [pc, #92]	; (8008f44 <UART_CheckIdleState+0x8c>)
 8008ee8:	9200      	str	r2, [sp, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f000 f82c 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008ef0:	1e03      	subs	r3, r0, #0
 8008ef2:	d001      	beq.n	8008ef8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e021      	b.n	8008f3c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2204      	movs	r2, #4
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d10c      	bne.n	8008f20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	03d1      	lsls	r1, r2, #15
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4a0d      	ldr	r2, [pc, #52]	; (8008f44 <UART_CheckIdleState+0x8c>)
 8008f10:	9200      	str	r2, [sp, #0]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f000 f818 	bl	8008f48 <UART_WaitOnFlagUntilTimeout>
 8008f18:	1e03      	subs	r3, r0, #0
 8008f1a:	d001      	beq.n	8008f20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e00d      	b.n	8008f3c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2220      	movs	r2, #32
 8008f24:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2274      	movs	r2, #116	; 0x74
 8008f36:	2100      	movs	r1, #0
 8008f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b004      	add	sp, #16
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	01ffffff 	.word	0x01ffffff

08008f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b094      	sub	sp, #80	; 0x50
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	1dfb      	adds	r3, r7, #7
 8008f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f58:	e0a3      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	d100      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008f60:	e09f      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f62:	f7fd fe5d 	bl	8006c20 <HAL_GetTick>
 8008f66:	0002      	movs	r2, r0
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d302      	bcc.n	8008f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d13d      	bne.n	8008ff4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f78:	f3ef 8310 	mrs	r3, PRIMASK
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f80:	647b      	str	r3, [r7, #68]	; 0x44
 8008f82:	2301      	movs	r3, #1
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	f383 8810 	msr	PRIMASK, r3
}
 8008f8c:	46c0      	nop			; (mov r8, r8)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	494c      	ldr	r1, [pc, #304]	; (80090cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008f9a:	400a      	ands	r2, r1
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	f383 8810 	msr	PRIMASK, r3
}
 8008fa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008faa:	f3ef 8310 	mrs	r3, PRIMASK
 8008fae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	f383 8810 	msr	PRIMASK, r3
}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2101      	movs	r1, #1
 8008fcc:	438a      	bics	r2, r1
 8008fce:	609a      	str	r2, [r3, #8]
 8008fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd6:	f383 8810 	msr	PRIMASK, r3
}
 8008fda:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2274      	movs	r2, #116	; 0x74
 8008fec:	2100      	movs	r1, #0
 8008fee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e067      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2204      	movs	r2, #4
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	d050      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69da      	ldr	r2, [r3, #28]
 8009006:	2380      	movs	r3, #128	; 0x80
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	401a      	ands	r2, r3
 800900c:	2380      	movs	r3, #128	; 0x80
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	429a      	cmp	r2, r3
 8009012:	d146      	bne.n	80090a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2280      	movs	r2, #128	; 0x80
 800901a:	0112      	lsls	r2, r2, #4
 800901c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800901e:	f3ef 8310 	mrs	r3, PRIMASK
 8009022:	613b      	str	r3, [r7, #16]
  return(result);
 8009024:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009028:	2301      	movs	r3, #1
 800902a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	f383 8810 	msr	PRIMASK, r3
}
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4923      	ldr	r1, [pc, #140]	; (80090cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8009040:	400a      	ands	r2, r1
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009046:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	f383 8810 	msr	PRIMASK, r3
}
 800904e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009050:	f3ef 8310 	mrs	r3, PRIMASK
 8009054:	61fb      	str	r3, [r7, #28]
  return(result);
 8009056:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009058:	64bb      	str	r3, [r7, #72]	; 0x48
 800905a:	2301      	movs	r3, #1
 800905c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	f383 8810 	msr	PRIMASK, r3
}
 8009064:	46c0      	nop			; (mov r8, r8)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2101      	movs	r1, #1
 8009072:	438a      	bics	r2, r1
 8009074:	609a      	str	r2, [r3, #8]
 8009076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	f383 8810 	msr	PRIMASK, r3
}
 8009080:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2220      	movs	r2, #32
 8009086:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	2120      	movs	r1, #32
 8009094:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2274      	movs	r2, #116	; 0x74
 800909a:	2100      	movs	r1, #0
 800909c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e010      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	4013      	ands	r3, r2
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	425a      	negs	r2, r3
 80090b2:	4153      	adcs	r3, r2
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	001a      	movs	r2, r3
 80090b8:	1dfb      	adds	r3, r7, #7
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d100      	bne.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80090c0:	e74b      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b014      	add	sp, #80	; 0x50
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	fffffe5f 	.word	0xfffffe5f

080090d0 <calloc>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <calloc+0x10>)
 80090d4:	000a      	movs	r2, r1
 80090d6:	0001      	movs	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f000 f869 	bl	80091b0 <_calloc_r>
 80090de:	bd10      	pop	{r4, pc}
 80090e0:	200004b0 	.word	0x200004b0

080090e4 <__errno>:
 80090e4:	4b01      	ldr	r3, [pc, #4]	; (80090ec <__errno+0x8>)
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	4770      	bx	lr
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	200004b0 	.word	0x200004b0

080090f0 <__libc_init_array>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	2600      	movs	r6, #0
 80090f4:	4d0c      	ldr	r5, [pc, #48]	; (8009128 <__libc_init_array+0x38>)
 80090f6:	4c0d      	ldr	r4, [pc, #52]	; (800912c <__libc_init_array+0x3c>)
 80090f8:	1b64      	subs	r4, r4, r5
 80090fa:	10a4      	asrs	r4, r4, #2
 80090fc:	42a6      	cmp	r6, r4
 80090fe:	d109      	bne.n	8009114 <__libc_init_array+0x24>
 8009100:	2600      	movs	r6, #0
 8009102:	f001 fb9d 	bl	800a840 <_init>
 8009106:	4d0a      	ldr	r5, [pc, #40]	; (8009130 <__libc_init_array+0x40>)
 8009108:	4c0a      	ldr	r4, [pc, #40]	; (8009134 <__libc_init_array+0x44>)
 800910a:	1b64      	subs	r4, r4, r5
 800910c:	10a4      	asrs	r4, r4, #2
 800910e:	42a6      	cmp	r6, r4
 8009110:	d105      	bne.n	800911e <__libc_init_array+0x2e>
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	00b3      	lsls	r3, r6, #2
 8009116:	58eb      	ldr	r3, [r5, r3]
 8009118:	4798      	blx	r3
 800911a:	3601      	adds	r6, #1
 800911c:	e7ee      	b.n	80090fc <__libc_init_array+0xc>
 800911e:	00b3      	lsls	r3, r6, #2
 8009120:	58eb      	ldr	r3, [r5, r3]
 8009122:	4798      	blx	r3
 8009124:	3601      	adds	r6, #1
 8009126:	e7f2      	b.n	800910e <__libc_init_array+0x1e>
 8009128:	0800aee4 	.word	0x0800aee4
 800912c:	0800aee4 	.word	0x0800aee4
 8009130:	0800aee4 	.word	0x0800aee4
 8009134:	0800aee8 	.word	0x0800aee8

08009138 <free>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <free+0x10>)
 800913c:	0001      	movs	r1, r0
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	f000 f862 	bl	8009208 <_free_r>
 8009144:	bd10      	pop	{r4, pc}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	200004b0 	.word	0x200004b0

0800914c <memcmp>:
 800914c:	b530      	push	{r4, r5, lr}
 800914e:	2400      	movs	r4, #0
 8009150:	3901      	subs	r1, #1
 8009152:	42a2      	cmp	r2, r4
 8009154:	d101      	bne.n	800915a <memcmp+0xe>
 8009156:	2000      	movs	r0, #0
 8009158:	e005      	b.n	8009166 <memcmp+0x1a>
 800915a:	5d03      	ldrb	r3, [r0, r4]
 800915c:	3401      	adds	r4, #1
 800915e:	5d0d      	ldrb	r5, [r1, r4]
 8009160:	42ab      	cmp	r3, r5
 8009162:	d0f6      	beq.n	8009152 <memcmp+0x6>
 8009164:	1b58      	subs	r0, r3, r5
 8009166:	bd30      	pop	{r4, r5, pc}

08009168 <memcpy>:
 8009168:	2300      	movs	r3, #0
 800916a:	b510      	push	{r4, lr}
 800916c:	429a      	cmp	r2, r3
 800916e:	d100      	bne.n	8009172 <memcpy+0xa>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	5ccc      	ldrb	r4, [r1, r3]
 8009174:	54c4      	strb	r4, [r0, r3]
 8009176:	3301      	adds	r3, #1
 8009178:	e7f8      	b.n	800916c <memcpy+0x4>

0800917a <memmove>:
 800917a:	b510      	push	{r4, lr}
 800917c:	4288      	cmp	r0, r1
 800917e:	d902      	bls.n	8009186 <memmove+0xc>
 8009180:	188b      	adds	r3, r1, r2
 8009182:	4298      	cmp	r0, r3
 8009184:	d303      	bcc.n	800918e <memmove+0x14>
 8009186:	2300      	movs	r3, #0
 8009188:	e007      	b.n	800919a <memmove+0x20>
 800918a:	5c8b      	ldrb	r3, [r1, r2]
 800918c:	5483      	strb	r3, [r0, r2]
 800918e:	3a01      	subs	r2, #1
 8009190:	d2fb      	bcs.n	800918a <memmove+0x10>
 8009192:	bd10      	pop	{r4, pc}
 8009194:	5ccc      	ldrb	r4, [r1, r3]
 8009196:	54c4      	strb	r4, [r0, r3]
 8009198:	3301      	adds	r3, #1
 800919a:	429a      	cmp	r2, r3
 800919c:	d1fa      	bne.n	8009194 <memmove+0x1a>
 800919e:	e7f8      	b.n	8009192 <memmove+0x18>

080091a0 <memset>:
 80091a0:	0003      	movs	r3, r0
 80091a2:	1882      	adds	r2, r0, r2
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d100      	bne.n	80091aa <memset+0xa>
 80091a8:	4770      	bx	lr
 80091aa:	7019      	strb	r1, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	e7f9      	b.n	80091a4 <memset+0x4>

080091b0 <_calloc_r>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	0c13      	lsrs	r3, r2, #16
 80091b4:	0c0d      	lsrs	r5, r1, #16
 80091b6:	d11e      	bne.n	80091f6 <_calloc_r+0x46>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10c      	bne.n	80091d6 <_calloc_r+0x26>
 80091bc:	b289      	uxth	r1, r1
 80091be:	b294      	uxth	r4, r2
 80091c0:	434c      	muls	r4, r1
 80091c2:	0021      	movs	r1, r4
 80091c4:	f000 f88c 	bl	80092e0 <_malloc_r>
 80091c8:	1e05      	subs	r5, r0, #0
 80091ca:	d01b      	beq.n	8009204 <_calloc_r+0x54>
 80091cc:	0022      	movs	r2, r4
 80091ce:	2100      	movs	r1, #0
 80091d0:	f7ff ffe6 	bl	80091a0 <memset>
 80091d4:	e016      	b.n	8009204 <_calloc_r+0x54>
 80091d6:	1c1d      	adds	r5, r3, #0
 80091d8:	1c0b      	adds	r3, r1, #0
 80091da:	b292      	uxth	r2, r2
 80091dc:	b289      	uxth	r1, r1
 80091de:	b29c      	uxth	r4, r3
 80091e0:	4351      	muls	r1, r2
 80091e2:	b2ab      	uxth	r3, r5
 80091e4:	4363      	muls	r3, r4
 80091e6:	0c0c      	lsrs	r4, r1, #16
 80091e8:	191c      	adds	r4, r3, r4
 80091ea:	0c22      	lsrs	r2, r4, #16
 80091ec:	d107      	bne.n	80091fe <_calloc_r+0x4e>
 80091ee:	0424      	lsls	r4, r4, #16
 80091f0:	b289      	uxth	r1, r1
 80091f2:	430c      	orrs	r4, r1
 80091f4:	e7e5      	b.n	80091c2 <_calloc_r+0x12>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <_calloc_r+0x4e>
 80091fa:	1c13      	adds	r3, r2, #0
 80091fc:	e7ed      	b.n	80091da <_calloc_r+0x2a>
 80091fe:	230c      	movs	r3, #12
 8009200:	2500      	movs	r5, #0
 8009202:	6003      	str	r3, [r0, #0]
 8009204:	0028      	movs	r0, r5
 8009206:	bd70      	pop	{r4, r5, r6, pc}

08009208 <_free_r>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	0005      	movs	r5, r0
 800920c:	2900      	cmp	r1, #0
 800920e:	d010      	beq.n	8009232 <_free_r+0x2a>
 8009210:	1f0c      	subs	r4, r1, #4
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	da00      	bge.n	800921a <_free_r+0x12>
 8009218:	18e4      	adds	r4, r4, r3
 800921a:	0028      	movs	r0, r5
 800921c:	f000 fcd6 	bl	8009bcc <__malloc_lock>
 8009220:	4a1d      	ldr	r2, [pc, #116]	; (8009298 <_free_r+0x90>)
 8009222:	6813      	ldr	r3, [r2, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d105      	bne.n	8009234 <_free_r+0x2c>
 8009228:	6063      	str	r3, [r4, #4]
 800922a:	6014      	str	r4, [r2, #0]
 800922c:	0028      	movs	r0, r5
 800922e:	f000 fcd5 	bl	8009bdc <__malloc_unlock>
 8009232:	bd70      	pop	{r4, r5, r6, pc}
 8009234:	42a3      	cmp	r3, r4
 8009236:	d908      	bls.n	800924a <_free_r+0x42>
 8009238:	6821      	ldr	r1, [r4, #0]
 800923a:	1860      	adds	r0, r4, r1
 800923c:	4283      	cmp	r3, r0
 800923e:	d1f3      	bne.n	8009228 <_free_r+0x20>
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	1841      	adds	r1, r0, r1
 8009246:	6021      	str	r1, [r4, #0]
 8009248:	e7ee      	b.n	8009228 <_free_r+0x20>
 800924a:	001a      	movs	r2, r3
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <_free_r+0x4e>
 8009252:	42a3      	cmp	r3, r4
 8009254:	d9f9      	bls.n	800924a <_free_r+0x42>
 8009256:	6811      	ldr	r1, [r2, #0]
 8009258:	1850      	adds	r0, r2, r1
 800925a:	42a0      	cmp	r0, r4
 800925c:	d10b      	bne.n	8009276 <_free_r+0x6e>
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1809      	adds	r1, r1, r0
 8009262:	1850      	adds	r0, r2, r1
 8009264:	6011      	str	r1, [r2, #0]
 8009266:	4283      	cmp	r3, r0
 8009268:	d1e0      	bne.n	800922c <_free_r+0x24>
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	1841      	adds	r1, r0, r1
 8009270:	6011      	str	r1, [r2, #0]
 8009272:	6053      	str	r3, [r2, #4]
 8009274:	e7da      	b.n	800922c <_free_r+0x24>
 8009276:	42a0      	cmp	r0, r4
 8009278:	d902      	bls.n	8009280 <_free_r+0x78>
 800927a:	230c      	movs	r3, #12
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	e7d5      	b.n	800922c <_free_r+0x24>
 8009280:	6821      	ldr	r1, [r4, #0]
 8009282:	1860      	adds	r0, r4, r1
 8009284:	4283      	cmp	r3, r0
 8009286:	d103      	bne.n	8009290 <_free_r+0x88>
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	1841      	adds	r1, r0, r1
 800928e:	6021      	str	r1, [r4, #0]
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	6054      	str	r4, [r2, #4]
 8009294:	e7ca      	b.n	800922c <_free_r+0x24>
 8009296:	46c0      	nop			; (mov r8, r8)
 8009298:	20000e30 	.word	0x20000e30

0800929c <sbrk_aligned>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4e0f      	ldr	r6, [pc, #60]	; (80092dc <sbrk_aligned+0x40>)
 80092a0:	000d      	movs	r5, r1
 80092a2:	6831      	ldr	r1, [r6, #0]
 80092a4:	0004      	movs	r4, r0
 80092a6:	2900      	cmp	r1, #0
 80092a8:	d102      	bne.n	80092b0 <sbrk_aligned+0x14>
 80092aa:	f000 f925 	bl	80094f8 <_sbrk_r>
 80092ae:	6030      	str	r0, [r6, #0]
 80092b0:	0029      	movs	r1, r5
 80092b2:	0020      	movs	r0, r4
 80092b4:	f000 f920 	bl	80094f8 <_sbrk_r>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d00a      	beq.n	80092d2 <sbrk_aligned+0x36>
 80092bc:	2303      	movs	r3, #3
 80092be:	1cc5      	adds	r5, r0, #3
 80092c0:	439d      	bics	r5, r3
 80092c2:	42a8      	cmp	r0, r5
 80092c4:	d007      	beq.n	80092d6 <sbrk_aligned+0x3a>
 80092c6:	1a29      	subs	r1, r5, r0
 80092c8:	0020      	movs	r0, r4
 80092ca:	f000 f915 	bl	80094f8 <_sbrk_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d101      	bne.n	80092d6 <sbrk_aligned+0x3a>
 80092d2:	2501      	movs	r5, #1
 80092d4:	426d      	negs	r5, r5
 80092d6:	0028      	movs	r0, r5
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	20000e34 	.word	0x20000e34

080092e0 <_malloc_r>:
 80092e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092e2:	2203      	movs	r2, #3
 80092e4:	1ccb      	adds	r3, r1, #3
 80092e6:	4393      	bics	r3, r2
 80092e8:	3308      	adds	r3, #8
 80092ea:	0006      	movs	r6, r0
 80092ec:	001f      	movs	r7, r3
 80092ee:	2b0c      	cmp	r3, #12
 80092f0:	d232      	bcs.n	8009358 <_malloc_r+0x78>
 80092f2:	270c      	movs	r7, #12
 80092f4:	42b9      	cmp	r1, r7
 80092f6:	d831      	bhi.n	800935c <_malloc_r+0x7c>
 80092f8:	0030      	movs	r0, r6
 80092fa:	f000 fc67 	bl	8009bcc <__malloc_lock>
 80092fe:	4d32      	ldr	r5, [pc, #200]	; (80093c8 <_malloc_r+0xe8>)
 8009300:	682b      	ldr	r3, [r5, #0]
 8009302:	001c      	movs	r4, r3
 8009304:	2c00      	cmp	r4, #0
 8009306:	d12e      	bne.n	8009366 <_malloc_r+0x86>
 8009308:	0039      	movs	r1, r7
 800930a:	0030      	movs	r0, r6
 800930c:	f7ff ffc6 	bl	800929c <sbrk_aligned>
 8009310:	0004      	movs	r4, r0
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d11e      	bne.n	8009354 <_malloc_r+0x74>
 8009316:	682c      	ldr	r4, [r5, #0]
 8009318:	0025      	movs	r5, r4
 800931a:	2d00      	cmp	r5, #0
 800931c:	d14a      	bne.n	80093b4 <_malloc_r+0xd4>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	0029      	movs	r1, r5
 8009322:	18e3      	adds	r3, r4, r3
 8009324:	0030      	movs	r0, r6
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	f000 f8e6 	bl	80094f8 <_sbrk_r>
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	4283      	cmp	r3, r0
 8009330:	d143      	bne.n	80093ba <_malloc_r+0xda>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	3703      	adds	r7, #3
 8009336:	1aff      	subs	r7, r7, r3
 8009338:	2303      	movs	r3, #3
 800933a:	439f      	bics	r7, r3
 800933c:	3708      	adds	r7, #8
 800933e:	2f0c      	cmp	r7, #12
 8009340:	d200      	bcs.n	8009344 <_malloc_r+0x64>
 8009342:	270c      	movs	r7, #12
 8009344:	0039      	movs	r1, r7
 8009346:	0030      	movs	r0, r6
 8009348:	f7ff ffa8 	bl	800929c <sbrk_aligned>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d034      	beq.n	80093ba <_malloc_r+0xda>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	19df      	adds	r7, r3, r7
 8009354:	6027      	str	r7, [r4, #0]
 8009356:	e013      	b.n	8009380 <_malloc_r+0xa0>
 8009358:	2b00      	cmp	r3, #0
 800935a:	dacb      	bge.n	80092f4 <_malloc_r+0x14>
 800935c:	230c      	movs	r3, #12
 800935e:	2500      	movs	r5, #0
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	0028      	movs	r0, r5
 8009364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	1bd1      	subs	r1, r2, r7
 800936a:	d420      	bmi.n	80093ae <_malloc_r+0xce>
 800936c:	290b      	cmp	r1, #11
 800936e:	d917      	bls.n	80093a0 <_malloc_r+0xc0>
 8009370:	19e2      	adds	r2, r4, r7
 8009372:	6027      	str	r7, [r4, #0]
 8009374:	42a3      	cmp	r3, r4
 8009376:	d111      	bne.n	800939c <_malloc_r+0xbc>
 8009378:	602a      	str	r2, [r5, #0]
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	6011      	str	r1, [r2, #0]
 800937e:	6053      	str	r3, [r2, #4]
 8009380:	0030      	movs	r0, r6
 8009382:	0025      	movs	r5, r4
 8009384:	f000 fc2a 	bl	8009bdc <__malloc_unlock>
 8009388:	2207      	movs	r2, #7
 800938a:	350b      	adds	r5, #11
 800938c:	1d23      	adds	r3, r4, #4
 800938e:	4395      	bics	r5, r2
 8009390:	1aea      	subs	r2, r5, r3
 8009392:	429d      	cmp	r5, r3
 8009394:	d0e5      	beq.n	8009362 <_malloc_r+0x82>
 8009396:	1b5b      	subs	r3, r3, r5
 8009398:	50a3      	str	r3, [r4, r2]
 800939a:	e7e2      	b.n	8009362 <_malloc_r+0x82>
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	e7ec      	b.n	800937a <_malloc_r+0x9a>
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	42a3      	cmp	r3, r4
 80093a4:	d101      	bne.n	80093aa <_malloc_r+0xca>
 80093a6:	602a      	str	r2, [r5, #0]
 80093a8:	e7ea      	b.n	8009380 <_malloc_r+0xa0>
 80093aa:	605a      	str	r2, [r3, #4]
 80093ac:	e7e8      	b.n	8009380 <_malloc_r+0xa0>
 80093ae:	0023      	movs	r3, r4
 80093b0:	6864      	ldr	r4, [r4, #4]
 80093b2:	e7a7      	b.n	8009304 <_malloc_r+0x24>
 80093b4:	002c      	movs	r4, r5
 80093b6:	686d      	ldr	r5, [r5, #4]
 80093b8:	e7af      	b.n	800931a <_malloc_r+0x3a>
 80093ba:	230c      	movs	r3, #12
 80093bc:	0030      	movs	r0, r6
 80093be:	6033      	str	r3, [r6, #0]
 80093c0:	f000 fc0c 	bl	8009bdc <__malloc_unlock>
 80093c4:	e7cd      	b.n	8009362 <_malloc_r+0x82>
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	20000e30 	.word	0x20000e30

080093cc <iprintf>:
 80093cc:	b40f      	push	{r0, r1, r2, r3}
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <iprintf+0x30>)
 80093d0:	b513      	push	{r0, r1, r4, lr}
 80093d2:	681c      	ldr	r4, [r3, #0]
 80093d4:	2c00      	cmp	r4, #0
 80093d6:	d005      	beq.n	80093e4 <iprintf+0x18>
 80093d8:	69a3      	ldr	r3, [r4, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <iprintf+0x18>
 80093de:	0020      	movs	r0, r4
 80093e0:	f000 fad2 	bl	8009988 <__sinit>
 80093e4:	ab05      	add	r3, sp, #20
 80093e6:	0020      	movs	r0, r4
 80093e8:	9a04      	ldr	r2, [sp, #16]
 80093ea:	68a1      	ldr	r1, [r4, #8]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	f000 fd87 	bl	8009f00 <_vfiprintf_r>
 80093f2:	bc16      	pop	{r1, r2, r4}
 80093f4:	bc08      	pop	{r3}
 80093f6:	b004      	add	sp, #16
 80093f8:	4718      	bx	r3
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	200004b0 	.word	0x200004b0

08009400 <_puts_r>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	0005      	movs	r5, r0
 8009404:	000e      	movs	r6, r1
 8009406:	2800      	cmp	r0, #0
 8009408:	d004      	beq.n	8009414 <_puts_r+0x14>
 800940a:	6983      	ldr	r3, [r0, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <_puts_r+0x14>
 8009410:	f000 faba 	bl	8009988 <__sinit>
 8009414:	69ab      	ldr	r3, [r5, #24]
 8009416:	68ac      	ldr	r4, [r5, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d102      	bne.n	8009422 <_puts_r+0x22>
 800941c:	0028      	movs	r0, r5
 800941e:	f000 fab3 	bl	8009988 <__sinit>
 8009422:	4b2d      	ldr	r3, [pc, #180]	; (80094d8 <_puts_r+0xd8>)
 8009424:	429c      	cmp	r4, r3
 8009426:	d122      	bne.n	800946e <_puts_r+0x6e>
 8009428:	686c      	ldr	r4, [r5, #4]
 800942a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800942c:	07db      	lsls	r3, r3, #31
 800942e:	d405      	bmi.n	800943c <_puts_r+0x3c>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	059b      	lsls	r3, r3, #22
 8009434:	d402      	bmi.n	800943c <_puts_r+0x3c>
 8009436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009438:	f000 fb59 	bl	8009aee <__retarget_lock_acquire_recursive>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	071b      	lsls	r3, r3, #28
 8009440:	d502      	bpl.n	8009448 <_puts_r+0x48>
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d129      	bne.n	800949c <_puts_r+0x9c>
 8009448:	0021      	movs	r1, r4
 800944a:	0028      	movs	r0, r5
 800944c:	f000 f8f6 	bl	800963c <__swsetup_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	d023      	beq.n	800949c <_puts_r+0x9c>
 8009454:	2501      	movs	r5, #1
 8009456:	426d      	negs	r5, r5
 8009458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800945a:	07db      	lsls	r3, r3, #31
 800945c:	d405      	bmi.n	800946a <_puts_r+0x6a>
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	059b      	lsls	r3, r3, #22
 8009462:	d402      	bmi.n	800946a <_puts_r+0x6a>
 8009464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009466:	f000 fb43 	bl	8009af0 <__retarget_lock_release_recursive>
 800946a:	0028      	movs	r0, r5
 800946c:	bd70      	pop	{r4, r5, r6, pc}
 800946e:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <_puts_r+0xdc>)
 8009470:	429c      	cmp	r4, r3
 8009472:	d101      	bne.n	8009478 <_puts_r+0x78>
 8009474:	68ac      	ldr	r4, [r5, #8]
 8009476:	e7d8      	b.n	800942a <_puts_r+0x2a>
 8009478:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <_puts_r+0xe0>)
 800947a:	429c      	cmp	r4, r3
 800947c:	d1d5      	bne.n	800942a <_puts_r+0x2a>
 800947e:	68ec      	ldr	r4, [r5, #12]
 8009480:	e7d3      	b.n	800942a <_puts_r+0x2a>
 8009482:	3601      	adds	r6, #1
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	da04      	bge.n	8009494 <_puts_r+0x94>
 800948a:	69a2      	ldr	r2, [r4, #24]
 800948c:	429a      	cmp	r2, r3
 800948e:	dc16      	bgt.n	80094be <_puts_r+0xbe>
 8009490:	290a      	cmp	r1, #10
 8009492:	d014      	beq.n	80094be <_puts_r+0xbe>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	6022      	str	r2, [r4, #0]
 800949a:	7019      	strb	r1, [r3, #0]
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	7831      	ldrb	r1, [r6, #0]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	2900      	cmp	r1, #0
 80094a4:	d1ed      	bne.n	8009482 <_puts_r+0x82>
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da0f      	bge.n	80094cc <_puts_r+0xcc>
 80094ac:	0028      	movs	r0, r5
 80094ae:	0022      	movs	r2, r4
 80094b0:	310a      	adds	r1, #10
 80094b2:	f000 f86d 	bl	8009590 <__swbuf_r>
 80094b6:	250a      	movs	r5, #10
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d1cd      	bne.n	8009458 <_puts_r+0x58>
 80094bc:	e7ca      	b.n	8009454 <_puts_r+0x54>
 80094be:	0022      	movs	r2, r4
 80094c0:	0028      	movs	r0, r5
 80094c2:	f000 f865 	bl	8009590 <__swbuf_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d1e8      	bne.n	800949c <_puts_r+0x9c>
 80094ca:	e7c3      	b.n	8009454 <_puts_r+0x54>
 80094cc:	250a      	movs	r5, #10
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	6022      	str	r2, [r4, #0]
 80094d4:	701d      	strb	r5, [r3, #0]
 80094d6:	e7bf      	b.n	8009458 <_puts_r+0x58>
 80094d8:	0800ae70 	.word	0x0800ae70
 80094dc:	0800ae90 	.word	0x0800ae90
 80094e0:	0800ae50 	.word	0x0800ae50

080094e4 <puts>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <puts+0x10>)
 80094e8:	0001      	movs	r1, r0
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	f7ff ff88 	bl	8009400 <_puts_r>
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	200004b0 	.word	0x200004b0

080094f8 <_sbrk_r>:
 80094f8:	2300      	movs	r3, #0
 80094fa:	b570      	push	{r4, r5, r6, lr}
 80094fc:	4d06      	ldr	r5, [pc, #24]	; (8009518 <_sbrk_r+0x20>)
 80094fe:	0004      	movs	r4, r0
 8009500:	0008      	movs	r0, r1
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	f7fa fcca 	bl	8003e9c <_sbrk>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d103      	bne.n	8009514 <_sbrk_r+0x1c>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d000      	beq.n	8009514 <_sbrk_r+0x1c>
 8009512:	6023      	str	r3, [r4, #0]
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	20000e3c 	.word	0x20000e3c

0800951c <siprintf>:
 800951c:	b40e      	push	{r1, r2, r3}
 800951e:	b500      	push	{lr}
 8009520:	490b      	ldr	r1, [pc, #44]	; (8009550 <siprintf+0x34>)
 8009522:	b09c      	sub	sp, #112	; 0x70
 8009524:	ab1d      	add	r3, sp, #116	; 0x74
 8009526:	9002      	str	r0, [sp, #8]
 8009528:	9006      	str	r0, [sp, #24]
 800952a:	9107      	str	r1, [sp, #28]
 800952c:	9104      	str	r1, [sp, #16]
 800952e:	4809      	ldr	r0, [pc, #36]	; (8009554 <siprintf+0x38>)
 8009530:	4909      	ldr	r1, [pc, #36]	; (8009558 <siprintf+0x3c>)
 8009532:	cb04      	ldmia	r3!, {r2}
 8009534:	9105      	str	r1, [sp, #20]
 8009536:	6800      	ldr	r0, [r0, #0]
 8009538:	a902      	add	r1, sp, #8
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	f000 fbb8 	bl	8009cb0 <_svfiprintf_r>
 8009540:	2300      	movs	r3, #0
 8009542:	9a02      	ldr	r2, [sp, #8]
 8009544:	7013      	strb	r3, [r2, #0]
 8009546:	b01c      	add	sp, #112	; 0x70
 8009548:	bc08      	pop	{r3}
 800954a:	b003      	add	sp, #12
 800954c:	4718      	bx	r3
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	7fffffff 	.word	0x7fffffff
 8009554:	200004b0 	.word	0x200004b0
 8009558:	ffff0208 	.word	0xffff0208

0800955c <time>:
 800955c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800955e:	4b0b      	ldr	r3, [pc, #44]	; (800958c <time+0x30>)
 8009560:	0004      	movs	r4, r0
 8009562:	2200      	movs	r2, #0
 8009564:	4669      	mov	r1, sp
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	f000 faae 	bl	8009ac8 <_gettimeofday_r>
 800956c:	2800      	cmp	r0, #0
 800956e:	da04      	bge.n	800957a <time+0x1e>
 8009570:	2201      	movs	r2, #1
 8009572:	4252      	negs	r2, r2
 8009574:	17d3      	asrs	r3, r2, #31
 8009576:	9200      	str	r2, [sp, #0]
 8009578:	9301      	str	r3, [sp, #4]
 800957a:	9800      	ldr	r0, [sp, #0]
 800957c:	9901      	ldr	r1, [sp, #4]
 800957e:	2c00      	cmp	r4, #0
 8009580:	d001      	beq.n	8009586 <time+0x2a>
 8009582:	6020      	str	r0, [r4, #0]
 8009584:	6061      	str	r1, [r4, #4]
 8009586:	b004      	add	sp, #16
 8009588:	bd10      	pop	{r4, pc}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	200004b0 	.word	0x200004b0

08009590 <__swbuf_r>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	0005      	movs	r5, r0
 8009594:	000e      	movs	r6, r1
 8009596:	0014      	movs	r4, r2
 8009598:	2800      	cmp	r0, #0
 800959a:	d004      	beq.n	80095a6 <__swbuf_r+0x16>
 800959c:	6983      	ldr	r3, [r0, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <__swbuf_r+0x16>
 80095a2:	f000 f9f1 	bl	8009988 <__sinit>
 80095a6:	4b22      	ldr	r3, [pc, #136]	; (8009630 <__swbuf_r+0xa0>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d12e      	bne.n	800960a <__swbuf_r+0x7a>
 80095ac:	686c      	ldr	r4, [r5, #4]
 80095ae:	69a3      	ldr	r3, [r4, #24]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	071b      	lsls	r3, r3, #28
 80095b6:	d532      	bpl.n	800961e <__swbuf_r+0x8e>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d02f      	beq.n	800961e <__swbuf_r+0x8e>
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6922      	ldr	r2, [r4, #16]
 80095c2:	b2f7      	uxtb	r7, r6
 80095c4:	1a98      	subs	r0, r3, r2
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	b2f6      	uxtb	r6, r6
 80095ca:	4283      	cmp	r3, r0
 80095cc:	dc05      	bgt.n	80095da <__swbuf_r+0x4a>
 80095ce:	0021      	movs	r1, r4
 80095d0:	0028      	movs	r0, r5
 80095d2:	f000 f937 	bl	8009844 <_fflush_r>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d127      	bne.n	800962a <__swbuf_r+0x9a>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	3001      	adds	r0, #1
 80095de:	3b01      	subs	r3, #1
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	701f      	strb	r7, [r3, #0]
 80095ea:	6963      	ldr	r3, [r4, #20]
 80095ec:	4283      	cmp	r3, r0
 80095ee:	d004      	beq.n	80095fa <__swbuf_r+0x6a>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d507      	bpl.n	8009606 <__swbuf_r+0x76>
 80095f6:	2e0a      	cmp	r6, #10
 80095f8:	d105      	bne.n	8009606 <__swbuf_r+0x76>
 80095fa:	0021      	movs	r1, r4
 80095fc:	0028      	movs	r0, r5
 80095fe:	f000 f921 	bl	8009844 <_fflush_r>
 8009602:	2800      	cmp	r0, #0
 8009604:	d111      	bne.n	800962a <__swbuf_r+0x9a>
 8009606:	0030      	movs	r0, r6
 8009608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960a:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <__swbuf_r+0xa4>)
 800960c:	429c      	cmp	r4, r3
 800960e:	d101      	bne.n	8009614 <__swbuf_r+0x84>
 8009610:	68ac      	ldr	r4, [r5, #8]
 8009612:	e7cc      	b.n	80095ae <__swbuf_r+0x1e>
 8009614:	4b08      	ldr	r3, [pc, #32]	; (8009638 <__swbuf_r+0xa8>)
 8009616:	429c      	cmp	r4, r3
 8009618:	d1c9      	bne.n	80095ae <__swbuf_r+0x1e>
 800961a:	68ec      	ldr	r4, [r5, #12]
 800961c:	e7c7      	b.n	80095ae <__swbuf_r+0x1e>
 800961e:	0021      	movs	r1, r4
 8009620:	0028      	movs	r0, r5
 8009622:	f000 f80b 	bl	800963c <__swsetup_r>
 8009626:	2800      	cmp	r0, #0
 8009628:	d0c9      	beq.n	80095be <__swbuf_r+0x2e>
 800962a:	2601      	movs	r6, #1
 800962c:	4276      	negs	r6, r6
 800962e:	e7ea      	b.n	8009606 <__swbuf_r+0x76>
 8009630:	0800ae70 	.word	0x0800ae70
 8009634:	0800ae90 	.word	0x0800ae90
 8009638:	0800ae50 	.word	0x0800ae50

0800963c <__swsetup_r>:
 800963c:	4b37      	ldr	r3, [pc, #220]	; (800971c <__swsetup_r+0xe0>)
 800963e:	b570      	push	{r4, r5, r6, lr}
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	0006      	movs	r6, r0
 8009644:	000c      	movs	r4, r1
 8009646:	2d00      	cmp	r5, #0
 8009648:	d005      	beq.n	8009656 <__swsetup_r+0x1a>
 800964a:	69ab      	ldr	r3, [r5, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <__swsetup_r+0x1a>
 8009650:	0028      	movs	r0, r5
 8009652:	f000 f999 	bl	8009988 <__sinit>
 8009656:	4b32      	ldr	r3, [pc, #200]	; (8009720 <__swsetup_r+0xe4>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d10f      	bne.n	800967c <__swsetup_r+0x40>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	230c      	movs	r3, #12
 8009660:	5ee2      	ldrsh	r2, [r4, r3]
 8009662:	b293      	uxth	r3, r2
 8009664:	0711      	lsls	r1, r2, #28
 8009666:	d42d      	bmi.n	80096c4 <__swsetup_r+0x88>
 8009668:	06d9      	lsls	r1, r3, #27
 800966a:	d411      	bmi.n	8009690 <__swsetup_r+0x54>
 800966c:	2309      	movs	r3, #9
 800966e:	2001      	movs	r0, #1
 8009670:	6033      	str	r3, [r6, #0]
 8009672:	3337      	adds	r3, #55	; 0x37
 8009674:	4313      	orrs	r3, r2
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	4240      	negs	r0, r0
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <__swsetup_r+0xe8>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d101      	bne.n	8009686 <__swsetup_r+0x4a>
 8009682:	68ac      	ldr	r4, [r5, #8]
 8009684:	e7eb      	b.n	800965e <__swsetup_r+0x22>
 8009686:	4b28      	ldr	r3, [pc, #160]	; (8009728 <__swsetup_r+0xec>)
 8009688:	429c      	cmp	r4, r3
 800968a:	d1e8      	bne.n	800965e <__swsetup_r+0x22>
 800968c:	68ec      	ldr	r4, [r5, #12]
 800968e:	e7e6      	b.n	800965e <__swsetup_r+0x22>
 8009690:	075b      	lsls	r3, r3, #29
 8009692:	d513      	bpl.n	80096bc <__swsetup_r+0x80>
 8009694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009696:	2900      	cmp	r1, #0
 8009698:	d008      	beq.n	80096ac <__swsetup_r+0x70>
 800969a:	0023      	movs	r3, r4
 800969c:	3344      	adds	r3, #68	; 0x44
 800969e:	4299      	cmp	r1, r3
 80096a0:	d002      	beq.n	80096a8 <__swsetup_r+0x6c>
 80096a2:	0030      	movs	r0, r6
 80096a4:	f7ff fdb0 	bl	8009208 <_free_r>
 80096a8:	2300      	movs	r3, #0
 80096aa:	6363      	str	r3, [r4, #52]	; 0x34
 80096ac:	2224      	movs	r2, #36	; 0x24
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	4393      	bics	r3, r2
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	2300      	movs	r3, #0
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2308      	movs	r3, #8
 80096be:	89a2      	ldrh	r2, [r4, #12]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	81a3      	strh	r3, [r4, #12]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <__swsetup_r+0xa6>
 80096ca:	21a0      	movs	r1, #160	; 0xa0
 80096cc:	2280      	movs	r2, #128	; 0x80
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	0089      	lsls	r1, r1, #2
 80096d2:	0092      	lsls	r2, r2, #2
 80096d4:	400b      	ands	r3, r1
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <__swsetup_r+0xa6>
 80096da:	0021      	movs	r1, r4
 80096dc:	0030      	movs	r0, r6
 80096de:	f000 fa31 	bl	8009b44 <__smakebuf_r>
 80096e2:	220c      	movs	r2, #12
 80096e4:	5ea3      	ldrsh	r3, [r4, r2]
 80096e6:	2001      	movs	r0, #1
 80096e8:	001a      	movs	r2, r3
 80096ea:	b299      	uxth	r1, r3
 80096ec:	4002      	ands	r2, r0
 80096ee:	4203      	tst	r3, r0
 80096f0:	d00f      	beq.n	8009712 <__swsetup_r+0xd6>
 80096f2:	2200      	movs	r2, #0
 80096f4:	60a2      	str	r2, [r4, #8]
 80096f6:	6962      	ldr	r2, [r4, #20]
 80096f8:	4252      	negs	r2, r2
 80096fa:	61a2      	str	r2, [r4, #24]
 80096fc:	2000      	movs	r0, #0
 80096fe:	6922      	ldr	r2, [r4, #16]
 8009700:	4282      	cmp	r2, r0
 8009702:	d1ba      	bne.n	800967a <__swsetup_r+0x3e>
 8009704:	060a      	lsls	r2, r1, #24
 8009706:	d5b8      	bpl.n	800967a <__swsetup_r+0x3e>
 8009708:	2240      	movs	r2, #64	; 0x40
 800970a:	4313      	orrs	r3, r2
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	3801      	subs	r0, #1
 8009710:	e7b3      	b.n	800967a <__swsetup_r+0x3e>
 8009712:	0788      	lsls	r0, r1, #30
 8009714:	d400      	bmi.n	8009718 <__swsetup_r+0xdc>
 8009716:	6962      	ldr	r2, [r4, #20]
 8009718:	60a2      	str	r2, [r4, #8]
 800971a:	e7ef      	b.n	80096fc <__swsetup_r+0xc0>
 800971c:	200004b0 	.word	0x200004b0
 8009720:	0800ae70 	.word	0x0800ae70
 8009724:	0800ae90 	.word	0x0800ae90
 8009728:	0800ae50 	.word	0x0800ae50

0800972c <__sflush_r>:
 800972c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800972e:	898b      	ldrh	r3, [r1, #12]
 8009730:	0005      	movs	r5, r0
 8009732:	000c      	movs	r4, r1
 8009734:	071a      	lsls	r2, r3, #28
 8009736:	d45f      	bmi.n	80097f8 <__sflush_r+0xcc>
 8009738:	684a      	ldr	r2, [r1, #4]
 800973a:	2a00      	cmp	r2, #0
 800973c:	dc04      	bgt.n	8009748 <__sflush_r+0x1c>
 800973e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009740:	2a00      	cmp	r2, #0
 8009742:	dc01      	bgt.n	8009748 <__sflush_r+0x1c>
 8009744:	2000      	movs	r0, #0
 8009746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009748:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800974a:	2f00      	cmp	r7, #0
 800974c:	d0fa      	beq.n	8009744 <__sflush_r+0x18>
 800974e:	2200      	movs	r2, #0
 8009750:	2180      	movs	r1, #128	; 0x80
 8009752:	682e      	ldr	r6, [r5, #0]
 8009754:	602a      	str	r2, [r5, #0]
 8009756:	001a      	movs	r2, r3
 8009758:	0149      	lsls	r1, r1, #5
 800975a:	400a      	ands	r2, r1
 800975c:	420b      	tst	r3, r1
 800975e:	d034      	beq.n	80097ca <__sflush_r+0x9e>
 8009760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	075b      	lsls	r3, r3, #29
 8009766:	d506      	bpl.n	8009776 <__sflush_r+0x4a>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	1ac0      	subs	r0, r0, r3
 800976c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <__sflush_r+0x4a>
 8009772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009774:	1ac0      	subs	r0, r0, r3
 8009776:	0002      	movs	r2, r0
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	2300      	movs	r3, #0
 800977c:	0028      	movs	r0, r5
 800977e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009780:	47b8      	blx	r7
 8009782:	89a1      	ldrh	r1, [r4, #12]
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d106      	bne.n	8009796 <__sflush_r+0x6a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	2b1d      	cmp	r3, #29
 800978c:	d831      	bhi.n	80097f2 <__sflush_r+0xc6>
 800978e:	4a2c      	ldr	r2, [pc, #176]	; (8009840 <__sflush_r+0x114>)
 8009790:	40da      	lsrs	r2, r3
 8009792:	07d3      	lsls	r3, r2, #31
 8009794:	d52d      	bpl.n	80097f2 <__sflush_r+0xc6>
 8009796:	2300      	movs	r3, #0
 8009798:	6063      	str	r3, [r4, #4]
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	04cb      	lsls	r3, r1, #19
 80097a0:	d505      	bpl.n	80097ae <__sflush_r+0x82>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	d102      	bne.n	80097ac <__sflush_r+0x80>
 80097a6:	682b      	ldr	r3, [r5, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d100      	bne.n	80097ae <__sflush_r+0x82>
 80097ac:	6560      	str	r0, [r4, #84]	; 0x54
 80097ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097b0:	602e      	str	r6, [r5, #0]
 80097b2:	2900      	cmp	r1, #0
 80097b4:	d0c6      	beq.n	8009744 <__sflush_r+0x18>
 80097b6:	0023      	movs	r3, r4
 80097b8:	3344      	adds	r3, #68	; 0x44
 80097ba:	4299      	cmp	r1, r3
 80097bc:	d002      	beq.n	80097c4 <__sflush_r+0x98>
 80097be:	0028      	movs	r0, r5
 80097c0:	f7ff fd22 	bl	8009208 <_free_r>
 80097c4:	2000      	movs	r0, #0
 80097c6:	6360      	str	r0, [r4, #52]	; 0x34
 80097c8:	e7bd      	b.n	8009746 <__sflush_r+0x1a>
 80097ca:	2301      	movs	r3, #1
 80097cc:	0028      	movs	r0, r5
 80097ce:	6a21      	ldr	r1, [r4, #32]
 80097d0:	47b8      	blx	r7
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	d1c5      	bne.n	8009762 <__sflush_r+0x36>
 80097d6:	682b      	ldr	r3, [r5, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0c2      	beq.n	8009762 <__sflush_r+0x36>
 80097dc:	2b1d      	cmp	r3, #29
 80097de:	d001      	beq.n	80097e4 <__sflush_r+0xb8>
 80097e0:	2b16      	cmp	r3, #22
 80097e2:	d101      	bne.n	80097e8 <__sflush_r+0xbc>
 80097e4:	602e      	str	r6, [r5, #0]
 80097e6:	e7ad      	b.n	8009744 <__sflush_r+0x18>
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	89a2      	ldrh	r2, [r4, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	e7a9      	b.n	8009746 <__sflush_r+0x1a>
 80097f2:	2340      	movs	r3, #64	; 0x40
 80097f4:	430b      	orrs	r3, r1
 80097f6:	e7fa      	b.n	80097ee <__sflush_r+0xc2>
 80097f8:	690f      	ldr	r7, [r1, #16]
 80097fa:	2f00      	cmp	r7, #0
 80097fc:	d0a2      	beq.n	8009744 <__sflush_r+0x18>
 80097fe:	680a      	ldr	r2, [r1, #0]
 8009800:	600f      	str	r7, [r1, #0]
 8009802:	1bd2      	subs	r2, r2, r7
 8009804:	9201      	str	r2, [sp, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	079b      	lsls	r3, r3, #30
 800980a:	d100      	bne.n	800980e <__sflush_r+0xe2>
 800980c:	694a      	ldr	r2, [r1, #20]
 800980e:	60a2      	str	r2, [r4, #8]
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	dc00      	bgt.n	8009818 <__sflush_r+0xec>
 8009816:	e795      	b.n	8009744 <__sflush_r+0x18>
 8009818:	003a      	movs	r2, r7
 800981a:	0028      	movs	r0, r5
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	6a21      	ldr	r1, [r4, #32]
 8009820:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009822:	47b0      	blx	r6
 8009824:	2800      	cmp	r0, #0
 8009826:	dc06      	bgt.n	8009836 <__sflush_r+0x10a>
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	2001      	movs	r0, #1
 800982c:	89a2      	ldrh	r2, [r4, #12]
 800982e:	4240      	negs	r0, r0
 8009830:	4313      	orrs	r3, r2
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	e787      	b.n	8009746 <__sflush_r+0x1a>
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	183f      	adds	r7, r7, r0
 800983a:	1a1b      	subs	r3, r3, r0
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	e7e7      	b.n	8009810 <__sflush_r+0xe4>
 8009840:	20400001 	.word	0x20400001

08009844 <_fflush_r>:
 8009844:	690b      	ldr	r3, [r1, #16]
 8009846:	b570      	push	{r4, r5, r6, lr}
 8009848:	0005      	movs	r5, r0
 800984a:	000c      	movs	r4, r1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d102      	bne.n	8009856 <_fflush_r+0x12>
 8009850:	2500      	movs	r5, #0
 8009852:	0028      	movs	r0, r5
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	2800      	cmp	r0, #0
 8009858:	d004      	beq.n	8009864 <_fflush_r+0x20>
 800985a:	6983      	ldr	r3, [r0, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <_fflush_r+0x20>
 8009860:	f000 f892 	bl	8009988 <__sinit>
 8009864:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <_fflush_r+0x74>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d11b      	bne.n	80098a2 <_fflush_r+0x5e>
 800986a:	686c      	ldr	r4, [r5, #4]
 800986c:	220c      	movs	r2, #12
 800986e:	5ea3      	ldrsh	r3, [r4, r2]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0ed      	beq.n	8009850 <_fflush_r+0xc>
 8009874:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009876:	07d2      	lsls	r2, r2, #31
 8009878:	d404      	bmi.n	8009884 <_fflush_r+0x40>
 800987a:	059b      	lsls	r3, r3, #22
 800987c:	d402      	bmi.n	8009884 <_fflush_r+0x40>
 800987e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009880:	f000 f935 	bl	8009aee <__retarget_lock_acquire_recursive>
 8009884:	0028      	movs	r0, r5
 8009886:	0021      	movs	r1, r4
 8009888:	f7ff ff50 	bl	800972c <__sflush_r>
 800988c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800988e:	0005      	movs	r5, r0
 8009890:	07db      	lsls	r3, r3, #31
 8009892:	d4de      	bmi.n	8009852 <_fflush_r+0xe>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	059b      	lsls	r3, r3, #22
 8009898:	d4db      	bmi.n	8009852 <_fflush_r+0xe>
 800989a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800989c:	f000 f928 	bl	8009af0 <__retarget_lock_release_recursive>
 80098a0:	e7d7      	b.n	8009852 <_fflush_r+0xe>
 80098a2:	4b06      	ldr	r3, [pc, #24]	; (80098bc <_fflush_r+0x78>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	d101      	bne.n	80098ac <_fflush_r+0x68>
 80098a8:	68ac      	ldr	r4, [r5, #8]
 80098aa:	e7df      	b.n	800986c <_fflush_r+0x28>
 80098ac:	4b04      	ldr	r3, [pc, #16]	; (80098c0 <_fflush_r+0x7c>)
 80098ae:	429c      	cmp	r4, r3
 80098b0:	d1dc      	bne.n	800986c <_fflush_r+0x28>
 80098b2:	68ec      	ldr	r4, [r5, #12]
 80098b4:	e7da      	b.n	800986c <_fflush_r+0x28>
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	0800ae70 	.word	0x0800ae70
 80098bc:	0800ae90 	.word	0x0800ae90
 80098c0:	0800ae50 	.word	0x0800ae50

080098c4 <std>:
 80098c4:	2300      	movs	r3, #0
 80098c6:	b510      	push	{r4, lr}
 80098c8:	0004      	movs	r4, r0
 80098ca:	6003      	str	r3, [r0, #0]
 80098cc:	6043      	str	r3, [r0, #4]
 80098ce:	6083      	str	r3, [r0, #8]
 80098d0:	8181      	strh	r1, [r0, #12]
 80098d2:	6643      	str	r3, [r0, #100]	; 0x64
 80098d4:	0019      	movs	r1, r3
 80098d6:	81c2      	strh	r2, [r0, #14]
 80098d8:	6103      	str	r3, [r0, #16]
 80098da:	6143      	str	r3, [r0, #20]
 80098dc:	6183      	str	r3, [r0, #24]
 80098de:	2208      	movs	r2, #8
 80098e0:	305c      	adds	r0, #92	; 0x5c
 80098e2:	f7ff fc5d 	bl	80091a0 <memset>
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <std+0x38>)
 80098e8:	6224      	str	r4, [r4, #32]
 80098ea:	6263      	str	r3, [r4, #36]	; 0x24
 80098ec:	4b04      	ldr	r3, [pc, #16]	; (8009900 <std+0x3c>)
 80098ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80098f0:	4b04      	ldr	r3, [pc, #16]	; (8009904 <std+0x40>)
 80098f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <std+0x44>)
 80098f6:	6323      	str	r3, [r4, #48]	; 0x30
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	0800a479 	.word	0x0800a479
 8009900:	0800a4a1 	.word	0x0800a4a1
 8009904:	0800a4d9 	.word	0x0800a4d9
 8009908:	0800a505 	.word	0x0800a505

0800990c <_cleanup_r>:
 800990c:	b510      	push	{r4, lr}
 800990e:	4902      	ldr	r1, [pc, #8]	; (8009918 <_cleanup_r+0xc>)
 8009910:	f000 f8ba 	bl	8009a88 <_fwalk_reent>
 8009914:	bd10      	pop	{r4, pc}
 8009916:	46c0      	nop			; (mov r8, r8)
 8009918:	08009845 	.word	0x08009845

0800991c <__sfmoreglue>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	2568      	movs	r5, #104	; 0x68
 8009920:	1e4a      	subs	r2, r1, #1
 8009922:	4355      	muls	r5, r2
 8009924:	000e      	movs	r6, r1
 8009926:	0029      	movs	r1, r5
 8009928:	3174      	adds	r1, #116	; 0x74
 800992a:	f7ff fcd9 	bl	80092e0 <_malloc_r>
 800992e:	1e04      	subs	r4, r0, #0
 8009930:	d008      	beq.n	8009944 <__sfmoreglue+0x28>
 8009932:	2100      	movs	r1, #0
 8009934:	002a      	movs	r2, r5
 8009936:	6001      	str	r1, [r0, #0]
 8009938:	6046      	str	r6, [r0, #4]
 800993a:	300c      	adds	r0, #12
 800993c:	60a0      	str	r0, [r4, #8]
 800993e:	3268      	adds	r2, #104	; 0x68
 8009940:	f7ff fc2e 	bl	80091a0 <memset>
 8009944:	0020      	movs	r0, r4
 8009946:	bd70      	pop	{r4, r5, r6, pc}

08009948 <__sfp_lock_acquire>:
 8009948:	b510      	push	{r4, lr}
 800994a:	4802      	ldr	r0, [pc, #8]	; (8009954 <__sfp_lock_acquire+0xc>)
 800994c:	f000 f8cf 	bl	8009aee <__retarget_lock_acquire_recursive>
 8009950:	bd10      	pop	{r4, pc}
 8009952:	46c0      	nop			; (mov r8, r8)
 8009954:	20000e39 	.word	0x20000e39

08009958 <__sfp_lock_release>:
 8009958:	b510      	push	{r4, lr}
 800995a:	4802      	ldr	r0, [pc, #8]	; (8009964 <__sfp_lock_release+0xc>)
 800995c:	f000 f8c8 	bl	8009af0 <__retarget_lock_release_recursive>
 8009960:	bd10      	pop	{r4, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	20000e39 	.word	0x20000e39

08009968 <__sinit_lock_acquire>:
 8009968:	b510      	push	{r4, lr}
 800996a:	4802      	ldr	r0, [pc, #8]	; (8009974 <__sinit_lock_acquire+0xc>)
 800996c:	f000 f8bf 	bl	8009aee <__retarget_lock_acquire_recursive>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	20000e3a 	.word	0x20000e3a

08009978 <__sinit_lock_release>:
 8009978:	b510      	push	{r4, lr}
 800997a:	4802      	ldr	r0, [pc, #8]	; (8009984 <__sinit_lock_release+0xc>)
 800997c:	f000 f8b8 	bl	8009af0 <__retarget_lock_release_recursive>
 8009980:	bd10      	pop	{r4, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	20000e3a 	.word	0x20000e3a

08009988 <__sinit>:
 8009988:	b513      	push	{r0, r1, r4, lr}
 800998a:	0004      	movs	r4, r0
 800998c:	f7ff ffec 	bl	8009968 <__sinit_lock_acquire>
 8009990:	69a3      	ldr	r3, [r4, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <__sinit+0x14>
 8009996:	f7ff ffef 	bl	8009978 <__sinit_lock_release>
 800999a:	bd13      	pop	{r0, r1, r4, pc}
 800999c:	64a3      	str	r3, [r4, #72]	; 0x48
 800999e:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099a0:	6523      	str	r3, [r4, #80]	; 0x50
 80099a2:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <__sinit+0x68>)
 80099a4:	4a13      	ldr	r2, [pc, #76]	; (80099f4 <__sinit+0x6c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d101      	bne.n	80099b4 <__sinit+0x2c>
 80099b0:	2301      	movs	r3, #1
 80099b2:	61a3      	str	r3, [r4, #24]
 80099b4:	0020      	movs	r0, r4
 80099b6:	f000 f81f 	bl	80099f8 <__sfp>
 80099ba:	6060      	str	r0, [r4, #4]
 80099bc:	0020      	movs	r0, r4
 80099be:	f000 f81b 	bl	80099f8 <__sfp>
 80099c2:	60a0      	str	r0, [r4, #8]
 80099c4:	0020      	movs	r0, r4
 80099c6:	f000 f817 	bl	80099f8 <__sfp>
 80099ca:	2200      	movs	r2, #0
 80099cc:	2104      	movs	r1, #4
 80099ce:	60e0      	str	r0, [r4, #12]
 80099d0:	6860      	ldr	r0, [r4, #4]
 80099d2:	f7ff ff77 	bl	80098c4 <std>
 80099d6:	2201      	movs	r2, #1
 80099d8:	2109      	movs	r1, #9
 80099da:	68a0      	ldr	r0, [r4, #8]
 80099dc:	f7ff ff72 	bl	80098c4 <std>
 80099e0:	2202      	movs	r2, #2
 80099e2:	2112      	movs	r1, #18
 80099e4:	68e0      	ldr	r0, [r4, #12]
 80099e6:	f7ff ff6d 	bl	80098c4 <std>
 80099ea:	2301      	movs	r3, #1
 80099ec:	61a3      	str	r3, [r4, #24]
 80099ee:	e7d2      	b.n	8009996 <__sinit+0xe>
 80099f0:	0800ae4c 	.word	0x0800ae4c
 80099f4:	0800990d 	.word	0x0800990d

080099f8 <__sfp>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	0007      	movs	r7, r0
 80099fc:	f7ff ffa4 	bl	8009948 <__sfp_lock_acquire>
 8009a00:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <__sfp+0x88>)
 8009a02:	681e      	ldr	r6, [r3, #0]
 8009a04:	69b3      	ldr	r3, [r6, #24]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <__sfp+0x18>
 8009a0a:	0030      	movs	r0, r6
 8009a0c:	f7ff ffbc 	bl	8009988 <__sinit>
 8009a10:	3648      	adds	r6, #72	; 0x48
 8009a12:	68b4      	ldr	r4, [r6, #8]
 8009a14:	6873      	ldr	r3, [r6, #4]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	d504      	bpl.n	8009a24 <__sfp+0x2c>
 8009a1a:	6833      	ldr	r3, [r6, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d022      	beq.n	8009a66 <__sfp+0x6e>
 8009a20:	6836      	ldr	r6, [r6, #0]
 8009a22:	e7f6      	b.n	8009a12 <__sfp+0x1a>
 8009a24:	220c      	movs	r2, #12
 8009a26:	5ea5      	ldrsh	r5, [r4, r2]
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	d11a      	bne.n	8009a62 <__sfp+0x6a>
 8009a2c:	0020      	movs	r0, r4
 8009a2e:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <__sfp+0x8c>)
 8009a30:	3058      	adds	r0, #88	; 0x58
 8009a32:	60e3      	str	r3, [r4, #12]
 8009a34:	6665      	str	r5, [r4, #100]	; 0x64
 8009a36:	f000 f859 	bl	8009aec <__retarget_lock_init_recursive>
 8009a3a:	f7ff ff8d 	bl	8009958 <__sfp_lock_release>
 8009a3e:	0020      	movs	r0, r4
 8009a40:	2208      	movs	r2, #8
 8009a42:	0029      	movs	r1, r5
 8009a44:	6025      	str	r5, [r4, #0]
 8009a46:	60a5      	str	r5, [r4, #8]
 8009a48:	6065      	str	r5, [r4, #4]
 8009a4a:	6125      	str	r5, [r4, #16]
 8009a4c:	6165      	str	r5, [r4, #20]
 8009a4e:	61a5      	str	r5, [r4, #24]
 8009a50:	305c      	adds	r0, #92	; 0x5c
 8009a52:	f7ff fba5 	bl	80091a0 <memset>
 8009a56:	6365      	str	r5, [r4, #52]	; 0x34
 8009a58:	63a5      	str	r5, [r4, #56]	; 0x38
 8009a5a:	64a5      	str	r5, [r4, #72]	; 0x48
 8009a5c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009a5e:	0020      	movs	r0, r4
 8009a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a62:	3468      	adds	r4, #104	; 0x68
 8009a64:	e7d7      	b.n	8009a16 <__sfp+0x1e>
 8009a66:	2104      	movs	r1, #4
 8009a68:	0038      	movs	r0, r7
 8009a6a:	f7ff ff57 	bl	800991c <__sfmoreglue>
 8009a6e:	1e04      	subs	r4, r0, #0
 8009a70:	6030      	str	r0, [r6, #0]
 8009a72:	d1d5      	bne.n	8009a20 <__sfp+0x28>
 8009a74:	f7ff ff70 	bl	8009958 <__sfp_lock_release>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	e7ef      	b.n	8009a5e <__sfp+0x66>
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	0800ae4c 	.word	0x0800ae4c
 8009a84:	ffff0001 	.word	0xffff0001

08009a88 <_fwalk_reent>:
 8009a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8a:	0004      	movs	r4, r0
 8009a8c:	0006      	movs	r6, r0
 8009a8e:	2700      	movs	r7, #0
 8009a90:	9101      	str	r1, [sp, #4]
 8009a92:	3448      	adds	r4, #72	; 0x48
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	68a5      	ldr	r5, [r4, #8]
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	9b00      	ldr	r3, [sp, #0]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	d504      	bpl.n	8009aac <_fwalk_reent+0x24>
 8009aa2:	6824      	ldr	r4, [r4, #0]
 8009aa4:	2c00      	cmp	r4, #0
 8009aa6:	d1f5      	bne.n	8009a94 <_fwalk_reent+0xc>
 8009aa8:	0038      	movs	r0, r7
 8009aaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aac:	89ab      	ldrh	r3, [r5, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d908      	bls.n	8009ac4 <_fwalk_reent+0x3c>
 8009ab2:	220e      	movs	r2, #14
 8009ab4:	5eab      	ldrsh	r3, [r5, r2]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	d004      	beq.n	8009ac4 <_fwalk_reent+0x3c>
 8009aba:	0029      	movs	r1, r5
 8009abc:	0030      	movs	r0, r6
 8009abe:	9b01      	ldr	r3, [sp, #4]
 8009ac0:	4798      	blx	r3
 8009ac2:	4307      	orrs	r7, r0
 8009ac4:	3568      	adds	r5, #104	; 0x68
 8009ac6:	e7e8      	b.n	8009a9a <_fwalk_reent+0x12>

08009ac8 <_gettimeofday_r>:
 8009ac8:	2300      	movs	r3, #0
 8009aca:	b570      	push	{r4, r5, r6, lr}
 8009acc:	4d06      	ldr	r5, [pc, #24]	; (8009ae8 <_gettimeofday_r+0x20>)
 8009ace:	0004      	movs	r4, r0
 8009ad0:	0008      	movs	r0, r1
 8009ad2:	0011      	movs	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f000 feab 	bl	800a830 <_gettimeofday>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d103      	bne.n	8009ae6 <_gettimeofday_r+0x1e>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d000      	beq.n	8009ae6 <_gettimeofday_r+0x1e>
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	20000e3c 	.word	0x20000e3c

08009aec <__retarget_lock_init_recursive>:
 8009aec:	4770      	bx	lr

08009aee <__retarget_lock_acquire_recursive>:
 8009aee:	4770      	bx	lr

08009af0 <__retarget_lock_release_recursive>:
 8009af0:	4770      	bx	lr
	...

08009af4 <__swhatbuf_r>:
 8009af4:	b570      	push	{r4, r5, r6, lr}
 8009af6:	000e      	movs	r6, r1
 8009af8:	001d      	movs	r5, r3
 8009afa:	230e      	movs	r3, #14
 8009afc:	5ec9      	ldrsh	r1, [r1, r3]
 8009afe:	0014      	movs	r4, r2
 8009b00:	b096      	sub	sp, #88	; 0x58
 8009b02:	2900      	cmp	r1, #0
 8009b04:	da08      	bge.n	8009b18 <__swhatbuf_r+0x24>
 8009b06:	220c      	movs	r2, #12
 8009b08:	5eb3      	ldrsh	r3, [r6, r2]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	602a      	str	r2, [r5, #0]
 8009b0e:	061b      	lsls	r3, r3, #24
 8009b10:	d411      	bmi.n	8009b36 <__swhatbuf_r+0x42>
 8009b12:	2380      	movs	r3, #128	; 0x80
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	e00f      	b.n	8009b38 <__swhatbuf_r+0x44>
 8009b18:	466a      	mov	r2, sp
 8009b1a:	f000 fd1f 	bl	800a55c <_fstat_r>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	dbf1      	blt.n	8009b06 <__swhatbuf_r+0x12>
 8009b22:	23f0      	movs	r3, #240	; 0xf0
 8009b24:	9901      	ldr	r1, [sp, #4]
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	4019      	ands	r1, r3
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <__swhatbuf_r+0x4c>)
 8009b2c:	18c9      	adds	r1, r1, r3
 8009b2e:	424b      	negs	r3, r1
 8009b30:	4159      	adcs	r1, r3
 8009b32:	6029      	str	r1, [r5, #0]
 8009b34:	e7ed      	b.n	8009b12 <__swhatbuf_r+0x1e>
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	2000      	movs	r0, #0
 8009b3a:	6023      	str	r3, [r4, #0]
 8009b3c:	b016      	add	sp, #88	; 0x58
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	ffffe000 	.word	0xffffe000

08009b44 <__smakebuf_r>:
 8009b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b46:	2602      	movs	r6, #2
 8009b48:	898b      	ldrh	r3, [r1, #12]
 8009b4a:	0005      	movs	r5, r0
 8009b4c:	000c      	movs	r4, r1
 8009b4e:	4233      	tst	r3, r6
 8009b50:	d006      	beq.n	8009b60 <__smakebuf_r+0x1c>
 8009b52:	0023      	movs	r3, r4
 8009b54:	3347      	adds	r3, #71	; 0x47
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	6163      	str	r3, [r4, #20]
 8009b5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009b60:	466a      	mov	r2, sp
 8009b62:	ab01      	add	r3, sp, #4
 8009b64:	f7ff ffc6 	bl	8009af4 <__swhatbuf_r>
 8009b68:	9900      	ldr	r1, [sp, #0]
 8009b6a:	0007      	movs	r7, r0
 8009b6c:	0028      	movs	r0, r5
 8009b6e:	f7ff fbb7 	bl	80092e0 <_malloc_r>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d108      	bne.n	8009b88 <__smakebuf_r+0x44>
 8009b76:	220c      	movs	r2, #12
 8009b78:	5ea3      	ldrsh	r3, [r4, r2]
 8009b7a:	059a      	lsls	r2, r3, #22
 8009b7c:	d4ef      	bmi.n	8009b5e <__smakebuf_r+0x1a>
 8009b7e:	2203      	movs	r2, #3
 8009b80:	4393      	bics	r3, r2
 8009b82:	431e      	orrs	r6, r3
 8009b84:	81a6      	strh	r6, [r4, #12]
 8009b86:	e7e4      	b.n	8009b52 <__smakebuf_r+0xe>
 8009b88:	4b0f      	ldr	r3, [pc, #60]	; (8009bc8 <__smakebuf_r+0x84>)
 8009b8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	89a2      	ldrh	r2, [r4, #12]
 8009b90:	6020      	str	r0, [r4, #0]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	6120      	str	r0, [r4, #16]
 8009b9a:	6163      	str	r3, [r4, #20]
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00d      	beq.n	8009bbe <__smakebuf_r+0x7a>
 8009ba2:	0028      	movs	r0, r5
 8009ba4:	230e      	movs	r3, #14
 8009ba6:	5ee1      	ldrsh	r1, [r4, r3]
 8009ba8:	f000 fcea 	bl	800a580 <_isatty_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d006      	beq.n	8009bbe <__smakebuf_r+0x7a>
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	4393      	bics	r3, r2
 8009bb6:	001a      	movs	r2, r3
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	89a0      	ldrh	r0, [r4, #12]
 8009bc0:	4307      	orrs	r7, r0
 8009bc2:	81a7      	strh	r7, [r4, #12]
 8009bc4:	e7cb      	b.n	8009b5e <__smakebuf_r+0x1a>
 8009bc6:	46c0      	nop			; (mov r8, r8)
 8009bc8:	0800990d 	.word	0x0800990d

08009bcc <__malloc_lock>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	4802      	ldr	r0, [pc, #8]	; (8009bd8 <__malloc_lock+0xc>)
 8009bd0:	f7ff ff8d 	bl	8009aee <__retarget_lock_acquire_recursive>
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	20000e38 	.word	0x20000e38

08009bdc <__malloc_unlock>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	4802      	ldr	r0, [pc, #8]	; (8009be8 <__malloc_unlock+0xc>)
 8009be0:	f7ff ff86 	bl	8009af0 <__retarget_lock_release_recursive>
 8009be4:	bd10      	pop	{r4, pc}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	20000e38 	.word	0x20000e38

08009bec <__ssputs_r>:
 8009bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bee:	688e      	ldr	r6, [r1, #8]
 8009bf0:	b085      	sub	sp, #20
 8009bf2:	0007      	movs	r7, r0
 8009bf4:	000c      	movs	r4, r1
 8009bf6:	9203      	str	r2, [sp, #12]
 8009bf8:	9301      	str	r3, [sp, #4]
 8009bfa:	429e      	cmp	r6, r3
 8009bfc:	d83c      	bhi.n	8009c78 <__ssputs_r+0x8c>
 8009bfe:	2390      	movs	r3, #144	; 0x90
 8009c00:	898a      	ldrh	r2, [r1, #12]
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	421a      	tst	r2, r3
 8009c06:	d034      	beq.n	8009c72 <__ssputs_r+0x86>
 8009c08:	6909      	ldr	r1, [r1, #16]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	6960      	ldr	r0, [r4, #20]
 8009c0e:	1a5b      	subs	r3, r3, r1
 8009c10:	9302      	str	r3, [sp, #8]
 8009c12:	2303      	movs	r3, #3
 8009c14:	4343      	muls	r3, r0
 8009c16:	0fdd      	lsrs	r5, r3, #31
 8009c18:	18ed      	adds	r5, r5, r3
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	9802      	ldr	r0, [sp, #8]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	181b      	adds	r3, r3, r0
 8009c22:	106d      	asrs	r5, r5, #1
 8009c24:	42ab      	cmp	r3, r5
 8009c26:	d900      	bls.n	8009c2a <__ssputs_r+0x3e>
 8009c28:	001d      	movs	r5, r3
 8009c2a:	0553      	lsls	r3, r2, #21
 8009c2c:	d532      	bpl.n	8009c94 <__ssputs_r+0xa8>
 8009c2e:	0029      	movs	r1, r5
 8009c30:	0038      	movs	r0, r7
 8009c32:	f7ff fb55 	bl	80092e0 <_malloc_r>
 8009c36:	1e06      	subs	r6, r0, #0
 8009c38:	d109      	bne.n	8009c4e <__ssputs_r+0x62>
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	603b      	str	r3, [r7, #0]
 8009c3e:	2340      	movs	r3, #64	; 0x40
 8009c40:	2001      	movs	r0, #1
 8009c42:	89a2      	ldrh	r2, [r4, #12]
 8009c44:	4240      	negs	r0, r0
 8009c46:	4313      	orrs	r3, r2
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	b005      	add	sp, #20
 8009c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4e:	9a02      	ldr	r2, [sp, #8]
 8009c50:	6921      	ldr	r1, [r4, #16]
 8009c52:	f7ff fa89 	bl	8009168 <memcpy>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	4a14      	ldr	r2, [pc, #80]	; (8009cac <__ssputs_r+0xc0>)
 8009c5a:	401a      	ands	r2, r3
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	6126      	str	r6, [r4, #16]
 8009c66:	18f6      	adds	r6, r6, r3
 8009c68:	6026      	str	r6, [r4, #0]
 8009c6a:	6165      	str	r5, [r4, #20]
 8009c6c:	9e01      	ldr	r6, [sp, #4]
 8009c6e:	1aed      	subs	r5, r5, r3
 8009c70:	60a5      	str	r5, [r4, #8]
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	429e      	cmp	r6, r3
 8009c76:	d900      	bls.n	8009c7a <__ssputs_r+0x8e>
 8009c78:	9e01      	ldr	r6, [sp, #4]
 8009c7a:	0032      	movs	r2, r6
 8009c7c:	9903      	ldr	r1, [sp, #12]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	f7ff fa7b 	bl	800917a <memmove>
 8009c84:	68a3      	ldr	r3, [r4, #8]
 8009c86:	2000      	movs	r0, #0
 8009c88:	1b9b      	subs	r3, r3, r6
 8009c8a:	60a3      	str	r3, [r4, #8]
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	199e      	adds	r6, r3, r6
 8009c90:	6026      	str	r6, [r4, #0]
 8009c92:	e7da      	b.n	8009c4a <__ssputs_r+0x5e>
 8009c94:	002a      	movs	r2, r5
 8009c96:	0038      	movs	r0, r7
 8009c98:	f000 fca3 	bl	800a5e2 <_realloc_r>
 8009c9c:	1e06      	subs	r6, r0, #0
 8009c9e:	d1e0      	bne.n	8009c62 <__ssputs_r+0x76>
 8009ca0:	0038      	movs	r0, r7
 8009ca2:	6921      	ldr	r1, [r4, #16]
 8009ca4:	f7ff fab0 	bl	8009208 <_free_r>
 8009ca8:	e7c7      	b.n	8009c3a <__ssputs_r+0x4e>
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	fffffb7f 	.word	0xfffffb7f

08009cb0 <_svfiprintf_r>:
 8009cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cb2:	b0a1      	sub	sp, #132	; 0x84
 8009cb4:	9003      	str	r0, [sp, #12]
 8009cb6:	001d      	movs	r5, r3
 8009cb8:	898b      	ldrh	r3, [r1, #12]
 8009cba:	000f      	movs	r7, r1
 8009cbc:	0016      	movs	r6, r2
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	d511      	bpl.n	8009ce6 <_svfiprintf_r+0x36>
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10e      	bne.n	8009ce6 <_svfiprintf_r+0x36>
 8009cc8:	2140      	movs	r1, #64	; 0x40
 8009cca:	f7ff fb09 	bl	80092e0 <_malloc_r>
 8009cce:	6038      	str	r0, [r7, #0]
 8009cd0:	6138      	str	r0, [r7, #16]
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d105      	bne.n	8009ce2 <_svfiprintf_r+0x32>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	9a03      	ldr	r2, [sp, #12]
 8009cda:	3801      	subs	r0, #1
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	b021      	add	sp, #132	; 0x84
 8009ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce2:	2340      	movs	r3, #64	; 0x40
 8009ce4:	617b      	str	r3, [r7, #20]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	ac08      	add	r4, sp, #32
 8009cea:	6163      	str	r3, [r4, #20]
 8009cec:	3320      	adds	r3, #32
 8009cee:	7663      	strb	r3, [r4, #25]
 8009cf0:	3310      	adds	r3, #16
 8009cf2:	76a3      	strb	r3, [r4, #26]
 8009cf4:	9507      	str	r5, [sp, #28]
 8009cf6:	0035      	movs	r5, r6
 8009cf8:	782b      	ldrb	r3, [r5, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <_svfiprintf_r+0x52>
 8009cfe:	2b25      	cmp	r3, #37	; 0x25
 8009d00:	d147      	bne.n	8009d92 <_svfiprintf_r+0xe2>
 8009d02:	1bab      	subs	r3, r5, r6
 8009d04:	9305      	str	r3, [sp, #20]
 8009d06:	42b5      	cmp	r5, r6
 8009d08:	d00c      	beq.n	8009d24 <_svfiprintf_r+0x74>
 8009d0a:	0032      	movs	r2, r6
 8009d0c:	0039      	movs	r1, r7
 8009d0e:	9803      	ldr	r0, [sp, #12]
 8009d10:	f7ff ff6c 	bl	8009bec <__ssputs_r>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d100      	bne.n	8009d1a <_svfiprintf_r+0x6a>
 8009d18:	e0ae      	b.n	8009e78 <_svfiprintf_r+0x1c8>
 8009d1a:	6962      	ldr	r2, [r4, #20]
 8009d1c:	9b05      	ldr	r3, [sp, #20]
 8009d1e:	4694      	mov	ip, r2
 8009d20:	4463      	add	r3, ip
 8009d22:	6163      	str	r3, [r4, #20]
 8009d24:	782b      	ldrb	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d100      	bne.n	8009d2c <_svfiprintf_r+0x7c>
 8009d2a:	e0a5      	b.n	8009e78 <_svfiprintf_r+0x1c8>
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4252      	negs	r2, r2
 8009d32:	6062      	str	r2, [r4, #4]
 8009d34:	a904      	add	r1, sp, #16
 8009d36:	3254      	adds	r2, #84	; 0x54
 8009d38:	1852      	adds	r2, r2, r1
 8009d3a:	1c6e      	adds	r6, r5, #1
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	60e3      	str	r3, [r4, #12]
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	7013      	strb	r3, [r2, #0]
 8009d44:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d46:	2205      	movs	r2, #5
 8009d48:	7831      	ldrb	r1, [r6, #0]
 8009d4a:	4854      	ldr	r0, [pc, #336]	; (8009e9c <_svfiprintf_r+0x1ec>)
 8009d4c:	f000 fc3e 	bl	800a5cc <memchr>
 8009d50:	1c75      	adds	r5, r6, #1
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d11f      	bne.n	8009d96 <_svfiprintf_r+0xe6>
 8009d56:	6822      	ldr	r2, [r4, #0]
 8009d58:	06d3      	lsls	r3, r2, #27
 8009d5a:	d504      	bpl.n	8009d66 <_svfiprintf_r+0xb6>
 8009d5c:	2353      	movs	r3, #83	; 0x53
 8009d5e:	a904      	add	r1, sp, #16
 8009d60:	185b      	adds	r3, r3, r1
 8009d62:	2120      	movs	r1, #32
 8009d64:	7019      	strb	r1, [r3, #0]
 8009d66:	0713      	lsls	r3, r2, #28
 8009d68:	d504      	bpl.n	8009d74 <_svfiprintf_r+0xc4>
 8009d6a:	2353      	movs	r3, #83	; 0x53
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	185b      	adds	r3, r3, r1
 8009d70:	212b      	movs	r1, #43	; 0x2b
 8009d72:	7019      	strb	r1, [r3, #0]
 8009d74:	7833      	ldrb	r3, [r6, #0]
 8009d76:	2b2a      	cmp	r3, #42	; 0x2a
 8009d78:	d016      	beq.n	8009da8 <_svfiprintf_r+0xf8>
 8009d7a:	0035      	movs	r5, r6
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	200a      	movs	r0, #10
 8009d80:	68e3      	ldr	r3, [r4, #12]
 8009d82:	782a      	ldrb	r2, [r5, #0]
 8009d84:	1c6e      	adds	r6, r5, #1
 8009d86:	3a30      	subs	r2, #48	; 0x30
 8009d88:	2a09      	cmp	r2, #9
 8009d8a:	d94e      	bls.n	8009e2a <_svfiprintf_r+0x17a>
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	d111      	bne.n	8009db4 <_svfiprintf_r+0x104>
 8009d90:	e017      	b.n	8009dc2 <_svfiprintf_r+0x112>
 8009d92:	3501      	adds	r5, #1
 8009d94:	e7b0      	b.n	8009cf8 <_svfiprintf_r+0x48>
 8009d96:	4b41      	ldr	r3, [pc, #260]	; (8009e9c <_svfiprintf_r+0x1ec>)
 8009d98:	6822      	ldr	r2, [r4, #0]
 8009d9a:	1ac0      	subs	r0, r0, r3
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	4083      	lsls	r3, r0
 8009da0:	4313      	orrs	r3, r2
 8009da2:	002e      	movs	r6, r5
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	e7ce      	b.n	8009d46 <_svfiprintf_r+0x96>
 8009da8:	9b07      	ldr	r3, [sp, #28]
 8009daa:	1d19      	adds	r1, r3, #4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	9107      	str	r1, [sp, #28]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db01      	blt.n	8009db8 <_svfiprintf_r+0x108>
 8009db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009db6:	e004      	b.n	8009dc2 <_svfiprintf_r+0x112>
 8009db8:	425b      	negs	r3, r3
 8009dba:	60e3      	str	r3, [r4, #12]
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	782b      	ldrb	r3, [r5, #0]
 8009dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc6:	d10a      	bne.n	8009dde <_svfiprintf_r+0x12e>
 8009dc8:	786b      	ldrb	r3, [r5, #1]
 8009dca:	2b2a      	cmp	r3, #42	; 0x2a
 8009dcc:	d135      	bne.n	8009e3a <_svfiprintf_r+0x18a>
 8009dce:	9b07      	ldr	r3, [sp, #28]
 8009dd0:	3502      	adds	r5, #2
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	9207      	str	r2, [sp, #28]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db2b      	blt.n	8009e34 <_svfiprintf_r+0x184>
 8009ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dde:	4e30      	ldr	r6, [pc, #192]	; (8009ea0 <_svfiprintf_r+0x1f0>)
 8009de0:	2203      	movs	r2, #3
 8009de2:	0030      	movs	r0, r6
 8009de4:	7829      	ldrb	r1, [r5, #0]
 8009de6:	f000 fbf1 	bl	800a5cc <memchr>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d006      	beq.n	8009dfc <_svfiprintf_r+0x14c>
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	1b80      	subs	r0, r0, r6
 8009df2:	4083      	lsls	r3, r0
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	3501      	adds	r5, #1
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	7829      	ldrb	r1, [r5, #0]
 8009dfe:	2206      	movs	r2, #6
 8009e00:	4828      	ldr	r0, [pc, #160]	; (8009ea4 <_svfiprintf_r+0x1f4>)
 8009e02:	1c6e      	adds	r6, r5, #1
 8009e04:	7621      	strb	r1, [r4, #24]
 8009e06:	f000 fbe1 	bl	800a5cc <memchr>
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d03c      	beq.n	8009e88 <_svfiprintf_r+0x1d8>
 8009e0e:	4b26      	ldr	r3, [pc, #152]	; (8009ea8 <_svfiprintf_r+0x1f8>)
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d125      	bne.n	8009e60 <_svfiprintf_r+0x1b0>
 8009e14:	2207      	movs	r2, #7
 8009e16:	9b07      	ldr	r3, [sp, #28]
 8009e18:	3307      	adds	r3, #7
 8009e1a:	4393      	bics	r3, r2
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	9307      	str	r3, [sp, #28]
 8009e20:	6963      	ldr	r3, [r4, #20]
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	189b      	adds	r3, r3, r2
 8009e26:	6163      	str	r3, [r4, #20]
 8009e28:	e765      	b.n	8009cf6 <_svfiprintf_r+0x46>
 8009e2a:	4343      	muls	r3, r0
 8009e2c:	0035      	movs	r5, r6
 8009e2e:	2101      	movs	r1, #1
 8009e30:	189b      	adds	r3, r3, r2
 8009e32:	e7a6      	b.n	8009d82 <_svfiprintf_r+0xd2>
 8009e34:	2301      	movs	r3, #1
 8009e36:	425b      	negs	r3, r3
 8009e38:	e7d0      	b.n	8009ddc <_svfiprintf_r+0x12c>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	200a      	movs	r0, #10
 8009e3e:	001a      	movs	r2, r3
 8009e40:	3501      	adds	r5, #1
 8009e42:	6063      	str	r3, [r4, #4]
 8009e44:	7829      	ldrb	r1, [r5, #0]
 8009e46:	1c6e      	adds	r6, r5, #1
 8009e48:	3930      	subs	r1, #48	; 0x30
 8009e4a:	2909      	cmp	r1, #9
 8009e4c:	d903      	bls.n	8009e56 <_svfiprintf_r+0x1a6>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0c5      	beq.n	8009dde <_svfiprintf_r+0x12e>
 8009e52:	9209      	str	r2, [sp, #36]	; 0x24
 8009e54:	e7c3      	b.n	8009dde <_svfiprintf_r+0x12e>
 8009e56:	4342      	muls	r2, r0
 8009e58:	0035      	movs	r5, r6
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	1852      	adds	r2, r2, r1
 8009e5e:	e7f1      	b.n	8009e44 <_svfiprintf_r+0x194>
 8009e60:	ab07      	add	r3, sp, #28
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	003a      	movs	r2, r7
 8009e66:	0021      	movs	r1, r4
 8009e68:	4b10      	ldr	r3, [pc, #64]	; (8009eac <_svfiprintf_r+0x1fc>)
 8009e6a:	9803      	ldr	r0, [sp, #12]
 8009e6c:	e000      	b.n	8009e70 <_svfiprintf_r+0x1c0>
 8009e6e:	bf00      	nop
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	3301      	adds	r3, #1
 8009e76:	d1d3      	bne.n	8009e20 <_svfiprintf_r+0x170>
 8009e78:	89bb      	ldrh	r3, [r7, #12]
 8009e7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e7c:	065b      	lsls	r3, r3, #25
 8009e7e:	d400      	bmi.n	8009e82 <_svfiprintf_r+0x1d2>
 8009e80:	e72d      	b.n	8009cde <_svfiprintf_r+0x2e>
 8009e82:	2001      	movs	r0, #1
 8009e84:	4240      	negs	r0, r0
 8009e86:	e72a      	b.n	8009cde <_svfiprintf_r+0x2e>
 8009e88:	ab07      	add	r3, sp, #28
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	003a      	movs	r2, r7
 8009e8e:	0021      	movs	r1, r4
 8009e90:	4b06      	ldr	r3, [pc, #24]	; (8009eac <_svfiprintf_r+0x1fc>)
 8009e92:	9803      	ldr	r0, [sp, #12]
 8009e94:	f000 f9de 	bl	800a254 <_printf_i>
 8009e98:	e7ea      	b.n	8009e70 <_svfiprintf_r+0x1c0>
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	0800aeb0 	.word	0x0800aeb0
 8009ea0:	0800aeb6 	.word	0x0800aeb6
 8009ea4:	0800aeba 	.word	0x0800aeba
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	08009bed 	.word	0x08009bed

08009eb0 <__sfputc_r>:
 8009eb0:	6893      	ldr	r3, [r2, #8]
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	6093      	str	r3, [r2, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da04      	bge.n	8009ec6 <__sfputc_r+0x16>
 8009ebc:	6994      	ldr	r4, [r2, #24]
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	db07      	blt.n	8009ed2 <__sfputc_r+0x22>
 8009ec2:	290a      	cmp	r1, #10
 8009ec4:	d005      	beq.n	8009ed2 <__sfputc_r+0x22>
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	1c58      	adds	r0, r3, #1
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	7019      	strb	r1, [r3, #0]
 8009ece:	0008      	movs	r0, r1
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	f7ff fb5d 	bl	8009590 <__swbuf_r>
 8009ed6:	0001      	movs	r1, r0
 8009ed8:	e7f9      	b.n	8009ece <__sfputc_r+0x1e>

08009eda <__sfputs_r>:
 8009eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009edc:	0006      	movs	r6, r0
 8009ede:	000f      	movs	r7, r1
 8009ee0:	0014      	movs	r4, r2
 8009ee2:	18d5      	adds	r5, r2, r3
 8009ee4:	42ac      	cmp	r4, r5
 8009ee6:	d101      	bne.n	8009eec <__sfputs_r+0x12>
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e007      	b.n	8009efc <__sfputs_r+0x22>
 8009eec:	7821      	ldrb	r1, [r4, #0]
 8009eee:	003a      	movs	r2, r7
 8009ef0:	0030      	movs	r0, r6
 8009ef2:	f7ff ffdd 	bl	8009eb0 <__sfputc_r>
 8009ef6:	3401      	adds	r4, #1
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d1f3      	bne.n	8009ee4 <__sfputs_r+0xa>
 8009efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f00 <_vfiprintf_r>:
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	b0a1      	sub	sp, #132	; 0x84
 8009f04:	0006      	movs	r6, r0
 8009f06:	000c      	movs	r4, r1
 8009f08:	001f      	movs	r7, r3
 8009f0a:	9203      	str	r2, [sp, #12]
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d004      	beq.n	8009f1a <_vfiprintf_r+0x1a>
 8009f10:	6983      	ldr	r3, [r0, #24]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <_vfiprintf_r+0x1a>
 8009f16:	f7ff fd37 	bl	8009988 <__sinit>
 8009f1a:	4b8e      	ldr	r3, [pc, #568]	; (800a154 <_vfiprintf_r+0x254>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	d11c      	bne.n	8009f5a <_vfiprintf_r+0x5a>
 8009f20:	6874      	ldr	r4, [r6, #4]
 8009f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f24:	07db      	lsls	r3, r3, #31
 8009f26:	d405      	bmi.n	8009f34 <_vfiprintf_r+0x34>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	059b      	lsls	r3, r3, #22
 8009f2c:	d402      	bmi.n	8009f34 <_vfiprintf_r+0x34>
 8009f2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f30:	f7ff fddd 	bl	8009aee <__retarget_lock_acquire_recursive>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	071b      	lsls	r3, r3, #28
 8009f38:	d502      	bpl.n	8009f40 <_vfiprintf_r+0x40>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d11d      	bne.n	8009f7c <_vfiprintf_r+0x7c>
 8009f40:	0021      	movs	r1, r4
 8009f42:	0030      	movs	r0, r6
 8009f44:	f7ff fb7a 	bl	800963c <__swsetup_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d017      	beq.n	8009f7c <_vfiprintf_r+0x7c>
 8009f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f4e:	07db      	lsls	r3, r3, #31
 8009f50:	d50d      	bpl.n	8009f6e <_vfiprintf_r+0x6e>
 8009f52:	2001      	movs	r0, #1
 8009f54:	4240      	negs	r0, r0
 8009f56:	b021      	add	sp, #132	; 0x84
 8009f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5a:	4b7f      	ldr	r3, [pc, #508]	; (800a158 <_vfiprintf_r+0x258>)
 8009f5c:	429c      	cmp	r4, r3
 8009f5e:	d101      	bne.n	8009f64 <_vfiprintf_r+0x64>
 8009f60:	68b4      	ldr	r4, [r6, #8]
 8009f62:	e7de      	b.n	8009f22 <_vfiprintf_r+0x22>
 8009f64:	4b7d      	ldr	r3, [pc, #500]	; (800a15c <_vfiprintf_r+0x25c>)
 8009f66:	429c      	cmp	r4, r3
 8009f68:	d1db      	bne.n	8009f22 <_vfiprintf_r+0x22>
 8009f6a:	68f4      	ldr	r4, [r6, #12]
 8009f6c:	e7d9      	b.n	8009f22 <_vfiprintf_r+0x22>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d4ee      	bmi.n	8009f52 <_vfiprintf_r+0x52>
 8009f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f76:	f7ff fdbb 	bl	8009af0 <__retarget_lock_release_recursive>
 8009f7a:	e7ea      	b.n	8009f52 <_vfiprintf_r+0x52>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	ad08      	add	r5, sp, #32
 8009f80:	616b      	str	r3, [r5, #20]
 8009f82:	3320      	adds	r3, #32
 8009f84:	766b      	strb	r3, [r5, #25]
 8009f86:	3310      	adds	r3, #16
 8009f88:	76ab      	strb	r3, [r5, #26]
 8009f8a:	9707      	str	r7, [sp, #28]
 8009f8c:	9f03      	ldr	r7, [sp, #12]
 8009f8e:	783b      	ldrb	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <_vfiprintf_r+0x98>
 8009f94:	2b25      	cmp	r3, #37	; 0x25
 8009f96:	d14e      	bne.n	800a036 <_vfiprintf_r+0x136>
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	1afb      	subs	r3, r7, r3
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	429f      	cmp	r7, r3
 8009fa2:	d00d      	beq.n	8009fc0 <_vfiprintf_r+0xc0>
 8009fa4:	9b05      	ldr	r3, [sp, #20]
 8009fa6:	0021      	movs	r1, r4
 8009fa8:	0030      	movs	r0, r6
 8009faa:	9a03      	ldr	r2, [sp, #12]
 8009fac:	f7ff ff95 	bl	8009eda <__sfputs_r>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d100      	bne.n	8009fb6 <_vfiprintf_r+0xb6>
 8009fb4:	e0b5      	b.n	800a122 <_vfiprintf_r+0x222>
 8009fb6:	696a      	ldr	r2, [r5, #20]
 8009fb8:	9b05      	ldr	r3, [sp, #20]
 8009fba:	4694      	mov	ip, r2
 8009fbc:	4463      	add	r3, ip
 8009fbe:	616b      	str	r3, [r5, #20]
 8009fc0:	783b      	ldrb	r3, [r7, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d100      	bne.n	8009fc8 <_vfiprintf_r+0xc8>
 8009fc6:	e0ac      	b.n	800a122 <_vfiprintf_r+0x222>
 8009fc8:	2201      	movs	r2, #1
 8009fca:	1c7b      	adds	r3, r7, #1
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4252      	negs	r2, r2
 8009fd2:	606a      	str	r2, [r5, #4]
 8009fd4:	a904      	add	r1, sp, #16
 8009fd6:	3254      	adds	r2, #84	; 0x54
 8009fd8:	1852      	adds	r2, r2, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	60eb      	str	r3, [r5, #12]
 8009fde:	60ab      	str	r3, [r5, #8]
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	65ab      	str	r3, [r5, #88]	; 0x58
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	7819      	ldrb	r1, [r3, #0]
 8009fea:	485d      	ldr	r0, [pc, #372]	; (800a160 <_vfiprintf_r+0x260>)
 8009fec:	f000 faee 	bl	800a5cc <memchr>
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	1c5f      	adds	r7, r3, #1
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d120      	bne.n	800a03a <_vfiprintf_r+0x13a>
 8009ff8:	682a      	ldr	r2, [r5, #0]
 8009ffa:	06d3      	lsls	r3, r2, #27
 8009ffc:	d504      	bpl.n	800a008 <_vfiprintf_r+0x108>
 8009ffe:	2353      	movs	r3, #83	; 0x53
 800a000:	a904      	add	r1, sp, #16
 800a002:	185b      	adds	r3, r3, r1
 800a004:	2120      	movs	r1, #32
 800a006:	7019      	strb	r1, [r3, #0]
 800a008:	0713      	lsls	r3, r2, #28
 800a00a:	d504      	bpl.n	800a016 <_vfiprintf_r+0x116>
 800a00c:	2353      	movs	r3, #83	; 0x53
 800a00e:	a904      	add	r1, sp, #16
 800a010:	185b      	adds	r3, r3, r1
 800a012:	212b      	movs	r1, #43	; 0x2b
 800a014:	7019      	strb	r1, [r3, #0]
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b2a      	cmp	r3, #42	; 0x2a
 800a01c:	d016      	beq.n	800a04c <_vfiprintf_r+0x14c>
 800a01e:	2100      	movs	r1, #0
 800a020:	68eb      	ldr	r3, [r5, #12]
 800a022:	9f03      	ldr	r7, [sp, #12]
 800a024:	783a      	ldrb	r2, [r7, #0]
 800a026:	1c78      	adds	r0, r7, #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	4684      	mov	ip, r0
 800a02c:	2a09      	cmp	r2, #9
 800a02e:	d94f      	bls.n	800a0d0 <_vfiprintf_r+0x1d0>
 800a030:	2900      	cmp	r1, #0
 800a032:	d111      	bne.n	800a058 <_vfiprintf_r+0x158>
 800a034:	e017      	b.n	800a066 <_vfiprintf_r+0x166>
 800a036:	3701      	adds	r7, #1
 800a038:	e7a9      	b.n	8009f8e <_vfiprintf_r+0x8e>
 800a03a:	4b49      	ldr	r3, [pc, #292]	; (800a160 <_vfiprintf_r+0x260>)
 800a03c:	682a      	ldr	r2, [r5, #0]
 800a03e:	1ac0      	subs	r0, r0, r3
 800a040:	2301      	movs	r3, #1
 800a042:	4083      	lsls	r3, r0
 800a044:	4313      	orrs	r3, r2
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	9703      	str	r7, [sp, #12]
 800a04a:	e7cb      	b.n	8009fe4 <_vfiprintf_r+0xe4>
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	1d19      	adds	r1, r3, #4
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	9107      	str	r1, [sp, #28]
 800a054:	2b00      	cmp	r3, #0
 800a056:	db01      	blt.n	800a05c <_vfiprintf_r+0x15c>
 800a058:	930b      	str	r3, [sp, #44]	; 0x2c
 800a05a:	e004      	b.n	800a066 <_vfiprintf_r+0x166>
 800a05c:	425b      	negs	r3, r3
 800a05e:	60eb      	str	r3, [r5, #12]
 800a060:	2302      	movs	r3, #2
 800a062:	4313      	orrs	r3, r2
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	783b      	ldrb	r3, [r7, #0]
 800a068:	2b2e      	cmp	r3, #46	; 0x2e
 800a06a:	d10a      	bne.n	800a082 <_vfiprintf_r+0x182>
 800a06c:	787b      	ldrb	r3, [r7, #1]
 800a06e:	2b2a      	cmp	r3, #42	; 0x2a
 800a070:	d137      	bne.n	800a0e2 <_vfiprintf_r+0x1e2>
 800a072:	9b07      	ldr	r3, [sp, #28]
 800a074:	3702      	adds	r7, #2
 800a076:	1d1a      	adds	r2, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	9207      	str	r2, [sp, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db2d      	blt.n	800a0dc <_vfiprintf_r+0x1dc>
 800a080:	9309      	str	r3, [sp, #36]	; 0x24
 800a082:	2203      	movs	r2, #3
 800a084:	7839      	ldrb	r1, [r7, #0]
 800a086:	4837      	ldr	r0, [pc, #220]	; (800a164 <_vfiprintf_r+0x264>)
 800a088:	f000 faa0 	bl	800a5cc <memchr>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d007      	beq.n	800a0a0 <_vfiprintf_r+0x1a0>
 800a090:	4b34      	ldr	r3, [pc, #208]	; (800a164 <_vfiprintf_r+0x264>)
 800a092:	682a      	ldr	r2, [r5, #0]
 800a094:	1ac0      	subs	r0, r0, r3
 800a096:	2340      	movs	r3, #64	; 0x40
 800a098:	4083      	lsls	r3, r0
 800a09a:	4313      	orrs	r3, r2
 800a09c:	3701      	adds	r7, #1
 800a09e:	602b      	str	r3, [r5, #0]
 800a0a0:	7839      	ldrb	r1, [r7, #0]
 800a0a2:	1c7b      	adds	r3, r7, #1
 800a0a4:	2206      	movs	r2, #6
 800a0a6:	4830      	ldr	r0, [pc, #192]	; (800a168 <_vfiprintf_r+0x268>)
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	7629      	strb	r1, [r5, #24]
 800a0ac:	f000 fa8e 	bl	800a5cc <memchr>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d045      	beq.n	800a140 <_vfiprintf_r+0x240>
 800a0b4:	4b2d      	ldr	r3, [pc, #180]	; (800a16c <_vfiprintf_r+0x26c>)
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d127      	bne.n	800a10a <_vfiprintf_r+0x20a>
 800a0ba:	2207      	movs	r2, #7
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	3307      	adds	r3, #7
 800a0c0:	4393      	bics	r3, r2
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	696b      	ldr	r3, [r5, #20]
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	189b      	adds	r3, r3, r2
 800a0cc:	616b      	str	r3, [r5, #20]
 800a0ce:	e75d      	b.n	8009f8c <_vfiprintf_r+0x8c>
 800a0d0:	210a      	movs	r1, #10
 800a0d2:	434b      	muls	r3, r1
 800a0d4:	4667      	mov	r7, ip
 800a0d6:	189b      	adds	r3, r3, r2
 800a0d8:	3909      	subs	r1, #9
 800a0da:	e7a3      	b.n	800a024 <_vfiprintf_r+0x124>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	425b      	negs	r3, r3
 800a0e0:	e7ce      	b.n	800a080 <_vfiprintf_r+0x180>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	001a      	movs	r2, r3
 800a0e6:	3701      	adds	r7, #1
 800a0e8:	606b      	str	r3, [r5, #4]
 800a0ea:	7839      	ldrb	r1, [r7, #0]
 800a0ec:	1c78      	adds	r0, r7, #1
 800a0ee:	3930      	subs	r1, #48	; 0x30
 800a0f0:	4684      	mov	ip, r0
 800a0f2:	2909      	cmp	r1, #9
 800a0f4:	d903      	bls.n	800a0fe <_vfiprintf_r+0x1fe>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0c3      	beq.n	800a082 <_vfiprintf_r+0x182>
 800a0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fc:	e7c1      	b.n	800a082 <_vfiprintf_r+0x182>
 800a0fe:	230a      	movs	r3, #10
 800a100:	435a      	muls	r2, r3
 800a102:	4667      	mov	r7, ip
 800a104:	1852      	adds	r2, r2, r1
 800a106:	3b09      	subs	r3, #9
 800a108:	e7ef      	b.n	800a0ea <_vfiprintf_r+0x1ea>
 800a10a:	ab07      	add	r3, sp, #28
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	0022      	movs	r2, r4
 800a110:	0029      	movs	r1, r5
 800a112:	0030      	movs	r0, r6
 800a114:	4b16      	ldr	r3, [pc, #88]	; (800a170 <_vfiprintf_r+0x270>)
 800a116:	e000      	b.n	800a11a <_vfiprintf_r+0x21a>
 800a118:	bf00      	nop
 800a11a:	9004      	str	r0, [sp, #16]
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	3301      	adds	r3, #1
 800a120:	d1d1      	bne.n	800a0c6 <_vfiprintf_r+0x1c6>
 800a122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a124:	07db      	lsls	r3, r3, #31
 800a126:	d405      	bmi.n	800a134 <_vfiprintf_r+0x234>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	059b      	lsls	r3, r3, #22
 800a12c:	d402      	bmi.n	800a134 <_vfiprintf_r+0x234>
 800a12e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a130:	f7ff fcde 	bl	8009af0 <__retarget_lock_release_recursive>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	065b      	lsls	r3, r3, #25
 800a138:	d500      	bpl.n	800a13c <_vfiprintf_r+0x23c>
 800a13a:	e70a      	b.n	8009f52 <_vfiprintf_r+0x52>
 800a13c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a13e:	e70a      	b.n	8009f56 <_vfiprintf_r+0x56>
 800a140:	ab07      	add	r3, sp, #28
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	0022      	movs	r2, r4
 800a146:	0029      	movs	r1, r5
 800a148:	0030      	movs	r0, r6
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <_vfiprintf_r+0x270>)
 800a14c:	f000 f882 	bl	800a254 <_printf_i>
 800a150:	e7e3      	b.n	800a11a <_vfiprintf_r+0x21a>
 800a152:	46c0      	nop			; (mov r8, r8)
 800a154:	0800ae70 	.word	0x0800ae70
 800a158:	0800ae90 	.word	0x0800ae90
 800a15c:	0800ae50 	.word	0x0800ae50
 800a160:	0800aeb0 	.word	0x0800aeb0
 800a164:	0800aeb6 	.word	0x0800aeb6
 800a168:	0800aeba 	.word	0x0800aeba
 800a16c:	00000000 	.word	0x00000000
 800a170:	08009edb 	.word	0x08009edb

0800a174 <_printf_common>:
 800a174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a176:	0015      	movs	r5, r2
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	688a      	ldr	r2, [r1, #8]
 800a17c:	690b      	ldr	r3, [r1, #16]
 800a17e:	000c      	movs	r4, r1
 800a180:	9000      	str	r0, [sp, #0]
 800a182:	4293      	cmp	r3, r2
 800a184:	da00      	bge.n	800a188 <_printf_common+0x14>
 800a186:	0013      	movs	r3, r2
 800a188:	0022      	movs	r2, r4
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	3243      	adds	r2, #67	; 0x43
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	2a00      	cmp	r2, #0
 800a192:	d001      	beq.n	800a198 <_printf_common+0x24>
 800a194:	3301      	adds	r3, #1
 800a196:	602b      	str	r3, [r5, #0]
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	069b      	lsls	r3, r3, #26
 800a19c:	d502      	bpl.n	800a1a4 <_printf_common+0x30>
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	3302      	adds	r3, #2
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	6822      	ldr	r2, [r4, #0]
 800a1a6:	2306      	movs	r3, #6
 800a1a8:	0017      	movs	r7, r2
 800a1aa:	401f      	ands	r7, r3
 800a1ac:	421a      	tst	r2, r3
 800a1ae:	d027      	beq.n	800a200 <_printf_common+0x8c>
 800a1b0:	0023      	movs	r3, r4
 800a1b2:	3343      	adds	r3, #67	; 0x43
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	1e5a      	subs	r2, r3, #1
 800a1b8:	4193      	sbcs	r3, r2
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	0692      	lsls	r2, r2, #26
 800a1be:	d430      	bmi.n	800a222 <_printf_common+0xae>
 800a1c0:	0022      	movs	r2, r4
 800a1c2:	9901      	ldr	r1, [sp, #4]
 800a1c4:	9800      	ldr	r0, [sp, #0]
 800a1c6:	9e08      	ldr	r6, [sp, #32]
 800a1c8:	3243      	adds	r2, #67	; 0x43
 800a1ca:	47b0      	blx	r6
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	d025      	beq.n	800a21c <_printf_common+0xa8>
 800a1d0:	2306      	movs	r3, #6
 800a1d2:	6820      	ldr	r0, [r4, #0]
 800a1d4:	682a      	ldr	r2, [r5, #0]
 800a1d6:	68e1      	ldr	r1, [r4, #12]
 800a1d8:	2500      	movs	r5, #0
 800a1da:	4003      	ands	r3, r0
 800a1dc:	2b04      	cmp	r3, #4
 800a1de:	d103      	bne.n	800a1e8 <_printf_common+0x74>
 800a1e0:	1a8d      	subs	r5, r1, r2
 800a1e2:	43eb      	mvns	r3, r5
 800a1e4:	17db      	asrs	r3, r3, #31
 800a1e6:	401d      	ands	r5, r3
 800a1e8:	68a3      	ldr	r3, [r4, #8]
 800a1ea:	6922      	ldr	r2, [r4, #16]
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	dd01      	ble.n	800a1f4 <_printf_common+0x80>
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	18ed      	adds	r5, r5, r3
 800a1f4:	2700      	movs	r7, #0
 800a1f6:	42bd      	cmp	r5, r7
 800a1f8:	d120      	bne.n	800a23c <_printf_common+0xc8>
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	e010      	b.n	800a220 <_printf_common+0xac>
 800a1fe:	3701      	adds	r7, #1
 800a200:	68e3      	ldr	r3, [r4, #12]
 800a202:	682a      	ldr	r2, [r5, #0]
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	42bb      	cmp	r3, r7
 800a208:	ddd2      	ble.n	800a1b0 <_printf_common+0x3c>
 800a20a:	0022      	movs	r2, r4
 800a20c:	2301      	movs	r3, #1
 800a20e:	9901      	ldr	r1, [sp, #4]
 800a210:	9800      	ldr	r0, [sp, #0]
 800a212:	9e08      	ldr	r6, [sp, #32]
 800a214:	3219      	adds	r2, #25
 800a216:	47b0      	blx	r6
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d1f0      	bne.n	800a1fe <_printf_common+0x8a>
 800a21c:	2001      	movs	r0, #1
 800a21e:	4240      	negs	r0, r0
 800a220:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a222:	2030      	movs	r0, #48	; 0x30
 800a224:	18e1      	adds	r1, r4, r3
 800a226:	3143      	adds	r1, #67	; 0x43
 800a228:	7008      	strb	r0, [r1, #0]
 800a22a:	0021      	movs	r1, r4
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	3145      	adds	r1, #69	; 0x45
 800a230:	7809      	ldrb	r1, [r1, #0]
 800a232:	18a2      	adds	r2, r4, r2
 800a234:	3243      	adds	r2, #67	; 0x43
 800a236:	3302      	adds	r3, #2
 800a238:	7011      	strb	r1, [r2, #0]
 800a23a:	e7c1      	b.n	800a1c0 <_printf_common+0x4c>
 800a23c:	0022      	movs	r2, r4
 800a23e:	2301      	movs	r3, #1
 800a240:	9901      	ldr	r1, [sp, #4]
 800a242:	9800      	ldr	r0, [sp, #0]
 800a244:	9e08      	ldr	r6, [sp, #32]
 800a246:	321a      	adds	r2, #26
 800a248:	47b0      	blx	r6
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d0e6      	beq.n	800a21c <_printf_common+0xa8>
 800a24e:	3701      	adds	r7, #1
 800a250:	e7d1      	b.n	800a1f6 <_printf_common+0x82>
	...

0800a254 <_printf_i>:
 800a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a256:	b08b      	sub	sp, #44	; 0x2c
 800a258:	9206      	str	r2, [sp, #24]
 800a25a:	000a      	movs	r2, r1
 800a25c:	3243      	adds	r2, #67	; 0x43
 800a25e:	9307      	str	r3, [sp, #28]
 800a260:	9005      	str	r0, [sp, #20]
 800a262:	9204      	str	r2, [sp, #16]
 800a264:	7e0a      	ldrb	r2, [r1, #24]
 800a266:	000c      	movs	r4, r1
 800a268:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a26a:	2a78      	cmp	r2, #120	; 0x78
 800a26c:	d807      	bhi.n	800a27e <_printf_i+0x2a>
 800a26e:	2a62      	cmp	r2, #98	; 0x62
 800a270:	d809      	bhi.n	800a286 <_printf_i+0x32>
 800a272:	2a00      	cmp	r2, #0
 800a274:	d100      	bne.n	800a278 <_printf_i+0x24>
 800a276:	e0c1      	b.n	800a3fc <_printf_i+0x1a8>
 800a278:	2a58      	cmp	r2, #88	; 0x58
 800a27a:	d100      	bne.n	800a27e <_printf_i+0x2a>
 800a27c:	e08c      	b.n	800a398 <_printf_i+0x144>
 800a27e:	0026      	movs	r6, r4
 800a280:	3642      	adds	r6, #66	; 0x42
 800a282:	7032      	strb	r2, [r6, #0]
 800a284:	e022      	b.n	800a2cc <_printf_i+0x78>
 800a286:	0010      	movs	r0, r2
 800a288:	3863      	subs	r0, #99	; 0x63
 800a28a:	2815      	cmp	r0, #21
 800a28c:	d8f7      	bhi.n	800a27e <_printf_i+0x2a>
 800a28e:	f7f5 ff3b 	bl	8000108 <__gnu_thumb1_case_shi>
 800a292:	0016      	.short	0x0016
 800a294:	fff6001f 	.word	0xfff6001f
 800a298:	fff6fff6 	.word	0xfff6fff6
 800a29c:	001ffff6 	.word	0x001ffff6
 800a2a0:	fff6fff6 	.word	0xfff6fff6
 800a2a4:	fff6fff6 	.word	0xfff6fff6
 800a2a8:	003600a8 	.word	0x003600a8
 800a2ac:	fff6009a 	.word	0xfff6009a
 800a2b0:	00b9fff6 	.word	0x00b9fff6
 800a2b4:	0036fff6 	.word	0x0036fff6
 800a2b8:	fff6fff6 	.word	0xfff6fff6
 800a2bc:	009e      	.short	0x009e
 800a2be:	0026      	movs	r6, r4
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	3642      	adds	r6, #66	; 0x42
 800a2c4:	1d11      	adds	r1, r2, #4
 800a2c6:	6019      	str	r1, [r3, #0]
 800a2c8:	6813      	ldr	r3, [r2, #0]
 800a2ca:	7033      	strb	r3, [r6, #0]
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e0a7      	b.n	800a420 <_printf_i+0x1cc>
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	1d0a      	adds	r2, r1, #4
 800a2d6:	0605      	lsls	r5, r0, #24
 800a2d8:	d50b      	bpl.n	800a2f2 <_printf_i+0x9e>
 800a2da:	680d      	ldr	r5, [r1, #0]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	da03      	bge.n	800a2ea <_printf_i+0x96>
 800a2e2:	232d      	movs	r3, #45	; 0x2d
 800a2e4:	9a04      	ldr	r2, [sp, #16]
 800a2e6:	426d      	negs	r5, r5
 800a2e8:	7013      	strb	r3, [r2, #0]
 800a2ea:	4b61      	ldr	r3, [pc, #388]	; (800a470 <_printf_i+0x21c>)
 800a2ec:	270a      	movs	r7, #10
 800a2ee:	9303      	str	r3, [sp, #12]
 800a2f0:	e01b      	b.n	800a32a <_printf_i+0xd6>
 800a2f2:	680d      	ldr	r5, [r1, #0]
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	0641      	lsls	r1, r0, #25
 800a2f8:	d5f1      	bpl.n	800a2de <_printf_i+0x8a>
 800a2fa:	b22d      	sxth	r5, r5
 800a2fc:	e7ef      	b.n	800a2de <_printf_i+0x8a>
 800a2fe:	680d      	ldr	r5, [r1, #0]
 800a300:	6819      	ldr	r1, [r3, #0]
 800a302:	1d08      	adds	r0, r1, #4
 800a304:	6018      	str	r0, [r3, #0]
 800a306:	062e      	lsls	r6, r5, #24
 800a308:	d501      	bpl.n	800a30e <_printf_i+0xba>
 800a30a:	680d      	ldr	r5, [r1, #0]
 800a30c:	e003      	b.n	800a316 <_printf_i+0xc2>
 800a30e:	066d      	lsls	r5, r5, #25
 800a310:	d5fb      	bpl.n	800a30a <_printf_i+0xb6>
 800a312:	680d      	ldr	r5, [r1, #0]
 800a314:	b2ad      	uxth	r5, r5
 800a316:	4b56      	ldr	r3, [pc, #344]	; (800a470 <_printf_i+0x21c>)
 800a318:	2708      	movs	r7, #8
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	2a6f      	cmp	r2, #111	; 0x6f
 800a31e:	d000      	beq.n	800a322 <_printf_i+0xce>
 800a320:	3702      	adds	r7, #2
 800a322:	0023      	movs	r3, r4
 800a324:	2200      	movs	r2, #0
 800a326:	3343      	adds	r3, #67	; 0x43
 800a328:	701a      	strb	r2, [r3, #0]
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	db03      	blt.n	800a33a <_printf_i+0xe6>
 800a332:	2204      	movs	r2, #4
 800a334:	6821      	ldr	r1, [r4, #0]
 800a336:	4391      	bics	r1, r2
 800a338:	6021      	str	r1, [r4, #0]
 800a33a:	2d00      	cmp	r5, #0
 800a33c:	d102      	bne.n	800a344 <_printf_i+0xf0>
 800a33e:	9e04      	ldr	r6, [sp, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00c      	beq.n	800a35e <_printf_i+0x10a>
 800a344:	9e04      	ldr	r6, [sp, #16]
 800a346:	0028      	movs	r0, r5
 800a348:	0039      	movs	r1, r7
 800a34a:	f7f5 ff6d 	bl	8000228 <__aeabi_uidivmod>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	3e01      	subs	r6, #1
 800a352:	5c5b      	ldrb	r3, [r3, r1]
 800a354:	7033      	strb	r3, [r6, #0]
 800a356:	002b      	movs	r3, r5
 800a358:	0005      	movs	r5, r0
 800a35a:	429f      	cmp	r7, r3
 800a35c:	d9f3      	bls.n	800a346 <_printf_i+0xf2>
 800a35e:	2f08      	cmp	r7, #8
 800a360:	d109      	bne.n	800a376 <_printf_i+0x122>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	07db      	lsls	r3, r3, #31
 800a366:	d506      	bpl.n	800a376 <_printf_i+0x122>
 800a368:	6863      	ldr	r3, [r4, #4]
 800a36a:	6922      	ldr	r2, [r4, #16]
 800a36c:	4293      	cmp	r3, r2
 800a36e:	dc02      	bgt.n	800a376 <_printf_i+0x122>
 800a370:	2330      	movs	r3, #48	; 0x30
 800a372:	3e01      	subs	r6, #1
 800a374:	7033      	strb	r3, [r6, #0]
 800a376:	9b04      	ldr	r3, [sp, #16]
 800a378:	1b9b      	subs	r3, r3, r6
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	0021      	movs	r1, r4
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	9805      	ldr	r0, [sp, #20]
 800a384:	9b06      	ldr	r3, [sp, #24]
 800a386:	aa09      	add	r2, sp, #36	; 0x24
 800a388:	f7ff fef4 	bl	800a174 <_printf_common>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d14c      	bne.n	800a42a <_printf_i+0x1d6>
 800a390:	2001      	movs	r0, #1
 800a392:	4240      	negs	r0, r0
 800a394:	b00b      	add	sp, #44	; 0x2c
 800a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a398:	3145      	adds	r1, #69	; 0x45
 800a39a:	700a      	strb	r2, [r1, #0]
 800a39c:	4a34      	ldr	r2, [pc, #208]	; (800a470 <_printf_i+0x21c>)
 800a39e:	9203      	str	r2, [sp, #12]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	6821      	ldr	r1, [r4, #0]
 800a3a4:	ca20      	ldmia	r2!, {r5}
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	0608      	lsls	r0, r1, #24
 800a3aa:	d516      	bpl.n	800a3da <_printf_i+0x186>
 800a3ac:	07cb      	lsls	r3, r1, #31
 800a3ae:	d502      	bpl.n	800a3b6 <_printf_i+0x162>
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	4319      	orrs	r1, r3
 800a3b4:	6021      	str	r1, [r4, #0]
 800a3b6:	2710      	movs	r7, #16
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	d1b2      	bne.n	800a322 <_printf_i+0xce>
 800a3bc:	2320      	movs	r3, #32
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	439a      	bics	r2, r3
 800a3c2:	6022      	str	r2, [r4, #0]
 800a3c4:	e7ad      	b.n	800a322 <_printf_i+0xce>
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	6809      	ldr	r1, [r1, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	6022      	str	r2, [r4, #0]
 800a3ce:	0022      	movs	r2, r4
 800a3d0:	2178      	movs	r1, #120	; 0x78
 800a3d2:	3245      	adds	r2, #69	; 0x45
 800a3d4:	7011      	strb	r1, [r2, #0]
 800a3d6:	4a27      	ldr	r2, [pc, #156]	; (800a474 <_printf_i+0x220>)
 800a3d8:	e7e1      	b.n	800a39e <_printf_i+0x14a>
 800a3da:	0648      	lsls	r0, r1, #25
 800a3dc:	d5e6      	bpl.n	800a3ac <_printf_i+0x158>
 800a3de:	b2ad      	uxth	r5, r5
 800a3e0:	e7e4      	b.n	800a3ac <_printf_i+0x158>
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	680d      	ldr	r5, [r1, #0]
 800a3e6:	1d10      	adds	r0, r2, #4
 800a3e8:	6949      	ldr	r1, [r1, #20]
 800a3ea:	6018      	str	r0, [r3, #0]
 800a3ec:	6813      	ldr	r3, [r2, #0]
 800a3ee:	062e      	lsls	r6, r5, #24
 800a3f0:	d501      	bpl.n	800a3f6 <_printf_i+0x1a2>
 800a3f2:	6019      	str	r1, [r3, #0]
 800a3f4:	e002      	b.n	800a3fc <_printf_i+0x1a8>
 800a3f6:	066d      	lsls	r5, r5, #25
 800a3f8:	d5fb      	bpl.n	800a3f2 <_printf_i+0x19e>
 800a3fa:	8019      	strh	r1, [r3, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9e04      	ldr	r6, [sp, #16]
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	e7bb      	b.n	800a37c <_printf_i+0x128>
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	1d11      	adds	r1, r2, #4
 800a408:	6019      	str	r1, [r3, #0]
 800a40a:	6816      	ldr	r6, [r2, #0]
 800a40c:	2100      	movs	r1, #0
 800a40e:	0030      	movs	r0, r6
 800a410:	6862      	ldr	r2, [r4, #4]
 800a412:	f000 f8db 	bl	800a5cc <memchr>
 800a416:	2800      	cmp	r0, #0
 800a418:	d001      	beq.n	800a41e <_printf_i+0x1ca>
 800a41a:	1b80      	subs	r0, r0, r6
 800a41c:	6060      	str	r0, [r4, #4]
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	2300      	movs	r3, #0
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	7013      	strb	r3, [r2, #0]
 800a428:	e7a8      	b.n	800a37c <_printf_i+0x128>
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	0032      	movs	r2, r6
 800a42e:	9906      	ldr	r1, [sp, #24]
 800a430:	9805      	ldr	r0, [sp, #20]
 800a432:	9d07      	ldr	r5, [sp, #28]
 800a434:	47a8      	blx	r5
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	d0aa      	beq.n	800a390 <_printf_i+0x13c>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	079b      	lsls	r3, r3, #30
 800a43e:	d415      	bmi.n	800a46c <_printf_i+0x218>
 800a440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a442:	68e0      	ldr	r0, [r4, #12]
 800a444:	4298      	cmp	r0, r3
 800a446:	daa5      	bge.n	800a394 <_printf_i+0x140>
 800a448:	0018      	movs	r0, r3
 800a44a:	e7a3      	b.n	800a394 <_printf_i+0x140>
 800a44c:	0022      	movs	r2, r4
 800a44e:	2301      	movs	r3, #1
 800a450:	9906      	ldr	r1, [sp, #24]
 800a452:	9805      	ldr	r0, [sp, #20]
 800a454:	9e07      	ldr	r6, [sp, #28]
 800a456:	3219      	adds	r2, #25
 800a458:	47b0      	blx	r6
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	d098      	beq.n	800a390 <_printf_i+0x13c>
 800a45e:	3501      	adds	r5, #1
 800a460:	68e3      	ldr	r3, [r4, #12]
 800a462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	42ab      	cmp	r3, r5
 800a468:	dcf0      	bgt.n	800a44c <_printf_i+0x1f8>
 800a46a:	e7e9      	b.n	800a440 <_printf_i+0x1ec>
 800a46c:	2500      	movs	r5, #0
 800a46e:	e7f7      	b.n	800a460 <_printf_i+0x20c>
 800a470:	0800aec1 	.word	0x0800aec1
 800a474:	0800aed2 	.word	0x0800aed2

0800a478 <__sread>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	000c      	movs	r4, r1
 800a47c:	250e      	movs	r5, #14
 800a47e:	5f49      	ldrsh	r1, [r1, r5]
 800a480:	f000 f8de 	bl	800a640 <_read_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	db03      	blt.n	800a490 <__sread+0x18>
 800a488:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a48a:	181b      	adds	r3, r3, r0
 800a48c:	6563      	str	r3, [r4, #84]	; 0x54
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	4a02      	ldr	r2, [pc, #8]	; (800a49c <__sread+0x24>)
 800a494:	4013      	ands	r3, r2
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	e7f9      	b.n	800a48e <__sread+0x16>
 800a49a:	46c0      	nop			; (mov r8, r8)
 800a49c:	ffffefff 	.word	0xffffefff

0800a4a0 <__swrite>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	001f      	movs	r7, r3
 800a4a4:	898b      	ldrh	r3, [r1, #12]
 800a4a6:	0005      	movs	r5, r0
 800a4a8:	000c      	movs	r4, r1
 800a4aa:	0016      	movs	r6, r2
 800a4ac:	05db      	lsls	r3, r3, #23
 800a4ae:	d505      	bpl.n	800a4bc <__swrite+0x1c>
 800a4b0:	230e      	movs	r3, #14
 800a4b2:	5ec9      	ldrsh	r1, [r1, r3]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	f000 f874 	bl	800a5a4 <_lseek_r>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	4a05      	ldr	r2, [pc, #20]	; (800a4d4 <__swrite+0x34>)
 800a4c0:	0028      	movs	r0, r5
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	0032      	movs	r2, r6
 800a4c8:	230e      	movs	r3, #14
 800a4ca:	5ee1      	ldrsh	r1, [r4, r3]
 800a4cc:	003b      	movs	r3, r7
 800a4ce:	f000 f81f 	bl	800a510 <_write_r>
 800a4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4d4:	ffffefff 	.word	0xffffefff

0800a4d8 <__sseek>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	000c      	movs	r4, r1
 800a4dc:	250e      	movs	r5, #14
 800a4de:	5f49      	ldrsh	r1, [r1, r5]
 800a4e0:	f000 f860 	bl	800a5a4 <_lseek_r>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	1c42      	adds	r2, r0, #1
 800a4e8:	d103      	bne.n	800a4f2 <__sseek+0x1a>
 800a4ea:	4a05      	ldr	r2, [pc, #20]	; (800a500 <__sseek+0x28>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	81a3      	strh	r3, [r4, #12]
 800a4f0:	bd70      	pop	{r4, r5, r6, pc}
 800a4f2:	2280      	movs	r2, #128	; 0x80
 800a4f4:	0152      	lsls	r2, r2, #5
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a4fc:	e7f8      	b.n	800a4f0 <__sseek+0x18>
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	ffffefff 	.word	0xffffefff

0800a504 <__sclose>:
 800a504:	b510      	push	{r4, lr}
 800a506:	230e      	movs	r3, #14
 800a508:	5ec9      	ldrsh	r1, [r1, r3]
 800a50a:	f000 f815 	bl	800a538 <_close_r>
 800a50e:	bd10      	pop	{r4, pc}

0800a510 <_write_r>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	0004      	movs	r4, r0
 800a514:	0008      	movs	r0, r1
 800a516:	0011      	movs	r1, r2
 800a518:	001a      	movs	r2, r3
 800a51a:	2300      	movs	r3, #0
 800a51c:	4d05      	ldr	r5, [pc, #20]	; (800a534 <_write_r+0x24>)
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f9 fc74 	bl	8003e0c <_write>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d103      	bne.n	800a530 <_write_r+0x20>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d000      	beq.n	800a530 <_write_r+0x20>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	20000e3c 	.word	0x20000e3c

0800a538 <_close_r>:
 800a538:	2300      	movs	r3, #0
 800a53a:	b570      	push	{r4, r5, r6, lr}
 800a53c:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_close_r+0x20>)
 800a53e:	0004      	movs	r4, r0
 800a540:	0008      	movs	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f9 fc7e 	bl	8003e44 <_close>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d103      	bne.n	800a554 <_close_r+0x1c>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d000      	beq.n	800a554 <_close_r+0x1c>
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	20000e3c 	.word	0x20000e3c

0800a55c <_fstat_r>:
 800a55c:	2300      	movs	r3, #0
 800a55e:	b570      	push	{r4, r5, r6, lr}
 800a560:	4d06      	ldr	r5, [pc, #24]	; (800a57c <_fstat_r+0x20>)
 800a562:	0004      	movs	r4, r0
 800a564:	0008      	movs	r0, r1
 800a566:	0011      	movs	r1, r2
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	f7f9 fc75 	bl	8003e58 <_fstat>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d103      	bne.n	800a57a <_fstat_r+0x1e>
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d000      	beq.n	800a57a <_fstat_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	20000e3c 	.word	0x20000e3c

0800a580 <_isatty_r>:
 800a580:	2300      	movs	r3, #0
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	4d06      	ldr	r5, [pc, #24]	; (800a5a0 <_isatty_r+0x20>)
 800a586:	0004      	movs	r4, r0
 800a588:	0008      	movs	r0, r1
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7f9 fc72 	bl	8003e74 <_isatty>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d103      	bne.n	800a59c <_isatty_r+0x1c>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d000      	beq.n	800a59c <_isatty_r+0x1c>
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	20000e3c 	.word	0x20000e3c

0800a5a4 <_lseek_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	0004      	movs	r4, r0
 800a5a8:	0008      	movs	r0, r1
 800a5aa:	0011      	movs	r1, r2
 800a5ac:	001a      	movs	r2, r3
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4d05      	ldr	r5, [pc, #20]	; (800a5c8 <_lseek_r+0x24>)
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f9 fc67 	bl	8003e86 <_lseek>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_lseek_r+0x20>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d000      	beq.n	800a5c4 <_lseek_r+0x20>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	20000e3c 	.word	0x20000e3c

0800a5cc <memchr>:
 800a5cc:	b2c9      	uxtb	r1, r1
 800a5ce:	1882      	adds	r2, r0, r2
 800a5d0:	4290      	cmp	r0, r2
 800a5d2:	d101      	bne.n	800a5d8 <memchr+0xc>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	4770      	bx	lr
 800a5d8:	7803      	ldrb	r3, [r0, #0]
 800a5da:	428b      	cmp	r3, r1
 800a5dc:	d0fb      	beq.n	800a5d6 <memchr+0xa>
 800a5de:	3001      	adds	r0, #1
 800a5e0:	e7f6      	b.n	800a5d0 <memchr+0x4>

0800a5e2 <_realloc_r>:
 800a5e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e4:	0007      	movs	r7, r0
 800a5e6:	000e      	movs	r6, r1
 800a5e8:	0014      	movs	r4, r2
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	d105      	bne.n	800a5fa <_realloc_r+0x18>
 800a5ee:	0011      	movs	r1, r2
 800a5f0:	f7fe fe76 	bl	80092e0 <_malloc_r>
 800a5f4:	0005      	movs	r5, r0
 800a5f6:	0028      	movs	r0, r5
 800a5f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	d103      	bne.n	800a606 <_realloc_r+0x24>
 800a5fe:	f7fe fe03 	bl	8009208 <_free_r>
 800a602:	0025      	movs	r5, r4
 800a604:	e7f7      	b.n	800a5f6 <_realloc_r+0x14>
 800a606:	f000 f82f 	bl	800a668 <_malloc_usable_size_r>
 800a60a:	9001      	str	r0, [sp, #4]
 800a60c:	4284      	cmp	r4, r0
 800a60e:	d803      	bhi.n	800a618 <_realloc_r+0x36>
 800a610:	0035      	movs	r5, r6
 800a612:	0843      	lsrs	r3, r0, #1
 800a614:	42a3      	cmp	r3, r4
 800a616:	d3ee      	bcc.n	800a5f6 <_realloc_r+0x14>
 800a618:	0021      	movs	r1, r4
 800a61a:	0038      	movs	r0, r7
 800a61c:	f7fe fe60 	bl	80092e0 <_malloc_r>
 800a620:	1e05      	subs	r5, r0, #0
 800a622:	d0e8      	beq.n	800a5f6 <_realloc_r+0x14>
 800a624:	9b01      	ldr	r3, [sp, #4]
 800a626:	0022      	movs	r2, r4
 800a628:	429c      	cmp	r4, r3
 800a62a:	d900      	bls.n	800a62e <_realloc_r+0x4c>
 800a62c:	001a      	movs	r2, r3
 800a62e:	0031      	movs	r1, r6
 800a630:	0028      	movs	r0, r5
 800a632:	f7fe fd99 	bl	8009168 <memcpy>
 800a636:	0031      	movs	r1, r6
 800a638:	0038      	movs	r0, r7
 800a63a:	f7fe fde5 	bl	8009208 <_free_r>
 800a63e:	e7da      	b.n	800a5f6 <_realloc_r+0x14>

0800a640 <_read_r>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	0004      	movs	r4, r0
 800a644:	0008      	movs	r0, r1
 800a646:	0011      	movs	r1, r2
 800a648:	001a      	movs	r2, r3
 800a64a:	2300      	movs	r3, #0
 800a64c:	4d05      	ldr	r5, [pc, #20]	; (800a664 <_read_r+0x24>)
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f9 fbbf 	bl	8003dd2 <_read>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d103      	bne.n	800a660 <_read_r+0x20>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d000      	beq.n	800a660 <_read_r+0x20>
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	20000e3c 	.word	0x20000e3c

0800a668 <_malloc_usable_size_r>:
 800a668:	1f0b      	subs	r3, r1, #4
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	1f18      	subs	r0, r3, #4
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da01      	bge.n	800a676 <_malloc_usable_size_r+0xe>
 800a672:	580b      	ldr	r3, [r1, r0]
 800a674:	18c0      	adds	r0, r0, r3
 800a676:	4770      	bx	lr

0800a678 <sqrt>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	0004      	movs	r4, r0
 800a67c:	000d      	movs	r5, r1
 800a67e:	f000 f821 	bl	800a6c4 <__ieee754_sqrt>
 800a682:	0022      	movs	r2, r4
 800a684:	0006      	movs	r6, r0
 800a686:	000f      	movs	r7, r1
 800a688:	002b      	movs	r3, r5
 800a68a:	0020      	movs	r0, r4
 800a68c:	0029      	movs	r1, r5
 800a68e:	f7f8 f9df 	bl	8002a50 <__aeabi_dcmpun>
 800a692:	2800      	cmp	r0, #0
 800a694:	d113      	bne.n	800a6be <sqrt+0x46>
 800a696:	2200      	movs	r2, #0
 800a698:	2300      	movs	r3, #0
 800a69a:	0020      	movs	r0, r4
 800a69c:	0029      	movs	r1, r5
 800a69e:	f7f5 fec9 	bl	8000434 <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d00b      	beq.n	800a6be <sqrt+0x46>
 800a6a6:	f7fe fd1d 	bl	80090e4 <__errno>
 800a6aa:	2321      	movs	r3, #33	; 0x21
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	6003      	str	r3, [r0, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	0010      	movs	r0, r2
 800a6b4:	0019      	movs	r1, r3
 800a6b6:	f7f6 ffcb 	bl	8001650 <__aeabi_ddiv>
 800a6ba:	0006      	movs	r6, r0
 800a6bc:	000f      	movs	r7, r1
 800a6be:	0030      	movs	r0, r6
 800a6c0:	0039      	movs	r1, r7
 800a6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6c4 <__ieee754_sqrt>:
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	000b      	movs	r3, r1
 800a6c8:	000c      	movs	r4, r1
 800a6ca:	4956      	ldr	r1, [pc, #344]	; (800a824 <__ieee754_sqrt+0x160>)
 800a6cc:	0005      	movs	r5, r0
 800a6ce:	0002      	movs	r2, r0
 800a6d0:	0008      	movs	r0, r1
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	4020      	ands	r0, r4
 800a6d6:	4288      	cmp	r0, r1
 800a6d8:	d10f      	bne.n	800a6fa <__ieee754_sqrt+0x36>
 800a6da:	0028      	movs	r0, r5
 800a6dc:	0021      	movs	r1, r4
 800a6de:	f7f7 fbb9 	bl	8001e54 <__aeabi_dmul>
 800a6e2:	0002      	movs	r2, r0
 800a6e4:	000b      	movs	r3, r1
 800a6e6:	0028      	movs	r0, r5
 800a6e8:	0021      	movs	r1, r4
 800a6ea:	f7f6 fc75 	bl	8000fd8 <__aeabi_dadd>
 800a6ee:	0005      	movs	r5, r0
 800a6f0:	000c      	movs	r4, r1
 800a6f2:	0028      	movs	r0, r5
 800a6f4:	0021      	movs	r1, r4
 800a6f6:	b005      	add	sp, #20
 800a6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	dc10      	bgt.n	800a720 <__ieee754_sqrt+0x5c>
 800a6fe:	0061      	lsls	r1, r4, #1
 800a700:	0849      	lsrs	r1, r1, #1
 800a702:	4329      	orrs	r1, r5
 800a704:	d0f5      	beq.n	800a6f2 <__ieee754_sqrt+0x2e>
 800a706:	2100      	movs	r1, #0
 800a708:	428c      	cmp	r4, r1
 800a70a:	d100      	bne.n	800a70e <__ieee754_sqrt+0x4a>
 800a70c:	e080      	b.n	800a810 <__ieee754_sqrt+0x14c>
 800a70e:	0028      	movs	r0, r5
 800a710:	0021      	movs	r1, r4
 800a712:	f7f7 fe0b 	bl	800232c <__aeabi_dsub>
 800a716:	0002      	movs	r2, r0
 800a718:	000b      	movs	r3, r1
 800a71a:	f7f6 ff99 	bl	8001650 <__aeabi_ddiv>
 800a71e:	e7e6      	b.n	800a6ee <__ieee754_sqrt+0x2a>
 800a720:	1521      	asrs	r1, r4, #20
 800a722:	d075      	beq.n	800a810 <__ieee754_sqrt+0x14c>
 800a724:	4840      	ldr	r0, [pc, #256]	; (800a828 <__ieee754_sqrt+0x164>)
 800a726:	031b      	lsls	r3, r3, #12
 800a728:	180c      	adds	r4, r1, r0
 800a72a:	2080      	movs	r0, #128	; 0x80
 800a72c:	0b1b      	lsrs	r3, r3, #12
 800a72e:	0340      	lsls	r0, r0, #13
 800a730:	4303      	orrs	r3, r0
 800a732:	07c9      	lsls	r1, r1, #31
 800a734:	d403      	bmi.n	800a73e <__ieee754_sqrt+0x7a>
 800a736:	0fd1      	lsrs	r1, r2, #31
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	185b      	adds	r3, r3, r1
 800a73c:	0052      	lsls	r2, r2, #1
 800a73e:	1061      	asrs	r1, r4, #1
 800a740:	2400      	movs	r4, #0
 800a742:	9103      	str	r1, [sp, #12]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	0fd1      	lsrs	r1, r2, #31
 800a748:	185b      	adds	r3, r3, r1
 800a74a:	2180      	movs	r1, #128	; 0x80
 800a74c:	2516      	movs	r5, #22
 800a74e:	0020      	movs	r0, r4
 800a750:	0052      	lsls	r2, r2, #1
 800a752:	0389      	lsls	r1, r1, #14
 800a754:	1846      	adds	r6, r0, r1
 800a756:	429e      	cmp	r6, r3
 800a758:	dc02      	bgt.n	800a760 <__ieee754_sqrt+0x9c>
 800a75a:	1870      	adds	r0, r6, r1
 800a75c:	1b9b      	subs	r3, r3, r6
 800a75e:	1864      	adds	r4, r4, r1
 800a760:	0fd6      	lsrs	r6, r2, #31
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	3d01      	subs	r5, #1
 800a766:	18f3      	adds	r3, r6, r3
 800a768:	0052      	lsls	r2, r2, #1
 800a76a:	0849      	lsrs	r1, r1, #1
 800a76c:	2d00      	cmp	r5, #0
 800a76e:	d1f1      	bne.n	800a754 <__ieee754_sqrt+0x90>
 800a770:	2620      	movs	r6, #32
 800a772:	2780      	movs	r7, #128	; 0x80
 800a774:	0029      	movs	r1, r5
 800a776:	9601      	str	r6, [sp, #4]
 800a778:	063f      	lsls	r7, r7, #24
 800a77a:	197e      	adds	r6, r7, r5
 800a77c:	46b4      	mov	ip, r6
 800a77e:	4283      	cmp	r3, r0
 800a780:	dc02      	bgt.n	800a788 <__ieee754_sqrt+0xc4>
 800a782:	d114      	bne.n	800a7ae <__ieee754_sqrt+0xea>
 800a784:	4296      	cmp	r6, r2
 800a786:	d812      	bhi.n	800a7ae <__ieee754_sqrt+0xea>
 800a788:	4665      	mov	r5, ip
 800a78a:	4666      	mov	r6, ip
 800a78c:	19ed      	adds	r5, r5, r7
 800a78e:	9002      	str	r0, [sp, #8]
 800a790:	2e00      	cmp	r6, #0
 800a792:	da03      	bge.n	800a79c <__ieee754_sqrt+0xd8>
 800a794:	43ee      	mvns	r6, r5
 800a796:	0ff6      	lsrs	r6, r6, #31
 800a798:	1986      	adds	r6, r0, r6
 800a79a:	9602      	str	r6, [sp, #8]
 800a79c:	1a1b      	subs	r3, r3, r0
 800a79e:	4562      	cmp	r2, ip
 800a7a0:	4180      	sbcs	r0, r0
 800a7a2:	4240      	negs	r0, r0
 800a7a4:	1a1b      	subs	r3, r3, r0
 800a7a6:	4660      	mov	r0, ip
 800a7a8:	1a12      	subs	r2, r2, r0
 800a7aa:	9802      	ldr	r0, [sp, #8]
 800a7ac:	19c9      	adds	r1, r1, r7
 800a7ae:	0fd6      	lsrs	r6, r2, #31
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	199b      	adds	r3, r3, r6
 800a7b4:	9e01      	ldr	r6, [sp, #4]
 800a7b6:	0052      	lsls	r2, r2, #1
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	087f      	lsrs	r7, r7, #1
 800a7bc:	9601      	str	r6, [sp, #4]
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	d1db      	bne.n	800a77a <__ieee754_sqrt+0xb6>
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	d003      	beq.n	800a7ce <__ieee754_sqrt+0x10a>
 800a7c6:	1c4b      	adds	r3, r1, #1
 800a7c8:	d127      	bne.n	800a81a <__ieee754_sqrt+0x156>
 800a7ca:	0031      	movs	r1, r6
 800a7cc:	3401      	adds	r4, #1
 800a7ce:	4b17      	ldr	r3, [pc, #92]	; (800a82c <__ieee754_sqrt+0x168>)
 800a7d0:	1060      	asrs	r0, r4, #1
 800a7d2:	18c0      	adds	r0, r0, r3
 800a7d4:	0849      	lsrs	r1, r1, #1
 800a7d6:	07e3      	lsls	r3, r4, #31
 800a7d8:	d502      	bpl.n	800a7e0 <__ieee754_sqrt+0x11c>
 800a7da:	2380      	movs	r3, #128	; 0x80
 800a7dc:	061b      	lsls	r3, r3, #24
 800a7de:	4319      	orrs	r1, r3
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	000d      	movs	r5, r1
 800a7e4:	051c      	lsls	r4, r3, #20
 800a7e6:	1823      	adds	r3, r4, r0
 800a7e8:	001c      	movs	r4, r3
 800a7ea:	e782      	b.n	800a6f2 <__ieee754_sqrt+0x2e>
 800a7ec:	0ad3      	lsrs	r3, r2, #11
 800a7ee:	3815      	subs	r0, #21
 800a7f0:	0552      	lsls	r2, r2, #21
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0fa      	beq.n	800a7ec <__ieee754_sqrt+0x128>
 800a7f6:	2480      	movs	r4, #128	; 0x80
 800a7f8:	0364      	lsls	r4, r4, #13
 800a7fa:	4223      	tst	r3, r4
 800a7fc:	d00a      	beq.n	800a814 <__ieee754_sqrt+0x150>
 800a7fe:	2420      	movs	r4, #32
 800a800:	0016      	movs	r6, r2
 800a802:	1a64      	subs	r4, r4, r1
 800a804:	40e6      	lsrs	r6, r4
 800a806:	1e4d      	subs	r5, r1, #1
 800a808:	408a      	lsls	r2, r1
 800a80a:	4333      	orrs	r3, r6
 800a80c:	1b41      	subs	r1, r0, r5
 800a80e:	e789      	b.n	800a724 <__ieee754_sqrt+0x60>
 800a810:	2000      	movs	r0, #0
 800a812:	e7ee      	b.n	800a7f2 <__ieee754_sqrt+0x12e>
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	3101      	adds	r1, #1
 800a818:	e7ef      	b.n	800a7fa <__ieee754_sqrt+0x136>
 800a81a:	2301      	movs	r3, #1
 800a81c:	3101      	adds	r1, #1
 800a81e:	4399      	bics	r1, r3
 800a820:	e7d5      	b.n	800a7ce <__ieee754_sqrt+0x10a>
 800a822:	46c0      	nop			; (mov r8, r8)
 800a824:	7ff00000 	.word	0x7ff00000
 800a828:	fffffc01 	.word	0xfffffc01
 800a82c:	3fe00000 	.word	0x3fe00000

0800a830 <_gettimeofday>:
 800a830:	2258      	movs	r2, #88	; 0x58
 800a832:	2001      	movs	r0, #1
 800a834:	4b01      	ldr	r3, [pc, #4]	; (800a83c <_gettimeofday+0xc>)
 800a836:	4240      	negs	r0, r0
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	4770      	bx	lr
 800a83c:	20000e3c 	.word	0x20000e3c

0800a840 <_init>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a846:	bc08      	pop	{r3}
 800a848:	469e      	mov	lr, r3
 800a84a:	4770      	bx	lr

0800a84c <_fini>:
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a852:	bc08      	pop	{r3}
 800a854:	469e      	mov	lr, r3
 800a856:	4770      	bx	lr
