
EEE3097S_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800846c  0800846c  0001846c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a0  080086a0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080086a0  080086a0  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086a0  080086a0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080086a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000cc  08008774  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08008774  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc65  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002517  00000000  00000000  0002dd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013694  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001137a  00000000  00000000  00044dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e308  00000000  00000000  00056176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c447e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000c44d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008454 	.word	0x08008454

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08008454 	.word	0x08008454

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0010      	movs	r0, r2
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	0019      	movs	r1, r3
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fcb7 	bl	8001bb8 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fc07 	bl	8001a68 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fca9 	bl	8001bb8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fc9f 	bl	8001bb8 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fc2f 	bl	8001aec <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fc25 	bl	8001aec <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	0008      	movs	r0, r1
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fa3d 	bl	8000738 <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 f9c9 	bl	8000660 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fa2f 	bl	8000738 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fa25 	bl	8000738 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f9d5 	bl	80006ac <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 f9cb 	bl	80006ac <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_fadd>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	46c6      	mov	lr, r8
 8000328:	0243      	lsls	r3, r0, #9
 800032a:	0a5b      	lsrs	r3, r3, #9
 800032c:	024e      	lsls	r6, r1, #9
 800032e:	0045      	lsls	r5, r0, #1
 8000330:	004f      	lsls	r7, r1, #1
 8000332:	00da      	lsls	r2, r3, #3
 8000334:	0fc4      	lsrs	r4, r0, #31
 8000336:	469c      	mov	ip, r3
 8000338:	0a70      	lsrs	r0, r6, #9
 800033a:	4690      	mov	r8, r2
 800033c:	b500      	push	{lr}
 800033e:	0e2d      	lsrs	r5, r5, #24
 8000340:	0e3f      	lsrs	r7, r7, #24
 8000342:	0fc9      	lsrs	r1, r1, #31
 8000344:	09b6      	lsrs	r6, r6, #6
 8000346:	428c      	cmp	r4, r1
 8000348:	d04b      	beq.n	80003e2 <__aeabi_fadd+0xbe>
 800034a:	1bea      	subs	r2, r5, r7
 800034c:	2a00      	cmp	r2, #0
 800034e:	dd36      	ble.n	80003be <__aeabi_fadd+0x9a>
 8000350:	2f00      	cmp	r7, #0
 8000352:	d061      	beq.n	8000418 <__aeabi_fadd+0xf4>
 8000354:	2dff      	cmp	r5, #255	; 0xff
 8000356:	d100      	bne.n	800035a <__aeabi_fadd+0x36>
 8000358:	e0ad      	b.n	80004b6 <__aeabi_fadd+0x192>
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	04db      	lsls	r3, r3, #19
 800035e:	431e      	orrs	r6, r3
 8000360:	2a1b      	cmp	r2, #27
 8000362:	dc00      	bgt.n	8000366 <__aeabi_fadd+0x42>
 8000364:	e0d3      	b.n	800050e <__aeabi_fadd+0x1ea>
 8000366:	2001      	movs	r0, #1
 8000368:	4643      	mov	r3, r8
 800036a:	1a18      	subs	r0, r3, r0
 800036c:	0143      	lsls	r3, r0, #5
 800036e:	d400      	bmi.n	8000372 <__aeabi_fadd+0x4e>
 8000370:	e08c      	b.n	800048c <__aeabi_fadd+0x168>
 8000372:	0180      	lsls	r0, r0, #6
 8000374:	0987      	lsrs	r7, r0, #6
 8000376:	0038      	movs	r0, r7
 8000378:	f002 fb9e 	bl	8002ab8 <__clzsi2>
 800037c:	3805      	subs	r0, #5
 800037e:	4087      	lsls	r7, r0
 8000380:	4285      	cmp	r5, r0
 8000382:	dc00      	bgt.n	8000386 <__aeabi_fadd+0x62>
 8000384:	e0b6      	b.n	80004f4 <__aeabi_fadd+0x1d0>
 8000386:	1a2d      	subs	r5, r5, r0
 8000388:	48b3      	ldr	r0, [pc, #716]	; (8000658 <__aeabi_fadd+0x334>)
 800038a:	4038      	ands	r0, r7
 800038c:	0743      	lsls	r3, r0, #29
 800038e:	d004      	beq.n	800039a <__aeabi_fadd+0x76>
 8000390:	230f      	movs	r3, #15
 8000392:	4003      	ands	r3, r0
 8000394:	2b04      	cmp	r3, #4
 8000396:	d000      	beq.n	800039a <__aeabi_fadd+0x76>
 8000398:	3004      	adds	r0, #4
 800039a:	0143      	lsls	r3, r0, #5
 800039c:	d400      	bmi.n	80003a0 <__aeabi_fadd+0x7c>
 800039e:	e078      	b.n	8000492 <__aeabi_fadd+0x16e>
 80003a0:	1c6a      	adds	r2, r5, #1
 80003a2:	2dfe      	cmp	r5, #254	; 0xfe
 80003a4:	d065      	beq.n	8000472 <__aeabi_fadd+0x14e>
 80003a6:	0180      	lsls	r0, r0, #6
 80003a8:	0a43      	lsrs	r3, r0, #9
 80003aa:	469c      	mov	ip, r3
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	4663      	mov	r3, ip
 80003b0:	05d0      	lsls	r0, r2, #23
 80003b2:	4318      	orrs	r0, r3
 80003b4:	07e4      	lsls	r4, r4, #31
 80003b6:	4320      	orrs	r0, r4
 80003b8:	bc80      	pop	{r7}
 80003ba:	46b8      	mov	r8, r7
 80003bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d035      	beq.n	800042e <__aeabi_fadd+0x10a>
 80003c2:	1b7a      	subs	r2, r7, r5
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d000      	beq.n	80003ca <__aeabi_fadd+0xa6>
 80003c8:	e0af      	b.n	800052a <__aeabi_fadd+0x206>
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fadd+0xae>
 80003d0:	e0a7      	b.n	8000522 <__aeabi_fadd+0x1fe>
 80003d2:	1e53      	subs	r3, r2, #1
 80003d4:	2a01      	cmp	r2, #1
 80003d6:	d100      	bne.n	80003da <__aeabi_fadd+0xb6>
 80003d8:	e12f      	b.n	800063a <__aeabi_fadd+0x316>
 80003da:	2aff      	cmp	r2, #255	; 0xff
 80003dc:	d069      	beq.n	80004b2 <__aeabi_fadd+0x18e>
 80003de:	001a      	movs	r2, r3
 80003e0:	e0aa      	b.n	8000538 <__aeabi_fadd+0x214>
 80003e2:	1be9      	subs	r1, r5, r7
 80003e4:	2900      	cmp	r1, #0
 80003e6:	dd70      	ble.n	80004ca <__aeabi_fadd+0x1a6>
 80003e8:	2f00      	cmp	r7, #0
 80003ea:	d037      	beq.n	800045c <__aeabi_fadd+0x138>
 80003ec:	2dff      	cmp	r5, #255	; 0xff
 80003ee:	d062      	beq.n	80004b6 <__aeabi_fadd+0x192>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	04db      	lsls	r3, r3, #19
 80003f4:	431e      	orrs	r6, r3
 80003f6:	291b      	cmp	r1, #27
 80003f8:	dc00      	bgt.n	80003fc <__aeabi_fadd+0xd8>
 80003fa:	e0b0      	b.n	800055e <__aeabi_fadd+0x23a>
 80003fc:	2001      	movs	r0, #1
 80003fe:	4440      	add	r0, r8
 8000400:	0143      	lsls	r3, r0, #5
 8000402:	d543      	bpl.n	800048c <__aeabi_fadd+0x168>
 8000404:	3501      	adds	r5, #1
 8000406:	2dff      	cmp	r5, #255	; 0xff
 8000408:	d033      	beq.n	8000472 <__aeabi_fadd+0x14e>
 800040a:	2301      	movs	r3, #1
 800040c:	4a93      	ldr	r2, [pc, #588]	; (800065c <__aeabi_fadd+0x338>)
 800040e:	4003      	ands	r3, r0
 8000410:	0840      	lsrs	r0, r0, #1
 8000412:	4010      	ands	r0, r2
 8000414:	4318      	orrs	r0, r3
 8000416:	e7b9      	b.n	800038c <__aeabi_fadd+0x68>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d100      	bne.n	800041e <__aeabi_fadd+0xfa>
 800041c:	e083      	b.n	8000526 <__aeabi_fadd+0x202>
 800041e:	1e51      	subs	r1, r2, #1
 8000420:	2a01      	cmp	r2, #1
 8000422:	d100      	bne.n	8000426 <__aeabi_fadd+0x102>
 8000424:	e0d8      	b.n	80005d8 <__aeabi_fadd+0x2b4>
 8000426:	2aff      	cmp	r2, #255	; 0xff
 8000428:	d045      	beq.n	80004b6 <__aeabi_fadd+0x192>
 800042a:	000a      	movs	r2, r1
 800042c:	e798      	b.n	8000360 <__aeabi_fadd+0x3c>
 800042e:	27fe      	movs	r7, #254	; 0xfe
 8000430:	1c6a      	adds	r2, r5, #1
 8000432:	4217      	tst	r7, r2
 8000434:	d000      	beq.n	8000438 <__aeabi_fadd+0x114>
 8000436:	e086      	b.n	8000546 <__aeabi_fadd+0x222>
 8000438:	2d00      	cmp	r5, #0
 800043a:	d000      	beq.n	800043e <__aeabi_fadd+0x11a>
 800043c:	e0b7      	b.n	80005ae <__aeabi_fadd+0x28a>
 800043e:	4643      	mov	r3, r8
 8000440:	2b00      	cmp	r3, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_fadd+0x122>
 8000444:	e0f3      	b.n	800062e <__aeabi_fadd+0x30a>
 8000446:	2200      	movs	r2, #0
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0b0      	beq.n	80003ae <__aeabi_fadd+0x8a>
 800044c:	1b98      	subs	r0, r3, r6
 800044e:	0143      	lsls	r3, r0, #5
 8000450:	d400      	bmi.n	8000454 <__aeabi_fadd+0x130>
 8000452:	e0fa      	b.n	800064a <__aeabi_fadd+0x326>
 8000454:	4643      	mov	r3, r8
 8000456:	000c      	movs	r4, r1
 8000458:	1af0      	subs	r0, r6, r3
 800045a:	e797      	b.n	800038c <__aeabi_fadd+0x68>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d100      	bne.n	8000462 <__aeabi_fadd+0x13e>
 8000460:	e0c8      	b.n	80005f4 <__aeabi_fadd+0x2d0>
 8000462:	1e4a      	subs	r2, r1, #1
 8000464:	2901      	cmp	r1, #1
 8000466:	d100      	bne.n	800046a <__aeabi_fadd+0x146>
 8000468:	e0ae      	b.n	80005c8 <__aeabi_fadd+0x2a4>
 800046a:	29ff      	cmp	r1, #255	; 0xff
 800046c:	d023      	beq.n	80004b6 <__aeabi_fadd+0x192>
 800046e:	0011      	movs	r1, r2
 8000470:	e7c1      	b.n	80003f6 <__aeabi_fadd+0xd2>
 8000472:	2300      	movs	r3, #0
 8000474:	22ff      	movs	r2, #255	; 0xff
 8000476:	469c      	mov	ip, r3
 8000478:	e799      	b.n	80003ae <__aeabi_fadd+0x8a>
 800047a:	21fe      	movs	r1, #254	; 0xfe
 800047c:	1c6a      	adds	r2, r5, #1
 800047e:	4211      	tst	r1, r2
 8000480:	d077      	beq.n	8000572 <__aeabi_fadd+0x24e>
 8000482:	2aff      	cmp	r2, #255	; 0xff
 8000484:	d0f5      	beq.n	8000472 <__aeabi_fadd+0x14e>
 8000486:	0015      	movs	r5, r2
 8000488:	4446      	add	r6, r8
 800048a:	0870      	lsrs	r0, r6, #1
 800048c:	0743      	lsls	r3, r0, #29
 800048e:	d000      	beq.n	8000492 <__aeabi_fadd+0x16e>
 8000490:	e77e      	b.n	8000390 <__aeabi_fadd+0x6c>
 8000492:	08c3      	lsrs	r3, r0, #3
 8000494:	2dff      	cmp	r5, #255	; 0xff
 8000496:	d00e      	beq.n	80004b6 <__aeabi_fadd+0x192>
 8000498:	025b      	lsls	r3, r3, #9
 800049a:	0a5b      	lsrs	r3, r3, #9
 800049c:	469c      	mov	ip, r3
 800049e:	b2ea      	uxtb	r2, r5
 80004a0:	e785      	b.n	80003ae <__aeabi_fadd+0x8a>
 80004a2:	2e00      	cmp	r6, #0
 80004a4:	d007      	beq.n	80004b6 <__aeabi_fadd+0x192>
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	03d2      	lsls	r2, r2, #15
 80004aa:	4213      	tst	r3, r2
 80004ac:	d003      	beq.n	80004b6 <__aeabi_fadd+0x192>
 80004ae:	4210      	tst	r0, r2
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fadd+0x192>
 80004b2:	000c      	movs	r4, r1
 80004b4:	0003      	movs	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0db      	beq.n	8000472 <__aeabi_fadd+0x14e>
 80004ba:	2080      	movs	r0, #128	; 0x80
 80004bc:	03c0      	lsls	r0, r0, #15
 80004be:	4318      	orrs	r0, r3
 80004c0:	0240      	lsls	r0, r0, #9
 80004c2:	0a43      	lsrs	r3, r0, #9
 80004c4:	469c      	mov	ip, r3
 80004c6:	22ff      	movs	r2, #255	; 0xff
 80004c8:	e771      	b.n	80003ae <__aeabi_fadd+0x8a>
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d0d5      	beq.n	800047a <__aeabi_fadd+0x156>
 80004ce:	1b7a      	subs	r2, r7, r5
 80004d0:	2d00      	cmp	r5, #0
 80004d2:	d160      	bne.n	8000596 <__aeabi_fadd+0x272>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d024      	beq.n	8000524 <__aeabi_fadd+0x200>
 80004da:	1e53      	subs	r3, r2, #1
 80004dc:	2a01      	cmp	r2, #1
 80004de:	d073      	beq.n	80005c8 <__aeabi_fadd+0x2a4>
 80004e0:	2aff      	cmp	r2, #255	; 0xff
 80004e2:	d0e7      	beq.n	80004b4 <__aeabi_fadd+0x190>
 80004e4:	001a      	movs	r2, r3
 80004e6:	2a1b      	cmp	r2, #27
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_fadd+0x1c8>
 80004ea:	e085      	b.n	80005f8 <__aeabi_fadd+0x2d4>
 80004ec:	2001      	movs	r0, #1
 80004ee:	003d      	movs	r5, r7
 80004f0:	1980      	adds	r0, r0, r6
 80004f2:	e785      	b.n	8000400 <__aeabi_fadd+0xdc>
 80004f4:	2320      	movs	r3, #32
 80004f6:	003a      	movs	r2, r7
 80004f8:	1b45      	subs	r5, r0, r5
 80004fa:	0038      	movs	r0, r7
 80004fc:	3501      	adds	r5, #1
 80004fe:	40ea      	lsrs	r2, r5
 8000500:	1b5d      	subs	r5, r3, r5
 8000502:	40a8      	lsls	r0, r5
 8000504:	1e43      	subs	r3, r0, #1
 8000506:	4198      	sbcs	r0, r3
 8000508:	2500      	movs	r5, #0
 800050a:	4310      	orrs	r0, r2
 800050c:	e73e      	b.n	800038c <__aeabi_fadd+0x68>
 800050e:	2320      	movs	r3, #32
 8000510:	0030      	movs	r0, r6
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	0031      	movs	r1, r6
 8000516:	4098      	lsls	r0, r3
 8000518:	40d1      	lsrs	r1, r2
 800051a:	1e43      	subs	r3, r0, #1
 800051c:	4198      	sbcs	r0, r3
 800051e:	4308      	orrs	r0, r1
 8000520:	e722      	b.n	8000368 <__aeabi_fadd+0x44>
 8000522:	000c      	movs	r4, r1
 8000524:	0003      	movs	r3, r0
 8000526:	0015      	movs	r5, r2
 8000528:	e7b4      	b.n	8000494 <__aeabi_fadd+0x170>
 800052a:	2fff      	cmp	r7, #255	; 0xff
 800052c:	d0c1      	beq.n	80004b2 <__aeabi_fadd+0x18e>
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	4640      	mov	r0, r8
 8000532:	04db      	lsls	r3, r3, #19
 8000534:	4318      	orrs	r0, r3
 8000536:	4680      	mov	r8, r0
 8000538:	2a1b      	cmp	r2, #27
 800053a:	dd51      	ble.n	80005e0 <__aeabi_fadd+0x2bc>
 800053c:	2001      	movs	r0, #1
 800053e:	000c      	movs	r4, r1
 8000540:	003d      	movs	r5, r7
 8000542:	1a30      	subs	r0, r6, r0
 8000544:	e712      	b.n	800036c <__aeabi_fadd+0x48>
 8000546:	4643      	mov	r3, r8
 8000548:	1b9f      	subs	r7, r3, r6
 800054a:	017b      	lsls	r3, r7, #5
 800054c:	d42b      	bmi.n	80005a6 <__aeabi_fadd+0x282>
 800054e:	2f00      	cmp	r7, #0
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x230>
 8000552:	e710      	b.n	8000376 <__aeabi_fadd+0x52>
 8000554:	2300      	movs	r3, #0
 8000556:	2400      	movs	r4, #0
 8000558:	2200      	movs	r2, #0
 800055a:	469c      	mov	ip, r3
 800055c:	e727      	b.n	80003ae <__aeabi_fadd+0x8a>
 800055e:	2320      	movs	r3, #32
 8000560:	0032      	movs	r2, r6
 8000562:	0030      	movs	r0, r6
 8000564:	40ca      	lsrs	r2, r1
 8000566:	1a59      	subs	r1, r3, r1
 8000568:	4088      	lsls	r0, r1
 800056a:	1e43      	subs	r3, r0, #1
 800056c:	4198      	sbcs	r0, r3
 800056e:	4310      	orrs	r0, r2
 8000570:	e745      	b.n	80003fe <__aeabi_fadd+0xda>
 8000572:	2d00      	cmp	r5, #0
 8000574:	d14a      	bne.n	800060c <__aeabi_fadd+0x2e8>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d063      	beq.n	8000644 <__aeabi_fadd+0x320>
 800057c:	2200      	movs	r2, #0
 800057e:	2e00      	cmp	r6, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x260>
 8000582:	e714      	b.n	80003ae <__aeabi_fadd+0x8a>
 8000584:	0030      	movs	r0, r6
 8000586:	4440      	add	r0, r8
 8000588:	0143      	lsls	r3, r0, #5
 800058a:	d400      	bmi.n	800058e <__aeabi_fadd+0x26a>
 800058c:	e77e      	b.n	800048c <__aeabi_fadd+0x168>
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <__aeabi_fadd+0x334>)
 8000590:	3501      	adds	r5, #1
 8000592:	4018      	ands	r0, r3
 8000594:	e77a      	b.n	800048c <__aeabi_fadd+0x168>
 8000596:	2fff      	cmp	r7, #255	; 0xff
 8000598:	d08c      	beq.n	80004b4 <__aeabi_fadd+0x190>
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	4641      	mov	r1, r8
 800059e:	04db      	lsls	r3, r3, #19
 80005a0:	4319      	orrs	r1, r3
 80005a2:	4688      	mov	r8, r1
 80005a4:	e79f      	b.n	80004e6 <__aeabi_fadd+0x1c2>
 80005a6:	4643      	mov	r3, r8
 80005a8:	000c      	movs	r4, r1
 80005aa:	1af7      	subs	r7, r6, r3
 80005ac:	e6e3      	b.n	8000376 <__aeabi_fadd+0x52>
 80005ae:	4642      	mov	r2, r8
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fadd+0x292>
 80005b4:	e775      	b.n	80004a2 <__aeabi_fadd+0x17e>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x298>
 80005ba:	e77a      	b.n	80004b2 <__aeabi_fadd+0x18e>
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	03db      	lsls	r3, r3, #15
 80005c0:	2400      	movs	r4, #0
 80005c2:	469c      	mov	ip, r3
 80005c4:	22ff      	movs	r2, #255	; 0xff
 80005c6:	e6f2      	b.n	80003ae <__aeabi_fadd+0x8a>
 80005c8:	0030      	movs	r0, r6
 80005ca:	4440      	add	r0, r8
 80005cc:	2501      	movs	r5, #1
 80005ce:	0143      	lsls	r3, r0, #5
 80005d0:	d400      	bmi.n	80005d4 <__aeabi_fadd+0x2b0>
 80005d2:	e75b      	b.n	800048c <__aeabi_fadd+0x168>
 80005d4:	2502      	movs	r5, #2
 80005d6:	e718      	b.n	800040a <__aeabi_fadd+0xe6>
 80005d8:	4643      	mov	r3, r8
 80005da:	2501      	movs	r5, #1
 80005dc:	1b98      	subs	r0, r3, r6
 80005de:	e6c5      	b.n	800036c <__aeabi_fadd+0x48>
 80005e0:	2320      	movs	r3, #32
 80005e2:	4644      	mov	r4, r8
 80005e4:	4640      	mov	r0, r8
 80005e6:	40d4      	lsrs	r4, r2
 80005e8:	1a9a      	subs	r2, r3, r2
 80005ea:	4090      	lsls	r0, r2
 80005ec:	1e43      	subs	r3, r0, #1
 80005ee:	4198      	sbcs	r0, r3
 80005f0:	4320      	orrs	r0, r4
 80005f2:	e7a4      	b.n	800053e <__aeabi_fadd+0x21a>
 80005f4:	000d      	movs	r5, r1
 80005f6:	e74d      	b.n	8000494 <__aeabi_fadd+0x170>
 80005f8:	2320      	movs	r3, #32
 80005fa:	4641      	mov	r1, r8
 80005fc:	4640      	mov	r0, r8
 80005fe:	40d1      	lsrs	r1, r2
 8000600:	1a9a      	subs	r2, r3, r2
 8000602:	4090      	lsls	r0, r2
 8000604:	1e43      	subs	r3, r0, #1
 8000606:	4198      	sbcs	r0, r3
 8000608:	4308      	orrs	r0, r1
 800060a:	e770      	b.n	80004ee <__aeabi_fadd+0x1ca>
 800060c:	4642      	mov	r2, r8
 800060e:	2a00      	cmp	r2, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fadd+0x2f0>
 8000612:	e74f      	b.n	80004b4 <__aeabi_fadd+0x190>
 8000614:	2e00      	cmp	r6, #0
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x2f6>
 8000618:	e74d      	b.n	80004b6 <__aeabi_fadd+0x192>
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	03d2      	lsls	r2, r2, #15
 800061e:	4213      	tst	r3, r2
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x300>
 8000622:	e748      	b.n	80004b6 <__aeabi_fadd+0x192>
 8000624:	4210      	tst	r0, r2
 8000626:	d000      	beq.n	800062a <__aeabi_fadd+0x306>
 8000628:	e745      	b.n	80004b6 <__aeabi_fadd+0x192>
 800062a:	0003      	movs	r3, r0
 800062c:	e743      	b.n	80004b6 <__aeabi_fadd+0x192>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d090      	beq.n	8000554 <__aeabi_fadd+0x230>
 8000632:	000c      	movs	r4, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2200      	movs	r2, #0
 8000638:	e6b9      	b.n	80003ae <__aeabi_fadd+0x8a>
 800063a:	4643      	mov	r3, r8
 800063c:	000c      	movs	r4, r1
 800063e:	1af0      	subs	r0, r6, r3
 8000640:	3501      	adds	r5, #1
 8000642:	e693      	b.n	800036c <__aeabi_fadd+0x48>
 8000644:	4684      	mov	ip, r0
 8000646:	2200      	movs	r2, #0
 8000648:	e6b1      	b.n	80003ae <__aeabi_fadd+0x8a>
 800064a:	2800      	cmp	r0, #0
 800064c:	d000      	beq.n	8000650 <__aeabi_fadd+0x32c>
 800064e:	e71d      	b.n	800048c <__aeabi_fadd+0x168>
 8000650:	2300      	movs	r3, #0
 8000652:	2400      	movs	r4, #0
 8000654:	469c      	mov	ip, r3
 8000656:	e6aa      	b.n	80003ae <__aeabi_fadd+0x8a>
 8000658:	fbffffff 	.word	0xfbffffff
 800065c:	7dffffff 	.word	0x7dffffff

08000660 <__eqsf2>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	0042      	lsls	r2, r0, #1
 8000664:	0245      	lsls	r5, r0, #9
 8000666:	024e      	lsls	r6, r1, #9
 8000668:	004c      	lsls	r4, r1, #1
 800066a:	0fc3      	lsrs	r3, r0, #31
 800066c:	0a6d      	lsrs	r5, r5, #9
 800066e:	2001      	movs	r0, #1
 8000670:	0e12      	lsrs	r2, r2, #24
 8000672:	0a76      	lsrs	r6, r6, #9
 8000674:	0e24      	lsrs	r4, r4, #24
 8000676:	0fc9      	lsrs	r1, r1, #31
 8000678:	2aff      	cmp	r2, #255	; 0xff
 800067a:	d006      	beq.n	800068a <__eqsf2+0x2a>
 800067c:	2cff      	cmp	r4, #255	; 0xff
 800067e:	d003      	beq.n	8000688 <__eqsf2+0x28>
 8000680:	42a2      	cmp	r2, r4
 8000682:	d101      	bne.n	8000688 <__eqsf2+0x28>
 8000684:	42b5      	cmp	r5, r6
 8000686:	d006      	beq.n	8000696 <__eqsf2+0x36>
 8000688:	bd70      	pop	{r4, r5, r6, pc}
 800068a:	2d00      	cmp	r5, #0
 800068c:	d1fc      	bne.n	8000688 <__eqsf2+0x28>
 800068e:	2cff      	cmp	r4, #255	; 0xff
 8000690:	d1fa      	bne.n	8000688 <__eqsf2+0x28>
 8000692:	2e00      	cmp	r6, #0
 8000694:	d1f8      	bne.n	8000688 <__eqsf2+0x28>
 8000696:	428b      	cmp	r3, r1
 8000698:	d006      	beq.n	80006a8 <__eqsf2+0x48>
 800069a:	2001      	movs	r0, #1
 800069c:	2a00      	cmp	r2, #0
 800069e:	d1f3      	bne.n	8000688 <__eqsf2+0x28>
 80006a0:	0028      	movs	r0, r5
 80006a2:	1e43      	subs	r3, r0, #1
 80006a4:	4198      	sbcs	r0, r3
 80006a6:	e7ef      	b.n	8000688 <__eqsf2+0x28>
 80006a8:	2000      	movs	r0, #0
 80006aa:	e7ed      	b.n	8000688 <__eqsf2+0x28>

080006ac <__gesf2>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	0042      	lsls	r2, r0, #1
 80006b0:	0245      	lsls	r5, r0, #9
 80006b2:	024e      	lsls	r6, r1, #9
 80006b4:	004c      	lsls	r4, r1, #1
 80006b6:	0fc3      	lsrs	r3, r0, #31
 80006b8:	0a6d      	lsrs	r5, r5, #9
 80006ba:	0e12      	lsrs	r2, r2, #24
 80006bc:	0a76      	lsrs	r6, r6, #9
 80006be:	0e24      	lsrs	r4, r4, #24
 80006c0:	0fc8      	lsrs	r0, r1, #31
 80006c2:	2aff      	cmp	r2, #255	; 0xff
 80006c4:	d01b      	beq.n	80006fe <__gesf2+0x52>
 80006c6:	2cff      	cmp	r4, #255	; 0xff
 80006c8:	d00e      	beq.n	80006e8 <__gesf2+0x3c>
 80006ca:	2a00      	cmp	r2, #0
 80006cc:	d11b      	bne.n	8000706 <__gesf2+0x5a>
 80006ce:	2c00      	cmp	r4, #0
 80006d0:	d101      	bne.n	80006d6 <__gesf2+0x2a>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d01c      	beq.n	8000710 <__gesf2+0x64>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d00c      	beq.n	80006f4 <__gesf2+0x48>
 80006da:	4283      	cmp	r3, r0
 80006dc:	d01c      	beq.n	8000718 <__gesf2+0x6c>
 80006de:	2102      	movs	r1, #2
 80006e0:	1e58      	subs	r0, r3, #1
 80006e2:	4008      	ands	r0, r1
 80006e4:	3801      	subs	r0, #1
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	2e00      	cmp	r6, #0
 80006ea:	d122      	bne.n	8000732 <__gesf2+0x86>
 80006ec:	2a00      	cmp	r2, #0
 80006ee:	d1f4      	bne.n	80006da <__gesf2+0x2e>
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	d1f2      	bne.n	80006da <__gesf2+0x2e>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d1f6      	bne.n	80006e6 <__gesf2+0x3a>
 80006f8:	2001      	movs	r0, #1
 80006fa:	4240      	negs	r0, r0
 80006fc:	e7f3      	b.n	80006e6 <__gesf2+0x3a>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d117      	bne.n	8000732 <__gesf2+0x86>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d0f0      	beq.n	80006e8 <__gesf2+0x3c>
 8000706:	2c00      	cmp	r4, #0
 8000708:	d1e7      	bne.n	80006da <__gesf2+0x2e>
 800070a:	2e00      	cmp	r6, #0
 800070c:	d1e5      	bne.n	80006da <__gesf2+0x2e>
 800070e:	e7e6      	b.n	80006de <__gesf2+0x32>
 8000710:	2000      	movs	r0, #0
 8000712:	2d00      	cmp	r5, #0
 8000714:	d0e7      	beq.n	80006e6 <__gesf2+0x3a>
 8000716:	e7e2      	b.n	80006de <__gesf2+0x32>
 8000718:	42a2      	cmp	r2, r4
 800071a:	dc05      	bgt.n	8000728 <__gesf2+0x7c>
 800071c:	dbea      	blt.n	80006f4 <__gesf2+0x48>
 800071e:	42b5      	cmp	r5, r6
 8000720:	d802      	bhi.n	8000728 <__gesf2+0x7c>
 8000722:	d3e7      	bcc.n	80006f4 <__gesf2+0x48>
 8000724:	2000      	movs	r0, #0
 8000726:	e7de      	b.n	80006e6 <__gesf2+0x3a>
 8000728:	4243      	negs	r3, r0
 800072a:	4158      	adcs	r0, r3
 800072c:	0040      	lsls	r0, r0, #1
 800072e:	3801      	subs	r0, #1
 8000730:	e7d9      	b.n	80006e6 <__gesf2+0x3a>
 8000732:	2002      	movs	r0, #2
 8000734:	4240      	negs	r0, r0
 8000736:	e7d6      	b.n	80006e6 <__gesf2+0x3a>

08000738 <__lesf2>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	0042      	lsls	r2, r0, #1
 800073c:	0245      	lsls	r5, r0, #9
 800073e:	024e      	lsls	r6, r1, #9
 8000740:	004c      	lsls	r4, r1, #1
 8000742:	0fc3      	lsrs	r3, r0, #31
 8000744:	0a6d      	lsrs	r5, r5, #9
 8000746:	0e12      	lsrs	r2, r2, #24
 8000748:	0a76      	lsrs	r6, r6, #9
 800074a:	0e24      	lsrs	r4, r4, #24
 800074c:	0fc8      	lsrs	r0, r1, #31
 800074e:	2aff      	cmp	r2, #255	; 0xff
 8000750:	d00b      	beq.n	800076a <__lesf2+0x32>
 8000752:	2cff      	cmp	r4, #255	; 0xff
 8000754:	d00d      	beq.n	8000772 <__lesf2+0x3a>
 8000756:	2a00      	cmp	r2, #0
 8000758:	d11f      	bne.n	800079a <__lesf2+0x62>
 800075a:	2c00      	cmp	r4, #0
 800075c:	d116      	bne.n	800078c <__lesf2+0x54>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d114      	bne.n	800078c <__lesf2+0x54>
 8000762:	2000      	movs	r0, #0
 8000764:	2d00      	cmp	r5, #0
 8000766:	d010      	beq.n	800078a <__lesf2+0x52>
 8000768:	e009      	b.n	800077e <__lesf2+0x46>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d10c      	bne.n	8000788 <__lesf2+0x50>
 800076e:	2cff      	cmp	r4, #255	; 0xff
 8000770:	d113      	bne.n	800079a <__lesf2+0x62>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d108      	bne.n	8000788 <__lesf2+0x50>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d008      	beq.n	800078c <__lesf2+0x54>
 800077a:	4283      	cmp	r3, r0
 800077c:	d012      	beq.n	80007a4 <__lesf2+0x6c>
 800077e:	2102      	movs	r1, #2
 8000780:	1e58      	subs	r0, r3, #1
 8000782:	4008      	ands	r0, r1
 8000784:	3801      	subs	r0, #1
 8000786:	e000      	b.n	800078a <__lesf2+0x52>
 8000788:	2002      	movs	r0, #2
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	2d00      	cmp	r5, #0
 800078e:	d1f4      	bne.n	800077a <__lesf2+0x42>
 8000790:	2800      	cmp	r0, #0
 8000792:	d1fa      	bne.n	800078a <__lesf2+0x52>
 8000794:	2001      	movs	r0, #1
 8000796:	4240      	negs	r0, r0
 8000798:	e7f7      	b.n	800078a <__lesf2+0x52>
 800079a:	2c00      	cmp	r4, #0
 800079c:	d1ed      	bne.n	800077a <__lesf2+0x42>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d1eb      	bne.n	800077a <__lesf2+0x42>
 80007a2:	e7ec      	b.n	800077e <__lesf2+0x46>
 80007a4:	42a2      	cmp	r2, r4
 80007a6:	dc05      	bgt.n	80007b4 <__lesf2+0x7c>
 80007a8:	dbf2      	blt.n	8000790 <__lesf2+0x58>
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d802      	bhi.n	80007b4 <__lesf2+0x7c>
 80007ae:	d3ef      	bcc.n	8000790 <__lesf2+0x58>
 80007b0:	2000      	movs	r0, #0
 80007b2:	e7ea      	b.n	800078a <__lesf2+0x52>
 80007b4:	4243      	negs	r3, r0
 80007b6:	4158      	adcs	r0, r3
 80007b8:	0040      	lsls	r0, r0, #1
 80007ba:	3801      	subs	r0, #1
 80007bc:	e7e5      	b.n	800078a <__lesf2+0x52>
 80007be:	46c0      	nop			; (mov r8, r8)

080007c0 <__aeabi_fmul>:
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	464f      	mov	r7, r9
 80007c4:	4646      	mov	r6, r8
 80007c6:	46d6      	mov	lr, sl
 80007c8:	0244      	lsls	r4, r0, #9
 80007ca:	0045      	lsls	r5, r0, #1
 80007cc:	b5c0      	push	{r6, r7, lr}
 80007ce:	0a64      	lsrs	r4, r4, #9
 80007d0:	1c0f      	adds	r7, r1, #0
 80007d2:	0e2d      	lsrs	r5, r5, #24
 80007d4:	0fc6      	lsrs	r6, r0, #31
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fmul+0x1c>
 80007da:	e08d      	b.n	80008f8 <__aeabi_fmul+0x138>
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d100      	bne.n	80007e2 <__aeabi_fmul+0x22>
 80007e0:	e092      	b.n	8000908 <__aeabi_fmul+0x148>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2080      	movs	r0, #128	; 0x80
 80007e6:	4699      	mov	r9, r3
 80007e8:	469a      	mov	sl, r3
 80007ea:	00e4      	lsls	r4, r4, #3
 80007ec:	04c0      	lsls	r0, r0, #19
 80007ee:	4304      	orrs	r4, r0
 80007f0:	3d7f      	subs	r5, #127	; 0x7f
 80007f2:	0278      	lsls	r0, r7, #9
 80007f4:	0a43      	lsrs	r3, r0, #9
 80007f6:	4698      	mov	r8, r3
 80007f8:	007b      	lsls	r3, r7, #1
 80007fa:	0e1b      	lsrs	r3, r3, #24
 80007fc:	0fff      	lsrs	r7, r7, #31
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fmul+0x44>
 8000802:	e070      	b.n	80008e6 <__aeabi_fmul+0x126>
 8000804:	2bff      	cmp	r3, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fmul+0x4a>
 8000808:	e086      	b.n	8000918 <__aeabi_fmul+0x158>
 800080a:	4642      	mov	r2, r8
 800080c:	00d0      	lsls	r0, r2, #3
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	18ed      	adds	r5, r5, r3
 8000814:	2300      	movs	r3, #0
 8000816:	04d2      	lsls	r2, r2, #19
 8000818:	4302      	orrs	r2, r0
 800081a:	4690      	mov	r8, r2
 800081c:	469c      	mov	ip, r3
 800081e:	0031      	movs	r1, r6
 8000820:	464b      	mov	r3, r9
 8000822:	4079      	eors	r1, r7
 8000824:	1c68      	adds	r0, r5, #1
 8000826:	2b0f      	cmp	r3, #15
 8000828:	d81c      	bhi.n	8000864 <__aeabi_fmul+0xa4>
 800082a:	4a76      	ldr	r2, [pc, #472]	; (8000a04 <__aeabi_fmul+0x244>)
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	58d3      	ldr	r3, [r2, r3]
 8000830:	469f      	mov	pc, r3
 8000832:	0039      	movs	r1, r7
 8000834:	4644      	mov	r4, r8
 8000836:	46e2      	mov	sl, ip
 8000838:	4653      	mov	r3, sl
 800083a:	2b02      	cmp	r3, #2
 800083c:	d00f      	beq.n	800085e <__aeabi_fmul+0x9e>
 800083e:	2b03      	cmp	r3, #3
 8000840:	d100      	bne.n	8000844 <__aeabi_fmul+0x84>
 8000842:	e0d7      	b.n	80009f4 <__aeabi_fmul+0x234>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d137      	bne.n	80008b8 <__aeabi_fmul+0xf8>
 8000848:	2000      	movs	r0, #0
 800084a:	2400      	movs	r4, #0
 800084c:	05c0      	lsls	r0, r0, #23
 800084e:	4320      	orrs	r0, r4
 8000850:	07c9      	lsls	r1, r1, #31
 8000852:	4308      	orrs	r0, r1
 8000854:	bce0      	pop	{r5, r6, r7}
 8000856:	46ba      	mov	sl, r7
 8000858:	46b1      	mov	r9, r6
 800085a:	46a8      	mov	r8, r5
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	2400      	movs	r4, #0
 8000862:	e7f3      	b.n	800084c <__aeabi_fmul+0x8c>
 8000864:	0c26      	lsrs	r6, r4, #16
 8000866:	0424      	lsls	r4, r4, #16
 8000868:	0c22      	lsrs	r2, r4, #16
 800086a:	4644      	mov	r4, r8
 800086c:	0424      	lsls	r4, r4, #16
 800086e:	0c24      	lsrs	r4, r4, #16
 8000870:	4643      	mov	r3, r8
 8000872:	0027      	movs	r7, r4
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	4357      	muls	r7, r2
 8000878:	4374      	muls	r4, r6
 800087a:	435a      	muls	r2, r3
 800087c:	435e      	muls	r6, r3
 800087e:	1912      	adds	r2, r2, r4
 8000880:	0c3b      	lsrs	r3, r7, #16
 8000882:	189b      	adds	r3, r3, r2
 8000884:	429c      	cmp	r4, r3
 8000886:	d903      	bls.n	8000890 <__aeabi_fmul+0xd0>
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0252      	lsls	r2, r2, #9
 800088c:	4694      	mov	ip, r2
 800088e:	4466      	add	r6, ip
 8000890:	043f      	lsls	r7, r7, #16
 8000892:	041a      	lsls	r2, r3, #16
 8000894:	0c3f      	lsrs	r7, r7, #16
 8000896:	19d2      	adds	r2, r2, r7
 8000898:	0194      	lsls	r4, r2, #6
 800089a:	1e67      	subs	r7, r4, #1
 800089c:	41bc      	sbcs	r4, r7
 800089e:	0c1b      	lsrs	r3, r3, #16
 80008a0:	0e92      	lsrs	r2, r2, #26
 80008a2:	199b      	adds	r3, r3, r6
 80008a4:	4314      	orrs	r4, r2
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	431c      	orrs	r4, r3
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fmul+0xf0>
 80008ae:	e09b      	b.n	80009e8 <__aeabi_fmul+0x228>
 80008b0:	2301      	movs	r3, #1
 80008b2:	0862      	lsrs	r2, r4, #1
 80008b4:	401c      	ands	r4, r3
 80008b6:	4314      	orrs	r4, r2
 80008b8:	0002      	movs	r2, r0
 80008ba:	327f      	adds	r2, #127	; 0x7f
 80008bc:	2a00      	cmp	r2, #0
 80008be:	dd64      	ble.n	800098a <__aeabi_fmul+0x1ca>
 80008c0:	0763      	lsls	r3, r4, #29
 80008c2:	d004      	beq.n	80008ce <__aeabi_fmul+0x10e>
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d000      	beq.n	80008ce <__aeabi_fmul+0x10e>
 80008cc:	3404      	adds	r4, #4
 80008ce:	0123      	lsls	r3, r4, #4
 80008d0:	d503      	bpl.n	80008da <__aeabi_fmul+0x11a>
 80008d2:	0002      	movs	r2, r0
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <__aeabi_fmul+0x248>)
 80008d6:	3280      	adds	r2, #128	; 0x80
 80008d8:	401c      	ands	r4, r3
 80008da:	2afe      	cmp	r2, #254	; 0xfe
 80008dc:	dcbf      	bgt.n	800085e <__aeabi_fmul+0x9e>
 80008de:	01a4      	lsls	r4, r4, #6
 80008e0:	0a64      	lsrs	r4, r4, #9
 80008e2:	b2d0      	uxtb	r0, r2
 80008e4:	e7b2      	b.n	800084c <__aeabi_fmul+0x8c>
 80008e6:	4643      	mov	r3, r8
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d13d      	bne.n	8000968 <__aeabi_fmul+0x1a8>
 80008ec:	464a      	mov	r2, r9
 80008ee:	3301      	adds	r3, #1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4691      	mov	r9, r2
 80008f4:	469c      	mov	ip, r3
 80008f6:	e792      	b.n	800081e <__aeabi_fmul+0x5e>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d129      	bne.n	8000950 <__aeabi_fmul+0x190>
 80008fc:	2304      	movs	r3, #4
 80008fe:	4699      	mov	r9, r3
 8000900:	3b03      	subs	r3, #3
 8000902:	2500      	movs	r5, #0
 8000904:	469a      	mov	sl, r3
 8000906:	e774      	b.n	80007f2 <__aeabi_fmul+0x32>
 8000908:	2c00      	cmp	r4, #0
 800090a:	d11b      	bne.n	8000944 <__aeabi_fmul+0x184>
 800090c:	2308      	movs	r3, #8
 800090e:	4699      	mov	r9, r3
 8000910:	3b06      	subs	r3, #6
 8000912:	25ff      	movs	r5, #255	; 0xff
 8000914:	469a      	mov	sl, r3
 8000916:	e76c      	b.n	80007f2 <__aeabi_fmul+0x32>
 8000918:	4643      	mov	r3, r8
 800091a:	35ff      	adds	r5, #255	; 0xff
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10b      	bne.n	8000938 <__aeabi_fmul+0x178>
 8000920:	2302      	movs	r3, #2
 8000922:	464a      	mov	r2, r9
 8000924:	431a      	orrs	r2, r3
 8000926:	4691      	mov	r9, r2
 8000928:	469c      	mov	ip, r3
 800092a:	e778      	b.n	800081e <__aeabi_fmul+0x5e>
 800092c:	4653      	mov	r3, sl
 800092e:	0031      	movs	r1, r6
 8000930:	2b02      	cmp	r3, #2
 8000932:	d000      	beq.n	8000936 <__aeabi_fmul+0x176>
 8000934:	e783      	b.n	800083e <__aeabi_fmul+0x7e>
 8000936:	e792      	b.n	800085e <__aeabi_fmul+0x9e>
 8000938:	2303      	movs	r3, #3
 800093a:	464a      	mov	r2, r9
 800093c:	431a      	orrs	r2, r3
 800093e:	4691      	mov	r9, r2
 8000940:	469c      	mov	ip, r3
 8000942:	e76c      	b.n	800081e <__aeabi_fmul+0x5e>
 8000944:	230c      	movs	r3, #12
 8000946:	4699      	mov	r9, r3
 8000948:	3b09      	subs	r3, #9
 800094a:	25ff      	movs	r5, #255	; 0xff
 800094c:	469a      	mov	sl, r3
 800094e:	e750      	b.n	80007f2 <__aeabi_fmul+0x32>
 8000950:	0020      	movs	r0, r4
 8000952:	f002 f8b1 	bl	8002ab8 <__clzsi2>
 8000956:	2576      	movs	r5, #118	; 0x76
 8000958:	1f43      	subs	r3, r0, #5
 800095a:	409c      	lsls	r4, r3
 800095c:	2300      	movs	r3, #0
 800095e:	426d      	negs	r5, r5
 8000960:	4699      	mov	r9, r3
 8000962:	469a      	mov	sl, r3
 8000964:	1a2d      	subs	r5, r5, r0
 8000966:	e744      	b.n	80007f2 <__aeabi_fmul+0x32>
 8000968:	4640      	mov	r0, r8
 800096a:	f002 f8a5 	bl	8002ab8 <__clzsi2>
 800096e:	4642      	mov	r2, r8
 8000970:	1f43      	subs	r3, r0, #5
 8000972:	409a      	lsls	r2, r3
 8000974:	2300      	movs	r3, #0
 8000976:	1a2d      	subs	r5, r5, r0
 8000978:	4690      	mov	r8, r2
 800097a:	469c      	mov	ip, r3
 800097c:	3d76      	subs	r5, #118	; 0x76
 800097e:	e74e      	b.n	800081e <__aeabi_fmul+0x5e>
 8000980:	2480      	movs	r4, #128	; 0x80
 8000982:	2100      	movs	r1, #0
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	03e4      	lsls	r4, r4, #15
 8000988:	e760      	b.n	800084c <__aeabi_fmul+0x8c>
 800098a:	2301      	movs	r3, #1
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	2b1b      	cmp	r3, #27
 8000990:	dd00      	ble.n	8000994 <__aeabi_fmul+0x1d4>
 8000992:	e759      	b.n	8000848 <__aeabi_fmul+0x88>
 8000994:	0022      	movs	r2, r4
 8000996:	309e      	adds	r0, #158	; 0x9e
 8000998:	40da      	lsrs	r2, r3
 800099a:	4084      	lsls	r4, r0
 800099c:	0013      	movs	r3, r2
 800099e:	1e62      	subs	r2, r4, #1
 80009a0:	4194      	sbcs	r4, r2
 80009a2:	431c      	orrs	r4, r3
 80009a4:	0763      	lsls	r3, r4, #29
 80009a6:	d004      	beq.n	80009b2 <__aeabi_fmul+0x1f2>
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d000      	beq.n	80009b2 <__aeabi_fmul+0x1f2>
 80009b0:	3404      	adds	r4, #4
 80009b2:	0163      	lsls	r3, r4, #5
 80009b4:	d51a      	bpl.n	80009ec <__aeabi_fmul+0x22c>
 80009b6:	2001      	movs	r0, #1
 80009b8:	2400      	movs	r4, #0
 80009ba:	e747      	b.n	800084c <__aeabi_fmul+0x8c>
 80009bc:	2080      	movs	r0, #128	; 0x80
 80009be:	03c0      	lsls	r0, r0, #15
 80009c0:	4204      	tst	r4, r0
 80009c2:	d009      	beq.n	80009d8 <__aeabi_fmul+0x218>
 80009c4:	4643      	mov	r3, r8
 80009c6:	4203      	tst	r3, r0
 80009c8:	d106      	bne.n	80009d8 <__aeabi_fmul+0x218>
 80009ca:	4644      	mov	r4, r8
 80009cc:	4304      	orrs	r4, r0
 80009ce:	0264      	lsls	r4, r4, #9
 80009d0:	0039      	movs	r1, r7
 80009d2:	20ff      	movs	r0, #255	; 0xff
 80009d4:	0a64      	lsrs	r4, r4, #9
 80009d6:	e739      	b.n	800084c <__aeabi_fmul+0x8c>
 80009d8:	2080      	movs	r0, #128	; 0x80
 80009da:	03c0      	lsls	r0, r0, #15
 80009dc:	4304      	orrs	r4, r0
 80009de:	0264      	lsls	r4, r4, #9
 80009e0:	0031      	movs	r1, r6
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	e731      	b.n	800084c <__aeabi_fmul+0x8c>
 80009e8:	0028      	movs	r0, r5
 80009ea:	e765      	b.n	80008b8 <__aeabi_fmul+0xf8>
 80009ec:	01a4      	lsls	r4, r4, #6
 80009ee:	2000      	movs	r0, #0
 80009f0:	0a64      	lsrs	r4, r4, #9
 80009f2:	e72b      	b.n	800084c <__aeabi_fmul+0x8c>
 80009f4:	2080      	movs	r0, #128	; 0x80
 80009f6:	03c0      	lsls	r0, r0, #15
 80009f8:	4304      	orrs	r4, r0
 80009fa:	0264      	lsls	r4, r4, #9
 80009fc:	20ff      	movs	r0, #255	; 0xff
 80009fe:	0a64      	lsrs	r4, r4, #9
 8000a00:	e724      	b.n	800084c <__aeabi_fmul+0x8c>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	08008530 	.word	0x08008530
 8000a08:	f7ffffff 	.word	0xf7ffffff

08000a0c <__aeabi_fsub>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	46ce      	mov	lr, r9
 8000a10:	4647      	mov	r7, r8
 8000a12:	0243      	lsls	r3, r0, #9
 8000a14:	0a5b      	lsrs	r3, r3, #9
 8000a16:	024e      	lsls	r6, r1, #9
 8000a18:	00da      	lsls	r2, r3, #3
 8000a1a:	4694      	mov	ip, r2
 8000a1c:	0a72      	lsrs	r2, r6, #9
 8000a1e:	4691      	mov	r9, r2
 8000a20:	0045      	lsls	r5, r0, #1
 8000a22:	004a      	lsls	r2, r1, #1
 8000a24:	b580      	push	{r7, lr}
 8000a26:	0e2d      	lsrs	r5, r5, #24
 8000a28:	001f      	movs	r7, r3
 8000a2a:	0fc4      	lsrs	r4, r0, #31
 8000a2c:	0e12      	lsrs	r2, r2, #24
 8000a2e:	0fc9      	lsrs	r1, r1, #31
 8000a30:	09b6      	lsrs	r6, r6, #6
 8000a32:	2aff      	cmp	r2, #255	; 0xff
 8000a34:	d05b      	beq.n	8000aee <__aeabi_fsub+0xe2>
 8000a36:	2001      	movs	r0, #1
 8000a38:	4041      	eors	r1, r0
 8000a3a:	428c      	cmp	r4, r1
 8000a3c:	d039      	beq.n	8000ab2 <__aeabi_fsub+0xa6>
 8000a3e:	1aa8      	subs	r0, r5, r2
 8000a40:	2800      	cmp	r0, #0
 8000a42:	dd5a      	ble.n	8000afa <__aeabi_fsub+0xee>
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d06a      	beq.n	8000b1e <__aeabi_fsub+0x112>
 8000a48:	2dff      	cmp	r5, #255	; 0xff
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fsub+0x42>
 8000a4c:	e0d9      	b.n	8000c02 <__aeabi_fsub+0x1f6>
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	04d2      	lsls	r2, r2, #19
 8000a52:	4316      	orrs	r6, r2
 8000a54:	281b      	cmp	r0, #27
 8000a56:	dc00      	bgt.n	8000a5a <__aeabi_fsub+0x4e>
 8000a58:	e0e9      	b.n	8000c2e <__aeabi_fsub+0x222>
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	1a18      	subs	r0, r3, r0
 8000a60:	0143      	lsls	r3, r0, #5
 8000a62:	d400      	bmi.n	8000a66 <__aeabi_fsub+0x5a>
 8000a64:	e0b4      	b.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000a66:	0180      	lsls	r0, r0, #6
 8000a68:	0987      	lsrs	r7, r0, #6
 8000a6a:	0038      	movs	r0, r7
 8000a6c:	f002 f824 	bl	8002ab8 <__clzsi2>
 8000a70:	3805      	subs	r0, #5
 8000a72:	4087      	lsls	r7, r0
 8000a74:	4285      	cmp	r5, r0
 8000a76:	dc00      	bgt.n	8000a7a <__aeabi_fsub+0x6e>
 8000a78:	e0cc      	b.n	8000c14 <__aeabi_fsub+0x208>
 8000a7a:	1a2d      	subs	r5, r5, r0
 8000a7c:	48b5      	ldr	r0, [pc, #724]	; (8000d54 <__aeabi_fsub+0x348>)
 8000a7e:	4038      	ands	r0, r7
 8000a80:	0743      	lsls	r3, r0, #29
 8000a82:	d004      	beq.n	8000a8e <__aeabi_fsub+0x82>
 8000a84:	230f      	movs	r3, #15
 8000a86:	4003      	ands	r3, r0
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_fsub+0x82>
 8000a8c:	3004      	adds	r0, #4
 8000a8e:	0143      	lsls	r3, r0, #5
 8000a90:	d400      	bmi.n	8000a94 <__aeabi_fsub+0x88>
 8000a92:	e0a0      	b.n	8000bd6 <__aeabi_fsub+0x1ca>
 8000a94:	1c6a      	adds	r2, r5, #1
 8000a96:	2dfe      	cmp	r5, #254	; 0xfe
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x90>
 8000a9a:	e08d      	b.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000a9c:	0180      	lsls	r0, r0, #6
 8000a9e:	0a47      	lsrs	r7, r0, #9
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	05d0      	lsls	r0, r2, #23
 8000aa4:	4338      	orrs	r0, r7
 8000aa6:	07e4      	lsls	r4, r4, #31
 8000aa8:	4320      	orrs	r0, r4
 8000aaa:	bcc0      	pop	{r6, r7}
 8000aac:	46b9      	mov	r9, r7
 8000aae:	46b0      	mov	r8, r6
 8000ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab2:	1aa8      	subs	r0, r5, r2
 8000ab4:	4680      	mov	r8, r0
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	dd45      	ble.n	8000b46 <__aeabi_fsub+0x13a>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d070      	beq.n	8000ba0 <__aeabi_fsub+0x194>
 8000abe:	2dff      	cmp	r5, #255	; 0xff
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0xb8>
 8000ac2:	e09e      	b.n	8000c02 <__aeabi_fsub+0x1f6>
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	04db      	lsls	r3, r3, #19
 8000ac8:	431e      	orrs	r6, r3
 8000aca:	4643      	mov	r3, r8
 8000acc:	2b1b      	cmp	r3, #27
 8000ace:	dc00      	bgt.n	8000ad2 <__aeabi_fsub+0xc6>
 8000ad0:	e0d2      	b.n	8000c78 <__aeabi_fsub+0x26c>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	4460      	add	r0, ip
 8000ad6:	0143      	lsls	r3, r0, #5
 8000ad8:	d57a      	bpl.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000ada:	3501      	adds	r5, #1
 8000adc:	2dff      	cmp	r5, #255	; 0xff
 8000ade:	d06b      	beq.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4a9d      	ldr	r2, [pc, #628]	; (8000d58 <__aeabi_fsub+0x34c>)
 8000ae4:	4003      	ands	r3, r0
 8000ae6:	0840      	lsrs	r0, r0, #1
 8000ae8:	4010      	ands	r0, r2
 8000aea:	4318      	orrs	r0, r3
 8000aec:	e7c8      	b.n	8000a80 <__aeabi_fsub+0x74>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d020      	beq.n	8000b34 <__aeabi_fsub+0x128>
 8000af2:	428c      	cmp	r4, r1
 8000af4:	d023      	beq.n	8000b3e <__aeabi_fsub+0x132>
 8000af6:	0028      	movs	r0, r5
 8000af8:	38ff      	subs	r0, #255	; 0xff
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d039      	beq.n	8000b72 <__aeabi_fsub+0x166>
 8000afe:	1b57      	subs	r7, r2, r5
 8000b00:	2d00      	cmp	r5, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fsub+0xfa>
 8000b04:	e09d      	b.n	8000c42 <__aeabi_fsub+0x236>
 8000b06:	4663      	mov	r3, ip
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x102>
 8000b0c:	e0db      	b.n	8000cc6 <__aeabi_fsub+0x2ba>
 8000b0e:	1e7b      	subs	r3, r7, #1
 8000b10:	2f01      	cmp	r7, #1
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x10a>
 8000b14:	e10d      	b.n	8000d32 <__aeabi_fsub+0x326>
 8000b16:	2fff      	cmp	r7, #255	; 0xff
 8000b18:	d071      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000b1a:	001f      	movs	r7, r3
 8000b1c:	e098      	b.n	8000c50 <__aeabi_fsub+0x244>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x118>
 8000b22:	e0a7      	b.n	8000c74 <__aeabi_fsub+0x268>
 8000b24:	1e42      	subs	r2, r0, #1
 8000b26:	2801      	cmp	r0, #1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x120>
 8000b2a:	e0e6      	b.n	8000cfa <__aeabi_fsub+0x2ee>
 8000b2c:	28ff      	cmp	r0, #255	; 0xff
 8000b2e:	d068      	beq.n	8000c02 <__aeabi_fsub+0x1f6>
 8000b30:	0010      	movs	r0, r2
 8000b32:	e78f      	b.n	8000a54 <__aeabi_fsub+0x48>
 8000b34:	2001      	movs	r0, #1
 8000b36:	4041      	eors	r1, r0
 8000b38:	42a1      	cmp	r1, r4
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_fsub+0x132>
 8000b3c:	e77f      	b.n	8000a3e <__aeabi_fsub+0x32>
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	4240      	negs	r0, r0
 8000b42:	4680      	mov	r8, r0
 8000b44:	44a8      	add	r8, r5
 8000b46:	4640      	mov	r0, r8
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d038      	beq.n	8000bbe <__aeabi_fsub+0x1b2>
 8000b4c:	1b51      	subs	r1, r2, r5
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fsub+0x148>
 8000b52:	e0ae      	b.n	8000cb2 <__aeabi_fsub+0x2a6>
 8000b54:	2aff      	cmp	r2, #255	; 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x14e>
 8000b58:	e0df      	b.n	8000d1a <__aeabi_fsub+0x30e>
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	4660      	mov	r0, ip
 8000b5e:	04db      	lsls	r3, r3, #19
 8000b60:	4318      	orrs	r0, r3
 8000b62:	4684      	mov	ip, r0
 8000b64:	291b      	cmp	r1, #27
 8000b66:	dc00      	bgt.n	8000b6a <__aeabi_fsub+0x15e>
 8000b68:	e0d9      	b.n	8000d1e <__aeabi_fsub+0x312>
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	0015      	movs	r5, r2
 8000b6e:	1980      	adds	r0, r0, r6
 8000b70:	e7b1      	b.n	8000ad6 <__aeabi_fsub+0xca>
 8000b72:	20fe      	movs	r0, #254	; 0xfe
 8000b74:	1c6a      	adds	r2, r5, #1
 8000b76:	4210      	tst	r0, r2
 8000b78:	d171      	bne.n	8000c5e <__aeabi_fsub+0x252>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fsub+0x174>
 8000b7e:	e0a6      	b.n	8000cce <__aeabi_fsub+0x2c2>
 8000b80:	4663      	mov	r3, ip
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x17c>
 8000b86:	e0d9      	b.n	8000d3c <__aeabi_fsub+0x330>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_fsub+0x184>
 8000b8e:	e788      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000b90:	1b98      	subs	r0, r3, r6
 8000b92:	0143      	lsls	r3, r0, #5
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_fsub+0x18c>
 8000b96:	e0e1      	b.n	8000d5c <__aeabi_fsub+0x350>
 8000b98:	4663      	mov	r3, ip
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	1af0      	subs	r0, r6, r3
 8000b9e:	e76f      	b.n	8000a80 <__aeabi_fsub+0x74>
 8000ba0:	2e00      	cmp	r6, #0
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fsub+0x19a>
 8000ba4:	e0b7      	b.n	8000d16 <__aeabi_fsub+0x30a>
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	2801      	cmp	r0, #1
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x1a4>
 8000bae:	e09c      	b.n	8000cea <__aeabi_fsub+0x2de>
 8000bb0:	28ff      	cmp	r0, #255	; 0xff
 8000bb2:	d026      	beq.n	8000c02 <__aeabi_fsub+0x1f6>
 8000bb4:	4690      	mov	r8, r2
 8000bb6:	e788      	b.n	8000aca <__aeabi_fsub+0xbe>
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	2700      	movs	r7, #0
 8000bbc:	e771      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000bbe:	20fe      	movs	r0, #254	; 0xfe
 8000bc0:	1c6a      	adds	r2, r5, #1
 8000bc2:	4210      	tst	r0, r2
 8000bc4:	d064      	beq.n	8000c90 <__aeabi_fsub+0x284>
 8000bc6:	2aff      	cmp	r2, #255	; 0xff
 8000bc8:	d0f6      	beq.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000bca:	0015      	movs	r5, r2
 8000bcc:	4466      	add	r6, ip
 8000bce:	0870      	lsrs	r0, r6, #1
 8000bd0:	0743      	lsls	r3, r0, #29
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fsub+0x1ca>
 8000bd4:	e756      	b.n	8000a84 <__aeabi_fsub+0x78>
 8000bd6:	08c3      	lsrs	r3, r0, #3
 8000bd8:	2dff      	cmp	r5, #255	; 0xff
 8000bda:	d012      	beq.n	8000c02 <__aeabi_fsub+0x1f6>
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5f      	lsrs	r7, r3, #9
 8000be0:	b2ea      	uxtb	r2, r5
 8000be2:	e75e      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000be4:	4662      	mov	r2, ip
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x1e0>
 8000bea:	e096      	b.n	8000d1a <__aeabi_fsub+0x30e>
 8000bec:	2e00      	cmp	r6, #0
 8000bee:	d008      	beq.n	8000c02 <__aeabi_fsub+0x1f6>
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	03d2      	lsls	r2, r2, #15
 8000bf4:	4213      	tst	r3, r2
 8000bf6:	d004      	beq.n	8000c02 <__aeabi_fsub+0x1f6>
 8000bf8:	4648      	mov	r0, r9
 8000bfa:	4210      	tst	r0, r2
 8000bfc:	d101      	bne.n	8000c02 <__aeabi_fsub+0x1f6>
 8000bfe:	000c      	movs	r4, r1
 8000c00:	464b      	mov	r3, r9
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0d8      	beq.n	8000bb8 <__aeabi_fsub+0x1ac>
 8000c06:	2780      	movs	r7, #128	; 0x80
 8000c08:	03ff      	lsls	r7, r7, #15
 8000c0a:	431f      	orrs	r7, r3
 8000c0c:	027f      	lsls	r7, r7, #9
 8000c0e:	22ff      	movs	r2, #255	; 0xff
 8000c10:	0a7f      	lsrs	r7, r7, #9
 8000c12:	e746      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000c14:	2320      	movs	r3, #32
 8000c16:	003a      	movs	r2, r7
 8000c18:	1b45      	subs	r5, r0, r5
 8000c1a:	0038      	movs	r0, r7
 8000c1c:	3501      	adds	r5, #1
 8000c1e:	40ea      	lsrs	r2, r5
 8000c20:	1b5d      	subs	r5, r3, r5
 8000c22:	40a8      	lsls	r0, r5
 8000c24:	1e43      	subs	r3, r0, #1
 8000c26:	4198      	sbcs	r0, r3
 8000c28:	2500      	movs	r5, #0
 8000c2a:	4310      	orrs	r0, r2
 8000c2c:	e728      	b.n	8000a80 <__aeabi_fsub+0x74>
 8000c2e:	2320      	movs	r3, #32
 8000c30:	1a1b      	subs	r3, r3, r0
 8000c32:	0032      	movs	r2, r6
 8000c34:	409e      	lsls	r6, r3
 8000c36:	40c2      	lsrs	r2, r0
 8000c38:	0030      	movs	r0, r6
 8000c3a:	1e43      	subs	r3, r0, #1
 8000c3c:	4198      	sbcs	r0, r3
 8000c3e:	4310      	orrs	r0, r2
 8000c40:	e70c      	b.n	8000a5c <__aeabi_fsub+0x50>
 8000c42:	2aff      	cmp	r2, #255	; 0xff
 8000c44:	d0db      	beq.n	8000bfe <__aeabi_fsub+0x1f2>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	4660      	mov	r0, ip
 8000c4a:	04db      	lsls	r3, r3, #19
 8000c4c:	4318      	orrs	r0, r3
 8000c4e:	4684      	mov	ip, r0
 8000c50:	2f1b      	cmp	r7, #27
 8000c52:	dd56      	ble.n	8000d02 <__aeabi_fsub+0x2f6>
 8000c54:	2001      	movs	r0, #1
 8000c56:	000c      	movs	r4, r1
 8000c58:	0015      	movs	r5, r2
 8000c5a:	1a30      	subs	r0, r6, r0
 8000c5c:	e700      	b.n	8000a60 <__aeabi_fsub+0x54>
 8000c5e:	4663      	mov	r3, ip
 8000c60:	1b9f      	subs	r7, r3, r6
 8000c62:	017b      	lsls	r3, r7, #5
 8000c64:	d43d      	bmi.n	8000ce2 <__aeabi_fsub+0x2d6>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fsub+0x260>
 8000c6a:	e6fe      	b.n	8000a6a <__aeabi_fsub+0x5e>
 8000c6c:	2400      	movs	r4, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2700      	movs	r7, #0
 8000c72:	e716      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000c74:	0005      	movs	r5, r0
 8000c76:	e7af      	b.n	8000bd8 <__aeabi_fsub+0x1cc>
 8000c78:	0032      	movs	r2, r6
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	4641      	mov	r1, r8
 8000c7e:	40da      	lsrs	r2, r3
 8000c80:	2320      	movs	r3, #32
 8000c82:	1a5b      	subs	r3, r3, r1
 8000c84:	409e      	lsls	r6, r3
 8000c86:	0030      	movs	r0, r6
 8000c88:	1e43      	subs	r3, r0, #1
 8000c8a:	4198      	sbcs	r0, r3
 8000c8c:	4310      	orrs	r0, r2
 8000c8e:	e721      	b.n	8000ad4 <__aeabi_fsub+0xc8>
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	d1a7      	bne.n	8000be4 <__aeabi_fsub+0x1d8>
 8000c94:	4663      	mov	r3, ip
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d059      	beq.n	8000d4e <__aeabi_fsub+0x342>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0x296>
 8000ca0:	e6ff      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000ca2:	0030      	movs	r0, r6
 8000ca4:	4460      	add	r0, ip
 8000ca6:	0143      	lsls	r3, r0, #5
 8000ca8:	d592      	bpl.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <__aeabi_fsub+0x348>)
 8000cac:	3501      	adds	r5, #1
 8000cae:	4018      	ands	r0, r3
 8000cb0:	e78e      	b.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000cb2:	4663      	mov	r3, ip
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d047      	beq.n	8000d48 <__aeabi_fsub+0x33c>
 8000cb8:	1e4b      	subs	r3, r1, #1
 8000cba:	2901      	cmp	r1, #1
 8000cbc:	d015      	beq.n	8000cea <__aeabi_fsub+0x2de>
 8000cbe:	29ff      	cmp	r1, #255	; 0xff
 8000cc0:	d02b      	beq.n	8000d1a <__aeabi_fsub+0x30e>
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	e74e      	b.n	8000b64 <__aeabi_fsub+0x158>
 8000cc6:	000c      	movs	r4, r1
 8000cc8:	464b      	mov	r3, r9
 8000cca:	003d      	movs	r5, r7
 8000ccc:	e784      	b.n	8000bd8 <__aeabi_fsub+0x1cc>
 8000cce:	4662      	mov	r2, ip
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d18b      	bne.n	8000bec <__aeabi_fsub+0x1e0>
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d192      	bne.n	8000bfe <__aeabi_fsub+0x1f2>
 8000cd8:	2780      	movs	r7, #128	; 0x80
 8000cda:	2400      	movs	r4, #0
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	03ff      	lsls	r7, r7, #15
 8000ce0:	e6df      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000ce2:	4663      	mov	r3, ip
 8000ce4:	000c      	movs	r4, r1
 8000ce6:	1af7      	subs	r7, r6, r3
 8000ce8:	e6bf      	b.n	8000a6a <__aeabi_fsub+0x5e>
 8000cea:	0030      	movs	r0, r6
 8000cec:	4460      	add	r0, ip
 8000cee:	2501      	movs	r5, #1
 8000cf0:	0143      	lsls	r3, r0, #5
 8000cf2:	d400      	bmi.n	8000cf6 <__aeabi_fsub+0x2ea>
 8000cf4:	e76c      	b.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000cf6:	2502      	movs	r5, #2
 8000cf8:	e6f2      	b.n	8000ae0 <__aeabi_fsub+0xd4>
 8000cfa:	4663      	mov	r3, ip
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	1b98      	subs	r0, r3, r6
 8000d00:	e6ae      	b.n	8000a60 <__aeabi_fsub+0x54>
 8000d02:	2320      	movs	r3, #32
 8000d04:	4664      	mov	r4, ip
 8000d06:	4660      	mov	r0, ip
 8000d08:	40fc      	lsrs	r4, r7
 8000d0a:	1bdf      	subs	r7, r3, r7
 8000d0c:	40b8      	lsls	r0, r7
 8000d0e:	1e43      	subs	r3, r0, #1
 8000d10:	4198      	sbcs	r0, r3
 8000d12:	4320      	orrs	r0, r4
 8000d14:	e79f      	b.n	8000c56 <__aeabi_fsub+0x24a>
 8000d16:	0005      	movs	r5, r0
 8000d18:	e75e      	b.n	8000bd8 <__aeabi_fsub+0x1cc>
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	e771      	b.n	8000c02 <__aeabi_fsub+0x1f6>
 8000d1e:	2320      	movs	r3, #32
 8000d20:	4665      	mov	r5, ip
 8000d22:	4660      	mov	r0, ip
 8000d24:	40cd      	lsrs	r5, r1
 8000d26:	1a59      	subs	r1, r3, r1
 8000d28:	4088      	lsls	r0, r1
 8000d2a:	1e43      	subs	r3, r0, #1
 8000d2c:	4198      	sbcs	r0, r3
 8000d2e:	4328      	orrs	r0, r5
 8000d30:	e71c      	b.n	8000b6c <__aeabi_fsub+0x160>
 8000d32:	4663      	mov	r3, ip
 8000d34:	000c      	movs	r4, r1
 8000d36:	2501      	movs	r5, #1
 8000d38:	1af0      	subs	r0, r6, r3
 8000d3a:	e691      	b.n	8000a60 <__aeabi_fsub+0x54>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d095      	beq.n	8000c6c <__aeabi_fsub+0x260>
 8000d40:	000c      	movs	r4, r1
 8000d42:	464f      	mov	r7, r9
 8000d44:	2200      	movs	r2, #0
 8000d46:	e6ac      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000d48:	464b      	mov	r3, r9
 8000d4a:	000d      	movs	r5, r1
 8000d4c:	e744      	b.n	8000bd8 <__aeabi_fsub+0x1cc>
 8000d4e:	464f      	mov	r7, r9
 8000d50:	2200      	movs	r2, #0
 8000d52:	e6a6      	b.n	8000aa2 <__aeabi_fsub+0x96>
 8000d54:	fbffffff 	.word	0xfbffffff
 8000d58:	7dffffff 	.word	0x7dffffff
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fsub+0x356>
 8000d60:	e736      	b.n	8000bd0 <__aeabi_fsub+0x1c4>
 8000d62:	2400      	movs	r4, #0
 8000d64:	2700      	movs	r7, #0
 8000d66:	e69c      	b.n	8000aa2 <__aeabi_fsub+0x96>

08000d68 <__aeabi_i2f>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d013      	beq.n	8000d96 <__aeabi_i2f+0x2e>
 8000d6e:	17c3      	asrs	r3, r0, #31
 8000d70:	18c6      	adds	r6, r0, r3
 8000d72:	405e      	eors	r6, r3
 8000d74:	0fc4      	lsrs	r4, r0, #31
 8000d76:	0030      	movs	r0, r6
 8000d78:	f001 fe9e 	bl	8002ab8 <__clzsi2>
 8000d7c:	239e      	movs	r3, #158	; 0x9e
 8000d7e:	0005      	movs	r5, r0
 8000d80:	1a1b      	subs	r3, r3, r0
 8000d82:	2b96      	cmp	r3, #150	; 0x96
 8000d84:	dc0f      	bgt.n	8000da6 <__aeabi_i2f+0x3e>
 8000d86:	2808      	cmp	r0, #8
 8000d88:	dd01      	ble.n	8000d8e <__aeabi_i2f+0x26>
 8000d8a:	3d08      	subs	r5, #8
 8000d8c:	40ae      	lsls	r6, r5
 8000d8e:	0276      	lsls	r6, r6, #9
 8000d90:	0a76      	lsrs	r6, r6, #9
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	e002      	b.n	8000d9c <__aeabi_i2f+0x34>
 8000d96:	2400      	movs	r4, #0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	05c0      	lsls	r0, r0, #23
 8000d9e:	4330      	orrs	r0, r6
 8000da0:	07e4      	lsls	r4, r4, #31
 8000da2:	4320      	orrs	r0, r4
 8000da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da6:	2b99      	cmp	r3, #153	; 0x99
 8000da8:	dd0c      	ble.n	8000dc4 <__aeabi_i2f+0x5c>
 8000daa:	2205      	movs	r2, #5
 8000dac:	0031      	movs	r1, r6
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	40d1      	lsrs	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	0001      	movs	r1, r0
 8000db6:	0030      	movs	r0, r6
 8000db8:	311b      	adds	r1, #27
 8000dba:	4088      	lsls	r0, r1
 8000dbc:	1e41      	subs	r1, r0, #1
 8000dbe:	4188      	sbcs	r0, r1
 8000dc0:	4302      	orrs	r2, r0
 8000dc2:	0016      	movs	r6, r2
 8000dc4:	2d05      	cmp	r5, #5
 8000dc6:	dc12      	bgt.n	8000dee <__aeabi_i2f+0x86>
 8000dc8:	0031      	movs	r1, r6
 8000dca:	4f0d      	ldr	r7, [pc, #52]	; (8000e00 <__aeabi_i2f+0x98>)
 8000dcc:	4039      	ands	r1, r7
 8000dce:	0772      	lsls	r2, r6, #29
 8000dd0:	d009      	beq.n	8000de6 <__aeabi_i2f+0x7e>
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	4030      	ands	r0, r6
 8000dd6:	2804      	cmp	r0, #4
 8000dd8:	d005      	beq.n	8000de6 <__aeabi_i2f+0x7e>
 8000dda:	3104      	adds	r1, #4
 8000ddc:	014a      	lsls	r2, r1, #5
 8000dde:	d502      	bpl.n	8000de6 <__aeabi_i2f+0x7e>
 8000de0:	239f      	movs	r3, #159	; 0x9f
 8000de2:	4039      	ands	r1, r7
 8000de4:	1b5b      	subs	r3, r3, r5
 8000de6:	0189      	lsls	r1, r1, #6
 8000de8:	0a4e      	lsrs	r6, r1, #9
 8000dea:	b2d8      	uxtb	r0, r3
 8000dec:	e7d6      	b.n	8000d9c <__aeabi_i2f+0x34>
 8000dee:	1f6a      	subs	r2, r5, #5
 8000df0:	4096      	lsls	r6, r2
 8000df2:	0031      	movs	r1, r6
 8000df4:	4f02      	ldr	r7, [pc, #8]	; (8000e00 <__aeabi_i2f+0x98>)
 8000df6:	4039      	ands	r1, r7
 8000df8:	0772      	lsls	r2, r6, #29
 8000dfa:	d0f4      	beq.n	8000de6 <__aeabi_i2f+0x7e>
 8000dfc:	e7e9      	b.n	8000dd2 <__aeabi_i2f+0x6a>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	fbffffff 	.word	0xfbffffff

08000e04 <__aeabi_dadd>:
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	464f      	mov	r7, r9
 8000e08:	4646      	mov	r6, r8
 8000e0a:	46d6      	mov	lr, sl
 8000e0c:	000d      	movs	r5, r1
 8000e0e:	0004      	movs	r4, r0
 8000e10:	b5c0      	push	{r6, r7, lr}
 8000e12:	001f      	movs	r7, r3
 8000e14:	0011      	movs	r1, r2
 8000e16:	0328      	lsls	r0, r5, #12
 8000e18:	0f62      	lsrs	r2, r4, #29
 8000e1a:	0a40      	lsrs	r0, r0, #9
 8000e1c:	4310      	orrs	r0, r2
 8000e1e:	007a      	lsls	r2, r7, #1
 8000e20:	0d52      	lsrs	r2, r2, #21
 8000e22:	00e3      	lsls	r3, r4, #3
 8000e24:	033c      	lsls	r4, r7, #12
 8000e26:	4691      	mov	r9, r2
 8000e28:	0a64      	lsrs	r4, r4, #9
 8000e2a:	0ffa      	lsrs	r2, r7, #31
 8000e2c:	0f4f      	lsrs	r7, r1, #29
 8000e2e:	006e      	lsls	r6, r5, #1
 8000e30:	4327      	orrs	r7, r4
 8000e32:	4692      	mov	sl, r2
 8000e34:	46b8      	mov	r8, r7
 8000e36:	0d76      	lsrs	r6, r6, #21
 8000e38:	0fed      	lsrs	r5, r5, #31
 8000e3a:	00c9      	lsls	r1, r1, #3
 8000e3c:	4295      	cmp	r5, r2
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x3e>
 8000e40:	e099      	b.n	8000f76 <__aeabi_dadd+0x172>
 8000e42:	464c      	mov	r4, r9
 8000e44:	1b34      	subs	r4, r6, r4
 8000e46:	46a4      	mov	ip, r4
 8000e48:	2c00      	cmp	r4, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_dadd+0x4a>
 8000e4c:	e07c      	b.n	8000f48 <__aeabi_dadd+0x144>
 8000e4e:	464a      	mov	r2, r9
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x52>
 8000e54:	e0b8      	b.n	8000fc8 <__aeabi_dadd+0x1c4>
 8000e56:	4ac5      	ldr	r2, [pc, #788]	; (800116c <__aeabi_dadd+0x368>)
 8000e58:	4296      	cmp	r6, r2
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_dadd+0x5a>
 8000e5c:	e11c      	b.n	8001098 <__aeabi_dadd+0x294>
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	003c      	movs	r4, r7
 8000e62:	0412      	lsls	r2, r2, #16
 8000e64:	4314      	orrs	r4, r2
 8000e66:	46a0      	mov	r8, r4
 8000e68:	4662      	mov	r2, ip
 8000e6a:	2a38      	cmp	r2, #56	; 0x38
 8000e6c:	dd00      	ble.n	8000e70 <__aeabi_dadd+0x6c>
 8000e6e:	e161      	b.n	8001134 <__aeabi_dadd+0x330>
 8000e70:	2a1f      	cmp	r2, #31
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dadd+0x72>
 8000e74:	e1cc      	b.n	8001210 <__aeabi_dadd+0x40c>
 8000e76:	4664      	mov	r4, ip
 8000e78:	2220      	movs	r2, #32
 8000e7a:	1b12      	subs	r2, r2, r4
 8000e7c:	4644      	mov	r4, r8
 8000e7e:	4094      	lsls	r4, r2
 8000e80:	000f      	movs	r7, r1
 8000e82:	46a1      	mov	r9, r4
 8000e84:	4664      	mov	r4, ip
 8000e86:	4091      	lsls	r1, r2
 8000e88:	40e7      	lsrs	r7, r4
 8000e8a:	464c      	mov	r4, r9
 8000e8c:	1e4a      	subs	r2, r1, #1
 8000e8e:	4191      	sbcs	r1, r2
 8000e90:	433c      	orrs	r4, r7
 8000e92:	4642      	mov	r2, r8
 8000e94:	4321      	orrs	r1, r4
 8000e96:	4664      	mov	r4, ip
 8000e98:	40e2      	lsrs	r2, r4
 8000e9a:	1a80      	subs	r0, r0, r2
 8000e9c:	1a5c      	subs	r4, r3, r1
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	419b      	sbcs	r3, r3
 8000ea2:	425f      	negs	r7, r3
 8000ea4:	1bc7      	subs	r7, r0, r7
 8000ea6:	023b      	lsls	r3, r7, #8
 8000ea8:	d400      	bmi.n	8000eac <__aeabi_dadd+0xa8>
 8000eaa:	e0d0      	b.n	800104e <__aeabi_dadd+0x24a>
 8000eac:	027f      	lsls	r7, r7, #9
 8000eae:	0a7f      	lsrs	r7, r7, #9
 8000eb0:	2f00      	cmp	r7, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_dadd+0xb2>
 8000eb4:	e0ff      	b.n	80010b6 <__aeabi_dadd+0x2b2>
 8000eb6:	0038      	movs	r0, r7
 8000eb8:	f001 fdfe 	bl	8002ab8 <__clzsi2>
 8000ebc:	0001      	movs	r1, r0
 8000ebe:	3908      	subs	r1, #8
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	0022      	movs	r2, r4
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	408f      	lsls	r7, r1
 8000ec8:	40da      	lsrs	r2, r3
 8000eca:	408c      	lsls	r4, r1
 8000ecc:	4317      	orrs	r7, r2
 8000ece:	42b1      	cmp	r1, r6
 8000ed0:	da00      	bge.n	8000ed4 <__aeabi_dadd+0xd0>
 8000ed2:	e0ff      	b.n	80010d4 <__aeabi_dadd+0x2d0>
 8000ed4:	1b89      	subs	r1, r1, r6
 8000ed6:	1c4b      	adds	r3, r1, #1
 8000ed8:	2b1f      	cmp	r3, #31
 8000eda:	dd00      	ble.n	8000ede <__aeabi_dadd+0xda>
 8000edc:	e0a8      	b.n	8001030 <__aeabi_dadd+0x22c>
 8000ede:	2220      	movs	r2, #32
 8000ee0:	0039      	movs	r1, r7
 8000ee2:	1ad2      	subs	r2, r2, r3
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	4094      	lsls	r4, r2
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	40d8      	lsrs	r0, r3
 8000eec:	1e62      	subs	r2, r4, #1
 8000eee:	4194      	sbcs	r4, r2
 8000ef0:	40df      	lsrs	r7, r3
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4301      	orrs	r1, r0
 8000ef6:	430c      	orrs	r4, r1
 8000ef8:	0763      	lsls	r3, r4, #29
 8000efa:	d009      	beq.n	8000f10 <__aeabi_dadd+0x10c>
 8000efc:	230f      	movs	r3, #15
 8000efe:	4023      	ands	r3, r4
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d005      	beq.n	8000f10 <__aeabi_dadd+0x10c>
 8000f04:	1d23      	adds	r3, r4, #4
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	41a4      	sbcs	r4, r4
 8000f0a:	4264      	negs	r4, r4
 8000f0c:	193f      	adds	r7, r7, r4
 8000f0e:	001c      	movs	r4, r3
 8000f10:	023b      	lsls	r3, r7, #8
 8000f12:	d400      	bmi.n	8000f16 <__aeabi_dadd+0x112>
 8000f14:	e09e      	b.n	8001054 <__aeabi_dadd+0x250>
 8000f16:	4b95      	ldr	r3, [pc, #596]	; (800116c <__aeabi_dadd+0x368>)
 8000f18:	3601      	adds	r6, #1
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_dadd+0x11c>
 8000f1e:	e0b7      	b.n	8001090 <__aeabi_dadd+0x28c>
 8000f20:	4a93      	ldr	r2, [pc, #588]	; (8001170 <__aeabi_dadd+0x36c>)
 8000f22:	08e4      	lsrs	r4, r4, #3
 8000f24:	4017      	ands	r7, r2
 8000f26:	077b      	lsls	r3, r7, #29
 8000f28:	0571      	lsls	r1, r6, #21
 8000f2a:	027f      	lsls	r7, r7, #9
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	0b3f      	lsrs	r7, r7, #12
 8000f30:	0d4a      	lsrs	r2, r1, #21
 8000f32:	0512      	lsls	r2, r2, #20
 8000f34:	433a      	orrs	r2, r7
 8000f36:	07ed      	lsls	r5, r5, #31
 8000f38:	432a      	orrs	r2, r5
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	bce0      	pop	{r5, r6, r7}
 8000f40:	46ba      	mov	sl, r7
 8000f42:	46b1      	mov	r9, r6
 8000f44:	46a8      	mov	r8, r5
 8000f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d04b      	beq.n	8000fe4 <__aeabi_dadd+0x1e0>
 8000f4c:	464c      	mov	r4, r9
 8000f4e:	1ba4      	subs	r4, r4, r6
 8000f50:	46a4      	mov	ip, r4
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d000      	beq.n	8000f58 <__aeabi_dadd+0x154>
 8000f56:	e123      	b.n	80011a0 <__aeabi_dadd+0x39c>
 8000f58:	0004      	movs	r4, r0
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dadd+0x15c>
 8000f5e:	e1af      	b.n	80012c0 <__aeabi_dadd+0x4bc>
 8000f60:	4662      	mov	r2, ip
 8000f62:	1e54      	subs	r4, r2, #1
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dadd+0x166>
 8000f68:	e215      	b.n	8001396 <__aeabi_dadd+0x592>
 8000f6a:	4d80      	ldr	r5, [pc, #512]	; (800116c <__aeabi_dadd+0x368>)
 8000f6c:	45ac      	cmp	ip, r5
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dadd+0x16e>
 8000f70:	e1c8      	b.n	8001304 <__aeabi_dadd+0x500>
 8000f72:	46a4      	mov	ip, r4
 8000f74:	e11b      	b.n	80011ae <__aeabi_dadd+0x3aa>
 8000f76:	464a      	mov	r2, r9
 8000f78:	1ab2      	subs	r2, r6, r2
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	dc00      	bgt.n	8000f82 <__aeabi_dadd+0x17e>
 8000f80:	e0ac      	b.n	80010dc <__aeabi_dadd+0x2d8>
 8000f82:	464a      	mov	r2, r9
 8000f84:	2a00      	cmp	r2, #0
 8000f86:	d043      	beq.n	8001010 <__aeabi_dadd+0x20c>
 8000f88:	4a78      	ldr	r2, [pc, #480]	; (800116c <__aeabi_dadd+0x368>)
 8000f8a:	4296      	cmp	r6, r2
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x18c>
 8000f8e:	e1af      	b.n	80012f0 <__aeabi_dadd+0x4ec>
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	003c      	movs	r4, r7
 8000f94:	0412      	lsls	r2, r2, #16
 8000f96:	4314      	orrs	r4, r2
 8000f98:	46a0      	mov	r8, r4
 8000f9a:	4662      	mov	r2, ip
 8000f9c:	2a38      	cmp	r2, #56	; 0x38
 8000f9e:	dc67      	bgt.n	8001070 <__aeabi_dadd+0x26c>
 8000fa0:	2a1f      	cmp	r2, #31
 8000fa2:	dc00      	bgt.n	8000fa6 <__aeabi_dadd+0x1a2>
 8000fa4:	e15f      	b.n	8001266 <__aeabi_dadd+0x462>
 8000fa6:	4647      	mov	r7, r8
 8000fa8:	3a20      	subs	r2, #32
 8000faa:	40d7      	lsrs	r7, r2
 8000fac:	4662      	mov	r2, ip
 8000fae:	2a20      	cmp	r2, #32
 8000fb0:	d005      	beq.n	8000fbe <__aeabi_dadd+0x1ba>
 8000fb2:	4664      	mov	r4, ip
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	1b12      	subs	r2, r2, r4
 8000fb8:	4644      	mov	r4, r8
 8000fba:	4094      	lsls	r4, r2
 8000fbc:	4321      	orrs	r1, r4
 8000fbe:	1e4a      	subs	r2, r1, #1
 8000fc0:	4191      	sbcs	r1, r2
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	433c      	orrs	r4, r7
 8000fc6:	e057      	b.n	8001078 <__aeabi_dadd+0x274>
 8000fc8:	003a      	movs	r2, r7
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_dadd+0x1cc>
 8000fce:	e105      	b.n	80011dc <__aeabi_dadd+0x3d8>
 8000fd0:	0022      	movs	r2, r4
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	2c01      	cmp	r4, #1
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dadd+0x1d6>
 8000fd8:	e182      	b.n	80012e0 <__aeabi_dadd+0x4dc>
 8000fda:	4c64      	ldr	r4, [pc, #400]	; (800116c <__aeabi_dadd+0x368>)
 8000fdc:	45a4      	cmp	ip, r4
 8000fde:	d05b      	beq.n	8001098 <__aeabi_dadd+0x294>
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	e741      	b.n	8000e68 <__aeabi_dadd+0x64>
 8000fe4:	4c63      	ldr	r4, [pc, #396]	; (8001174 <__aeabi_dadd+0x370>)
 8000fe6:	1c77      	adds	r7, r6, #1
 8000fe8:	4227      	tst	r7, r4
 8000fea:	d000      	beq.n	8000fee <__aeabi_dadd+0x1ea>
 8000fec:	e0c4      	b.n	8001178 <__aeabi_dadd+0x374>
 8000fee:	0004      	movs	r4, r0
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	2e00      	cmp	r6, #0
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_dadd+0x1f4>
 8000ff6:	e169      	b.n	80012cc <__aeabi_dadd+0x4c8>
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x1fa>
 8000ffc:	e1bf      	b.n	800137e <__aeabi_dadd+0x57a>
 8000ffe:	4644      	mov	r4, r8
 8001000:	430c      	orrs	r4, r1
 8001002:	d000      	beq.n	8001006 <__aeabi_dadd+0x202>
 8001004:	e1d0      	b.n	80013a8 <__aeabi_dadd+0x5a4>
 8001006:	0742      	lsls	r2, r0, #29
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	4313      	orrs	r3, r2
 800100c:	08c0      	lsrs	r0, r0, #3
 800100e:	e029      	b.n	8001064 <__aeabi_dadd+0x260>
 8001010:	003a      	movs	r2, r7
 8001012:	430a      	orrs	r2, r1
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x214>
 8001016:	e170      	b.n	80012fa <__aeabi_dadd+0x4f6>
 8001018:	4662      	mov	r2, ip
 800101a:	4664      	mov	r4, ip
 800101c:	3a01      	subs	r2, #1
 800101e:	2c01      	cmp	r4, #1
 8001020:	d100      	bne.n	8001024 <__aeabi_dadd+0x220>
 8001022:	e0e0      	b.n	80011e6 <__aeabi_dadd+0x3e2>
 8001024:	4c51      	ldr	r4, [pc, #324]	; (800116c <__aeabi_dadd+0x368>)
 8001026:	45a4      	cmp	ip, r4
 8001028:	d100      	bne.n	800102c <__aeabi_dadd+0x228>
 800102a:	e161      	b.n	80012f0 <__aeabi_dadd+0x4ec>
 800102c:	4694      	mov	ip, r2
 800102e:	e7b4      	b.n	8000f9a <__aeabi_dadd+0x196>
 8001030:	003a      	movs	r2, r7
 8001032:	391f      	subs	r1, #31
 8001034:	40ca      	lsrs	r2, r1
 8001036:	0011      	movs	r1, r2
 8001038:	2b20      	cmp	r3, #32
 800103a:	d003      	beq.n	8001044 <__aeabi_dadd+0x240>
 800103c:	2240      	movs	r2, #64	; 0x40
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	409f      	lsls	r7, r3
 8001042:	433c      	orrs	r4, r7
 8001044:	1e63      	subs	r3, r4, #1
 8001046:	419c      	sbcs	r4, r3
 8001048:	2700      	movs	r7, #0
 800104a:	2600      	movs	r6, #0
 800104c:	430c      	orrs	r4, r1
 800104e:	0763      	lsls	r3, r4, #29
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x250>
 8001052:	e753      	b.n	8000efc <__aeabi_dadd+0xf8>
 8001054:	46b4      	mov	ip, r6
 8001056:	08e4      	lsrs	r4, r4, #3
 8001058:	077b      	lsls	r3, r7, #29
 800105a:	4323      	orrs	r3, r4
 800105c:	08f8      	lsrs	r0, r7, #3
 800105e:	4a43      	ldr	r2, [pc, #268]	; (800116c <__aeabi_dadd+0x368>)
 8001060:	4594      	cmp	ip, r2
 8001062:	d01d      	beq.n	80010a0 <__aeabi_dadd+0x29c>
 8001064:	4662      	mov	r2, ip
 8001066:	0307      	lsls	r7, r0, #12
 8001068:	0552      	lsls	r2, r2, #21
 800106a:	0b3f      	lsrs	r7, r7, #12
 800106c:	0d52      	lsrs	r2, r2, #21
 800106e:	e760      	b.n	8000f32 <__aeabi_dadd+0x12e>
 8001070:	4644      	mov	r4, r8
 8001072:	430c      	orrs	r4, r1
 8001074:	1e62      	subs	r2, r4, #1
 8001076:	4194      	sbcs	r4, r2
 8001078:	18e4      	adds	r4, r4, r3
 800107a:	429c      	cmp	r4, r3
 800107c:	419b      	sbcs	r3, r3
 800107e:	425f      	negs	r7, r3
 8001080:	183f      	adds	r7, r7, r0
 8001082:	023b      	lsls	r3, r7, #8
 8001084:	d5e3      	bpl.n	800104e <__aeabi_dadd+0x24a>
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <__aeabi_dadd+0x368>)
 8001088:	3601      	adds	r6, #1
 800108a:	429e      	cmp	r6, r3
 800108c:	d000      	beq.n	8001090 <__aeabi_dadd+0x28c>
 800108e:	e0b5      	b.n	80011fc <__aeabi_dadd+0x3f8>
 8001090:	0032      	movs	r2, r6
 8001092:	2700      	movs	r7, #0
 8001094:	2300      	movs	r3, #0
 8001096:	e74c      	b.n	8000f32 <__aeabi_dadd+0x12e>
 8001098:	0742      	lsls	r2, r0, #29
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	4313      	orrs	r3, r2
 800109e:	08c0      	lsrs	r0, r0, #3
 80010a0:	001a      	movs	r2, r3
 80010a2:	4302      	orrs	r2, r0
 80010a4:	d100      	bne.n	80010a8 <__aeabi_dadd+0x2a4>
 80010a6:	e1e1      	b.n	800146c <__aeabi_dadd+0x668>
 80010a8:	2780      	movs	r7, #128	; 0x80
 80010aa:	033f      	lsls	r7, r7, #12
 80010ac:	4307      	orrs	r7, r0
 80010ae:	033f      	lsls	r7, r7, #12
 80010b0:	4a2e      	ldr	r2, [pc, #184]	; (800116c <__aeabi_dadd+0x368>)
 80010b2:	0b3f      	lsrs	r7, r7, #12
 80010b4:	e73d      	b.n	8000f32 <__aeabi_dadd+0x12e>
 80010b6:	0020      	movs	r0, r4
 80010b8:	f001 fcfe 	bl	8002ab8 <__clzsi2>
 80010bc:	0001      	movs	r1, r0
 80010be:	3118      	adds	r1, #24
 80010c0:	291f      	cmp	r1, #31
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_dadd+0x2c2>
 80010c4:	e6fc      	b.n	8000ec0 <__aeabi_dadd+0xbc>
 80010c6:	3808      	subs	r0, #8
 80010c8:	4084      	lsls	r4, r0
 80010ca:	0027      	movs	r7, r4
 80010cc:	2400      	movs	r4, #0
 80010ce:	42b1      	cmp	r1, r6
 80010d0:	db00      	blt.n	80010d4 <__aeabi_dadd+0x2d0>
 80010d2:	e6ff      	b.n	8000ed4 <__aeabi_dadd+0xd0>
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <__aeabi_dadd+0x36c>)
 80010d6:	1a76      	subs	r6, r6, r1
 80010d8:	4017      	ands	r7, r2
 80010da:	e70d      	b.n	8000ef8 <__aeabi_dadd+0xf4>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	d02f      	beq.n	8001140 <__aeabi_dadd+0x33c>
 80010e0:	464a      	mov	r2, r9
 80010e2:	1b92      	subs	r2, r2, r6
 80010e4:	4694      	mov	ip, r2
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_dadd+0x2e8>
 80010ea:	e0ad      	b.n	8001248 <__aeabi_dadd+0x444>
 80010ec:	4a1f      	ldr	r2, [pc, #124]	; (800116c <__aeabi_dadd+0x368>)
 80010ee:	4591      	cmp	r9, r2
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x2f0>
 80010f2:	e10f      	b.n	8001314 <__aeabi_dadd+0x510>
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	0412      	lsls	r2, r2, #16
 80010f8:	4310      	orrs	r0, r2
 80010fa:	4662      	mov	r2, ip
 80010fc:	2a38      	cmp	r2, #56	; 0x38
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dadd+0x2fe>
 8001100:	e10f      	b.n	8001322 <__aeabi_dadd+0x51e>
 8001102:	2a1f      	cmp	r2, #31
 8001104:	dd00      	ble.n	8001108 <__aeabi_dadd+0x304>
 8001106:	e180      	b.n	800140a <__aeabi_dadd+0x606>
 8001108:	4664      	mov	r4, ip
 800110a:	2220      	movs	r2, #32
 800110c:	001e      	movs	r6, r3
 800110e:	1b12      	subs	r2, r2, r4
 8001110:	4667      	mov	r7, ip
 8001112:	0004      	movs	r4, r0
 8001114:	4093      	lsls	r3, r2
 8001116:	4094      	lsls	r4, r2
 8001118:	40fe      	lsrs	r6, r7
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	4193      	sbcs	r3, r2
 800111e:	40f8      	lsrs	r0, r7
 8001120:	4334      	orrs	r4, r6
 8001122:	431c      	orrs	r4, r3
 8001124:	4480      	add	r8, r0
 8001126:	1864      	adds	r4, r4, r1
 8001128:	428c      	cmp	r4, r1
 800112a:	41bf      	sbcs	r7, r7
 800112c:	427f      	negs	r7, r7
 800112e:	464e      	mov	r6, r9
 8001130:	4447      	add	r7, r8
 8001132:	e7a6      	b.n	8001082 <__aeabi_dadd+0x27e>
 8001134:	4642      	mov	r2, r8
 8001136:	430a      	orrs	r2, r1
 8001138:	0011      	movs	r1, r2
 800113a:	1e4a      	subs	r2, r1, #1
 800113c:	4191      	sbcs	r1, r2
 800113e:	e6ad      	b.n	8000e9c <__aeabi_dadd+0x98>
 8001140:	4c0c      	ldr	r4, [pc, #48]	; (8001174 <__aeabi_dadd+0x370>)
 8001142:	1c72      	adds	r2, r6, #1
 8001144:	4222      	tst	r2, r4
 8001146:	d000      	beq.n	800114a <__aeabi_dadd+0x346>
 8001148:	e0a1      	b.n	800128e <__aeabi_dadd+0x48a>
 800114a:	0002      	movs	r2, r0
 800114c:	431a      	orrs	r2, r3
 800114e:	2e00      	cmp	r6, #0
 8001150:	d000      	beq.n	8001154 <__aeabi_dadd+0x350>
 8001152:	e0fa      	b.n	800134a <__aeabi_dadd+0x546>
 8001154:	2a00      	cmp	r2, #0
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0x356>
 8001158:	e145      	b.n	80013e6 <__aeabi_dadd+0x5e2>
 800115a:	003a      	movs	r2, r7
 800115c:	430a      	orrs	r2, r1
 800115e:	d000      	beq.n	8001162 <__aeabi_dadd+0x35e>
 8001160:	e146      	b.n	80013f0 <__aeabi_dadd+0x5ec>
 8001162:	0742      	lsls	r2, r0, #29
 8001164:	08db      	lsrs	r3, r3, #3
 8001166:	4313      	orrs	r3, r2
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	e77b      	b.n	8001064 <__aeabi_dadd+0x260>
 800116c:	000007ff 	.word	0x000007ff
 8001170:	ff7fffff 	.word	0xff7fffff
 8001174:	000007fe 	.word	0x000007fe
 8001178:	4647      	mov	r7, r8
 800117a:	1a5c      	subs	r4, r3, r1
 800117c:	1bc2      	subs	r2, r0, r7
 800117e:	42a3      	cmp	r3, r4
 8001180:	41bf      	sbcs	r7, r7
 8001182:	427f      	negs	r7, r7
 8001184:	46b9      	mov	r9, r7
 8001186:	0017      	movs	r7, r2
 8001188:	464a      	mov	r2, r9
 800118a:	1abf      	subs	r7, r7, r2
 800118c:	023a      	lsls	r2, r7, #8
 800118e:	d500      	bpl.n	8001192 <__aeabi_dadd+0x38e>
 8001190:	e08d      	b.n	80012ae <__aeabi_dadd+0x4aa>
 8001192:	0023      	movs	r3, r4
 8001194:	433b      	orrs	r3, r7
 8001196:	d000      	beq.n	800119a <__aeabi_dadd+0x396>
 8001198:	e68a      	b.n	8000eb0 <__aeabi_dadd+0xac>
 800119a:	2000      	movs	r0, #0
 800119c:	2500      	movs	r5, #0
 800119e:	e761      	b.n	8001064 <__aeabi_dadd+0x260>
 80011a0:	4cb4      	ldr	r4, [pc, #720]	; (8001474 <__aeabi_dadd+0x670>)
 80011a2:	45a1      	cmp	r9, r4
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x3a4>
 80011a6:	e0ad      	b.n	8001304 <__aeabi_dadd+0x500>
 80011a8:	2480      	movs	r4, #128	; 0x80
 80011aa:	0424      	lsls	r4, r4, #16
 80011ac:	4320      	orrs	r0, r4
 80011ae:	4664      	mov	r4, ip
 80011b0:	2c38      	cmp	r4, #56	; 0x38
 80011b2:	dc3d      	bgt.n	8001230 <__aeabi_dadd+0x42c>
 80011b4:	4662      	mov	r2, ip
 80011b6:	2c1f      	cmp	r4, #31
 80011b8:	dd00      	ble.n	80011bc <__aeabi_dadd+0x3b8>
 80011ba:	e0b7      	b.n	800132c <__aeabi_dadd+0x528>
 80011bc:	2520      	movs	r5, #32
 80011be:	001e      	movs	r6, r3
 80011c0:	1b2d      	subs	r5, r5, r4
 80011c2:	0004      	movs	r4, r0
 80011c4:	40ab      	lsls	r3, r5
 80011c6:	40ac      	lsls	r4, r5
 80011c8:	40d6      	lsrs	r6, r2
 80011ca:	40d0      	lsrs	r0, r2
 80011cc:	4642      	mov	r2, r8
 80011ce:	1e5d      	subs	r5, r3, #1
 80011d0:	41ab      	sbcs	r3, r5
 80011d2:	4334      	orrs	r4, r6
 80011d4:	1a12      	subs	r2, r2, r0
 80011d6:	4690      	mov	r8, r2
 80011d8:	4323      	orrs	r3, r4
 80011da:	e02c      	b.n	8001236 <__aeabi_dadd+0x432>
 80011dc:	0742      	lsls	r2, r0, #29
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	08c0      	lsrs	r0, r0, #3
 80011e4:	e73b      	b.n	800105e <__aeabi_dadd+0x25a>
 80011e6:	185c      	adds	r4, r3, r1
 80011e8:	429c      	cmp	r4, r3
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	4440      	add	r0, r8
 80011ee:	425b      	negs	r3, r3
 80011f0:	18c7      	adds	r7, r0, r3
 80011f2:	2601      	movs	r6, #1
 80011f4:	023b      	lsls	r3, r7, #8
 80011f6:	d400      	bmi.n	80011fa <__aeabi_dadd+0x3f6>
 80011f8:	e729      	b.n	800104e <__aeabi_dadd+0x24a>
 80011fa:	2602      	movs	r6, #2
 80011fc:	4a9e      	ldr	r2, [pc, #632]	; (8001478 <__aeabi_dadd+0x674>)
 80011fe:	0863      	lsrs	r3, r4, #1
 8001200:	4017      	ands	r7, r2
 8001202:	2201      	movs	r2, #1
 8001204:	4014      	ands	r4, r2
 8001206:	431c      	orrs	r4, r3
 8001208:	07fb      	lsls	r3, r7, #31
 800120a:	431c      	orrs	r4, r3
 800120c:	087f      	lsrs	r7, r7, #1
 800120e:	e673      	b.n	8000ef8 <__aeabi_dadd+0xf4>
 8001210:	4644      	mov	r4, r8
 8001212:	3a20      	subs	r2, #32
 8001214:	40d4      	lsrs	r4, r2
 8001216:	4662      	mov	r2, ip
 8001218:	2a20      	cmp	r2, #32
 800121a:	d005      	beq.n	8001228 <__aeabi_dadd+0x424>
 800121c:	4667      	mov	r7, ip
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	1bd2      	subs	r2, r2, r7
 8001222:	4647      	mov	r7, r8
 8001224:	4097      	lsls	r7, r2
 8001226:	4339      	orrs	r1, r7
 8001228:	1e4a      	subs	r2, r1, #1
 800122a:	4191      	sbcs	r1, r2
 800122c:	4321      	orrs	r1, r4
 800122e:	e635      	b.n	8000e9c <__aeabi_dadd+0x98>
 8001230:	4303      	orrs	r3, r0
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	4183      	sbcs	r3, r0
 8001236:	1acc      	subs	r4, r1, r3
 8001238:	42a1      	cmp	r1, r4
 800123a:	41bf      	sbcs	r7, r7
 800123c:	4643      	mov	r3, r8
 800123e:	427f      	negs	r7, r7
 8001240:	4655      	mov	r5, sl
 8001242:	464e      	mov	r6, r9
 8001244:	1bdf      	subs	r7, r3, r7
 8001246:	e62e      	b.n	8000ea6 <__aeabi_dadd+0xa2>
 8001248:	0002      	movs	r2, r0
 800124a:	431a      	orrs	r2, r3
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x44c>
 800124e:	e0bd      	b.n	80013cc <__aeabi_dadd+0x5c8>
 8001250:	4662      	mov	r2, ip
 8001252:	4664      	mov	r4, ip
 8001254:	3a01      	subs	r2, #1
 8001256:	2c01      	cmp	r4, #1
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x458>
 800125a:	e0e5      	b.n	8001428 <__aeabi_dadd+0x624>
 800125c:	4c85      	ldr	r4, [pc, #532]	; (8001474 <__aeabi_dadd+0x670>)
 800125e:	45a4      	cmp	ip, r4
 8001260:	d058      	beq.n	8001314 <__aeabi_dadd+0x510>
 8001262:	4694      	mov	ip, r2
 8001264:	e749      	b.n	80010fa <__aeabi_dadd+0x2f6>
 8001266:	4664      	mov	r4, ip
 8001268:	2220      	movs	r2, #32
 800126a:	1b12      	subs	r2, r2, r4
 800126c:	4644      	mov	r4, r8
 800126e:	4094      	lsls	r4, r2
 8001270:	000f      	movs	r7, r1
 8001272:	46a1      	mov	r9, r4
 8001274:	4664      	mov	r4, ip
 8001276:	4091      	lsls	r1, r2
 8001278:	40e7      	lsrs	r7, r4
 800127a:	464c      	mov	r4, r9
 800127c:	1e4a      	subs	r2, r1, #1
 800127e:	4191      	sbcs	r1, r2
 8001280:	433c      	orrs	r4, r7
 8001282:	4642      	mov	r2, r8
 8001284:	430c      	orrs	r4, r1
 8001286:	4661      	mov	r1, ip
 8001288:	40ca      	lsrs	r2, r1
 800128a:	1880      	adds	r0, r0, r2
 800128c:	e6f4      	b.n	8001078 <__aeabi_dadd+0x274>
 800128e:	4c79      	ldr	r4, [pc, #484]	; (8001474 <__aeabi_dadd+0x670>)
 8001290:	42a2      	cmp	r2, r4
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x492>
 8001294:	e6fd      	b.n	8001092 <__aeabi_dadd+0x28e>
 8001296:	1859      	adds	r1, r3, r1
 8001298:	4299      	cmp	r1, r3
 800129a:	419b      	sbcs	r3, r3
 800129c:	4440      	add	r0, r8
 800129e:	425f      	negs	r7, r3
 80012a0:	19c7      	adds	r7, r0, r7
 80012a2:	07fc      	lsls	r4, r7, #31
 80012a4:	0849      	lsrs	r1, r1, #1
 80012a6:	0016      	movs	r6, r2
 80012a8:	430c      	orrs	r4, r1
 80012aa:	087f      	lsrs	r7, r7, #1
 80012ac:	e6cf      	b.n	800104e <__aeabi_dadd+0x24a>
 80012ae:	1acc      	subs	r4, r1, r3
 80012b0:	42a1      	cmp	r1, r4
 80012b2:	41bf      	sbcs	r7, r7
 80012b4:	4643      	mov	r3, r8
 80012b6:	427f      	negs	r7, r7
 80012b8:	1a18      	subs	r0, r3, r0
 80012ba:	4655      	mov	r5, sl
 80012bc:	1bc7      	subs	r7, r0, r7
 80012be:	e5f7      	b.n	8000eb0 <__aeabi_dadd+0xac>
 80012c0:	08c9      	lsrs	r1, r1, #3
 80012c2:	077b      	lsls	r3, r7, #29
 80012c4:	4655      	mov	r5, sl
 80012c6:	430b      	orrs	r3, r1
 80012c8:	08f8      	lsrs	r0, r7, #3
 80012ca:	e6c8      	b.n	800105e <__aeabi_dadd+0x25a>
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d000      	beq.n	80012d2 <__aeabi_dadd+0x4ce>
 80012d0:	e081      	b.n	80013d6 <__aeabi_dadd+0x5d2>
 80012d2:	4643      	mov	r3, r8
 80012d4:	430b      	orrs	r3, r1
 80012d6:	d115      	bne.n	8001304 <__aeabi_dadd+0x500>
 80012d8:	2080      	movs	r0, #128	; 0x80
 80012da:	2500      	movs	r5, #0
 80012dc:	0300      	lsls	r0, r0, #12
 80012de:	e6e3      	b.n	80010a8 <__aeabi_dadd+0x2a4>
 80012e0:	1a5c      	subs	r4, r3, r1
 80012e2:	42a3      	cmp	r3, r4
 80012e4:	419b      	sbcs	r3, r3
 80012e6:	1bc7      	subs	r7, r0, r7
 80012e8:	425b      	negs	r3, r3
 80012ea:	2601      	movs	r6, #1
 80012ec:	1aff      	subs	r7, r7, r3
 80012ee:	e5da      	b.n	8000ea6 <__aeabi_dadd+0xa2>
 80012f0:	0742      	lsls	r2, r0, #29
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	08c0      	lsrs	r0, r0, #3
 80012f8:	e6d2      	b.n	80010a0 <__aeabi_dadd+0x29c>
 80012fa:	0742      	lsls	r2, r0, #29
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	4313      	orrs	r3, r2
 8001300:	08c0      	lsrs	r0, r0, #3
 8001302:	e6ac      	b.n	800105e <__aeabi_dadd+0x25a>
 8001304:	4643      	mov	r3, r8
 8001306:	4642      	mov	r2, r8
 8001308:	08c9      	lsrs	r1, r1, #3
 800130a:	075b      	lsls	r3, r3, #29
 800130c:	4655      	mov	r5, sl
 800130e:	430b      	orrs	r3, r1
 8001310:	08d0      	lsrs	r0, r2, #3
 8001312:	e6c5      	b.n	80010a0 <__aeabi_dadd+0x29c>
 8001314:	4643      	mov	r3, r8
 8001316:	4642      	mov	r2, r8
 8001318:	075b      	lsls	r3, r3, #29
 800131a:	08c9      	lsrs	r1, r1, #3
 800131c:	430b      	orrs	r3, r1
 800131e:	08d0      	lsrs	r0, r2, #3
 8001320:	e6be      	b.n	80010a0 <__aeabi_dadd+0x29c>
 8001322:	4303      	orrs	r3, r0
 8001324:	001c      	movs	r4, r3
 8001326:	1e63      	subs	r3, r4, #1
 8001328:	419c      	sbcs	r4, r3
 800132a:	e6fc      	b.n	8001126 <__aeabi_dadd+0x322>
 800132c:	0002      	movs	r2, r0
 800132e:	3c20      	subs	r4, #32
 8001330:	40e2      	lsrs	r2, r4
 8001332:	0014      	movs	r4, r2
 8001334:	4662      	mov	r2, ip
 8001336:	2a20      	cmp	r2, #32
 8001338:	d003      	beq.n	8001342 <__aeabi_dadd+0x53e>
 800133a:	2540      	movs	r5, #64	; 0x40
 800133c:	1aad      	subs	r5, r5, r2
 800133e:	40a8      	lsls	r0, r5
 8001340:	4303      	orrs	r3, r0
 8001342:	1e58      	subs	r0, r3, #1
 8001344:	4183      	sbcs	r3, r0
 8001346:	4323      	orrs	r3, r4
 8001348:	e775      	b.n	8001236 <__aeabi_dadd+0x432>
 800134a:	2a00      	cmp	r2, #0
 800134c:	d0e2      	beq.n	8001314 <__aeabi_dadd+0x510>
 800134e:	003a      	movs	r2, r7
 8001350:	430a      	orrs	r2, r1
 8001352:	d0cd      	beq.n	80012f0 <__aeabi_dadd+0x4ec>
 8001354:	0742      	lsls	r2, r0, #29
 8001356:	08db      	lsrs	r3, r3, #3
 8001358:	4313      	orrs	r3, r2
 800135a:	2280      	movs	r2, #128	; 0x80
 800135c:	08c0      	lsrs	r0, r0, #3
 800135e:	0312      	lsls	r2, r2, #12
 8001360:	4210      	tst	r0, r2
 8001362:	d006      	beq.n	8001372 <__aeabi_dadd+0x56e>
 8001364:	08fc      	lsrs	r4, r7, #3
 8001366:	4214      	tst	r4, r2
 8001368:	d103      	bne.n	8001372 <__aeabi_dadd+0x56e>
 800136a:	0020      	movs	r0, r4
 800136c:	08cb      	lsrs	r3, r1, #3
 800136e:	077a      	lsls	r2, r7, #29
 8001370:	4313      	orrs	r3, r2
 8001372:	0f5a      	lsrs	r2, r3, #29
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	0752      	lsls	r2, r2, #29
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	4313      	orrs	r3, r2
 800137c:	e690      	b.n	80010a0 <__aeabi_dadd+0x29c>
 800137e:	4643      	mov	r3, r8
 8001380:	430b      	orrs	r3, r1
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x582>
 8001384:	e709      	b.n	800119a <__aeabi_dadd+0x396>
 8001386:	4643      	mov	r3, r8
 8001388:	4642      	mov	r2, r8
 800138a:	08c9      	lsrs	r1, r1, #3
 800138c:	075b      	lsls	r3, r3, #29
 800138e:	4655      	mov	r5, sl
 8001390:	430b      	orrs	r3, r1
 8001392:	08d0      	lsrs	r0, r2, #3
 8001394:	e666      	b.n	8001064 <__aeabi_dadd+0x260>
 8001396:	1acc      	subs	r4, r1, r3
 8001398:	42a1      	cmp	r1, r4
 800139a:	4189      	sbcs	r1, r1
 800139c:	1a3f      	subs	r7, r7, r0
 800139e:	4249      	negs	r1, r1
 80013a0:	4655      	mov	r5, sl
 80013a2:	2601      	movs	r6, #1
 80013a4:	1a7f      	subs	r7, r7, r1
 80013a6:	e57e      	b.n	8000ea6 <__aeabi_dadd+0xa2>
 80013a8:	4642      	mov	r2, r8
 80013aa:	1a5c      	subs	r4, r3, r1
 80013ac:	1a87      	subs	r7, r0, r2
 80013ae:	42a3      	cmp	r3, r4
 80013b0:	4192      	sbcs	r2, r2
 80013b2:	4252      	negs	r2, r2
 80013b4:	1abf      	subs	r7, r7, r2
 80013b6:	023a      	lsls	r2, r7, #8
 80013b8:	d53d      	bpl.n	8001436 <__aeabi_dadd+0x632>
 80013ba:	1acc      	subs	r4, r1, r3
 80013bc:	42a1      	cmp	r1, r4
 80013be:	4189      	sbcs	r1, r1
 80013c0:	4643      	mov	r3, r8
 80013c2:	4249      	negs	r1, r1
 80013c4:	1a1f      	subs	r7, r3, r0
 80013c6:	4655      	mov	r5, sl
 80013c8:	1a7f      	subs	r7, r7, r1
 80013ca:	e595      	b.n	8000ef8 <__aeabi_dadd+0xf4>
 80013cc:	077b      	lsls	r3, r7, #29
 80013ce:	08c9      	lsrs	r1, r1, #3
 80013d0:	430b      	orrs	r3, r1
 80013d2:	08f8      	lsrs	r0, r7, #3
 80013d4:	e643      	b.n	800105e <__aeabi_dadd+0x25a>
 80013d6:	4644      	mov	r4, r8
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	430c      	orrs	r4, r1
 80013dc:	d130      	bne.n	8001440 <__aeabi_dadd+0x63c>
 80013de:	0742      	lsls	r2, r0, #29
 80013e0:	4313      	orrs	r3, r2
 80013e2:	08c0      	lsrs	r0, r0, #3
 80013e4:	e65c      	b.n	80010a0 <__aeabi_dadd+0x29c>
 80013e6:	077b      	lsls	r3, r7, #29
 80013e8:	08c9      	lsrs	r1, r1, #3
 80013ea:	430b      	orrs	r3, r1
 80013ec:	08f8      	lsrs	r0, r7, #3
 80013ee:	e639      	b.n	8001064 <__aeabi_dadd+0x260>
 80013f0:	185c      	adds	r4, r3, r1
 80013f2:	429c      	cmp	r4, r3
 80013f4:	419b      	sbcs	r3, r3
 80013f6:	4440      	add	r0, r8
 80013f8:	425b      	negs	r3, r3
 80013fa:	18c7      	adds	r7, r0, r3
 80013fc:	023b      	lsls	r3, r7, #8
 80013fe:	d400      	bmi.n	8001402 <__aeabi_dadd+0x5fe>
 8001400:	e625      	b.n	800104e <__aeabi_dadd+0x24a>
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <__aeabi_dadd+0x674>)
 8001404:	2601      	movs	r6, #1
 8001406:	401f      	ands	r7, r3
 8001408:	e621      	b.n	800104e <__aeabi_dadd+0x24a>
 800140a:	0004      	movs	r4, r0
 800140c:	3a20      	subs	r2, #32
 800140e:	40d4      	lsrs	r4, r2
 8001410:	4662      	mov	r2, ip
 8001412:	2a20      	cmp	r2, #32
 8001414:	d004      	beq.n	8001420 <__aeabi_dadd+0x61c>
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	4666      	mov	r6, ip
 800141a:	1b92      	subs	r2, r2, r6
 800141c:	4090      	lsls	r0, r2
 800141e:	4303      	orrs	r3, r0
 8001420:	1e5a      	subs	r2, r3, #1
 8001422:	4193      	sbcs	r3, r2
 8001424:	431c      	orrs	r4, r3
 8001426:	e67e      	b.n	8001126 <__aeabi_dadd+0x322>
 8001428:	185c      	adds	r4, r3, r1
 800142a:	428c      	cmp	r4, r1
 800142c:	4189      	sbcs	r1, r1
 800142e:	4440      	add	r0, r8
 8001430:	4249      	negs	r1, r1
 8001432:	1847      	adds	r7, r0, r1
 8001434:	e6dd      	b.n	80011f2 <__aeabi_dadd+0x3ee>
 8001436:	0023      	movs	r3, r4
 8001438:	433b      	orrs	r3, r7
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x63a>
 800143c:	e6ad      	b.n	800119a <__aeabi_dadd+0x396>
 800143e:	e606      	b.n	800104e <__aeabi_dadd+0x24a>
 8001440:	0744      	lsls	r4, r0, #29
 8001442:	4323      	orrs	r3, r4
 8001444:	2480      	movs	r4, #128	; 0x80
 8001446:	08c0      	lsrs	r0, r0, #3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	4220      	tst	r0, r4
 800144c:	d008      	beq.n	8001460 <__aeabi_dadd+0x65c>
 800144e:	4642      	mov	r2, r8
 8001450:	08d6      	lsrs	r6, r2, #3
 8001452:	4226      	tst	r6, r4
 8001454:	d104      	bne.n	8001460 <__aeabi_dadd+0x65c>
 8001456:	4655      	mov	r5, sl
 8001458:	0030      	movs	r0, r6
 800145a:	08cb      	lsrs	r3, r1, #3
 800145c:	0751      	lsls	r1, r2, #29
 800145e:	430b      	orrs	r3, r1
 8001460:	0f5a      	lsrs	r2, r3, #29
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	0752      	lsls	r2, r2, #29
 8001468:	4313      	orrs	r3, r2
 800146a:	e619      	b.n	80010a0 <__aeabi_dadd+0x29c>
 800146c:	2300      	movs	r3, #0
 800146e:	4a01      	ldr	r2, [pc, #4]	; (8001474 <__aeabi_dadd+0x670>)
 8001470:	001f      	movs	r7, r3
 8001472:	e55e      	b.n	8000f32 <__aeabi_dadd+0x12e>
 8001474:	000007ff 	.word	0x000007ff
 8001478:	ff7fffff 	.word	0xff7fffff

0800147c <__aeabi_ddiv>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	4681      	mov	r9, r0
 800148a:	0005      	movs	r5, r0
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	0048      	lsls	r0, r1, #1
 8001490:	4692      	mov	sl, r2
 8001492:	001f      	movs	r7, r3
 8001494:	b085      	sub	sp, #20
 8001496:	0b24      	lsrs	r4, r4, #12
 8001498:	0d40      	lsrs	r0, r0, #21
 800149a:	0fce      	lsrs	r6, r1, #31
 800149c:	2800      	cmp	r0, #0
 800149e:	d100      	bne.n	80014a2 <__aeabi_ddiv+0x26>
 80014a0:	e156      	b.n	8001750 <__aeabi_ddiv+0x2d4>
 80014a2:	4bd4      	ldr	r3, [pc, #848]	; (80017f4 <__aeabi_ddiv+0x378>)
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d100      	bne.n	80014aa <__aeabi_ddiv+0x2e>
 80014a8:	e172      	b.n	8001790 <__aeabi_ddiv+0x314>
 80014aa:	0f6b      	lsrs	r3, r5, #29
 80014ac:	00e4      	lsls	r4, r4, #3
 80014ae:	431c      	orrs	r4, r3
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	041b      	lsls	r3, r3, #16
 80014b4:	4323      	orrs	r3, r4
 80014b6:	4698      	mov	r8, r3
 80014b8:	4bcf      	ldr	r3, [pc, #828]	; (80017f8 <__aeabi_ddiv+0x37c>)
 80014ba:	00ed      	lsls	r5, r5, #3
 80014bc:	469b      	mov	fp, r3
 80014be:	2300      	movs	r3, #0
 80014c0:	4699      	mov	r9, r3
 80014c2:	4483      	add	fp, r0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	033c      	lsls	r4, r7, #12
 80014c8:	007b      	lsls	r3, r7, #1
 80014ca:	4650      	mov	r0, sl
 80014cc:	0b24      	lsrs	r4, r4, #12
 80014ce:	0d5b      	lsrs	r3, r3, #21
 80014d0:	0fff      	lsrs	r7, r7, #31
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_ddiv+0x5c>
 80014d6:	e11f      	b.n	8001718 <__aeabi_ddiv+0x29c>
 80014d8:	4ac6      	ldr	r2, [pc, #792]	; (80017f4 <__aeabi_ddiv+0x378>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x64>
 80014de:	e162      	b.n	80017a6 <__aeabi_ddiv+0x32a>
 80014e0:	49c5      	ldr	r1, [pc, #788]	; (80017f8 <__aeabi_ddiv+0x37c>)
 80014e2:	0f42      	lsrs	r2, r0, #29
 80014e4:	468c      	mov	ip, r1
 80014e6:	00e4      	lsls	r4, r4, #3
 80014e8:	4659      	mov	r1, fp
 80014ea:	4314      	orrs	r4, r2
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	4463      	add	r3, ip
 80014f0:	0412      	lsls	r2, r2, #16
 80014f2:	1acb      	subs	r3, r1, r3
 80014f4:	4314      	orrs	r4, r2
 80014f6:	469b      	mov	fp, r3
 80014f8:	00c2      	lsls	r2, r0, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	0033      	movs	r3, r6
 80014fe:	407b      	eors	r3, r7
 8001500:	469a      	mov	sl, r3
 8001502:	464b      	mov	r3, r9
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d827      	bhi.n	8001558 <__aeabi_ddiv+0xdc>
 8001508:	49bc      	ldr	r1, [pc, #752]	; (80017fc <__aeabi_ddiv+0x380>)
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	58cb      	ldr	r3, [r1, r3]
 800150e:	469f      	mov	pc, r3
 8001510:	46b2      	mov	sl, r6
 8001512:	9b00      	ldr	r3, [sp, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d016      	beq.n	8001546 <__aeabi_ddiv+0xca>
 8001518:	2b03      	cmp	r3, #3
 800151a:	d100      	bne.n	800151e <__aeabi_ddiv+0xa2>
 800151c:	e28e      	b.n	8001a3c <__aeabi_ddiv+0x5c0>
 800151e:	2b01      	cmp	r3, #1
 8001520:	d000      	beq.n	8001524 <__aeabi_ddiv+0xa8>
 8001522:	e0d9      	b.n	80016d8 <__aeabi_ddiv+0x25c>
 8001524:	2300      	movs	r3, #0
 8001526:	2400      	movs	r4, #0
 8001528:	2500      	movs	r5, #0
 800152a:	4652      	mov	r2, sl
 800152c:	051b      	lsls	r3, r3, #20
 800152e:	4323      	orrs	r3, r4
 8001530:	07d2      	lsls	r2, r2, #31
 8001532:	4313      	orrs	r3, r2
 8001534:	0028      	movs	r0, r5
 8001536:	0019      	movs	r1, r3
 8001538:	b005      	add	sp, #20
 800153a:	bcf0      	pop	{r4, r5, r6, r7}
 800153c:	46bb      	mov	fp, r7
 800153e:	46b2      	mov	sl, r6
 8001540:	46a9      	mov	r9, r5
 8001542:	46a0      	mov	r8, r4
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	2400      	movs	r4, #0
 8001548:	2500      	movs	r5, #0
 800154a:	4baa      	ldr	r3, [pc, #680]	; (80017f4 <__aeabi_ddiv+0x378>)
 800154c:	e7ed      	b.n	800152a <__aeabi_ddiv+0xae>
 800154e:	46ba      	mov	sl, r7
 8001550:	46a0      	mov	r8, r4
 8001552:	0015      	movs	r5, r2
 8001554:	9000      	str	r0, [sp, #0]
 8001556:	e7dc      	b.n	8001512 <__aeabi_ddiv+0x96>
 8001558:	4544      	cmp	r4, r8
 800155a:	d200      	bcs.n	800155e <__aeabi_ddiv+0xe2>
 800155c:	e1c7      	b.n	80018ee <__aeabi_ddiv+0x472>
 800155e:	d100      	bne.n	8001562 <__aeabi_ddiv+0xe6>
 8001560:	e1c2      	b.n	80018e8 <__aeabi_ddiv+0x46c>
 8001562:	2301      	movs	r3, #1
 8001564:	425b      	negs	r3, r3
 8001566:	469c      	mov	ip, r3
 8001568:	002e      	movs	r6, r5
 800156a:	4640      	mov	r0, r8
 800156c:	2500      	movs	r5, #0
 800156e:	44e3      	add	fp, ip
 8001570:	0223      	lsls	r3, r4, #8
 8001572:	0e14      	lsrs	r4, r2, #24
 8001574:	431c      	orrs	r4, r3
 8001576:	0c1b      	lsrs	r3, r3, #16
 8001578:	4699      	mov	r9, r3
 800157a:	0423      	lsls	r3, r4, #16
 800157c:	0c1f      	lsrs	r7, r3, #16
 800157e:	0212      	lsls	r2, r2, #8
 8001580:	4649      	mov	r1, r9
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	9701      	str	r7, [sp, #4]
 8001586:	f7fe fe4f 	bl	8000228 <__aeabi_uidivmod>
 800158a:	0002      	movs	r2, r0
 800158c:	437a      	muls	r2, r7
 800158e:	040b      	lsls	r3, r1, #16
 8001590:	0c31      	lsrs	r1, r6, #16
 8001592:	4680      	mov	r8, r0
 8001594:	4319      	orrs	r1, r3
 8001596:	428a      	cmp	r2, r1
 8001598:	d907      	bls.n	80015aa <__aeabi_ddiv+0x12e>
 800159a:	2301      	movs	r3, #1
 800159c:	425b      	negs	r3, r3
 800159e:	469c      	mov	ip, r3
 80015a0:	1909      	adds	r1, r1, r4
 80015a2:	44e0      	add	r8, ip
 80015a4:	428c      	cmp	r4, r1
 80015a6:	d800      	bhi.n	80015aa <__aeabi_ddiv+0x12e>
 80015a8:	e207      	b.n	80019ba <__aeabi_ddiv+0x53e>
 80015aa:	1a88      	subs	r0, r1, r2
 80015ac:	4649      	mov	r1, r9
 80015ae:	f7fe fe3b 	bl	8000228 <__aeabi_uidivmod>
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	468c      	mov	ip, r1
 80015b6:	0431      	lsls	r1, r6, #16
 80015b8:	4666      	mov	r6, ip
 80015ba:	9a01      	ldr	r2, [sp, #4]
 80015bc:	0c09      	lsrs	r1, r1, #16
 80015be:	4342      	muls	r2, r0
 80015c0:	0003      	movs	r3, r0
 80015c2:	4331      	orrs	r1, r6
 80015c4:	428a      	cmp	r2, r1
 80015c6:	d904      	bls.n	80015d2 <__aeabi_ddiv+0x156>
 80015c8:	1909      	adds	r1, r1, r4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	428c      	cmp	r4, r1
 80015ce:	d800      	bhi.n	80015d2 <__aeabi_ddiv+0x156>
 80015d0:	e1ed      	b.n	80019ae <__aeabi_ddiv+0x532>
 80015d2:	1a88      	subs	r0, r1, r2
 80015d4:	4642      	mov	r2, r8
 80015d6:	0412      	lsls	r2, r2, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	4690      	mov	r8, r2
 80015dc:	4641      	mov	r1, r8
 80015de:	9b00      	ldr	r3, [sp, #0]
 80015e0:	040e      	lsls	r6, r1, #16
 80015e2:	0c1b      	lsrs	r3, r3, #16
 80015e4:	001f      	movs	r7, r3
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	9b00      	ldr	r3, [sp, #0]
 80015ea:	0c36      	lsrs	r6, r6, #16
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	0c19      	lsrs	r1, r3, #16
 80015f0:	000b      	movs	r3, r1
 80015f2:	4373      	muls	r3, r6
 80015f4:	0c12      	lsrs	r2, r2, #16
 80015f6:	437e      	muls	r6, r7
 80015f8:	9103      	str	r1, [sp, #12]
 80015fa:	4351      	muls	r1, r2
 80015fc:	437a      	muls	r2, r7
 80015fe:	0c1f      	lsrs	r7, r3, #16
 8001600:	46bc      	mov	ip, r7
 8001602:	1876      	adds	r6, r6, r1
 8001604:	4466      	add	r6, ip
 8001606:	42b1      	cmp	r1, r6
 8001608:	d903      	bls.n	8001612 <__aeabi_ddiv+0x196>
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0249      	lsls	r1, r1, #9
 800160e:	468c      	mov	ip, r1
 8001610:	4462      	add	r2, ip
 8001612:	0c31      	lsrs	r1, r6, #16
 8001614:	188a      	adds	r2, r1, r2
 8001616:	0431      	lsls	r1, r6, #16
 8001618:	041e      	lsls	r6, r3, #16
 800161a:	0c36      	lsrs	r6, r6, #16
 800161c:	198e      	adds	r6, r1, r6
 800161e:	4290      	cmp	r0, r2
 8001620:	d302      	bcc.n	8001628 <__aeabi_ddiv+0x1ac>
 8001622:	d112      	bne.n	800164a <__aeabi_ddiv+0x1ce>
 8001624:	42b5      	cmp	r5, r6
 8001626:	d210      	bcs.n	800164a <__aeabi_ddiv+0x1ce>
 8001628:	4643      	mov	r3, r8
 800162a:	1e59      	subs	r1, r3, #1
 800162c:	9b00      	ldr	r3, [sp, #0]
 800162e:	469c      	mov	ip, r3
 8001630:	4465      	add	r5, ip
 8001632:	001f      	movs	r7, r3
 8001634:	429d      	cmp	r5, r3
 8001636:	419b      	sbcs	r3, r3
 8001638:	425b      	negs	r3, r3
 800163a:	191b      	adds	r3, r3, r4
 800163c:	18c0      	adds	r0, r0, r3
 800163e:	4284      	cmp	r4, r0
 8001640:	d200      	bcs.n	8001644 <__aeabi_ddiv+0x1c8>
 8001642:	e1a0      	b.n	8001986 <__aeabi_ddiv+0x50a>
 8001644:	d100      	bne.n	8001648 <__aeabi_ddiv+0x1cc>
 8001646:	e19b      	b.n	8001980 <__aeabi_ddiv+0x504>
 8001648:	4688      	mov	r8, r1
 800164a:	1bae      	subs	r6, r5, r6
 800164c:	42b5      	cmp	r5, r6
 800164e:	41ad      	sbcs	r5, r5
 8001650:	1a80      	subs	r0, r0, r2
 8001652:	426d      	negs	r5, r5
 8001654:	1b40      	subs	r0, r0, r5
 8001656:	4284      	cmp	r4, r0
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x1e0>
 800165a:	e1d5      	b.n	8001a08 <__aeabi_ddiv+0x58c>
 800165c:	4649      	mov	r1, r9
 800165e:	f7fe fde3 	bl	8000228 <__aeabi_uidivmod>
 8001662:	9a01      	ldr	r2, [sp, #4]
 8001664:	040b      	lsls	r3, r1, #16
 8001666:	4342      	muls	r2, r0
 8001668:	0c31      	lsrs	r1, r6, #16
 800166a:	0005      	movs	r5, r0
 800166c:	4319      	orrs	r1, r3
 800166e:	428a      	cmp	r2, r1
 8001670:	d900      	bls.n	8001674 <__aeabi_ddiv+0x1f8>
 8001672:	e16c      	b.n	800194e <__aeabi_ddiv+0x4d2>
 8001674:	1a88      	subs	r0, r1, r2
 8001676:	4649      	mov	r1, r9
 8001678:	f7fe fdd6 	bl	8000228 <__aeabi_uidivmod>
 800167c:	9a01      	ldr	r2, [sp, #4]
 800167e:	0436      	lsls	r6, r6, #16
 8001680:	4342      	muls	r2, r0
 8001682:	0409      	lsls	r1, r1, #16
 8001684:	0c36      	lsrs	r6, r6, #16
 8001686:	0003      	movs	r3, r0
 8001688:	430e      	orrs	r6, r1
 800168a:	42b2      	cmp	r2, r6
 800168c:	d900      	bls.n	8001690 <__aeabi_ddiv+0x214>
 800168e:	e153      	b.n	8001938 <__aeabi_ddiv+0x4bc>
 8001690:	9803      	ldr	r0, [sp, #12]
 8001692:	1ab6      	subs	r6, r6, r2
 8001694:	0002      	movs	r2, r0
 8001696:	042d      	lsls	r5, r5, #16
 8001698:	431d      	orrs	r5, r3
 800169a:	9f02      	ldr	r7, [sp, #8]
 800169c:	042b      	lsls	r3, r5, #16
 800169e:	0c1b      	lsrs	r3, r3, #16
 80016a0:	435a      	muls	r2, r3
 80016a2:	437b      	muls	r3, r7
 80016a4:	469c      	mov	ip, r3
 80016a6:	0c29      	lsrs	r1, r5, #16
 80016a8:	4348      	muls	r0, r1
 80016aa:	0c13      	lsrs	r3, r2, #16
 80016ac:	4484      	add	ip, r0
 80016ae:	4463      	add	r3, ip
 80016b0:	4379      	muls	r1, r7
 80016b2:	4298      	cmp	r0, r3
 80016b4:	d903      	bls.n	80016be <__aeabi_ddiv+0x242>
 80016b6:	2080      	movs	r0, #128	; 0x80
 80016b8:	0240      	lsls	r0, r0, #9
 80016ba:	4684      	mov	ip, r0
 80016bc:	4461      	add	r1, ip
 80016be:	0c18      	lsrs	r0, r3, #16
 80016c0:	0412      	lsls	r2, r2, #16
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	1841      	adds	r1, r0, r1
 80016c8:	189b      	adds	r3, r3, r2
 80016ca:	428e      	cmp	r6, r1
 80016cc:	d200      	bcs.n	80016d0 <__aeabi_ddiv+0x254>
 80016ce:	e0ff      	b.n	80018d0 <__aeabi_ddiv+0x454>
 80016d0:	d100      	bne.n	80016d4 <__aeabi_ddiv+0x258>
 80016d2:	e0fa      	b.n	80018ca <__aeabi_ddiv+0x44e>
 80016d4:	2301      	movs	r3, #1
 80016d6:	431d      	orrs	r5, r3
 80016d8:	4a49      	ldr	r2, [pc, #292]	; (8001800 <__aeabi_ddiv+0x384>)
 80016da:	445a      	add	r2, fp
 80016dc:	2a00      	cmp	r2, #0
 80016de:	dc00      	bgt.n	80016e2 <__aeabi_ddiv+0x266>
 80016e0:	e0aa      	b.n	8001838 <__aeabi_ddiv+0x3bc>
 80016e2:	076b      	lsls	r3, r5, #29
 80016e4:	d000      	beq.n	80016e8 <__aeabi_ddiv+0x26c>
 80016e6:	e13d      	b.n	8001964 <__aeabi_ddiv+0x4e8>
 80016e8:	08ed      	lsrs	r5, r5, #3
 80016ea:	4643      	mov	r3, r8
 80016ec:	01db      	lsls	r3, r3, #7
 80016ee:	d506      	bpl.n	80016fe <__aeabi_ddiv+0x282>
 80016f0:	4642      	mov	r2, r8
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <__aeabi_ddiv+0x388>)
 80016f4:	401a      	ands	r2, r3
 80016f6:	4690      	mov	r8, r2
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	00d2      	lsls	r2, r2, #3
 80016fc:	445a      	add	r2, fp
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <__aeabi_ddiv+0x38c>)
 8001700:	429a      	cmp	r2, r3
 8001702:	dd00      	ble.n	8001706 <__aeabi_ddiv+0x28a>
 8001704:	e71f      	b.n	8001546 <__aeabi_ddiv+0xca>
 8001706:	4643      	mov	r3, r8
 8001708:	075b      	lsls	r3, r3, #29
 800170a:	431d      	orrs	r5, r3
 800170c:	4643      	mov	r3, r8
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	025c      	lsls	r4, r3, #9
 8001712:	0b24      	lsrs	r4, r4, #12
 8001714:	0d53      	lsrs	r3, r2, #21
 8001716:	e708      	b.n	800152a <__aeabi_ddiv+0xae>
 8001718:	4652      	mov	r2, sl
 800171a:	4322      	orrs	r2, r4
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x2a4>
 800171e:	e07b      	b.n	8001818 <__aeabi_ddiv+0x39c>
 8001720:	2c00      	cmp	r4, #0
 8001722:	d100      	bne.n	8001726 <__aeabi_ddiv+0x2aa>
 8001724:	e0fa      	b.n	800191c <__aeabi_ddiv+0x4a0>
 8001726:	0020      	movs	r0, r4
 8001728:	f001 f9c6 	bl	8002ab8 <__clzsi2>
 800172c:	0002      	movs	r2, r0
 800172e:	3a0b      	subs	r2, #11
 8001730:	231d      	movs	r3, #29
 8001732:	0001      	movs	r1, r0
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	4652      	mov	r2, sl
 8001738:	3908      	subs	r1, #8
 800173a:	40da      	lsrs	r2, r3
 800173c:	408c      	lsls	r4, r1
 800173e:	4314      	orrs	r4, r2
 8001740:	4652      	mov	r2, sl
 8001742:	408a      	lsls	r2, r1
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <__aeabi_ddiv+0x390>)
 8001746:	4458      	add	r0, fp
 8001748:	469b      	mov	fp, r3
 800174a:	4483      	add	fp, r0
 800174c:	2000      	movs	r0, #0
 800174e:	e6d5      	b.n	80014fc <__aeabi_ddiv+0x80>
 8001750:	464b      	mov	r3, r9
 8001752:	4323      	orrs	r3, r4
 8001754:	4698      	mov	r8, r3
 8001756:	d044      	beq.n	80017e2 <__aeabi_ddiv+0x366>
 8001758:	2c00      	cmp	r4, #0
 800175a:	d100      	bne.n	800175e <__aeabi_ddiv+0x2e2>
 800175c:	e0ce      	b.n	80018fc <__aeabi_ddiv+0x480>
 800175e:	0020      	movs	r0, r4
 8001760:	f001 f9aa 	bl	8002ab8 <__clzsi2>
 8001764:	0001      	movs	r1, r0
 8001766:	0002      	movs	r2, r0
 8001768:	390b      	subs	r1, #11
 800176a:	231d      	movs	r3, #29
 800176c:	1a5b      	subs	r3, r3, r1
 800176e:	4649      	mov	r1, r9
 8001770:	0010      	movs	r0, r2
 8001772:	40d9      	lsrs	r1, r3
 8001774:	3808      	subs	r0, #8
 8001776:	4084      	lsls	r4, r0
 8001778:	000b      	movs	r3, r1
 800177a:	464d      	mov	r5, r9
 800177c:	4323      	orrs	r3, r4
 800177e:	4698      	mov	r8, r3
 8001780:	4085      	lsls	r5, r0
 8001782:	4823      	ldr	r0, [pc, #140]	; (8001810 <__aeabi_ddiv+0x394>)
 8001784:	1a83      	subs	r3, r0, r2
 8001786:	469b      	mov	fp, r3
 8001788:	2300      	movs	r3, #0
 800178a:	4699      	mov	r9, r3
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	e69a      	b.n	80014c6 <__aeabi_ddiv+0x4a>
 8001790:	464b      	mov	r3, r9
 8001792:	4323      	orrs	r3, r4
 8001794:	4698      	mov	r8, r3
 8001796:	d11d      	bne.n	80017d4 <__aeabi_ddiv+0x358>
 8001798:	2308      	movs	r3, #8
 800179a:	4699      	mov	r9, r3
 800179c:	3b06      	subs	r3, #6
 800179e:	2500      	movs	r5, #0
 80017a0:	4683      	mov	fp, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	e68f      	b.n	80014c6 <__aeabi_ddiv+0x4a>
 80017a6:	4652      	mov	r2, sl
 80017a8:	4322      	orrs	r2, r4
 80017aa:	d109      	bne.n	80017c0 <__aeabi_ddiv+0x344>
 80017ac:	2302      	movs	r3, #2
 80017ae:	4649      	mov	r1, r9
 80017b0:	4319      	orrs	r1, r3
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <__aeabi_ddiv+0x398>)
 80017b4:	4689      	mov	r9, r1
 80017b6:	469c      	mov	ip, r3
 80017b8:	2400      	movs	r4, #0
 80017ba:	2002      	movs	r0, #2
 80017bc:	44e3      	add	fp, ip
 80017be:	e69d      	b.n	80014fc <__aeabi_ddiv+0x80>
 80017c0:	2303      	movs	r3, #3
 80017c2:	464a      	mov	r2, r9
 80017c4:	431a      	orrs	r2, r3
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <__aeabi_ddiv+0x398>)
 80017c8:	4691      	mov	r9, r2
 80017ca:	469c      	mov	ip, r3
 80017cc:	4652      	mov	r2, sl
 80017ce:	2003      	movs	r0, #3
 80017d0:	44e3      	add	fp, ip
 80017d2:	e693      	b.n	80014fc <__aeabi_ddiv+0x80>
 80017d4:	230c      	movs	r3, #12
 80017d6:	4699      	mov	r9, r3
 80017d8:	3b09      	subs	r3, #9
 80017da:	46a0      	mov	r8, r4
 80017dc:	4683      	mov	fp, r0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	e671      	b.n	80014c6 <__aeabi_ddiv+0x4a>
 80017e2:	2304      	movs	r3, #4
 80017e4:	4699      	mov	r9, r3
 80017e6:	2300      	movs	r3, #0
 80017e8:	469b      	mov	fp, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	2500      	movs	r5, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	e669      	b.n	80014c6 <__aeabi_ddiv+0x4a>
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	000007ff 	.word	0x000007ff
 80017f8:	fffffc01 	.word	0xfffffc01
 80017fc:	08008570 	.word	0x08008570
 8001800:	000003ff 	.word	0x000003ff
 8001804:	feffffff 	.word	0xfeffffff
 8001808:	000007fe 	.word	0x000007fe
 800180c:	000003f3 	.word	0x000003f3
 8001810:	fffffc0d 	.word	0xfffffc0d
 8001814:	fffff801 	.word	0xfffff801
 8001818:	4649      	mov	r1, r9
 800181a:	2301      	movs	r3, #1
 800181c:	4319      	orrs	r1, r3
 800181e:	4689      	mov	r9, r1
 8001820:	2400      	movs	r4, #0
 8001822:	2001      	movs	r0, #1
 8001824:	e66a      	b.n	80014fc <__aeabi_ddiv+0x80>
 8001826:	2300      	movs	r3, #0
 8001828:	2480      	movs	r4, #128	; 0x80
 800182a:	469a      	mov	sl, r3
 800182c:	2500      	movs	r5, #0
 800182e:	4b8a      	ldr	r3, [pc, #552]	; (8001a58 <__aeabi_ddiv+0x5dc>)
 8001830:	0324      	lsls	r4, r4, #12
 8001832:	e67a      	b.n	800152a <__aeabi_ddiv+0xae>
 8001834:	2501      	movs	r5, #1
 8001836:	426d      	negs	r5, r5
 8001838:	2301      	movs	r3, #1
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	2b38      	cmp	r3, #56	; 0x38
 800183e:	dd00      	ble.n	8001842 <__aeabi_ddiv+0x3c6>
 8001840:	e670      	b.n	8001524 <__aeabi_ddiv+0xa8>
 8001842:	2b1f      	cmp	r3, #31
 8001844:	dc00      	bgt.n	8001848 <__aeabi_ddiv+0x3cc>
 8001846:	e0bf      	b.n	80019c8 <__aeabi_ddiv+0x54c>
 8001848:	211f      	movs	r1, #31
 800184a:	4249      	negs	r1, r1
 800184c:	1a8a      	subs	r2, r1, r2
 800184e:	4641      	mov	r1, r8
 8001850:	40d1      	lsrs	r1, r2
 8001852:	000a      	movs	r2, r1
 8001854:	2b20      	cmp	r3, #32
 8001856:	d004      	beq.n	8001862 <__aeabi_ddiv+0x3e6>
 8001858:	4641      	mov	r1, r8
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <__aeabi_ddiv+0x5e0>)
 800185c:	445b      	add	r3, fp
 800185e:	4099      	lsls	r1, r3
 8001860:	430d      	orrs	r5, r1
 8001862:	1e6b      	subs	r3, r5, #1
 8001864:	419d      	sbcs	r5, r3
 8001866:	2307      	movs	r3, #7
 8001868:	432a      	orrs	r2, r5
 800186a:	001d      	movs	r5, r3
 800186c:	2400      	movs	r4, #0
 800186e:	4015      	ands	r5, r2
 8001870:	4213      	tst	r3, r2
 8001872:	d100      	bne.n	8001876 <__aeabi_ddiv+0x3fa>
 8001874:	e0d4      	b.n	8001a20 <__aeabi_ddiv+0x5a4>
 8001876:	210f      	movs	r1, #15
 8001878:	2300      	movs	r3, #0
 800187a:	4011      	ands	r1, r2
 800187c:	2904      	cmp	r1, #4
 800187e:	d100      	bne.n	8001882 <__aeabi_ddiv+0x406>
 8001880:	e0cb      	b.n	8001a1a <__aeabi_ddiv+0x59e>
 8001882:	1d11      	adds	r1, r2, #4
 8001884:	4291      	cmp	r1, r2
 8001886:	4192      	sbcs	r2, r2
 8001888:	4252      	negs	r2, r2
 800188a:	189b      	adds	r3, r3, r2
 800188c:	000a      	movs	r2, r1
 800188e:	0219      	lsls	r1, r3, #8
 8001890:	d400      	bmi.n	8001894 <__aeabi_ddiv+0x418>
 8001892:	e0c2      	b.n	8001a1a <__aeabi_ddiv+0x59e>
 8001894:	2301      	movs	r3, #1
 8001896:	2400      	movs	r4, #0
 8001898:	2500      	movs	r5, #0
 800189a:	e646      	b.n	800152a <__aeabi_ddiv+0xae>
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	4641      	mov	r1, r8
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	4219      	tst	r1, r3
 80018a4:	d008      	beq.n	80018b8 <__aeabi_ddiv+0x43c>
 80018a6:	421c      	tst	r4, r3
 80018a8:	d106      	bne.n	80018b8 <__aeabi_ddiv+0x43c>
 80018aa:	431c      	orrs	r4, r3
 80018ac:	0324      	lsls	r4, r4, #12
 80018ae:	46ba      	mov	sl, r7
 80018b0:	0015      	movs	r5, r2
 80018b2:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <__aeabi_ddiv+0x5dc>)
 80018b4:	0b24      	lsrs	r4, r4, #12
 80018b6:	e638      	b.n	800152a <__aeabi_ddiv+0xae>
 80018b8:	2480      	movs	r4, #128	; 0x80
 80018ba:	4643      	mov	r3, r8
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	431c      	orrs	r4, r3
 80018c0:	0324      	lsls	r4, r4, #12
 80018c2:	46b2      	mov	sl, r6
 80018c4:	4b64      	ldr	r3, [pc, #400]	; (8001a58 <__aeabi_ddiv+0x5dc>)
 80018c6:	0b24      	lsrs	r4, r4, #12
 80018c8:	e62f      	b.n	800152a <__aeabi_ddiv+0xae>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0x454>
 80018ce:	e703      	b.n	80016d8 <__aeabi_ddiv+0x25c>
 80018d0:	19a6      	adds	r6, r4, r6
 80018d2:	1e68      	subs	r0, r5, #1
 80018d4:	42a6      	cmp	r6, r4
 80018d6:	d200      	bcs.n	80018da <__aeabi_ddiv+0x45e>
 80018d8:	e08d      	b.n	80019f6 <__aeabi_ddiv+0x57a>
 80018da:	428e      	cmp	r6, r1
 80018dc:	d200      	bcs.n	80018e0 <__aeabi_ddiv+0x464>
 80018de:	e0a3      	b.n	8001a28 <__aeabi_ddiv+0x5ac>
 80018e0:	d100      	bne.n	80018e4 <__aeabi_ddiv+0x468>
 80018e2:	e0b3      	b.n	8001a4c <__aeabi_ddiv+0x5d0>
 80018e4:	0005      	movs	r5, r0
 80018e6:	e6f5      	b.n	80016d4 <__aeabi_ddiv+0x258>
 80018e8:	42aa      	cmp	r2, r5
 80018ea:	d900      	bls.n	80018ee <__aeabi_ddiv+0x472>
 80018ec:	e639      	b.n	8001562 <__aeabi_ddiv+0xe6>
 80018ee:	4643      	mov	r3, r8
 80018f0:	07de      	lsls	r6, r3, #31
 80018f2:	0858      	lsrs	r0, r3, #1
 80018f4:	086b      	lsrs	r3, r5, #1
 80018f6:	431e      	orrs	r6, r3
 80018f8:	07ed      	lsls	r5, r5, #31
 80018fa:	e639      	b.n	8001570 <__aeabi_ddiv+0xf4>
 80018fc:	4648      	mov	r0, r9
 80018fe:	f001 f8db 	bl	8002ab8 <__clzsi2>
 8001902:	0001      	movs	r1, r0
 8001904:	0002      	movs	r2, r0
 8001906:	3115      	adds	r1, #21
 8001908:	3220      	adds	r2, #32
 800190a:	291c      	cmp	r1, #28
 800190c:	dc00      	bgt.n	8001910 <__aeabi_ddiv+0x494>
 800190e:	e72c      	b.n	800176a <__aeabi_ddiv+0x2ee>
 8001910:	464b      	mov	r3, r9
 8001912:	3808      	subs	r0, #8
 8001914:	4083      	lsls	r3, r0
 8001916:	2500      	movs	r5, #0
 8001918:	4698      	mov	r8, r3
 800191a:	e732      	b.n	8001782 <__aeabi_ddiv+0x306>
 800191c:	f001 f8cc 	bl	8002ab8 <__clzsi2>
 8001920:	0003      	movs	r3, r0
 8001922:	001a      	movs	r2, r3
 8001924:	3215      	adds	r2, #21
 8001926:	3020      	adds	r0, #32
 8001928:	2a1c      	cmp	r2, #28
 800192a:	dc00      	bgt.n	800192e <__aeabi_ddiv+0x4b2>
 800192c:	e700      	b.n	8001730 <__aeabi_ddiv+0x2b4>
 800192e:	4654      	mov	r4, sl
 8001930:	3b08      	subs	r3, #8
 8001932:	2200      	movs	r2, #0
 8001934:	409c      	lsls	r4, r3
 8001936:	e705      	b.n	8001744 <__aeabi_ddiv+0x2c8>
 8001938:	1936      	adds	r6, r6, r4
 800193a:	3b01      	subs	r3, #1
 800193c:	42b4      	cmp	r4, r6
 800193e:	d900      	bls.n	8001942 <__aeabi_ddiv+0x4c6>
 8001940:	e6a6      	b.n	8001690 <__aeabi_ddiv+0x214>
 8001942:	42b2      	cmp	r2, r6
 8001944:	d800      	bhi.n	8001948 <__aeabi_ddiv+0x4cc>
 8001946:	e6a3      	b.n	8001690 <__aeabi_ddiv+0x214>
 8001948:	1e83      	subs	r3, r0, #2
 800194a:	1936      	adds	r6, r6, r4
 800194c:	e6a0      	b.n	8001690 <__aeabi_ddiv+0x214>
 800194e:	1909      	adds	r1, r1, r4
 8001950:	3d01      	subs	r5, #1
 8001952:	428c      	cmp	r4, r1
 8001954:	d900      	bls.n	8001958 <__aeabi_ddiv+0x4dc>
 8001956:	e68d      	b.n	8001674 <__aeabi_ddiv+0x1f8>
 8001958:	428a      	cmp	r2, r1
 800195a:	d800      	bhi.n	800195e <__aeabi_ddiv+0x4e2>
 800195c:	e68a      	b.n	8001674 <__aeabi_ddiv+0x1f8>
 800195e:	1e85      	subs	r5, r0, #2
 8001960:	1909      	adds	r1, r1, r4
 8001962:	e687      	b.n	8001674 <__aeabi_ddiv+0x1f8>
 8001964:	230f      	movs	r3, #15
 8001966:	402b      	ands	r3, r5
 8001968:	2b04      	cmp	r3, #4
 800196a:	d100      	bne.n	800196e <__aeabi_ddiv+0x4f2>
 800196c:	e6bc      	b.n	80016e8 <__aeabi_ddiv+0x26c>
 800196e:	2305      	movs	r3, #5
 8001970:	425b      	negs	r3, r3
 8001972:	42ab      	cmp	r3, r5
 8001974:	419b      	sbcs	r3, r3
 8001976:	3504      	adds	r5, #4
 8001978:	425b      	negs	r3, r3
 800197a:	08ed      	lsrs	r5, r5, #3
 800197c:	4498      	add	r8, r3
 800197e:	e6b4      	b.n	80016ea <__aeabi_ddiv+0x26e>
 8001980:	42af      	cmp	r7, r5
 8001982:	d900      	bls.n	8001986 <__aeabi_ddiv+0x50a>
 8001984:	e660      	b.n	8001648 <__aeabi_ddiv+0x1cc>
 8001986:	4282      	cmp	r2, r0
 8001988:	d804      	bhi.n	8001994 <__aeabi_ddiv+0x518>
 800198a:	d000      	beq.n	800198e <__aeabi_ddiv+0x512>
 800198c:	e65c      	b.n	8001648 <__aeabi_ddiv+0x1cc>
 800198e:	42ae      	cmp	r6, r5
 8001990:	d800      	bhi.n	8001994 <__aeabi_ddiv+0x518>
 8001992:	e659      	b.n	8001648 <__aeabi_ddiv+0x1cc>
 8001994:	2302      	movs	r3, #2
 8001996:	425b      	negs	r3, r3
 8001998:	469c      	mov	ip, r3
 800199a:	9b00      	ldr	r3, [sp, #0]
 800199c:	44e0      	add	r8, ip
 800199e:	469c      	mov	ip, r3
 80019a0:	4465      	add	r5, ip
 80019a2:	429d      	cmp	r5, r3
 80019a4:	419b      	sbcs	r3, r3
 80019a6:	425b      	negs	r3, r3
 80019a8:	191b      	adds	r3, r3, r4
 80019aa:	18c0      	adds	r0, r0, r3
 80019ac:	e64d      	b.n	800164a <__aeabi_ddiv+0x1ce>
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d800      	bhi.n	80019b4 <__aeabi_ddiv+0x538>
 80019b2:	e60e      	b.n	80015d2 <__aeabi_ddiv+0x156>
 80019b4:	1e83      	subs	r3, r0, #2
 80019b6:	1909      	adds	r1, r1, r4
 80019b8:	e60b      	b.n	80015d2 <__aeabi_ddiv+0x156>
 80019ba:	428a      	cmp	r2, r1
 80019bc:	d800      	bhi.n	80019c0 <__aeabi_ddiv+0x544>
 80019be:	e5f4      	b.n	80015aa <__aeabi_ddiv+0x12e>
 80019c0:	1e83      	subs	r3, r0, #2
 80019c2:	4698      	mov	r8, r3
 80019c4:	1909      	adds	r1, r1, r4
 80019c6:	e5f0      	b.n	80015aa <__aeabi_ddiv+0x12e>
 80019c8:	4925      	ldr	r1, [pc, #148]	; (8001a60 <__aeabi_ddiv+0x5e4>)
 80019ca:	0028      	movs	r0, r5
 80019cc:	4459      	add	r1, fp
 80019ce:	408d      	lsls	r5, r1
 80019d0:	4642      	mov	r2, r8
 80019d2:	408a      	lsls	r2, r1
 80019d4:	1e69      	subs	r1, r5, #1
 80019d6:	418d      	sbcs	r5, r1
 80019d8:	4641      	mov	r1, r8
 80019da:	40d8      	lsrs	r0, r3
 80019dc:	40d9      	lsrs	r1, r3
 80019de:	4302      	orrs	r2, r0
 80019e0:	432a      	orrs	r2, r5
 80019e2:	000b      	movs	r3, r1
 80019e4:	0751      	lsls	r1, r2, #29
 80019e6:	d100      	bne.n	80019ea <__aeabi_ddiv+0x56e>
 80019e8:	e751      	b.n	800188e <__aeabi_ddiv+0x412>
 80019ea:	210f      	movs	r1, #15
 80019ec:	4011      	ands	r1, r2
 80019ee:	2904      	cmp	r1, #4
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x578>
 80019f2:	e746      	b.n	8001882 <__aeabi_ddiv+0x406>
 80019f4:	e74b      	b.n	800188e <__aeabi_ddiv+0x412>
 80019f6:	0005      	movs	r5, r0
 80019f8:	428e      	cmp	r6, r1
 80019fa:	d000      	beq.n	80019fe <__aeabi_ddiv+0x582>
 80019fc:	e66a      	b.n	80016d4 <__aeabi_ddiv+0x258>
 80019fe:	9a00      	ldr	r2, [sp, #0]
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d000      	beq.n	8001a06 <__aeabi_ddiv+0x58a>
 8001a04:	e666      	b.n	80016d4 <__aeabi_ddiv+0x258>
 8001a06:	e667      	b.n	80016d8 <__aeabi_ddiv+0x25c>
 8001a08:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <__aeabi_ddiv+0x5e8>)
 8001a0a:	445a      	add	r2, fp
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_ddiv+0x596>
 8001a10:	e710      	b.n	8001834 <__aeabi_ddiv+0x3b8>
 8001a12:	2301      	movs	r3, #1
 8001a14:	2500      	movs	r5, #0
 8001a16:	4498      	add	r8, r3
 8001a18:	e667      	b.n	80016ea <__aeabi_ddiv+0x26e>
 8001a1a:	075d      	lsls	r5, r3, #29
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	0b1c      	lsrs	r4, r3, #12
 8001a20:	08d2      	lsrs	r2, r2, #3
 8001a22:	2300      	movs	r3, #0
 8001a24:	4315      	orrs	r5, r2
 8001a26:	e580      	b.n	800152a <__aeabi_ddiv+0xae>
 8001a28:	9800      	ldr	r0, [sp, #0]
 8001a2a:	3d02      	subs	r5, #2
 8001a2c:	0042      	lsls	r2, r0, #1
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	41bf      	sbcs	r7, r7
 8001a32:	427f      	negs	r7, r7
 8001a34:	193c      	adds	r4, r7, r4
 8001a36:	1936      	adds	r6, r6, r4
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	e7dd      	b.n	80019f8 <__aeabi_ddiv+0x57c>
 8001a3c:	2480      	movs	r4, #128	; 0x80
 8001a3e:	4643      	mov	r3, r8
 8001a40:	0324      	lsls	r4, r4, #12
 8001a42:	431c      	orrs	r4, r3
 8001a44:	0324      	lsls	r4, r4, #12
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__aeabi_ddiv+0x5dc>)
 8001a48:	0b24      	lsrs	r4, r4, #12
 8001a4a:	e56e      	b.n	800152a <__aeabi_ddiv+0xae>
 8001a4c:	9a00      	ldr	r2, [sp, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3ea      	bcc.n	8001a28 <__aeabi_ddiv+0x5ac>
 8001a52:	0005      	movs	r5, r0
 8001a54:	e7d3      	b.n	80019fe <__aeabi_ddiv+0x582>
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	000007ff 	.word	0x000007ff
 8001a5c:	0000043e 	.word	0x0000043e
 8001a60:	0000041e 	.word	0x0000041e
 8001a64:	000003ff 	.word	0x000003ff

08001a68 <__eqdf2>:
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	464e      	mov	r6, r9
 8001a6c:	4645      	mov	r5, r8
 8001a6e:	46de      	mov	lr, fp
 8001a70:	4657      	mov	r7, sl
 8001a72:	4690      	mov	r8, r2
 8001a74:	b5e0      	push	{r5, r6, r7, lr}
 8001a76:	0017      	movs	r7, r2
 8001a78:	031a      	lsls	r2, r3, #12
 8001a7a:	0b12      	lsrs	r2, r2, #12
 8001a7c:	0005      	movs	r5, r0
 8001a7e:	4684      	mov	ip, r0
 8001a80:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <__eqdf2+0x80>)
 8001a82:	030e      	lsls	r6, r1, #12
 8001a84:	004c      	lsls	r4, r1, #1
 8001a86:	4691      	mov	r9, r2
 8001a88:	005a      	lsls	r2, r3, #1
 8001a8a:	0fdb      	lsrs	r3, r3, #31
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	0b36      	lsrs	r6, r6, #12
 8001a90:	0d64      	lsrs	r4, r4, #21
 8001a92:	0fc9      	lsrs	r1, r1, #31
 8001a94:	0d52      	lsrs	r2, r2, #21
 8001a96:	4284      	cmp	r4, r0
 8001a98:	d019      	beq.n	8001ace <__eqdf2+0x66>
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	d010      	beq.n	8001ac0 <__eqdf2+0x58>
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4294      	cmp	r4, r2
 8001aa2:	d10e      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001aa4:	454e      	cmp	r6, r9
 8001aa6:	d10c      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	45c4      	cmp	ip, r8
 8001aac:	d109      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001aae:	4559      	cmp	r1, fp
 8001ab0:	d017      	beq.n	8001ae2 <__eqdf2+0x7a>
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d105      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001ab6:	0030      	movs	r0, r6
 8001ab8:	4328      	orrs	r0, r5
 8001aba:	1e43      	subs	r3, r0, #1
 8001abc:	4198      	sbcs	r0, r3
 8001abe:	e000      	b.n	8001ac2 <__eqdf2+0x5a>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac4:	46bb      	mov	fp, r7
 8001ac6:	46b2      	mov	sl, r6
 8001ac8:	46a9      	mov	r9, r5
 8001aca:	46a0      	mov	r8, r4
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ace:	0033      	movs	r3, r6
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	432b      	orrs	r3, r5
 8001ad4:	d1f5      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001ad6:	42a2      	cmp	r2, r4
 8001ad8:	d1f3      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001ada:	464b      	mov	r3, r9
 8001adc:	433b      	orrs	r3, r7
 8001ade:	d1f0      	bne.n	8001ac2 <__eqdf2+0x5a>
 8001ae0:	e7e2      	b.n	8001aa8 <__eqdf2+0x40>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e7ed      	b.n	8001ac2 <__eqdf2+0x5a>
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	000007ff 	.word	0x000007ff

08001aec <__gedf2>:
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	4647      	mov	r7, r8
 8001af0:	46ce      	mov	lr, r9
 8001af2:	0004      	movs	r4, r0
 8001af4:	0018      	movs	r0, r3
 8001af6:	0016      	movs	r6, r2
 8001af8:	031b      	lsls	r3, r3, #12
 8001afa:	0b1b      	lsrs	r3, r3, #12
 8001afc:	4d2d      	ldr	r5, [pc, #180]	; (8001bb4 <__gedf2+0xc8>)
 8001afe:	004a      	lsls	r2, r1, #1
 8001b00:	4699      	mov	r9, r3
 8001b02:	b580      	push	{r7, lr}
 8001b04:	0043      	lsls	r3, r0, #1
 8001b06:	030f      	lsls	r7, r1, #12
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	46b0      	mov	r8, r6
 8001b0c:	0b3f      	lsrs	r7, r7, #12
 8001b0e:	0d52      	lsrs	r2, r2, #21
 8001b10:	0fc9      	lsrs	r1, r1, #31
 8001b12:	0d5b      	lsrs	r3, r3, #21
 8001b14:	0fc0      	lsrs	r0, r0, #31
 8001b16:	42aa      	cmp	r2, r5
 8001b18:	d021      	beq.n	8001b5e <__gedf2+0x72>
 8001b1a:	42ab      	cmp	r3, r5
 8001b1c:	d013      	beq.n	8001b46 <__gedf2+0x5a>
 8001b1e:	2a00      	cmp	r2, #0
 8001b20:	d122      	bne.n	8001b68 <__gedf2+0x7c>
 8001b22:	433c      	orrs	r4, r7
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <__gedf2+0x42>
 8001b28:	464d      	mov	r5, r9
 8001b2a:	432e      	orrs	r6, r5
 8001b2c:	d022      	beq.n	8001b74 <__gedf2+0x88>
 8001b2e:	2c00      	cmp	r4, #0
 8001b30:	d010      	beq.n	8001b54 <__gedf2+0x68>
 8001b32:	4281      	cmp	r1, r0
 8001b34:	d022      	beq.n	8001b7c <__gedf2+0x90>
 8001b36:	2002      	movs	r0, #2
 8001b38:	3901      	subs	r1, #1
 8001b3a:	4008      	ands	r0, r1
 8001b3c:	3801      	subs	r0, #1
 8001b3e:	bcc0      	pop	{r6, r7}
 8001b40:	46b9      	mov	r9, r7
 8001b42:	46b0      	mov	r8, r6
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	464d      	mov	r5, r9
 8001b48:	432e      	orrs	r6, r5
 8001b4a:	d129      	bne.n	8001ba0 <__gedf2+0xb4>
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d1f0      	bne.n	8001b32 <__gedf2+0x46>
 8001b50:	433c      	orrs	r4, r7
 8001b52:	d1ee      	bne.n	8001b32 <__gedf2+0x46>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d1f2      	bne.n	8001b3e <__gedf2+0x52>
 8001b58:	2001      	movs	r0, #1
 8001b5a:	4240      	negs	r0, r0
 8001b5c:	e7ef      	b.n	8001b3e <__gedf2+0x52>
 8001b5e:	003d      	movs	r5, r7
 8001b60:	4325      	orrs	r5, r4
 8001b62:	d11d      	bne.n	8001ba0 <__gedf2+0xb4>
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d0ee      	beq.n	8001b46 <__gedf2+0x5a>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e2      	bne.n	8001b32 <__gedf2+0x46>
 8001b6c:	464c      	mov	r4, r9
 8001b6e:	4326      	orrs	r6, r4
 8001b70:	d1df      	bne.n	8001b32 <__gedf2+0x46>
 8001b72:	e7e0      	b.n	8001b36 <__gedf2+0x4a>
 8001b74:	2000      	movs	r0, #0
 8001b76:	2c00      	cmp	r4, #0
 8001b78:	d0e1      	beq.n	8001b3e <__gedf2+0x52>
 8001b7a:	e7dc      	b.n	8001b36 <__gedf2+0x4a>
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dc0a      	bgt.n	8001b96 <__gedf2+0xaa>
 8001b80:	dbe8      	blt.n	8001b54 <__gedf2+0x68>
 8001b82:	454f      	cmp	r7, r9
 8001b84:	d8d7      	bhi.n	8001b36 <__gedf2+0x4a>
 8001b86:	d00e      	beq.n	8001ba6 <__gedf2+0xba>
 8001b88:	2000      	movs	r0, #0
 8001b8a:	454f      	cmp	r7, r9
 8001b8c:	d2d7      	bcs.n	8001b3e <__gedf2+0x52>
 8001b8e:	2900      	cmp	r1, #0
 8001b90:	d0e2      	beq.n	8001b58 <__gedf2+0x6c>
 8001b92:	0008      	movs	r0, r1
 8001b94:	e7d3      	b.n	8001b3e <__gedf2+0x52>
 8001b96:	4243      	negs	r3, r0
 8001b98:	4158      	adcs	r0, r3
 8001b9a:	0040      	lsls	r0, r0, #1
 8001b9c:	3801      	subs	r0, #1
 8001b9e:	e7ce      	b.n	8001b3e <__gedf2+0x52>
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	4240      	negs	r0, r0
 8001ba4:	e7cb      	b.n	8001b3e <__gedf2+0x52>
 8001ba6:	45c4      	cmp	ip, r8
 8001ba8:	d8c5      	bhi.n	8001b36 <__gedf2+0x4a>
 8001baa:	2000      	movs	r0, #0
 8001bac:	45c4      	cmp	ip, r8
 8001bae:	d2c6      	bcs.n	8001b3e <__gedf2+0x52>
 8001bb0:	e7ed      	b.n	8001b8e <__gedf2+0xa2>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	000007ff 	.word	0x000007ff

08001bb8 <__ledf2>:
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	4647      	mov	r7, r8
 8001bbc:	46ce      	mov	lr, r9
 8001bbe:	0004      	movs	r4, r0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	0016      	movs	r6, r2
 8001bc4:	031b      	lsls	r3, r3, #12
 8001bc6:	0b1b      	lsrs	r3, r3, #12
 8001bc8:	4d2c      	ldr	r5, [pc, #176]	; (8001c7c <__ledf2+0xc4>)
 8001bca:	004a      	lsls	r2, r1, #1
 8001bcc:	4699      	mov	r9, r3
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	0043      	lsls	r3, r0, #1
 8001bd2:	030f      	lsls	r7, r1, #12
 8001bd4:	46a4      	mov	ip, r4
 8001bd6:	46b0      	mov	r8, r6
 8001bd8:	0b3f      	lsrs	r7, r7, #12
 8001bda:	0d52      	lsrs	r2, r2, #21
 8001bdc:	0fc9      	lsrs	r1, r1, #31
 8001bde:	0d5b      	lsrs	r3, r3, #21
 8001be0:	0fc0      	lsrs	r0, r0, #31
 8001be2:	42aa      	cmp	r2, r5
 8001be4:	d00d      	beq.n	8001c02 <__ledf2+0x4a>
 8001be6:	42ab      	cmp	r3, r5
 8001be8:	d010      	beq.n	8001c0c <__ledf2+0x54>
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d127      	bne.n	8001c3e <__ledf2+0x86>
 8001bee:	433c      	orrs	r4, r7
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <__ledf2+0x60>
 8001bf4:	464d      	mov	r5, r9
 8001bf6:	432e      	orrs	r6, r5
 8001bf8:	d10e      	bne.n	8001c18 <__ledf2+0x60>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	d015      	beq.n	8001c2c <__ledf2+0x74>
 8001c00:	e00e      	b.n	8001c20 <__ledf2+0x68>
 8001c02:	003d      	movs	r5, r7
 8001c04:	4325      	orrs	r5, r4
 8001c06:	d110      	bne.n	8001c2a <__ledf2+0x72>
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d118      	bne.n	8001c3e <__ledf2+0x86>
 8001c0c:	464d      	mov	r5, r9
 8001c0e:	432e      	orrs	r6, r5
 8001c10:	d10b      	bne.n	8001c2a <__ledf2+0x72>
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d102      	bne.n	8001c1c <__ledf2+0x64>
 8001c16:	433c      	orrs	r4, r7
 8001c18:	2c00      	cmp	r4, #0
 8001c1a:	d00b      	beq.n	8001c34 <__ledf2+0x7c>
 8001c1c:	4281      	cmp	r1, r0
 8001c1e:	d014      	beq.n	8001c4a <__ledf2+0x92>
 8001c20:	2002      	movs	r0, #2
 8001c22:	3901      	subs	r1, #1
 8001c24:	4008      	ands	r0, r1
 8001c26:	3801      	subs	r0, #1
 8001c28:	e000      	b.n	8001c2c <__ledf2+0x74>
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	bcc0      	pop	{r6, r7}
 8001c2e:	46b9      	mov	r9, r7
 8001c30:	46b0      	mov	r8, r6
 8001c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d1f9      	bne.n	8001c2c <__ledf2+0x74>
 8001c38:	2001      	movs	r0, #1
 8001c3a:	4240      	negs	r0, r0
 8001c3c:	e7f6      	b.n	8001c2c <__ledf2+0x74>
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ec      	bne.n	8001c1c <__ledf2+0x64>
 8001c42:	464c      	mov	r4, r9
 8001c44:	4326      	orrs	r6, r4
 8001c46:	d1e9      	bne.n	8001c1c <__ledf2+0x64>
 8001c48:	e7ea      	b.n	8001c20 <__ledf2+0x68>
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dd04      	ble.n	8001c58 <__ledf2+0xa0>
 8001c4e:	4243      	negs	r3, r0
 8001c50:	4158      	adcs	r0, r3
 8001c52:	0040      	lsls	r0, r0, #1
 8001c54:	3801      	subs	r0, #1
 8001c56:	e7e9      	b.n	8001c2c <__ledf2+0x74>
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbeb      	blt.n	8001c34 <__ledf2+0x7c>
 8001c5c:	454f      	cmp	r7, r9
 8001c5e:	d8df      	bhi.n	8001c20 <__ledf2+0x68>
 8001c60:	d006      	beq.n	8001c70 <__ledf2+0xb8>
 8001c62:	2000      	movs	r0, #0
 8001c64:	454f      	cmp	r7, r9
 8001c66:	d2e1      	bcs.n	8001c2c <__ledf2+0x74>
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	d0e5      	beq.n	8001c38 <__ledf2+0x80>
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	e7dd      	b.n	8001c2c <__ledf2+0x74>
 8001c70:	45c4      	cmp	ip, r8
 8001c72:	d8d5      	bhi.n	8001c20 <__ledf2+0x68>
 8001c74:	2000      	movs	r0, #0
 8001c76:	45c4      	cmp	ip, r8
 8001c78:	d2d8      	bcs.n	8001c2c <__ledf2+0x74>
 8001c7a:	e7f5      	b.n	8001c68 <__ledf2+0xb0>
 8001c7c:	000007ff 	.word	0x000007ff

08001c80 <__aeabi_dmul>:
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	4657      	mov	r7, sl
 8001c84:	464e      	mov	r6, r9
 8001c86:	4645      	mov	r5, r8
 8001c88:	46de      	mov	lr, fp
 8001c8a:	b5e0      	push	{r5, r6, r7, lr}
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	030c      	lsls	r4, r1, #12
 8001c90:	004b      	lsls	r3, r1, #1
 8001c92:	0006      	movs	r6, r0
 8001c94:	4692      	mov	sl, r2
 8001c96:	b087      	sub	sp, #28
 8001c98:	0b24      	lsrs	r4, r4, #12
 8001c9a:	0d5b      	lsrs	r3, r3, #21
 8001c9c:	0fcf      	lsrs	r7, r1, #31
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dmul+0x24>
 8001ca2:	e15c      	b.n	8001f5e <__aeabi_dmul+0x2de>
 8001ca4:	4ad9      	ldr	r2, [pc, #868]	; (800200c <__aeabi_dmul+0x38c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dmul+0x2c>
 8001caa:	e175      	b.n	8001f98 <__aeabi_dmul+0x318>
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00e4      	lsls	r4, r4, #3
 8001cb0:	4314      	orrs	r4, r2
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	0412      	lsls	r2, r2, #16
 8001cb6:	4314      	orrs	r4, r2
 8001cb8:	4ad5      	ldr	r2, [pc, #852]	; (8002010 <__aeabi_dmul+0x390>)
 8001cba:	00c5      	lsls	r5, r0, #3
 8001cbc:	4694      	mov	ip, r2
 8001cbe:	4463      	add	r3, ip
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	4643      	mov	r3, r8
 8001cca:	4642      	mov	r2, r8
 8001ccc:	031e      	lsls	r6, r3, #12
 8001cce:	0fd2      	lsrs	r2, r2, #31
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4650      	mov	r0, sl
 8001cd4:	4690      	mov	r8, r2
 8001cd6:	0b36      	lsrs	r6, r6, #12
 8001cd8:	0d5b      	lsrs	r3, r3, #21
 8001cda:	d100      	bne.n	8001cde <__aeabi_dmul+0x5e>
 8001cdc:	e120      	b.n	8001f20 <__aeabi_dmul+0x2a0>
 8001cde:	4acb      	ldr	r2, [pc, #812]	; (800200c <__aeabi_dmul+0x38c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dmul+0x66>
 8001ce4:	e162      	b.n	8001fac <__aeabi_dmul+0x32c>
 8001ce6:	49ca      	ldr	r1, [pc, #808]	; (8002010 <__aeabi_dmul+0x390>)
 8001ce8:	0f42      	lsrs	r2, r0, #29
 8001cea:	468c      	mov	ip, r1
 8001cec:	9900      	ldr	r1, [sp, #0]
 8001cee:	4463      	add	r3, ip
 8001cf0:	00f6      	lsls	r6, r6, #3
 8001cf2:	468c      	mov	ip, r1
 8001cf4:	4316      	orrs	r6, r2
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	449c      	add	ip, r3
 8001cfa:	0412      	lsls	r2, r2, #16
 8001cfc:	4663      	mov	r3, ip
 8001cfe:	4316      	orrs	r6, r2
 8001d00:	00c2      	lsls	r2, r0, #3
 8001d02:	2000      	movs	r0, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	9900      	ldr	r1, [sp, #0]
 8001d08:	4643      	mov	r3, r8
 8001d0a:	3101      	adds	r1, #1
 8001d0c:	468c      	mov	ip, r1
 8001d0e:	4649      	mov	r1, r9
 8001d10:	407b      	eors	r3, r7
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	290f      	cmp	r1, #15
 8001d16:	d826      	bhi.n	8001d66 <__aeabi_dmul+0xe6>
 8001d18:	4bbe      	ldr	r3, [pc, #760]	; (8002014 <__aeabi_dmul+0x394>)
 8001d1a:	0089      	lsls	r1, r1, #2
 8001d1c:	5859      	ldr	r1, [r3, r1]
 8001d1e:	468f      	mov	pc, r1
 8001d20:	4643      	mov	r3, r8
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	0034      	movs	r4, r6
 8001d26:	0015      	movs	r5, r2
 8001d28:	4683      	mov	fp, r0
 8001d2a:	465b      	mov	r3, fp
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d016      	beq.n	8001d5e <__aeabi_dmul+0xde>
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dmul+0xb6>
 8001d34:	e203      	b.n	800213e <__aeabi_dmul+0x4be>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dmul+0xbc>
 8001d3a:	e0cd      	b.n	8001ed8 <__aeabi_dmul+0x258>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2400      	movs	r4, #0
 8001d40:	2500      	movs	r5, #0
 8001d42:	9b01      	ldr	r3, [sp, #4]
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07db      	lsls	r3, r3, #31
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	0028      	movs	r0, r5
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b007      	add	sp, #28
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	2400      	movs	r4, #0
 8001d60:	2500      	movs	r5, #0
 8001d62:	4aaa      	ldr	r2, [pc, #680]	; (800200c <__aeabi_dmul+0x38c>)
 8001d64:	e7ed      	b.n	8001d42 <__aeabi_dmul+0xc2>
 8001d66:	0c28      	lsrs	r0, r5, #16
 8001d68:	042d      	lsls	r5, r5, #16
 8001d6a:	0c2d      	lsrs	r5, r5, #16
 8001d6c:	002b      	movs	r3, r5
 8001d6e:	0c11      	lsrs	r1, r2, #16
 8001d70:	0412      	lsls	r2, r2, #16
 8001d72:	0c12      	lsrs	r2, r2, #16
 8001d74:	4353      	muls	r3, r2
 8001d76:	4698      	mov	r8, r3
 8001d78:	0013      	movs	r3, r2
 8001d7a:	002f      	movs	r7, r5
 8001d7c:	4343      	muls	r3, r0
 8001d7e:	4699      	mov	r9, r3
 8001d80:	434f      	muls	r7, r1
 8001d82:	444f      	add	r7, r9
 8001d84:	46bb      	mov	fp, r7
 8001d86:	4647      	mov	r7, r8
 8001d88:	000b      	movs	r3, r1
 8001d8a:	0c3f      	lsrs	r7, r7, #16
 8001d8c:	46ba      	mov	sl, r7
 8001d8e:	4343      	muls	r3, r0
 8001d90:	44da      	add	sl, fp
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	45d1      	cmp	r9, sl
 8001d96:	d904      	bls.n	8001da2 <__aeabi_dmul+0x122>
 8001d98:	2780      	movs	r7, #128	; 0x80
 8001d9a:	027f      	lsls	r7, r7, #9
 8001d9c:	46b9      	mov	r9, r7
 8001d9e:	444b      	add	r3, r9
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	4653      	mov	r3, sl
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	469b      	mov	fp, r3
 8001da8:	4653      	mov	r3, sl
 8001daa:	041f      	lsls	r7, r3, #16
 8001dac:	4643      	mov	r3, r8
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	4698      	mov	r8, r3
 8001db4:	003b      	movs	r3, r7
 8001db6:	4443      	add	r3, r8
 8001db8:	9304      	str	r3, [sp, #16]
 8001dba:	0c33      	lsrs	r3, r6, #16
 8001dbc:	0436      	lsls	r6, r6, #16
 8001dbe:	0c36      	lsrs	r6, r6, #16
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	0033      	movs	r3, r6
 8001dc4:	4343      	muls	r3, r0
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4643      	mov	r3, r8
 8001dca:	4343      	muls	r3, r0
 8001dcc:	002f      	movs	r7, r5
 8001dce:	469a      	mov	sl, r3
 8001dd0:	4643      	mov	r3, r8
 8001dd2:	4377      	muls	r7, r6
 8001dd4:	435d      	muls	r5, r3
 8001dd6:	0c38      	lsrs	r0, r7, #16
 8001dd8:	444d      	add	r5, r9
 8001dda:	1945      	adds	r5, r0, r5
 8001ddc:	45a9      	cmp	r9, r5
 8001dde:	d903      	bls.n	8001de8 <__aeabi_dmul+0x168>
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	4699      	mov	r9, r3
 8001de6:	44ca      	add	sl, r9
 8001de8:	043f      	lsls	r7, r7, #16
 8001dea:	0c28      	lsrs	r0, r5, #16
 8001dec:	0c3f      	lsrs	r7, r7, #16
 8001dee:	042d      	lsls	r5, r5, #16
 8001df0:	19ed      	adds	r5, r5, r7
 8001df2:	0c27      	lsrs	r7, r4, #16
 8001df4:	0424      	lsls	r4, r4, #16
 8001df6:	0c24      	lsrs	r4, r4, #16
 8001df8:	0003      	movs	r3, r0
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	4350      	muls	r0, r2
 8001dfe:	437a      	muls	r2, r7
 8001e00:	4691      	mov	r9, r2
 8001e02:	003a      	movs	r2, r7
 8001e04:	4453      	add	r3, sl
 8001e06:	9305      	str	r3, [sp, #20]
 8001e08:	0c03      	lsrs	r3, r0, #16
 8001e0a:	469a      	mov	sl, r3
 8001e0c:	434a      	muls	r2, r1
 8001e0e:	4361      	muls	r1, r4
 8001e10:	4449      	add	r1, r9
 8001e12:	4451      	add	r1, sl
 8001e14:	44ab      	add	fp, r5
 8001e16:	4589      	cmp	r9, r1
 8001e18:	d903      	bls.n	8001e22 <__aeabi_dmul+0x1a2>
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	4699      	mov	r9, r3
 8001e20:	444a      	add	r2, r9
 8001e22:	0400      	lsls	r0, r0, #16
 8001e24:	0c0b      	lsrs	r3, r1, #16
 8001e26:	0c00      	lsrs	r0, r0, #16
 8001e28:	0409      	lsls	r1, r1, #16
 8001e2a:	1809      	adds	r1, r1, r0
 8001e2c:	0020      	movs	r0, r4
 8001e2e:	4699      	mov	r9, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	4370      	muls	r0, r6
 8001e34:	435c      	muls	r4, r3
 8001e36:	437e      	muls	r6, r7
 8001e38:	435f      	muls	r7, r3
 8001e3a:	0c03      	lsrs	r3, r0, #16
 8001e3c:	4698      	mov	r8, r3
 8001e3e:	19a4      	adds	r4, r4, r6
 8001e40:	4444      	add	r4, r8
 8001e42:	444a      	add	r2, r9
 8001e44:	9703      	str	r7, [sp, #12]
 8001e46:	42a6      	cmp	r6, r4
 8001e48:	d904      	bls.n	8001e54 <__aeabi_dmul+0x1d4>
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	025b      	lsls	r3, r3, #9
 8001e4e:	4698      	mov	r8, r3
 8001e50:	4447      	add	r7, r8
 8001e52:	9703      	str	r7, [sp, #12]
 8001e54:	0423      	lsls	r3, r4, #16
 8001e56:	9e02      	ldr	r6, [sp, #8]
 8001e58:	469a      	mov	sl, r3
 8001e5a:	9b05      	ldr	r3, [sp, #20]
 8001e5c:	445e      	add	r6, fp
 8001e5e:	4698      	mov	r8, r3
 8001e60:	42ae      	cmp	r6, r5
 8001e62:	41ad      	sbcs	r5, r5
 8001e64:	1876      	adds	r6, r6, r1
 8001e66:	428e      	cmp	r6, r1
 8001e68:	4189      	sbcs	r1, r1
 8001e6a:	0400      	lsls	r0, r0, #16
 8001e6c:	0c00      	lsrs	r0, r0, #16
 8001e6e:	4450      	add	r0, sl
 8001e70:	4440      	add	r0, r8
 8001e72:	426d      	negs	r5, r5
 8001e74:	1947      	adds	r7, r0, r5
 8001e76:	46b8      	mov	r8, r7
 8001e78:	4693      	mov	fp, r2
 8001e7a:	4249      	negs	r1, r1
 8001e7c:	4689      	mov	r9, r1
 8001e7e:	44c3      	add	fp, r8
 8001e80:	44d9      	add	r9, fp
 8001e82:	4298      	cmp	r0, r3
 8001e84:	4180      	sbcs	r0, r0
 8001e86:	45a8      	cmp	r8, r5
 8001e88:	41ad      	sbcs	r5, r5
 8001e8a:	4593      	cmp	fp, r2
 8001e8c:	4192      	sbcs	r2, r2
 8001e8e:	4589      	cmp	r9, r1
 8001e90:	4189      	sbcs	r1, r1
 8001e92:	426d      	negs	r5, r5
 8001e94:	4240      	negs	r0, r0
 8001e96:	4328      	orrs	r0, r5
 8001e98:	0c24      	lsrs	r4, r4, #16
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	4249      	negs	r1, r1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	9b03      	ldr	r3, [sp, #12]
 8001ea2:	1900      	adds	r0, r0, r4
 8001ea4:	1880      	adds	r0, r0, r2
 8001ea6:	18c7      	adds	r7, r0, r3
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	0ddc      	lsrs	r4, r3, #23
 8001eac:	9b04      	ldr	r3, [sp, #16]
 8001eae:	0275      	lsls	r5, r6, #9
 8001eb0:	431d      	orrs	r5, r3
 8001eb2:	1e6a      	subs	r2, r5, #1
 8001eb4:	4195      	sbcs	r5, r2
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	0df6      	lsrs	r6, r6, #23
 8001eba:	027f      	lsls	r7, r7, #9
 8001ebc:	4335      	orrs	r5, r6
 8001ebe:	025a      	lsls	r2, r3, #9
 8001ec0:	433c      	orrs	r4, r7
 8001ec2:	4315      	orrs	r5, r2
 8001ec4:	01fb      	lsls	r3, r7, #7
 8001ec6:	d400      	bmi.n	8001eca <__aeabi_dmul+0x24a>
 8001ec8:	e11c      	b.n	8002104 <__aeabi_dmul+0x484>
 8001eca:	2101      	movs	r1, #1
 8001ecc:	086a      	lsrs	r2, r5, #1
 8001ece:	400d      	ands	r5, r1
 8001ed0:	4315      	orrs	r5, r2
 8001ed2:	07e2      	lsls	r2, r4, #31
 8001ed4:	4315      	orrs	r5, r2
 8001ed6:	0864      	lsrs	r4, r4, #1
 8001ed8:	494f      	ldr	r1, [pc, #316]	; (8002018 <__aeabi_dmul+0x398>)
 8001eda:	4461      	add	r1, ip
 8001edc:	2900      	cmp	r1, #0
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dmul+0x262>
 8001ee0:	e0b0      	b.n	8002044 <__aeabi_dmul+0x3c4>
 8001ee2:	076b      	lsls	r3, r5, #29
 8001ee4:	d009      	beq.n	8001efa <__aeabi_dmul+0x27a>
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	402a      	ands	r2, r5
 8001eea:	2a04      	cmp	r2, #4
 8001eec:	d005      	beq.n	8001efa <__aeabi_dmul+0x27a>
 8001eee:	1d2a      	adds	r2, r5, #4
 8001ef0:	42aa      	cmp	r2, r5
 8001ef2:	41ad      	sbcs	r5, r5
 8001ef4:	426d      	negs	r5, r5
 8001ef6:	1964      	adds	r4, r4, r5
 8001ef8:	0015      	movs	r5, r2
 8001efa:	01e3      	lsls	r3, r4, #7
 8001efc:	d504      	bpl.n	8001f08 <__aeabi_dmul+0x288>
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <__aeabi_dmul+0x39c>)
 8001f02:	00c9      	lsls	r1, r1, #3
 8001f04:	4014      	ands	r4, r2
 8001f06:	4461      	add	r1, ip
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <__aeabi_dmul+0x3a0>)
 8001f0a:	4291      	cmp	r1, r2
 8001f0c:	dd00      	ble.n	8001f10 <__aeabi_dmul+0x290>
 8001f0e:	e726      	b.n	8001d5e <__aeabi_dmul+0xde>
 8001f10:	0762      	lsls	r2, r4, #29
 8001f12:	08ed      	lsrs	r5, r5, #3
 8001f14:	0264      	lsls	r4, r4, #9
 8001f16:	0549      	lsls	r1, r1, #21
 8001f18:	4315      	orrs	r5, r2
 8001f1a:	0b24      	lsrs	r4, r4, #12
 8001f1c:	0d4a      	lsrs	r2, r1, #21
 8001f1e:	e710      	b.n	8001d42 <__aeabi_dmul+0xc2>
 8001f20:	4652      	mov	r2, sl
 8001f22:	4332      	orrs	r2, r6
 8001f24:	d100      	bne.n	8001f28 <__aeabi_dmul+0x2a8>
 8001f26:	e07f      	b.n	8002028 <__aeabi_dmul+0x3a8>
 8001f28:	2e00      	cmp	r6, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dmul+0x2ae>
 8001f2c:	e0dc      	b.n	80020e8 <__aeabi_dmul+0x468>
 8001f2e:	0030      	movs	r0, r6
 8001f30:	f000 fdc2 	bl	8002ab8 <__clzsi2>
 8001f34:	0002      	movs	r2, r0
 8001f36:	3a0b      	subs	r2, #11
 8001f38:	231d      	movs	r3, #29
 8001f3a:	0001      	movs	r1, r0
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	4652      	mov	r2, sl
 8001f40:	3908      	subs	r1, #8
 8001f42:	40da      	lsrs	r2, r3
 8001f44:	408e      	lsls	r6, r1
 8001f46:	4316      	orrs	r6, r2
 8001f48:	4652      	mov	r2, sl
 8001f4a:	408a      	lsls	r2, r1
 8001f4c:	9b00      	ldr	r3, [sp, #0]
 8001f4e:	4935      	ldr	r1, [pc, #212]	; (8002024 <__aeabi_dmul+0x3a4>)
 8001f50:	1a18      	subs	r0, r3, r0
 8001f52:	0003      	movs	r3, r0
 8001f54:	468c      	mov	ip, r1
 8001f56:	4463      	add	r3, ip
 8001f58:	2000      	movs	r0, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	e6d3      	b.n	8001d06 <__aeabi_dmul+0x86>
 8001f5e:	0025      	movs	r5, r4
 8001f60:	4305      	orrs	r5, r0
 8001f62:	d04a      	beq.n	8001ffa <__aeabi_dmul+0x37a>
 8001f64:	2c00      	cmp	r4, #0
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dmul+0x2ea>
 8001f68:	e0b0      	b.n	80020cc <__aeabi_dmul+0x44c>
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	f000 fda4 	bl	8002ab8 <__clzsi2>
 8001f70:	0001      	movs	r1, r0
 8001f72:	0002      	movs	r2, r0
 8001f74:	390b      	subs	r1, #11
 8001f76:	231d      	movs	r3, #29
 8001f78:	0010      	movs	r0, r2
 8001f7a:	1a5b      	subs	r3, r3, r1
 8001f7c:	0031      	movs	r1, r6
 8001f7e:	0035      	movs	r5, r6
 8001f80:	3808      	subs	r0, #8
 8001f82:	4084      	lsls	r4, r0
 8001f84:	40d9      	lsrs	r1, r3
 8001f86:	4085      	lsls	r5, r0
 8001f88:	430c      	orrs	r4, r1
 8001f8a:	4826      	ldr	r0, [pc, #152]	; (8002024 <__aeabi_dmul+0x3a4>)
 8001f8c:	1a83      	subs	r3, r0, r2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	4699      	mov	r9, r3
 8001f94:	469b      	mov	fp, r3
 8001f96:	e697      	b.n	8001cc8 <__aeabi_dmul+0x48>
 8001f98:	0005      	movs	r5, r0
 8001f9a:	4325      	orrs	r5, r4
 8001f9c:	d126      	bne.n	8001fec <__aeabi_dmul+0x36c>
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	4691      	mov	r9, r2
 8001fa8:	469b      	mov	fp, r3
 8001faa:	e68d      	b.n	8001cc8 <__aeabi_dmul+0x48>
 8001fac:	4652      	mov	r2, sl
 8001fae:	9b00      	ldr	r3, [sp, #0]
 8001fb0:	4332      	orrs	r2, r6
 8001fb2:	d110      	bne.n	8001fd6 <__aeabi_dmul+0x356>
 8001fb4:	4915      	ldr	r1, [pc, #84]	; (800200c <__aeabi_dmul+0x38c>)
 8001fb6:	2600      	movs	r6, #0
 8001fb8:	468c      	mov	ip, r1
 8001fba:	4463      	add	r3, ip
 8001fbc:	4649      	mov	r1, r9
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	4319      	orrs	r1, r3
 8001fc4:	4689      	mov	r9, r1
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	e69d      	b.n	8001d06 <__aeabi_dmul+0x86>
 8001fca:	465b      	mov	r3, fp
 8001fcc:	9701      	str	r7, [sp, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dmul+0x354>
 8001fd2:	e6ad      	b.n	8001d30 <__aeabi_dmul+0xb0>
 8001fd4:	e6c3      	b.n	8001d5e <__aeabi_dmul+0xde>
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <__aeabi_dmul+0x38c>)
 8001fd8:	2003      	movs	r0, #3
 8001fda:	4694      	mov	ip, r2
 8001fdc:	4463      	add	r3, ip
 8001fde:	464a      	mov	r2, r9
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	4691      	mov	r9, r2
 8001fe8:	4652      	mov	r2, sl
 8001fea:	e68c      	b.n	8001d06 <__aeabi_dmul+0x86>
 8001fec:	220c      	movs	r2, #12
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	0005      	movs	r5, r0
 8001ff4:	4691      	mov	r9, r2
 8001ff6:	469b      	mov	fp, r3
 8001ff8:	e666      	b.n	8001cc8 <__aeabi_dmul+0x48>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	4699      	mov	r9, r3
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	2400      	movs	r4, #0
 8002006:	469b      	mov	fp, r3
 8002008:	e65e      	b.n	8001cc8 <__aeabi_dmul+0x48>
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	000007ff 	.word	0x000007ff
 8002010:	fffffc01 	.word	0xfffffc01
 8002014:	080085b0 	.word	0x080085b0
 8002018:	000003ff 	.word	0x000003ff
 800201c:	feffffff 	.word	0xfeffffff
 8002020:	000007fe 	.word	0x000007fe
 8002024:	fffffc0d 	.word	0xfffffc0d
 8002028:	4649      	mov	r1, r9
 800202a:	2301      	movs	r3, #1
 800202c:	4319      	orrs	r1, r3
 800202e:	4689      	mov	r9, r1
 8002030:	2600      	movs	r6, #0
 8002032:	2001      	movs	r0, #1
 8002034:	e667      	b.n	8001d06 <__aeabi_dmul+0x86>
 8002036:	2300      	movs	r3, #0
 8002038:	2480      	movs	r4, #128	; 0x80
 800203a:	2500      	movs	r5, #0
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <__aeabi_dmul+0x4cc>)
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	0324      	lsls	r4, r4, #12
 8002042:	e67e      	b.n	8001d42 <__aeabi_dmul+0xc2>
 8002044:	2001      	movs	r0, #1
 8002046:	1a40      	subs	r0, r0, r1
 8002048:	2838      	cmp	r0, #56	; 0x38
 800204a:	dd00      	ble.n	800204e <__aeabi_dmul+0x3ce>
 800204c:	e676      	b.n	8001d3c <__aeabi_dmul+0xbc>
 800204e:	281f      	cmp	r0, #31
 8002050:	dd5b      	ble.n	800210a <__aeabi_dmul+0x48a>
 8002052:	221f      	movs	r2, #31
 8002054:	0023      	movs	r3, r4
 8002056:	4252      	negs	r2, r2
 8002058:	1a51      	subs	r1, r2, r1
 800205a:	40cb      	lsrs	r3, r1
 800205c:	0019      	movs	r1, r3
 800205e:	2820      	cmp	r0, #32
 8002060:	d003      	beq.n	800206a <__aeabi_dmul+0x3ea>
 8002062:	4a3b      	ldr	r2, [pc, #236]	; (8002150 <__aeabi_dmul+0x4d0>)
 8002064:	4462      	add	r2, ip
 8002066:	4094      	lsls	r4, r2
 8002068:	4325      	orrs	r5, r4
 800206a:	1e6a      	subs	r2, r5, #1
 800206c:	4195      	sbcs	r5, r2
 800206e:	002a      	movs	r2, r5
 8002070:	430a      	orrs	r2, r1
 8002072:	2107      	movs	r1, #7
 8002074:	000d      	movs	r5, r1
 8002076:	2400      	movs	r4, #0
 8002078:	4015      	ands	r5, r2
 800207a:	4211      	tst	r1, r2
 800207c:	d05b      	beq.n	8002136 <__aeabi_dmul+0x4b6>
 800207e:	210f      	movs	r1, #15
 8002080:	2400      	movs	r4, #0
 8002082:	4011      	ands	r1, r2
 8002084:	2904      	cmp	r1, #4
 8002086:	d053      	beq.n	8002130 <__aeabi_dmul+0x4b0>
 8002088:	1d11      	adds	r1, r2, #4
 800208a:	4291      	cmp	r1, r2
 800208c:	4192      	sbcs	r2, r2
 800208e:	4252      	negs	r2, r2
 8002090:	18a4      	adds	r4, r4, r2
 8002092:	000a      	movs	r2, r1
 8002094:	0223      	lsls	r3, r4, #8
 8002096:	d54b      	bpl.n	8002130 <__aeabi_dmul+0x4b0>
 8002098:	2201      	movs	r2, #1
 800209a:	2400      	movs	r4, #0
 800209c:	2500      	movs	r5, #0
 800209e:	e650      	b.n	8001d42 <__aeabi_dmul+0xc2>
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	031b      	lsls	r3, r3, #12
 80020a4:	421c      	tst	r4, r3
 80020a6:	d009      	beq.n	80020bc <__aeabi_dmul+0x43c>
 80020a8:	421e      	tst	r6, r3
 80020aa:	d107      	bne.n	80020bc <__aeabi_dmul+0x43c>
 80020ac:	4333      	orrs	r3, r6
 80020ae:	031c      	lsls	r4, r3, #12
 80020b0:	4643      	mov	r3, r8
 80020b2:	0015      	movs	r5, r2
 80020b4:	0b24      	lsrs	r4, r4, #12
 80020b6:	4a25      	ldr	r2, [pc, #148]	; (800214c <__aeabi_dmul+0x4cc>)
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	e642      	b.n	8001d42 <__aeabi_dmul+0xc2>
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	0312      	lsls	r2, r2, #12
 80020c0:	4314      	orrs	r4, r2
 80020c2:	0324      	lsls	r4, r4, #12
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <__aeabi_dmul+0x4cc>)
 80020c6:	0b24      	lsrs	r4, r4, #12
 80020c8:	9701      	str	r7, [sp, #4]
 80020ca:	e63a      	b.n	8001d42 <__aeabi_dmul+0xc2>
 80020cc:	f000 fcf4 	bl	8002ab8 <__clzsi2>
 80020d0:	0001      	movs	r1, r0
 80020d2:	0002      	movs	r2, r0
 80020d4:	3115      	adds	r1, #21
 80020d6:	3220      	adds	r2, #32
 80020d8:	291c      	cmp	r1, #28
 80020da:	dc00      	bgt.n	80020de <__aeabi_dmul+0x45e>
 80020dc:	e74b      	b.n	8001f76 <__aeabi_dmul+0x2f6>
 80020de:	0034      	movs	r4, r6
 80020e0:	3808      	subs	r0, #8
 80020e2:	2500      	movs	r5, #0
 80020e4:	4084      	lsls	r4, r0
 80020e6:	e750      	b.n	8001f8a <__aeabi_dmul+0x30a>
 80020e8:	f000 fce6 	bl	8002ab8 <__clzsi2>
 80020ec:	0003      	movs	r3, r0
 80020ee:	001a      	movs	r2, r3
 80020f0:	3215      	adds	r2, #21
 80020f2:	3020      	adds	r0, #32
 80020f4:	2a1c      	cmp	r2, #28
 80020f6:	dc00      	bgt.n	80020fa <__aeabi_dmul+0x47a>
 80020f8:	e71e      	b.n	8001f38 <__aeabi_dmul+0x2b8>
 80020fa:	4656      	mov	r6, sl
 80020fc:	3b08      	subs	r3, #8
 80020fe:	2200      	movs	r2, #0
 8002100:	409e      	lsls	r6, r3
 8002102:	e723      	b.n	8001f4c <__aeabi_dmul+0x2cc>
 8002104:	9b00      	ldr	r3, [sp, #0]
 8002106:	469c      	mov	ip, r3
 8002108:	e6e6      	b.n	8001ed8 <__aeabi_dmul+0x258>
 800210a:	4912      	ldr	r1, [pc, #72]	; (8002154 <__aeabi_dmul+0x4d4>)
 800210c:	0022      	movs	r2, r4
 800210e:	4461      	add	r1, ip
 8002110:	002e      	movs	r6, r5
 8002112:	408d      	lsls	r5, r1
 8002114:	408a      	lsls	r2, r1
 8002116:	40c6      	lsrs	r6, r0
 8002118:	1e69      	subs	r1, r5, #1
 800211a:	418d      	sbcs	r5, r1
 800211c:	4332      	orrs	r2, r6
 800211e:	432a      	orrs	r2, r5
 8002120:	40c4      	lsrs	r4, r0
 8002122:	0753      	lsls	r3, r2, #29
 8002124:	d0b6      	beq.n	8002094 <__aeabi_dmul+0x414>
 8002126:	210f      	movs	r1, #15
 8002128:	4011      	ands	r1, r2
 800212a:	2904      	cmp	r1, #4
 800212c:	d1ac      	bne.n	8002088 <__aeabi_dmul+0x408>
 800212e:	e7b1      	b.n	8002094 <__aeabi_dmul+0x414>
 8002130:	0765      	lsls	r5, r4, #29
 8002132:	0264      	lsls	r4, r4, #9
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	08d2      	lsrs	r2, r2, #3
 8002138:	4315      	orrs	r5, r2
 800213a:	2200      	movs	r2, #0
 800213c:	e601      	b.n	8001d42 <__aeabi_dmul+0xc2>
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0312      	lsls	r2, r2, #12
 8002142:	4314      	orrs	r4, r2
 8002144:	0324      	lsls	r4, r4, #12
 8002146:	4a01      	ldr	r2, [pc, #4]	; (800214c <__aeabi_dmul+0x4cc>)
 8002148:	0b24      	lsrs	r4, r4, #12
 800214a:	e5fa      	b.n	8001d42 <__aeabi_dmul+0xc2>
 800214c:	000007ff 	.word	0x000007ff
 8002150:	0000043e 	.word	0x0000043e
 8002154:	0000041e 	.word	0x0000041e

08002158 <__aeabi_dsub>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	4657      	mov	r7, sl
 800215c:	464e      	mov	r6, r9
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	b5e0      	push	{r5, r6, r7, lr}
 8002164:	001e      	movs	r6, r3
 8002166:	0017      	movs	r7, r2
 8002168:	004a      	lsls	r2, r1, #1
 800216a:	030b      	lsls	r3, r1, #12
 800216c:	0d52      	lsrs	r2, r2, #21
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	4690      	mov	r8, r2
 8002172:	0f42      	lsrs	r2, r0, #29
 8002174:	431a      	orrs	r2, r3
 8002176:	0fcd      	lsrs	r5, r1, #31
 8002178:	4ccd      	ldr	r4, [pc, #820]	; (80024b0 <__aeabi_dsub+0x358>)
 800217a:	0331      	lsls	r1, r6, #12
 800217c:	00c3      	lsls	r3, r0, #3
 800217e:	4694      	mov	ip, r2
 8002180:	0070      	lsls	r0, r6, #1
 8002182:	0f7a      	lsrs	r2, r7, #29
 8002184:	0a49      	lsrs	r1, r1, #9
 8002186:	00ff      	lsls	r7, r7, #3
 8002188:	469a      	mov	sl, r3
 800218a:	46b9      	mov	r9, r7
 800218c:	0d40      	lsrs	r0, r0, #21
 800218e:	0ff6      	lsrs	r6, r6, #31
 8002190:	4311      	orrs	r1, r2
 8002192:	42a0      	cmp	r0, r4
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x40>
 8002196:	e0b1      	b.n	80022fc <__aeabi_dsub+0x1a4>
 8002198:	2201      	movs	r2, #1
 800219a:	4056      	eors	r6, r2
 800219c:	46b3      	mov	fp, r6
 800219e:	42b5      	cmp	r5, r6
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x4c>
 80021a2:	e088      	b.n	80022b6 <__aeabi_dsub+0x15e>
 80021a4:	4642      	mov	r2, r8
 80021a6:	1a12      	subs	r2, r2, r0
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	dc00      	bgt.n	80021ae <__aeabi_dsub+0x56>
 80021ac:	e0ae      	b.n	800230c <__aeabi_dsub+0x1b4>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x5c>
 80021b2:	e0c1      	b.n	8002338 <__aeabi_dsub+0x1e0>
 80021b4:	48be      	ldr	r0, [pc, #760]	; (80024b0 <__aeabi_dsub+0x358>)
 80021b6:	4580      	cmp	r8, r0
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x64>
 80021ba:	e151      	b.n	8002460 <__aeabi_dsub+0x308>
 80021bc:	2080      	movs	r0, #128	; 0x80
 80021be:	0400      	lsls	r0, r0, #16
 80021c0:	4301      	orrs	r1, r0
 80021c2:	2a38      	cmp	r2, #56	; 0x38
 80021c4:	dd00      	ble.n	80021c8 <__aeabi_dsub+0x70>
 80021c6:	e17b      	b.n	80024c0 <__aeabi_dsub+0x368>
 80021c8:	2a1f      	cmp	r2, #31
 80021ca:	dd00      	ble.n	80021ce <__aeabi_dsub+0x76>
 80021cc:	e1ee      	b.n	80025ac <__aeabi_dsub+0x454>
 80021ce:	2020      	movs	r0, #32
 80021d0:	003e      	movs	r6, r7
 80021d2:	1a80      	subs	r0, r0, r2
 80021d4:	000c      	movs	r4, r1
 80021d6:	40d6      	lsrs	r6, r2
 80021d8:	40d1      	lsrs	r1, r2
 80021da:	4087      	lsls	r7, r0
 80021dc:	4662      	mov	r2, ip
 80021de:	4084      	lsls	r4, r0
 80021e0:	1a52      	subs	r2, r2, r1
 80021e2:	1e78      	subs	r0, r7, #1
 80021e4:	4187      	sbcs	r7, r0
 80021e6:	4694      	mov	ip, r2
 80021e8:	4334      	orrs	r4, r6
 80021ea:	4327      	orrs	r7, r4
 80021ec:	1bdc      	subs	r4, r3, r7
 80021ee:	42a3      	cmp	r3, r4
 80021f0:	419b      	sbcs	r3, r3
 80021f2:	4662      	mov	r2, ip
 80021f4:	425b      	negs	r3, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	4699      	mov	r9, r3
 80021fa:	464b      	mov	r3, r9
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	d400      	bmi.n	8002202 <__aeabi_dsub+0xaa>
 8002200:	e118      	b.n	8002434 <__aeabi_dsub+0x2dc>
 8002202:	464b      	mov	r3, r9
 8002204:	0258      	lsls	r0, r3, #9
 8002206:	0a43      	lsrs	r3, r0, #9
 8002208:	4699      	mov	r9, r3
 800220a:	464b      	mov	r3, r9
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <__aeabi_dsub+0xba>
 8002210:	e137      	b.n	8002482 <__aeabi_dsub+0x32a>
 8002212:	4648      	mov	r0, r9
 8002214:	f000 fc50 	bl	8002ab8 <__clzsi2>
 8002218:	0001      	movs	r1, r0
 800221a:	3908      	subs	r1, #8
 800221c:	2320      	movs	r3, #32
 800221e:	0022      	movs	r2, r4
 8002220:	4648      	mov	r0, r9
 8002222:	1a5b      	subs	r3, r3, r1
 8002224:	40da      	lsrs	r2, r3
 8002226:	4088      	lsls	r0, r1
 8002228:	408c      	lsls	r4, r1
 800222a:	4643      	mov	r3, r8
 800222c:	4310      	orrs	r0, r2
 800222e:	4588      	cmp	r8, r1
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0xdc>
 8002232:	e136      	b.n	80024a2 <__aeabi_dsub+0x34a>
 8002234:	1ac9      	subs	r1, r1, r3
 8002236:	1c4b      	adds	r3, r1, #1
 8002238:	2b1f      	cmp	r3, #31
 800223a:	dd00      	ble.n	800223e <__aeabi_dsub+0xe6>
 800223c:	e0ea      	b.n	8002414 <__aeabi_dsub+0x2bc>
 800223e:	2220      	movs	r2, #32
 8002240:	0026      	movs	r6, r4
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	0001      	movs	r1, r0
 8002246:	4094      	lsls	r4, r2
 8002248:	40de      	lsrs	r6, r3
 800224a:	40d8      	lsrs	r0, r3
 800224c:	2300      	movs	r3, #0
 800224e:	4091      	lsls	r1, r2
 8002250:	1e62      	subs	r2, r4, #1
 8002252:	4194      	sbcs	r4, r2
 8002254:	4681      	mov	r9, r0
 8002256:	4698      	mov	r8, r3
 8002258:	4331      	orrs	r1, r6
 800225a:	430c      	orrs	r4, r1
 800225c:	0763      	lsls	r3, r4, #29
 800225e:	d009      	beq.n	8002274 <__aeabi_dsub+0x11c>
 8002260:	230f      	movs	r3, #15
 8002262:	4023      	ands	r3, r4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d005      	beq.n	8002274 <__aeabi_dsub+0x11c>
 8002268:	1d23      	adds	r3, r4, #4
 800226a:	42a3      	cmp	r3, r4
 800226c:	41a4      	sbcs	r4, r4
 800226e:	4264      	negs	r4, r4
 8002270:	44a1      	add	r9, r4
 8002272:	001c      	movs	r4, r3
 8002274:	464b      	mov	r3, r9
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	d400      	bmi.n	800227c <__aeabi_dsub+0x124>
 800227a:	e0de      	b.n	800243a <__aeabi_dsub+0x2e2>
 800227c:	4641      	mov	r1, r8
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <__aeabi_dsub+0x358>)
 8002280:	3101      	adds	r1, #1
 8002282:	4299      	cmp	r1, r3
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x130>
 8002286:	e0e7      	b.n	8002458 <__aeabi_dsub+0x300>
 8002288:	464b      	mov	r3, r9
 800228a:	488a      	ldr	r0, [pc, #552]	; (80024b4 <__aeabi_dsub+0x35c>)
 800228c:	08e4      	lsrs	r4, r4, #3
 800228e:	4003      	ands	r3, r0
 8002290:	0018      	movs	r0, r3
 8002292:	0549      	lsls	r1, r1, #21
 8002294:	075b      	lsls	r3, r3, #29
 8002296:	0240      	lsls	r0, r0, #9
 8002298:	4323      	orrs	r3, r4
 800229a:	0d4a      	lsrs	r2, r1, #21
 800229c:	0b04      	lsrs	r4, r0, #12
 800229e:	0512      	lsls	r2, r2, #20
 80022a0:	07ed      	lsls	r5, r5, #31
 80022a2:	4322      	orrs	r2, r4
 80022a4:	432a      	orrs	r2, r5
 80022a6:	0018      	movs	r0, r3
 80022a8:	0011      	movs	r1, r2
 80022aa:	bcf0      	pop	{r4, r5, r6, r7}
 80022ac:	46bb      	mov	fp, r7
 80022ae:	46b2      	mov	sl, r6
 80022b0:	46a9      	mov	r9, r5
 80022b2:	46a0      	mov	r8, r4
 80022b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022b6:	4642      	mov	r2, r8
 80022b8:	1a12      	subs	r2, r2, r0
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	dd52      	ble.n	8002364 <__aeabi_dsub+0x20c>
 80022be:	2800      	cmp	r0, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0x16c>
 80022c2:	e09c      	b.n	80023fe <__aeabi_dsub+0x2a6>
 80022c4:	45a0      	cmp	r8, r4
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x172>
 80022c8:	e0ca      	b.n	8002460 <__aeabi_dsub+0x308>
 80022ca:	2080      	movs	r0, #128	; 0x80
 80022cc:	0400      	lsls	r0, r0, #16
 80022ce:	4301      	orrs	r1, r0
 80022d0:	2a38      	cmp	r2, #56	; 0x38
 80022d2:	dd00      	ble.n	80022d6 <__aeabi_dsub+0x17e>
 80022d4:	e149      	b.n	800256a <__aeabi_dsub+0x412>
 80022d6:	2a1f      	cmp	r2, #31
 80022d8:	dc00      	bgt.n	80022dc <__aeabi_dsub+0x184>
 80022da:	e197      	b.n	800260c <__aeabi_dsub+0x4b4>
 80022dc:	0010      	movs	r0, r2
 80022de:	000e      	movs	r6, r1
 80022e0:	3820      	subs	r0, #32
 80022e2:	40c6      	lsrs	r6, r0
 80022e4:	2a20      	cmp	r2, #32
 80022e6:	d004      	beq.n	80022f2 <__aeabi_dsub+0x19a>
 80022e8:	2040      	movs	r0, #64	; 0x40
 80022ea:	1a82      	subs	r2, r0, r2
 80022ec:	4091      	lsls	r1, r2
 80022ee:	430f      	orrs	r7, r1
 80022f0:	46b9      	mov	r9, r7
 80022f2:	464c      	mov	r4, r9
 80022f4:	1e62      	subs	r2, r4, #1
 80022f6:	4194      	sbcs	r4, r2
 80022f8:	4334      	orrs	r4, r6
 80022fa:	e13a      	b.n	8002572 <__aeabi_dsub+0x41a>
 80022fc:	000a      	movs	r2, r1
 80022fe:	433a      	orrs	r2, r7
 8002300:	d028      	beq.n	8002354 <__aeabi_dsub+0x1fc>
 8002302:	46b3      	mov	fp, r6
 8002304:	42b5      	cmp	r5, r6
 8002306:	d02b      	beq.n	8002360 <__aeabi_dsub+0x208>
 8002308:	4a6b      	ldr	r2, [pc, #428]	; (80024b8 <__aeabi_dsub+0x360>)
 800230a:	4442      	add	r2, r8
 800230c:	2a00      	cmp	r2, #0
 800230e:	d05d      	beq.n	80023cc <__aeabi_dsub+0x274>
 8002310:	4642      	mov	r2, r8
 8002312:	4644      	mov	r4, r8
 8002314:	1a82      	subs	r2, r0, r2
 8002316:	2c00      	cmp	r4, #0
 8002318:	d000      	beq.n	800231c <__aeabi_dsub+0x1c4>
 800231a:	e0f5      	b.n	8002508 <__aeabi_dsub+0x3b0>
 800231c:	4665      	mov	r5, ip
 800231e:	431d      	orrs	r5, r3
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x1cc>
 8002322:	e19c      	b.n	800265e <__aeabi_dsub+0x506>
 8002324:	1e55      	subs	r5, r2, #1
 8002326:	2a01      	cmp	r2, #1
 8002328:	d100      	bne.n	800232c <__aeabi_dsub+0x1d4>
 800232a:	e1fb      	b.n	8002724 <__aeabi_dsub+0x5cc>
 800232c:	4c60      	ldr	r4, [pc, #384]	; (80024b0 <__aeabi_dsub+0x358>)
 800232e:	42a2      	cmp	r2, r4
 8002330:	d100      	bne.n	8002334 <__aeabi_dsub+0x1dc>
 8002332:	e1bd      	b.n	80026b0 <__aeabi_dsub+0x558>
 8002334:	002a      	movs	r2, r5
 8002336:	e0f0      	b.n	800251a <__aeabi_dsub+0x3c2>
 8002338:	0008      	movs	r0, r1
 800233a:	4338      	orrs	r0, r7
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x1e8>
 800233e:	e0c3      	b.n	80024c8 <__aeabi_dsub+0x370>
 8002340:	1e50      	subs	r0, r2, #1
 8002342:	2a01      	cmp	r2, #1
 8002344:	d100      	bne.n	8002348 <__aeabi_dsub+0x1f0>
 8002346:	e1a8      	b.n	800269a <__aeabi_dsub+0x542>
 8002348:	4c59      	ldr	r4, [pc, #356]	; (80024b0 <__aeabi_dsub+0x358>)
 800234a:	42a2      	cmp	r2, r4
 800234c:	d100      	bne.n	8002350 <__aeabi_dsub+0x1f8>
 800234e:	e087      	b.n	8002460 <__aeabi_dsub+0x308>
 8002350:	0002      	movs	r2, r0
 8002352:	e736      	b.n	80021c2 <__aeabi_dsub+0x6a>
 8002354:	2201      	movs	r2, #1
 8002356:	4056      	eors	r6, r2
 8002358:	46b3      	mov	fp, r6
 800235a:	42b5      	cmp	r5, r6
 800235c:	d000      	beq.n	8002360 <__aeabi_dsub+0x208>
 800235e:	e721      	b.n	80021a4 <__aeabi_dsub+0x4c>
 8002360:	4a55      	ldr	r2, [pc, #340]	; (80024b8 <__aeabi_dsub+0x360>)
 8002362:	4442      	add	r2, r8
 8002364:	2a00      	cmp	r2, #0
 8002366:	d100      	bne.n	800236a <__aeabi_dsub+0x212>
 8002368:	e0b5      	b.n	80024d6 <__aeabi_dsub+0x37e>
 800236a:	4642      	mov	r2, r8
 800236c:	4644      	mov	r4, r8
 800236e:	1a82      	subs	r2, r0, r2
 8002370:	2c00      	cmp	r4, #0
 8002372:	d100      	bne.n	8002376 <__aeabi_dsub+0x21e>
 8002374:	e138      	b.n	80025e8 <__aeabi_dsub+0x490>
 8002376:	4e4e      	ldr	r6, [pc, #312]	; (80024b0 <__aeabi_dsub+0x358>)
 8002378:	42b0      	cmp	r0, r6
 800237a:	d100      	bne.n	800237e <__aeabi_dsub+0x226>
 800237c:	e1de      	b.n	800273c <__aeabi_dsub+0x5e4>
 800237e:	2680      	movs	r6, #128	; 0x80
 8002380:	4664      	mov	r4, ip
 8002382:	0436      	lsls	r6, r6, #16
 8002384:	4334      	orrs	r4, r6
 8002386:	46a4      	mov	ip, r4
 8002388:	2a38      	cmp	r2, #56	; 0x38
 800238a:	dd00      	ble.n	800238e <__aeabi_dsub+0x236>
 800238c:	e196      	b.n	80026bc <__aeabi_dsub+0x564>
 800238e:	2a1f      	cmp	r2, #31
 8002390:	dd00      	ble.n	8002394 <__aeabi_dsub+0x23c>
 8002392:	e224      	b.n	80027de <__aeabi_dsub+0x686>
 8002394:	2620      	movs	r6, #32
 8002396:	1ab4      	subs	r4, r6, r2
 8002398:	46a2      	mov	sl, r4
 800239a:	4664      	mov	r4, ip
 800239c:	4656      	mov	r6, sl
 800239e:	40b4      	lsls	r4, r6
 80023a0:	46a1      	mov	r9, r4
 80023a2:	001c      	movs	r4, r3
 80023a4:	464e      	mov	r6, r9
 80023a6:	40d4      	lsrs	r4, r2
 80023a8:	4326      	orrs	r6, r4
 80023aa:	0034      	movs	r4, r6
 80023ac:	4656      	mov	r6, sl
 80023ae:	40b3      	lsls	r3, r6
 80023b0:	1e5e      	subs	r6, r3, #1
 80023b2:	41b3      	sbcs	r3, r6
 80023b4:	431c      	orrs	r4, r3
 80023b6:	4663      	mov	r3, ip
 80023b8:	40d3      	lsrs	r3, r2
 80023ba:	18c9      	adds	r1, r1, r3
 80023bc:	19e4      	adds	r4, r4, r7
 80023be:	42bc      	cmp	r4, r7
 80023c0:	41bf      	sbcs	r7, r7
 80023c2:	427f      	negs	r7, r7
 80023c4:	46b9      	mov	r9, r7
 80023c6:	4680      	mov	r8, r0
 80023c8:	4489      	add	r9, r1
 80023ca:	e0d8      	b.n	800257e <__aeabi_dsub+0x426>
 80023cc:	4640      	mov	r0, r8
 80023ce:	4c3b      	ldr	r4, [pc, #236]	; (80024bc <__aeabi_dsub+0x364>)
 80023d0:	3001      	adds	r0, #1
 80023d2:	4220      	tst	r0, r4
 80023d4:	d000      	beq.n	80023d8 <__aeabi_dsub+0x280>
 80023d6:	e0b4      	b.n	8002542 <__aeabi_dsub+0x3ea>
 80023d8:	4640      	mov	r0, r8
 80023da:	2800      	cmp	r0, #0
 80023dc:	d000      	beq.n	80023e0 <__aeabi_dsub+0x288>
 80023de:	e144      	b.n	800266a <__aeabi_dsub+0x512>
 80023e0:	4660      	mov	r0, ip
 80023e2:	4318      	orrs	r0, r3
 80023e4:	d100      	bne.n	80023e8 <__aeabi_dsub+0x290>
 80023e6:	e190      	b.n	800270a <__aeabi_dsub+0x5b2>
 80023e8:	0008      	movs	r0, r1
 80023ea:	4338      	orrs	r0, r7
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dsub+0x298>
 80023ee:	e1aa      	b.n	8002746 <__aeabi_dsub+0x5ee>
 80023f0:	4661      	mov	r1, ip
 80023f2:	08db      	lsrs	r3, r3, #3
 80023f4:	0749      	lsls	r1, r1, #29
 80023f6:	430b      	orrs	r3, r1
 80023f8:	4661      	mov	r1, ip
 80023fa:	08cc      	lsrs	r4, r1, #3
 80023fc:	e027      	b.n	800244e <__aeabi_dsub+0x2f6>
 80023fe:	0008      	movs	r0, r1
 8002400:	4338      	orrs	r0, r7
 8002402:	d061      	beq.n	80024c8 <__aeabi_dsub+0x370>
 8002404:	1e50      	subs	r0, r2, #1
 8002406:	2a01      	cmp	r2, #1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x2b4>
 800240a:	e139      	b.n	8002680 <__aeabi_dsub+0x528>
 800240c:	42a2      	cmp	r2, r4
 800240e:	d027      	beq.n	8002460 <__aeabi_dsub+0x308>
 8002410:	0002      	movs	r2, r0
 8002412:	e75d      	b.n	80022d0 <__aeabi_dsub+0x178>
 8002414:	0002      	movs	r2, r0
 8002416:	391f      	subs	r1, #31
 8002418:	40ca      	lsrs	r2, r1
 800241a:	0011      	movs	r1, r2
 800241c:	2b20      	cmp	r3, #32
 800241e:	d003      	beq.n	8002428 <__aeabi_dsub+0x2d0>
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4098      	lsls	r0, r3
 8002426:	4304      	orrs	r4, r0
 8002428:	1e63      	subs	r3, r4, #1
 800242a:	419c      	sbcs	r4, r3
 800242c:	2300      	movs	r3, #0
 800242e:	4699      	mov	r9, r3
 8002430:	4698      	mov	r8, r3
 8002432:	430c      	orrs	r4, r1
 8002434:	0763      	lsls	r3, r4, #29
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x2e2>
 8002438:	e712      	b.n	8002260 <__aeabi_dsub+0x108>
 800243a:	464b      	mov	r3, r9
 800243c:	464a      	mov	r2, r9
 800243e:	08e4      	lsrs	r4, r4, #3
 8002440:	075b      	lsls	r3, r3, #29
 8002442:	4323      	orrs	r3, r4
 8002444:	08d4      	lsrs	r4, r2, #3
 8002446:	4642      	mov	r2, r8
 8002448:	4919      	ldr	r1, [pc, #100]	; (80024b0 <__aeabi_dsub+0x358>)
 800244a:	428a      	cmp	r2, r1
 800244c:	d00e      	beq.n	800246c <__aeabi_dsub+0x314>
 800244e:	0324      	lsls	r4, r4, #12
 8002450:	0552      	lsls	r2, r2, #21
 8002452:	0b24      	lsrs	r4, r4, #12
 8002454:	0d52      	lsrs	r2, r2, #21
 8002456:	e722      	b.n	800229e <__aeabi_dsub+0x146>
 8002458:	000a      	movs	r2, r1
 800245a:	2400      	movs	r4, #0
 800245c:	2300      	movs	r3, #0
 800245e:	e71e      	b.n	800229e <__aeabi_dsub+0x146>
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	4662      	mov	r2, ip
 8002464:	0752      	lsls	r2, r2, #29
 8002466:	4313      	orrs	r3, r2
 8002468:	4662      	mov	r2, ip
 800246a:	08d4      	lsrs	r4, r2, #3
 800246c:	001a      	movs	r2, r3
 800246e:	4322      	orrs	r2, r4
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x31c>
 8002472:	e1fc      	b.n	800286e <__aeabi_dsub+0x716>
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	0312      	lsls	r2, r2, #12
 8002478:	4314      	orrs	r4, r2
 800247a:	0324      	lsls	r4, r4, #12
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <__aeabi_dsub+0x358>)
 800247e:	0b24      	lsrs	r4, r4, #12
 8002480:	e70d      	b.n	800229e <__aeabi_dsub+0x146>
 8002482:	0020      	movs	r0, r4
 8002484:	f000 fb18 	bl	8002ab8 <__clzsi2>
 8002488:	0001      	movs	r1, r0
 800248a:	3118      	adds	r1, #24
 800248c:	291f      	cmp	r1, #31
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x33a>
 8002490:	e6c4      	b.n	800221c <__aeabi_dsub+0xc4>
 8002492:	3808      	subs	r0, #8
 8002494:	4084      	lsls	r4, r0
 8002496:	4643      	mov	r3, r8
 8002498:	0020      	movs	r0, r4
 800249a:	2400      	movs	r4, #0
 800249c:	4588      	cmp	r8, r1
 800249e:	dc00      	bgt.n	80024a2 <__aeabi_dsub+0x34a>
 80024a0:	e6c8      	b.n	8002234 <__aeabi_dsub+0xdc>
 80024a2:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <__aeabi_dsub+0x35c>)
 80024a4:	1a5b      	subs	r3, r3, r1
 80024a6:	4010      	ands	r0, r2
 80024a8:	4698      	mov	r8, r3
 80024aa:	4681      	mov	r9, r0
 80024ac:	e6d6      	b.n	800225c <__aeabi_dsub+0x104>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	000007ff 	.word	0x000007ff
 80024b4:	ff7fffff 	.word	0xff7fffff
 80024b8:	fffff801 	.word	0xfffff801
 80024bc:	000007fe 	.word	0x000007fe
 80024c0:	430f      	orrs	r7, r1
 80024c2:	1e7a      	subs	r2, r7, #1
 80024c4:	4197      	sbcs	r7, r2
 80024c6:	e691      	b.n	80021ec <__aeabi_dsub+0x94>
 80024c8:	4661      	mov	r1, ip
 80024ca:	08db      	lsrs	r3, r3, #3
 80024cc:	0749      	lsls	r1, r1, #29
 80024ce:	430b      	orrs	r3, r1
 80024d0:	4661      	mov	r1, ip
 80024d2:	08cc      	lsrs	r4, r1, #3
 80024d4:	e7b8      	b.n	8002448 <__aeabi_dsub+0x2f0>
 80024d6:	4640      	mov	r0, r8
 80024d8:	4cd3      	ldr	r4, [pc, #844]	; (8002828 <__aeabi_dsub+0x6d0>)
 80024da:	3001      	adds	r0, #1
 80024dc:	4220      	tst	r0, r4
 80024de:	d000      	beq.n	80024e2 <__aeabi_dsub+0x38a>
 80024e0:	e0a2      	b.n	8002628 <__aeabi_dsub+0x4d0>
 80024e2:	4640      	mov	r0, r8
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d000      	beq.n	80024ea <__aeabi_dsub+0x392>
 80024e8:	e101      	b.n	80026ee <__aeabi_dsub+0x596>
 80024ea:	4660      	mov	r0, ip
 80024ec:	4318      	orrs	r0, r3
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x39a>
 80024f0:	e15e      	b.n	80027b0 <__aeabi_dsub+0x658>
 80024f2:	0008      	movs	r0, r1
 80024f4:	4338      	orrs	r0, r7
 80024f6:	d000      	beq.n	80024fa <__aeabi_dsub+0x3a2>
 80024f8:	e15f      	b.n	80027ba <__aeabi_dsub+0x662>
 80024fa:	4661      	mov	r1, ip
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	0749      	lsls	r1, r1, #29
 8002500:	430b      	orrs	r3, r1
 8002502:	4661      	mov	r1, ip
 8002504:	08cc      	lsrs	r4, r1, #3
 8002506:	e7a2      	b.n	800244e <__aeabi_dsub+0x2f6>
 8002508:	4dc8      	ldr	r5, [pc, #800]	; (800282c <__aeabi_dsub+0x6d4>)
 800250a:	42a8      	cmp	r0, r5
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x3b8>
 800250e:	e0cf      	b.n	80026b0 <__aeabi_dsub+0x558>
 8002510:	2580      	movs	r5, #128	; 0x80
 8002512:	4664      	mov	r4, ip
 8002514:	042d      	lsls	r5, r5, #16
 8002516:	432c      	orrs	r4, r5
 8002518:	46a4      	mov	ip, r4
 800251a:	2a38      	cmp	r2, #56	; 0x38
 800251c:	dc56      	bgt.n	80025cc <__aeabi_dsub+0x474>
 800251e:	2a1f      	cmp	r2, #31
 8002520:	dd00      	ble.n	8002524 <__aeabi_dsub+0x3cc>
 8002522:	e0d1      	b.n	80026c8 <__aeabi_dsub+0x570>
 8002524:	2520      	movs	r5, #32
 8002526:	001e      	movs	r6, r3
 8002528:	1aad      	subs	r5, r5, r2
 800252a:	4664      	mov	r4, ip
 800252c:	40ab      	lsls	r3, r5
 800252e:	40ac      	lsls	r4, r5
 8002530:	40d6      	lsrs	r6, r2
 8002532:	1e5d      	subs	r5, r3, #1
 8002534:	41ab      	sbcs	r3, r5
 8002536:	4334      	orrs	r4, r6
 8002538:	4323      	orrs	r3, r4
 800253a:	4664      	mov	r4, ip
 800253c:	40d4      	lsrs	r4, r2
 800253e:	1b09      	subs	r1, r1, r4
 8002540:	e049      	b.n	80025d6 <__aeabi_dsub+0x47e>
 8002542:	4660      	mov	r0, ip
 8002544:	1bdc      	subs	r4, r3, r7
 8002546:	1a46      	subs	r6, r0, r1
 8002548:	42a3      	cmp	r3, r4
 800254a:	4180      	sbcs	r0, r0
 800254c:	4240      	negs	r0, r0
 800254e:	4681      	mov	r9, r0
 8002550:	0030      	movs	r0, r6
 8002552:	464e      	mov	r6, r9
 8002554:	1b80      	subs	r0, r0, r6
 8002556:	4681      	mov	r9, r0
 8002558:	0200      	lsls	r0, r0, #8
 800255a:	d476      	bmi.n	800264a <__aeabi_dsub+0x4f2>
 800255c:	464b      	mov	r3, r9
 800255e:	4323      	orrs	r3, r4
 8002560:	d000      	beq.n	8002564 <__aeabi_dsub+0x40c>
 8002562:	e652      	b.n	800220a <__aeabi_dsub+0xb2>
 8002564:	2400      	movs	r4, #0
 8002566:	2500      	movs	r5, #0
 8002568:	e771      	b.n	800244e <__aeabi_dsub+0x2f6>
 800256a:	4339      	orrs	r1, r7
 800256c:	000c      	movs	r4, r1
 800256e:	1e62      	subs	r2, r4, #1
 8002570:	4194      	sbcs	r4, r2
 8002572:	18e4      	adds	r4, r4, r3
 8002574:	429c      	cmp	r4, r3
 8002576:	419b      	sbcs	r3, r3
 8002578:	425b      	negs	r3, r3
 800257a:	4463      	add	r3, ip
 800257c:	4699      	mov	r9, r3
 800257e:	464b      	mov	r3, r9
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	d400      	bmi.n	8002586 <__aeabi_dsub+0x42e>
 8002584:	e756      	b.n	8002434 <__aeabi_dsub+0x2dc>
 8002586:	2301      	movs	r3, #1
 8002588:	469c      	mov	ip, r3
 800258a:	4ba8      	ldr	r3, [pc, #672]	; (800282c <__aeabi_dsub+0x6d4>)
 800258c:	44e0      	add	r8, ip
 800258e:	4598      	cmp	r8, r3
 8002590:	d038      	beq.n	8002604 <__aeabi_dsub+0x4ac>
 8002592:	464b      	mov	r3, r9
 8002594:	48a6      	ldr	r0, [pc, #664]	; (8002830 <__aeabi_dsub+0x6d8>)
 8002596:	2201      	movs	r2, #1
 8002598:	4003      	ands	r3, r0
 800259a:	0018      	movs	r0, r3
 800259c:	0863      	lsrs	r3, r4, #1
 800259e:	4014      	ands	r4, r2
 80025a0:	431c      	orrs	r4, r3
 80025a2:	07c3      	lsls	r3, r0, #31
 80025a4:	431c      	orrs	r4, r3
 80025a6:	0843      	lsrs	r3, r0, #1
 80025a8:	4699      	mov	r9, r3
 80025aa:	e657      	b.n	800225c <__aeabi_dsub+0x104>
 80025ac:	0010      	movs	r0, r2
 80025ae:	000e      	movs	r6, r1
 80025b0:	3820      	subs	r0, #32
 80025b2:	40c6      	lsrs	r6, r0
 80025b4:	2a20      	cmp	r2, #32
 80025b6:	d004      	beq.n	80025c2 <__aeabi_dsub+0x46a>
 80025b8:	2040      	movs	r0, #64	; 0x40
 80025ba:	1a82      	subs	r2, r0, r2
 80025bc:	4091      	lsls	r1, r2
 80025be:	430f      	orrs	r7, r1
 80025c0:	46b9      	mov	r9, r7
 80025c2:	464f      	mov	r7, r9
 80025c4:	1e7a      	subs	r2, r7, #1
 80025c6:	4197      	sbcs	r7, r2
 80025c8:	4337      	orrs	r7, r6
 80025ca:	e60f      	b.n	80021ec <__aeabi_dsub+0x94>
 80025cc:	4662      	mov	r2, ip
 80025ce:	431a      	orrs	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	4193      	sbcs	r3, r2
 80025d6:	1afc      	subs	r4, r7, r3
 80025d8:	42a7      	cmp	r7, r4
 80025da:	41bf      	sbcs	r7, r7
 80025dc:	427f      	negs	r7, r7
 80025de:	1bcb      	subs	r3, r1, r7
 80025e0:	4699      	mov	r9, r3
 80025e2:	465d      	mov	r5, fp
 80025e4:	4680      	mov	r8, r0
 80025e6:	e608      	b.n	80021fa <__aeabi_dsub+0xa2>
 80025e8:	4666      	mov	r6, ip
 80025ea:	431e      	orrs	r6, r3
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x498>
 80025ee:	e0be      	b.n	800276e <__aeabi_dsub+0x616>
 80025f0:	1e56      	subs	r6, r2, #1
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x4a0>
 80025f6:	e109      	b.n	800280c <__aeabi_dsub+0x6b4>
 80025f8:	4c8c      	ldr	r4, [pc, #560]	; (800282c <__aeabi_dsub+0x6d4>)
 80025fa:	42a2      	cmp	r2, r4
 80025fc:	d100      	bne.n	8002600 <__aeabi_dsub+0x4a8>
 80025fe:	e119      	b.n	8002834 <__aeabi_dsub+0x6dc>
 8002600:	0032      	movs	r2, r6
 8002602:	e6c1      	b.n	8002388 <__aeabi_dsub+0x230>
 8002604:	4642      	mov	r2, r8
 8002606:	2400      	movs	r4, #0
 8002608:	2300      	movs	r3, #0
 800260a:	e648      	b.n	800229e <__aeabi_dsub+0x146>
 800260c:	2020      	movs	r0, #32
 800260e:	000c      	movs	r4, r1
 8002610:	1a80      	subs	r0, r0, r2
 8002612:	003e      	movs	r6, r7
 8002614:	4087      	lsls	r7, r0
 8002616:	4084      	lsls	r4, r0
 8002618:	40d6      	lsrs	r6, r2
 800261a:	1e78      	subs	r0, r7, #1
 800261c:	4187      	sbcs	r7, r0
 800261e:	40d1      	lsrs	r1, r2
 8002620:	4334      	orrs	r4, r6
 8002622:	433c      	orrs	r4, r7
 8002624:	448c      	add	ip, r1
 8002626:	e7a4      	b.n	8002572 <__aeabi_dsub+0x41a>
 8002628:	4a80      	ldr	r2, [pc, #512]	; (800282c <__aeabi_dsub+0x6d4>)
 800262a:	4290      	cmp	r0, r2
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x4d8>
 800262e:	e0e9      	b.n	8002804 <__aeabi_dsub+0x6ac>
 8002630:	19df      	adds	r7, r3, r7
 8002632:	429f      	cmp	r7, r3
 8002634:	419b      	sbcs	r3, r3
 8002636:	4461      	add	r1, ip
 8002638:	425b      	negs	r3, r3
 800263a:	18c9      	adds	r1, r1, r3
 800263c:	07cc      	lsls	r4, r1, #31
 800263e:	087f      	lsrs	r7, r7, #1
 8002640:	084b      	lsrs	r3, r1, #1
 8002642:	4699      	mov	r9, r3
 8002644:	4680      	mov	r8, r0
 8002646:	433c      	orrs	r4, r7
 8002648:	e6f4      	b.n	8002434 <__aeabi_dsub+0x2dc>
 800264a:	1afc      	subs	r4, r7, r3
 800264c:	42a7      	cmp	r7, r4
 800264e:	41bf      	sbcs	r7, r7
 8002650:	4663      	mov	r3, ip
 8002652:	427f      	negs	r7, r7
 8002654:	1ac9      	subs	r1, r1, r3
 8002656:	1bcb      	subs	r3, r1, r7
 8002658:	4699      	mov	r9, r3
 800265a:	465d      	mov	r5, fp
 800265c:	e5d5      	b.n	800220a <__aeabi_dsub+0xb2>
 800265e:	08ff      	lsrs	r7, r7, #3
 8002660:	074b      	lsls	r3, r1, #29
 8002662:	465d      	mov	r5, fp
 8002664:	433b      	orrs	r3, r7
 8002666:	08cc      	lsrs	r4, r1, #3
 8002668:	e6ee      	b.n	8002448 <__aeabi_dsub+0x2f0>
 800266a:	4662      	mov	r2, ip
 800266c:	431a      	orrs	r2, r3
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x51a>
 8002670:	e082      	b.n	8002778 <__aeabi_dsub+0x620>
 8002672:	000b      	movs	r3, r1
 8002674:	433b      	orrs	r3, r7
 8002676:	d11b      	bne.n	80026b0 <__aeabi_dsub+0x558>
 8002678:	2480      	movs	r4, #128	; 0x80
 800267a:	2500      	movs	r5, #0
 800267c:	0324      	lsls	r4, r4, #12
 800267e:	e6f9      	b.n	8002474 <__aeabi_dsub+0x31c>
 8002680:	19dc      	adds	r4, r3, r7
 8002682:	429c      	cmp	r4, r3
 8002684:	419b      	sbcs	r3, r3
 8002686:	4461      	add	r1, ip
 8002688:	4689      	mov	r9, r1
 800268a:	425b      	negs	r3, r3
 800268c:	4499      	add	r9, r3
 800268e:	464b      	mov	r3, r9
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	d444      	bmi.n	800271e <__aeabi_dsub+0x5c6>
 8002694:	2301      	movs	r3, #1
 8002696:	4698      	mov	r8, r3
 8002698:	e6cc      	b.n	8002434 <__aeabi_dsub+0x2dc>
 800269a:	1bdc      	subs	r4, r3, r7
 800269c:	4662      	mov	r2, ip
 800269e:	42a3      	cmp	r3, r4
 80026a0:	419b      	sbcs	r3, r3
 80026a2:	1a51      	subs	r1, r2, r1
 80026a4:	425b      	negs	r3, r3
 80026a6:	1acb      	subs	r3, r1, r3
 80026a8:	4699      	mov	r9, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	4698      	mov	r8, r3
 80026ae:	e5a4      	b.n	80021fa <__aeabi_dsub+0xa2>
 80026b0:	08ff      	lsrs	r7, r7, #3
 80026b2:	074b      	lsls	r3, r1, #29
 80026b4:	465d      	mov	r5, fp
 80026b6:	433b      	orrs	r3, r7
 80026b8:	08cc      	lsrs	r4, r1, #3
 80026ba:	e6d7      	b.n	800246c <__aeabi_dsub+0x314>
 80026bc:	4662      	mov	r2, ip
 80026be:	431a      	orrs	r2, r3
 80026c0:	0014      	movs	r4, r2
 80026c2:	1e63      	subs	r3, r4, #1
 80026c4:	419c      	sbcs	r4, r3
 80026c6:	e679      	b.n	80023bc <__aeabi_dsub+0x264>
 80026c8:	0015      	movs	r5, r2
 80026ca:	4664      	mov	r4, ip
 80026cc:	3d20      	subs	r5, #32
 80026ce:	40ec      	lsrs	r4, r5
 80026d0:	46a0      	mov	r8, r4
 80026d2:	2a20      	cmp	r2, #32
 80026d4:	d005      	beq.n	80026e2 <__aeabi_dsub+0x58a>
 80026d6:	2540      	movs	r5, #64	; 0x40
 80026d8:	4664      	mov	r4, ip
 80026da:	1aaa      	subs	r2, r5, r2
 80026dc:	4094      	lsls	r4, r2
 80026de:	4323      	orrs	r3, r4
 80026e0:	469a      	mov	sl, r3
 80026e2:	4654      	mov	r4, sl
 80026e4:	1e63      	subs	r3, r4, #1
 80026e6:	419c      	sbcs	r4, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	4323      	orrs	r3, r4
 80026ec:	e773      	b.n	80025d6 <__aeabi_dsub+0x47e>
 80026ee:	4662      	mov	r2, ip
 80026f0:	431a      	orrs	r2, r3
 80026f2:	d023      	beq.n	800273c <__aeabi_dsub+0x5e4>
 80026f4:	000a      	movs	r2, r1
 80026f6:	433a      	orrs	r2, r7
 80026f8:	d000      	beq.n	80026fc <__aeabi_dsub+0x5a4>
 80026fa:	e0a0      	b.n	800283e <__aeabi_dsub+0x6e6>
 80026fc:	4662      	mov	r2, ip
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	0752      	lsls	r2, r2, #29
 8002702:	4313      	orrs	r3, r2
 8002704:	4662      	mov	r2, ip
 8002706:	08d4      	lsrs	r4, r2, #3
 8002708:	e6b0      	b.n	800246c <__aeabi_dsub+0x314>
 800270a:	000b      	movs	r3, r1
 800270c:	433b      	orrs	r3, r7
 800270e:	d100      	bne.n	8002712 <__aeabi_dsub+0x5ba>
 8002710:	e728      	b.n	8002564 <__aeabi_dsub+0x40c>
 8002712:	08ff      	lsrs	r7, r7, #3
 8002714:	074b      	lsls	r3, r1, #29
 8002716:	465d      	mov	r5, fp
 8002718:	433b      	orrs	r3, r7
 800271a:	08cc      	lsrs	r4, r1, #3
 800271c:	e697      	b.n	800244e <__aeabi_dsub+0x2f6>
 800271e:	2302      	movs	r3, #2
 8002720:	4698      	mov	r8, r3
 8002722:	e736      	b.n	8002592 <__aeabi_dsub+0x43a>
 8002724:	1afc      	subs	r4, r7, r3
 8002726:	42a7      	cmp	r7, r4
 8002728:	41bf      	sbcs	r7, r7
 800272a:	4663      	mov	r3, ip
 800272c:	427f      	negs	r7, r7
 800272e:	1ac9      	subs	r1, r1, r3
 8002730:	1bcb      	subs	r3, r1, r7
 8002732:	4699      	mov	r9, r3
 8002734:	2301      	movs	r3, #1
 8002736:	465d      	mov	r5, fp
 8002738:	4698      	mov	r8, r3
 800273a:	e55e      	b.n	80021fa <__aeabi_dsub+0xa2>
 800273c:	074b      	lsls	r3, r1, #29
 800273e:	08ff      	lsrs	r7, r7, #3
 8002740:	433b      	orrs	r3, r7
 8002742:	08cc      	lsrs	r4, r1, #3
 8002744:	e692      	b.n	800246c <__aeabi_dsub+0x314>
 8002746:	1bdc      	subs	r4, r3, r7
 8002748:	4660      	mov	r0, ip
 800274a:	42a3      	cmp	r3, r4
 800274c:	41b6      	sbcs	r6, r6
 800274e:	1a40      	subs	r0, r0, r1
 8002750:	4276      	negs	r6, r6
 8002752:	1b80      	subs	r0, r0, r6
 8002754:	4681      	mov	r9, r0
 8002756:	0200      	lsls	r0, r0, #8
 8002758:	d560      	bpl.n	800281c <__aeabi_dsub+0x6c4>
 800275a:	1afc      	subs	r4, r7, r3
 800275c:	42a7      	cmp	r7, r4
 800275e:	41bf      	sbcs	r7, r7
 8002760:	4663      	mov	r3, ip
 8002762:	427f      	negs	r7, r7
 8002764:	1ac9      	subs	r1, r1, r3
 8002766:	1bcb      	subs	r3, r1, r7
 8002768:	4699      	mov	r9, r3
 800276a:	465d      	mov	r5, fp
 800276c:	e576      	b.n	800225c <__aeabi_dsub+0x104>
 800276e:	08ff      	lsrs	r7, r7, #3
 8002770:	074b      	lsls	r3, r1, #29
 8002772:	433b      	orrs	r3, r7
 8002774:	08cc      	lsrs	r4, r1, #3
 8002776:	e667      	b.n	8002448 <__aeabi_dsub+0x2f0>
 8002778:	000a      	movs	r2, r1
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	433a      	orrs	r2, r7
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x62a>
 8002780:	e66f      	b.n	8002462 <__aeabi_dsub+0x30a>
 8002782:	4662      	mov	r2, ip
 8002784:	0752      	lsls	r2, r2, #29
 8002786:	4313      	orrs	r3, r2
 8002788:	4662      	mov	r2, ip
 800278a:	08d4      	lsrs	r4, r2, #3
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0312      	lsls	r2, r2, #12
 8002790:	4214      	tst	r4, r2
 8002792:	d007      	beq.n	80027a4 <__aeabi_dsub+0x64c>
 8002794:	08c8      	lsrs	r0, r1, #3
 8002796:	4210      	tst	r0, r2
 8002798:	d104      	bne.n	80027a4 <__aeabi_dsub+0x64c>
 800279a:	465d      	mov	r5, fp
 800279c:	0004      	movs	r4, r0
 800279e:	08fb      	lsrs	r3, r7, #3
 80027a0:	0749      	lsls	r1, r1, #29
 80027a2:	430b      	orrs	r3, r1
 80027a4:	0f5a      	lsrs	r2, r3, #29
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	0752      	lsls	r2, r2, #29
 80027ac:	4313      	orrs	r3, r2
 80027ae:	e65d      	b.n	800246c <__aeabi_dsub+0x314>
 80027b0:	074b      	lsls	r3, r1, #29
 80027b2:	08ff      	lsrs	r7, r7, #3
 80027b4:	433b      	orrs	r3, r7
 80027b6:	08cc      	lsrs	r4, r1, #3
 80027b8:	e649      	b.n	800244e <__aeabi_dsub+0x2f6>
 80027ba:	19dc      	adds	r4, r3, r7
 80027bc:	429c      	cmp	r4, r3
 80027be:	419b      	sbcs	r3, r3
 80027c0:	4461      	add	r1, ip
 80027c2:	4689      	mov	r9, r1
 80027c4:	425b      	negs	r3, r3
 80027c6:	4499      	add	r9, r3
 80027c8:	464b      	mov	r3, r9
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	d400      	bmi.n	80027d0 <__aeabi_dsub+0x678>
 80027ce:	e631      	b.n	8002434 <__aeabi_dsub+0x2dc>
 80027d0:	464a      	mov	r2, r9
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <__aeabi_dsub+0x6d8>)
 80027d4:	401a      	ands	r2, r3
 80027d6:	2301      	movs	r3, #1
 80027d8:	4691      	mov	r9, r2
 80027da:	4698      	mov	r8, r3
 80027dc:	e62a      	b.n	8002434 <__aeabi_dsub+0x2dc>
 80027de:	0016      	movs	r6, r2
 80027e0:	4664      	mov	r4, ip
 80027e2:	3e20      	subs	r6, #32
 80027e4:	40f4      	lsrs	r4, r6
 80027e6:	46a0      	mov	r8, r4
 80027e8:	2a20      	cmp	r2, #32
 80027ea:	d005      	beq.n	80027f8 <__aeabi_dsub+0x6a0>
 80027ec:	2640      	movs	r6, #64	; 0x40
 80027ee:	4664      	mov	r4, ip
 80027f0:	1ab2      	subs	r2, r6, r2
 80027f2:	4094      	lsls	r4, r2
 80027f4:	4323      	orrs	r3, r4
 80027f6:	469a      	mov	sl, r3
 80027f8:	4654      	mov	r4, sl
 80027fa:	1e63      	subs	r3, r4, #1
 80027fc:	419c      	sbcs	r4, r3
 80027fe:	4643      	mov	r3, r8
 8002800:	431c      	orrs	r4, r3
 8002802:	e5db      	b.n	80023bc <__aeabi_dsub+0x264>
 8002804:	0002      	movs	r2, r0
 8002806:	2400      	movs	r4, #0
 8002808:	2300      	movs	r3, #0
 800280a:	e548      	b.n	800229e <__aeabi_dsub+0x146>
 800280c:	19dc      	adds	r4, r3, r7
 800280e:	42bc      	cmp	r4, r7
 8002810:	41bf      	sbcs	r7, r7
 8002812:	4461      	add	r1, ip
 8002814:	4689      	mov	r9, r1
 8002816:	427f      	negs	r7, r7
 8002818:	44b9      	add	r9, r7
 800281a:	e738      	b.n	800268e <__aeabi_dsub+0x536>
 800281c:	464b      	mov	r3, r9
 800281e:	4323      	orrs	r3, r4
 8002820:	d100      	bne.n	8002824 <__aeabi_dsub+0x6cc>
 8002822:	e69f      	b.n	8002564 <__aeabi_dsub+0x40c>
 8002824:	e606      	b.n	8002434 <__aeabi_dsub+0x2dc>
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	000007fe 	.word	0x000007fe
 800282c:	000007ff 	.word	0x000007ff
 8002830:	ff7fffff 	.word	0xff7fffff
 8002834:	08ff      	lsrs	r7, r7, #3
 8002836:	074b      	lsls	r3, r1, #29
 8002838:	433b      	orrs	r3, r7
 800283a:	08cc      	lsrs	r4, r1, #3
 800283c:	e616      	b.n	800246c <__aeabi_dsub+0x314>
 800283e:	4662      	mov	r2, ip
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	0752      	lsls	r2, r2, #29
 8002844:	4313      	orrs	r3, r2
 8002846:	4662      	mov	r2, ip
 8002848:	08d4      	lsrs	r4, r2, #3
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0312      	lsls	r2, r2, #12
 800284e:	4214      	tst	r4, r2
 8002850:	d007      	beq.n	8002862 <__aeabi_dsub+0x70a>
 8002852:	08c8      	lsrs	r0, r1, #3
 8002854:	4210      	tst	r0, r2
 8002856:	d104      	bne.n	8002862 <__aeabi_dsub+0x70a>
 8002858:	465d      	mov	r5, fp
 800285a:	0004      	movs	r4, r0
 800285c:	08fb      	lsrs	r3, r7, #3
 800285e:	0749      	lsls	r1, r1, #29
 8002860:	430b      	orrs	r3, r1
 8002862:	0f5a      	lsrs	r2, r3, #29
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	0752      	lsls	r2, r2, #29
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	4313      	orrs	r3, r2
 800286c:	e5fe      	b.n	800246c <__aeabi_dsub+0x314>
 800286e:	2300      	movs	r3, #0
 8002870:	4a01      	ldr	r2, [pc, #4]	; (8002878 <__aeabi_dsub+0x720>)
 8002872:	001c      	movs	r4, r3
 8002874:	e513      	b.n	800229e <__aeabi_dsub+0x146>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	000007ff 	.word	0x000007ff

0800287c <__aeabi_dcmpun>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	0005      	movs	r5, r0
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <__aeabi_dcmpun+0x38>)
 8002882:	031c      	lsls	r4, r3, #12
 8002884:	0016      	movs	r6, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	030a      	lsls	r2, r1, #12
 800288a:	0049      	lsls	r1, r1, #1
 800288c:	0b12      	lsrs	r2, r2, #12
 800288e:	0d49      	lsrs	r1, r1, #21
 8002890:	0b24      	lsrs	r4, r4, #12
 8002892:	0d5b      	lsrs	r3, r3, #21
 8002894:	4281      	cmp	r1, r0
 8002896:	d008      	beq.n	80028aa <__aeabi_dcmpun+0x2e>
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <__aeabi_dcmpun+0x38>)
 800289a:	2000      	movs	r0, #0
 800289c:	4293      	cmp	r3, r2
 800289e:	d103      	bne.n	80028a8 <__aeabi_dcmpun+0x2c>
 80028a0:	0020      	movs	r0, r4
 80028a2:	4330      	orrs	r0, r6
 80028a4:	1e43      	subs	r3, r0, #1
 80028a6:	4198      	sbcs	r0, r3
 80028a8:	bd70      	pop	{r4, r5, r6, pc}
 80028aa:	2001      	movs	r0, #1
 80028ac:	432a      	orrs	r2, r5
 80028ae:	d1fb      	bne.n	80028a8 <__aeabi_dcmpun+0x2c>
 80028b0:	e7f2      	b.n	8002898 <__aeabi_dcmpun+0x1c>
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	000007ff 	.word	0x000007ff

080028b8 <__aeabi_i2d>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d016      	beq.n	80028ec <__aeabi_i2d+0x34>
 80028be:	17c3      	asrs	r3, r0, #31
 80028c0:	18c5      	adds	r5, r0, r3
 80028c2:	405d      	eors	r5, r3
 80028c4:	0fc4      	lsrs	r4, r0, #31
 80028c6:	0028      	movs	r0, r5
 80028c8:	f000 f8f6 	bl	8002ab8 <__clzsi2>
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <__aeabi_i2d+0x5c>)
 80028ce:	1a12      	subs	r2, r2, r0
 80028d0:	280a      	cmp	r0, #10
 80028d2:	dc16      	bgt.n	8002902 <__aeabi_i2d+0x4a>
 80028d4:	0003      	movs	r3, r0
 80028d6:	002e      	movs	r6, r5
 80028d8:	3315      	adds	r3, #21
 80028da:	409e      	lsls	r6, r3
 80028dc:	230b      	movs	r3, #11
 80028de:	1a18      	subs	r0, r3, r0
 80028e0:	40c5      	lsrs	r5, r0
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	032d      	lsls	r5, r5, #12
 80028e6:	0b2d      	lsrs	r5, r5, #12
 80028e8:	0d53      	lsrs	r3, r2, #21
 80028ea:	e003      	b.n	80028f4 <__aeabi_i2d+0x3c>
 80028ec:	2400      	movs	r4, #0
 80028ee:	2300      	movs	r3, #0
 80028f0:	2500      	movs	r5, #0
 80028f2:	2600      	movs	r6, #0
 80028f4:	051b      	lsls	r3, r3, #20
 80028f6:	432b      	orrs	r3, r5
 80028f8:	07e4      	lsls	r4, r4, #31
 80028fa:	4323      	orrs	r3, r4
 80028fc:	0030      	movs	r0, r6
 80028fe:	0019      	movs	r1, r3
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	380b      	subs	r0, #11
 8002904:	4085      	lsls	r5, r0
 8002906:	0552      	lsls	r2, r2, #21
 8002908:	032d      	lsls	r5, r5, #12
 800290a:	2600      	movs	r6, #0
 800290c:	0b2d      	lsrs	r5, r5, #12
 800290e:	0d53      	lsrs	r3, r2, #21
 8002910:	e7f0      	b.n	80028f4 <__aeabi_i2d+0x3c>
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	0000041e 	.word	0x0000041e

08002918 <__aeabi_f2d>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	0043      	lsls	r3, r0, #1
 800291c:	0246      	lsls	r6, r0, #9
 800291e:	0fc4      	lsrs	r4, r0, #31
 8002920:	20fe      	movs	r0, #254	; 0xfe
 8002922:	0e1b      	lsrs	r3, r3, #24
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	0a75      	lsrs	r5, r6, #9
 8002928:	4208      	tst	r0, r1
 800292a:	d00c      	beq.n	8002946 <__aeabi_f2d+0x2e>
 800292c:	22e0      	movs	r2, #224	; 0xe0
 800292e:	0092      	lsls	r2, r2, #2
 8002930:	4694      	mov	ip, r2
 8002932:	076d      	lsls	r5, r5, #29
 8002934:	0b36      	lsrs	r6, r6, #12
 8002936:	4463      	add	r3, ip
 8002938:	051b      	lsls	r3, r3, #20
 800293a:	4333      	orrs	r3, r6
 800293c:	07e4      	lsls	r4, r4, #31
 800293e:	4323      	orrs	r3, r4
 8002940:	0028      	movs	r0, r5
 8002942:	0019      	movs	r1, r3
 8002944:	bd70      	pop	{r4, r5, r6, pc}
 8002946:	2b00      	cmp	r3, #0
 8002948:	d114      	bne.n	8002974 <__aeabi_f2d+0x5c>
 800294a:	2d00      	cmp	r5, #0
 800294c:	d01b      	beq.n	8002986 <__aeabi_f2d+0x6e>
 800294e:	0028      	movs	r0, r5
 8002950:	f000 f8b2 	bl	8002ab8 <__clzsi2>
 8002954:	280a      	cmp	r0, #10
 8002956:	dc1c      	bgt.n	8002992 <__aeabi_f2d+0x7a>
 8002958:	230b      	movs	r3, #11
 800295a:	002e      	movs	r6, r5
 800295c:	1a1b      	subs	r3, r3, r0
 800295e:	40de      	lsrs	r6, r3
 8002960:	0003      	movs	r3, r0
 8002962:	3315      	adds	r3, #21
 8002964:	409d      	lsls	r5, r3
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <__aeabi_f2d+0x88>)
 8002968:	0336      	lsls	r6, r6, #12
 800296a:	1a12      	subs	r2, r2, r0
 800296c:	0552      	lsls	r2, r2, #21
 800296e:	0b36      	lsrs	r6, r6, #12
 8002970:	0d53      	lsrs	r3, r2, #21
 8002972:	e7e1      	b.n	8002938 <__aeabi_f2d+0x20>
 8002974:	2d00      	cmp	r5, #0
 8002976:	d009      	beq.n	800298c <__aeabi_f2d+0x74>
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0b36      	lsrs	r6, r6, #12
 800297c:	0312      	lsls	r2, r2, #12
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <__aeabi_f2d+0x8c>)
 8002980:	076d      	lsls	r5, r5, #29
 8002982:	4316      	orrs	r6, r2
 8002984:	e7d8      	b.n	8002938 <__aeabi_f2d+0x20>
 8002986:	2300      	movs	r3, #0
 8002988:	2600      	movs	r6, #0
 800298a:	e7d5      	b.n	8002938 <__aeabi_f2d+0x20>
 800298c:	2600      	movs	r6, #0
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <__aeabi_f2d+0x8c>)
 8002990:	e7d2      	b.n	8002938 <__aeabi_f2d+0x20>
 8002992:	0003      	movs	r3, r0
 8002994:	3b0b      	subs	r3, #11
 8002996:	409d      	lsls	r5, r3
 8002998:	002e      	movs	r6, r5
 800299a:	2500      	movs	r5, #0
 800299c:	e7e3      	b.n	8002966 <__aeabi_f2d+0x4e>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	00000389 	.word	0x00000389
 80029a4:	000007ff 	.word	0x000007ff

080029a8 <__aeabi_d2f>:
 80029a8:	0002      	movs	r2, r0
 80029aa:	004b      	lsls	r3, r1, #1
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	0d5b      	lsrs	r3, r3, #21
 80029b0:	030c      	lsls	r4, r1, #12
 80029b2:	4e3d      	ldr	r6, [pc, #244]	; (8002aa8 <__aeabi_d2f+0x100>)
 80029b4:	0a64      	lsrs	r4, r4, #9
 80029b6:	0f40      	lsrs	r0, r0, #29
 80029b8:	1c5f      	adds	r7, r3, #1
 80029ba:	0fc9      	lsrs	r1, r1, #31
 80029bc:	4304      	orrs	r4, r0
 80029be:	00d5      	lsls	r5, r2, #3
 80029c0:	4237      	tst	r7, r6
 80029c2:	d00a      	beq.n	80029da <__aeabi_d2f+0x32>
 80029c4:	4839      	ldr	r0, [pc, #228]	; (8002aac <__aeabi_d2f+0x104>)
 80029c6:	181e      	adds	r6, r3, r0
 80029c8:	2efe      	cmp	r6, #254	; 0xfe
 80029ca:	dd16      	ble.n	80029fa <__aeabi_d2f+0x52>
 80029cc:	20ff      	movs	r0, #255	; 0xff
 80029ce:	2400      	movs	r4, #0
 80029d0:	05c0      	lsls	r0, r0, #23
 80029d2:	4320      	orrs	r0, r4
 80029d4:	07c9      	lsls	r1, r1, #31
 80029d6:	4308      	orrs	r0, r1
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <__aeabi_d2f+0x44>
 80029de:	432c      	orrs	r4, r5
 80029e0:	d026      	beq.n	8002a30 <__aeabi_d2f+0x88>
 80029e2:	2205      	movs	r2, #5
 80029e4:	0192      	lsls	r2, r2, #6
 80029e6:	0a54      	lsrs	r4, r2, #9
 80029e8:	b2d8      	uxtb	r0, r3
 80029ea:	e7f1      	b.n	80029d0 <__aeabi_d2f+0x28>
 80029ec:	4325      	orrs	r5, r4
 80029ee:	d0ed      	beq.n	80029cc <__aeabi_d2f+0x24>
 80029f0:	2080      	movs	r0, #128	; 0x80
 80029f2:	03c0      	lsls	r0, r0, #15
 80029f4:	4304      	orrs	r4, r0
 80029f6:	20ff      	movs	r0, #255	; 0xff
 80029f8:	e7ea      	b.n	80029d0 <__aeabi_d2f+0x28>
 80029fa:	2e00      	cmp	r6, #0
 80029fc:	dd1b      	ble.n	8002a36 <__aeabi_d2f+0x8e>
 80029fe:	0192      	lsls	r2, r2, #6
 8002a00:	1e53      	subs	r3, r2, #1
 8002a02:	419a      	sbcs	r2, r3
 8002a04:	00e4      	lsls	r4, r4, #3
 8002a06:	0f6d      	lsrs	r5, r5, #29
 8002a08:	4322      	orrs	r2, r4
 8002a0a:	432a      	orrs	r2, r5
 8002a0c:	0753      	lsls	r3, r2, #29
 8002a0e:	d048      	beq.n	8002aa2 <__aeabi_d2f+0xfa>
 8002a10:	230f      	movs	r3, #15
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d000      	beq.n	8002a1a <__aeabi_d2f+0x72>
 8002a18:	3204      	adds	r2, #4
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	04db      	lsls	r3, r3, #19
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d03f      	beq.n	8002aa2 <__aeabi_d2f+0xfa>
 8002a22:	1c70      	adds	r0, r6, #1
 8002a24:	2efe      	cmp	r6, #254	; 0xfe
 8002a26:	d0d1      	beq.n	80029cc <__aeabi_d2f+0x24>
 8002a28:	0192      	lsls	r2, r2, #6
 8002a2a:	0a54      	lsrs	r4, r2, #9
 8002a2c:	b2c0      	uxtb	r0, r0
 8002a2e:	e7cf      	b.n	80029d0 <__aeabi_d2f+0x28>
 8002a30:	2000      	movs	r0, #0
 8002a32:	2400      	movs	r4, #0
 8002a34:	e7cc      	b.n	80029d0 <__aeabi_d2f+0x28>
 8002a36:	0032      	movs	r2, r6
 8002a38:	3217      	adds	r2, #23
 8002a3a:	db22      	blt.n	8002a82 <__aeabi_d2f+0xda>
 8002a3c:	2080      	movs	r0, #128	; 0x80
 8002a3e:	0400      	lsls	r0, r0, #16
 8002a40:	4320      	orrs	r0, r4
 8002a42:	241e      	movs	r4, #30
 8002a44:	1ba4      	subs	r4, r4, r6
 8002a46:	2c1f      	cmp	r4, #31
 8002a48:	dd1d      	ble.n	8002a86 <__aeabi_d2f+0xde>
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4252      	negs	r2, r2
 8002a4e:	1b96      	subs	r6, r2, r6
 8002a50:	0002      	movs	r2, r0
 8002a52:	40f2      	lsrs	r2, r6
 8002a54:	0016      	movs	r6, r2
 8002a56:	2c20      	cmp	r4, #32
 8002a58:	d004      	beq.n	8002a64 <__aeabi_d2f+0xbc>
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <__aeabi_d2f+0x108>)
 8002a5c:	4694      	mov	ip, r2
 8002a5e:	4463      	add	r3, ip
 8002a60:	4098      	lsls	r0, r3
 8002a62:	4305      	orrs	r5, r0
 8002a64:	002a      	movs	r2, r5
 8002a66:	1e53      	subs	r3, r2, #1
 8002a68:	419a      	sbcs	r2, r3
 8002a6a:	4332      	orrs	r2, r6
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	0753      	lsls	r3, r2, #29
 8002a70:	d1ce      	bne.n	8002a10 <__aeabi_d2f+0x68>
 8002a72:	2480      	movs	r4, #128	; 0x80
 8002a74:	0013      	movs	r3, r2
 8002a76:	04e4      	lsls	r4, r4, #19
 8002a78:	2001      	movs	r0, #1
 8002a7a:	4023      	ands	r3, r4
 8002a7c:	4222      	tst	r2, r4
 8002a7e:	d1d3      	bne.n	8002a28 <__aeabi_d2f+0x80>
 8002a80:	e7b0      	b.n	80029e4 <__aeabi_d2f+0x3c>
 8002a82:	2300      	movs	r3, #0
 8002a84:	e7ad      	b.n	80029e2 <__aeabi_d2f+0x3a>
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <__aeabi_d2f+0x10c>)
 8002a88:	4694      	mov	ip, r2
 8002a8a:	002a      	movs	r2, r5
 8002a8c:	40e2      	lsrs	r2, r4
 8002a8e:	0014      	movs	r4, r2
 8002a90:	002a      	movs	r2, r5
 8002a92:	4463      	add	r3, ip
 8002a94:	409a      	lsls	r2, r3
 8002a96:	4098      	lsls	r0, r3
 8002a98:	1e55      	subs	r5, r2, #1
 8002a9a:	41aa      	sbcs	r2, r5
 8002a9c:	4302      	orrs	r2, r0
 8002a9e:	4322      	orrs	r2, r4
 8002aa0:	e7e4      	b.n	8002a6c <__aeabi_d2f+0xc4>
 8002aa2:	0033      	movs	r3, r6
 8002aa4:	e79e      	b.n	80029e4 <__aeabi_d2f+0x3c>
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	000007fe 	.word	0x000007fe
 8002aac:	fffffc80 	.word	0xfffffc80
 8002ab0:	fffffca2 	.word	0xfffffca2
 8002ab4:	fffffc82 	.word	0xfffffc82

08002ab8 <__clzsi2>:
 8002ab8:	211c      	movs	r1, #28
 8002aba:	2301      	movs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	d301      	bcc.n	8002ac6 <__clzsi2+0xe>
 8002ac2:	0c00      	lsrs	r0, r0, #16
 8002ac4:	3910      	subs	r1, #16
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	4298      	cmp	r0, r3
 8002aca:	d301      	bcc.n	8002ad0 <__clzsi2+0x18>
 8002acc:	0a00      	lsrs	r0, r0, #8
 8002ace:	3908      	subs	r1, #8
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	4298      	cmp	r0, r3
 8002ad4:	d301      	bcc.n	8002ada <__clzsi2+0x22>
 8002ad6:	0900      	lsrs	r0, r0, #4
 8002ad8:	3904      	subs	r1, #4
 8002ada:	a202      	add	r2, pc, #8	; (adr r2, 8002ae4 <__clzsi2+0x2c>)
 8002adc:	5c10      	ldrb	r0, [r2, r0]
 8002ade:	1840      	adds	r0, r0, r1
 8002ae0:	4770      	bx	lr
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	02020304 	.word	0x02020304
 8002ae8:	01010101 	.word	0x01010101
	...

08002af4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	0349      	lsls	r1, r1, #13
 8002b04:	430a      	orrs	r2, r1
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	035b      	lsls	r3, r3, #13
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0289      	lsls	r1, r1, #10
 8002b20:	430a      	orrs	r2, r1
 8002b22:	615a      	str	r2, [r3, #20]
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	02c9      	lsls	r1, r1, #11
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	615a      	str	r2, [r3, #20]
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <MX_GPIO_Init+0x64>)
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	02db      	lsls	r3, r3, #11
 8002b48:	4013      	ands	r3, r2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000

08002b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <MX_I2C1_Init+0x78>)
 8002b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <MX_I2C1_Init+0x7c>)
 8002b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b7e:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f002 f9e7 	bl	8004f6c <HAL_I2C_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ba2:	f000 f92d 	bl	8002e00 <Error_Handler>
  }

  /** Configure Analogue filter HAL_I2C_MspInit
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	0018      	movs	r0, r3
 8002bac:	f002 ff28 	bl	8005a00 <HAL_I2CEx_ConfigAnalogFilter>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bb4:	f000 f924 	bl	8002e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <MX_I2C1_Init+0x74>)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f002 ff6b 	bl	8005a98 <HAL_I2CEx_ConfigDigitalFilter>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bc6:	f000 f91b 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200000e8 	.word	0x200000e8
 8002bd4:	40005400 	.word	0x40005400
 8002bd8:	2000090e 	.word	0x2000090e

08002bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	2414      	movs	r4, #20
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	0018      	movs	r0, r3
 8002bea:	2314      	movs	r3, #20
 8002bec:	001a      	movs	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f004 f92c 	bl	8006e4c <memset>
  if(hi2c->Instance==I2C1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_I2C_MspInit+0x90>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d131      	bne.n	8002c62 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	02c9      	lsls	r1, r1, #11
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	02db      	lsls	r3, r3, #11
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c1a:	0021      	movs	r1, r4
 8002c1c:	187b      	adds	r3, r7, r1
 8002c1e:	22c0      	movs	r2, #192	; 0xc0
 8002c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	2212      	movs	r2, #18
 8002c26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2203      	movs	r2, #3
 8002c32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2201      	movs	r2, #1
 8002c38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_I2C_MspInit+0x98>)
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f002 f823 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0389      	lsls	r1, r1, #14
 8002c50:	430a      	orrs	r2, r1
 8002c52:	61da      	str	r2, [r3, #28]
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_I2C_MspInit+0x94>)
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	039b      	lsls	r3, r3, #14
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b00b      	add	sp, #44	; 0x2c
 8002c68:	bd90      	pop	{r4, r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	40005400 	.word	0x40005400
 8002c70:	40021000 	.word	0x40021000
 8002c74:	48000400 	.word	0x48000400

08002c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7a:	46d6      	mov	lr, sl
 8002c7c:	464f      	mov	r7, r9
 8002c7e:	4646      	mov	r6, r8
 8002c80:	b5c0      	push	{r6, r7, lr}
 8002c82:	b098      	sub	sp, #96	; 0x60
 8002c84:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c86:	f001 fec5 	bl	8004a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c8a:	f000 f85f 	bl	8002d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c8e:	f7ff ff31 	bl	8002af4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c92:	f7ff ff63 	bl	8002b5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002c96:	f000 f995 	bl	8002fc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  IMU_Init();
 8002c9a:	f000 fed1 	bl	8003a40 <IMU_Init>
  char buffer[60];
  #endif

  while (1)
  {
    IMU_GetQuater();
 8002c9e:	f001 fc73 	bl	8004588 <IMU_GetQuater>
		// DELAY READING FROM THE SENSOR FOR 500ms
		DEV_Delay_ms(500);
    }
    #else

	snprintf(buffer, sizeof(buffer), "%x,%x,%x,%x,%x,%x,%x,%x,%x", accel[0], accel[1], accel[2], gyro[0], gyro[1], gyro[2], magn[0], magn[1], magn[2]);
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <main+0xc0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca8:	469a      	mov	sl, r3
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <main+0xc0>)
 8002cac:	2202      	movs	r2, #2
 8002cae:	5e9b      	ldrsh	r3, [r3, r2]
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <main+0xc0>)
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cb8:	001c      	movs	r4, r3
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <main+0xc4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc0:	001d      	movs	r5, r3
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <main+0xc4>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc8:	001e      	movs	r6, r3
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <main+0xc4>)
 8002ccc:	2204      	movs	r2, #4
 8002cce:	5e9b      	ldrsh	r3, [r3, r2]
 8002cd0:	469c      	mov	ip, r3
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <main+0xc8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cd8:	4698      	mov	r8, r3
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <main+0xc8>)
 8002cdc:	2202      	movs	r2, #2
 8002cde:	5e9b      	ldrsh	r3, [r3, r2]
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <main+0xc8>)
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <main+0xcc>)
 8002cea:	1d38      	adds	r0, r7, #4
 8002cec:	9307      	str	r3, [sp, #28]
 8002cee:	464b      	mov	r3, r9
 8002cf0:	9306      	str	r3, [sp, #24]
 8002cf2:	4643      	mov	r3, r8
 8002cf4:	9305      	str	r3, [sp, #20]
 8002cf6:	4663      	mov	r3, ip
 8002cf8:	9304      	str	r3, [sp, #16]
 8002cfa:	9603      	str	r6, [sp, #12]
 8002cfc:	9502      	str	r5, [sp, #8]
 8002cfe:	9401      	str	r4, [sp, #4]
 8002d00:	9100      	str	r1, [sp, #0]
 8002d02:	4653      	mov	r3, sl
 8002d04:	213c      	movs	r1, #60	; 0x3c
 8002d06:	f004 fa33 	bl	8007170 <sniprintf>
	buffer[59] = '\n';
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	223b      	movs	r2, #59	; 0x3b
 8002d0e:	210a      	movs	r1, #10
 8002d10:	5499      	strb	r1, [r3, r2]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sizeof(buffer), 1000);
 8002d12:	23fa      	movs	r3, #250	; 0xfa
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	1d39      	adds	r1, r7, #4
 8002d18:	480b      	ldr	r0, [pc, #44]	; (8002d48 <main+0xd0>)
 8002d1a:	223c      	movs	r2, #60	; 0x3c
 8002d1c:	f003 fca6 	bl	800666c <HAL_UART_Transmit>
	memset(buffer, 0, sizeof(buffer));
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	223c      	movs	r2, #60	; 0x3c
 8002d24:	2100      	movs	r1, #0
 8002d26:	0018      	movs	r0, r3
 8002d28:	f004 f890 	bl	8006e4c <memset>

    // DELAY READING FROM THE SENSOR FOR 500ms
    DEV_Delay_ms(1000);
 8002d2c:	23fa      	movs	r3, #250	; 0xfa
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	0018      	movs	r0, r3
 8002d32:	f001 fed3 	bl	8004adc <HAL_Delay>
    IMU_GetQuater();
 8002d36:	e7b2      	b.n	8002c9e <main+0x26>
 8002d38:	2000013c 	.word	0x2000013c
 8002d3c:	20000144 	.word	0x20000144
 8002d40:	20000134 	.word	0x20000134
 8002d44:	0800846c 	.word	0x0800846c
 8002d48:	20000150 	.word	0x20000150

08002d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	b097      	sub	sp, #92	; 0x5c
 8002d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d52:	2428      	movs	r4, #40	; 0x28
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	0018      	movs	r0, r3
 8002d58:	2330      	movs	r3, #48	; 0x30
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f004 f875 	bl	8006e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d62:	2318      	movs	r3, #24
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	0018      	movs	r0, r3
 8002d68:	2310      	movs	r3, #16
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	f004 f86d 	bl	8006e4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	0018      	movs	r0, r3
 8002d76:	2314      	movs	r3, #20
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f004 f866 	bl	8006e4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d80:	0021      	movs	r1, r4
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2202      	movs	r2, #2
 8002d86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2210      	movs	r2, #16
 8002d92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f002 fec7 	bl	8005b30 <HAL_RCC_OscConfig>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002da6:	f000 f82b 	bl	8002e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002daa:	2118      	movs	r1, #24
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2207      	movs	r2, #7
 8002db0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f003 f9cb 	bl	8006164 <HAL_RCC_ClockConfig>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002dd2:	f000 f815 	bl	8002e00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	0018      	movs	r0, r3
 8002dec:	f003 fb0c 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002df4:	f000 f804 	bl	8002e00 <Error_Handler>
  }
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b017      	add	sp, #92	; 0x5c
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <Error_Handler+0x8>
	...

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_MspInit+0x44>)
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <HAL_MspInit+0x44>)
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	619a      	str	r2, [r3, #24]
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_MspInit+0x44>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2201      	movs	r2, #1
 8002e24:	4013      	ands	r3, r2
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_MspInit+0x44>)
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_MspInit+0x44>)
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	0549      	lsls	r1, r1, #21
 8002e34:	430a      	orrs	r2, r1
 8002e36:	61da      	str	r2, [r3, #28]
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_MspInit+0x44>)
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	055b      	lsls	r3, r3, #21
 8002e40:	4013      	ands	r3, r2
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40021000 	.word	0x40021000

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <NMI_Handler+0x4>

08002e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <HardFault_Handler+0x4>

08002e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e78:	f001 fe14 	bl	8004aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e00a      	b.n	8002eaa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e94:	e000      	b.n	8002e98 <_read+0x16>
 8002e96:	bf00      	nop
 8002e98:	0001      	movs	r1, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	60ba      	str	r2, [r7, #8]
 8002ea0:	b2ca      	uxtb	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dbf0      	blt.n	8002e94 <_read+0x12>
	}

return len;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b006      	add	sp, #24
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e009      	b.n	8002ee2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	60ba      	str	r2, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	e000      	b.n	8002edc <_write+0x20>
 8002eda:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dbf1      	blt.n	8002ece <_write+0x12>
	}
	return len;
 8002eea:	687b      	ldr	r3, [r7, #4]
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b006      	add	sp, #24
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_close>:

int _close(int file)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	return -1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	425b      	negs	r3, r3
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	0192      	lsls	r2, r2, #6
 8002f18:	605a      	str	r2, [r3, #4]
	return 0;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_isatty>:

int _isatty(int file)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
	return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f003 ff20 	bl	8006dc0 <__errno>
 8002f80:	0003      	movs	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	425b      	negs	r3, r3
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	18d2      	adds	r2, r2, r3
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20002000 	.word	0x20002000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	2000014c 	.word	0x2000014c
 8002fb4:	200002b0 	.word	0x200002b0

08002fb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <MX_USART1_UART_Init+0x5c>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fd0:	2296      	movs	r2, #150	; 0x96
 8002fd2:	0192      	lsls	r2, r2, #6
 8002fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <MX_USART1_UART_Init+0x58>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <MX_USART1_UART_Init+0x58>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <MX_USART1_UART_Init+0x58>)
 8003008:	0018      	movs	r0, r3
 800300a:	f003 fadb 	bl	80065c4 <HAL_UART_Init>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d001      	beq.n	8003016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003012:	f7ff fef5 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000150 	.word	0x20000150
 8003020:	40013800 	.word	0x40013800

08003024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b08b      	sub	sp, #44	; 0x2c
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	2414      	movs	r4, #20
 800302e:	193b      	adds	r3, r7, r4
 8003030:	0018      	movs	r0, r3
 8003032:	2314      	movs	r3, #20
 8003034:	001a      	movs	r2, r3
 8003036:	2100      	movs	r1, #0
 8003038:	f003 ff08 	bl	8006e4c <memset>
  if(huart->Instance==USART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_UART_MspInit+0x94>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d133      	bne.n	80030ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_UART_MspInit+0x98>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	01c9      	lsls	r1, r1, #7
 8003050:	430a      	orrs	r2, r1
 8003052:	619a      	str	r2, [r3, #24]
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	01db      	lsls	r3, r3, #7
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0289      	lsls	r1, r1, #10
 800306c:	430a      	orrs	r2, r1
 800306e:	615a      	str	r2, [r3, #20]
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_UART_MspInit+0x98>)
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	029b      	lsls	r3, r3, #10
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	22c0      	movs	r2, #192	; 0xc0
 8003082:	00d2      	lsls	r2, r2, #3
 8003084:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	0021      	movs	r1, r4
 8003088:	187b      	adds	r3, r7, r1
 800308a:	2202      	movs	r2, #2
 800308c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	187b      	adds	r3, r7, r1
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	187b      	adds	r3, r7, r1
 8003096:	2203      	movs	r2, #3
 8003098:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800309a:	187b      	adds	r3, r7, r1
 800309c:	2201      	movs	r2, #1
 800309e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	187a      	adds	r2, r7, r1
 80030a2:	2390      	movs	r3, #144	; 0x90
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	0011      	movs	r1, r2
 80030a8:	0018      	movs	r0, r3
 80030aa:	f001 fdef 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b00b      	add	sp, #44	; 0x2c
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40021000 	.word	0x40021000

080030c0 <DEV_I2C_WriteByte>:
/******************************************************************************
function:
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	0002      	movs	r2, r0
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	1c0a      	adds	r2, r1, #0
 80030d0:	701a      	strb	r2, [r3, #0]
	UBYTE Buf[1] = {0};
 80030d2:	240c      	movs	r4, #12
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	4a0d      	ldr	r2, [pc, #52]	; (800310c <DEV_I2C_WriteByte+0x4c>)
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	701a      	strb	r2, [r3, #0]
	Buf[0] = data_;
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	1dba      	adds	r2, r7, #6
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <DEV_I2C_WriteByte+0x50>)
 80030e6:	8819      	ldrh	r1, [r3, #0]
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4809      	ldr	r0, [pc, #36]	; (8003114 <DEV_I2C_WriteByte+0x54>)
 80030f0:	2310      	movs	r3, #16
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	2301      	movs	r3, #1
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2301      	movs	r3, #1
 80030fe:	f001 ffcb 	bl	8005098 <HAL_I2C_Mem_Write>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b005      	add	sp, #20
 8003108:	bd90      	pop	{r4, r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	08008488 	.word	0x08008488
 8003110:	20000004 	.word	0x20000004
 8003114:	200000e8 	.word	0x200000e8

08003118 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af04      	add	r7, sp, #16
 800311e:	0002      	movs	r2, r0
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	701a      	strb	r2, [r3, #0]
	UBYTE Buf[1]={add_};
 8003124:	240c      	movs	r4, #12
 8003126:	193b      	adds	r3, r7, r4
 8003128:	1dfa      	adds	r2, r7, #7
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <DEV_I2C_ReadByte+0x40>)
 8003130:	8819      	ldrh	r1, [r3, #0]
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b29a      	uxth	r2, r3
 8003138:	4808      	ldr	r0, [pc, #32]	; (800315c <DEV_I2C_ReadByte+0x44>)
 800313a:	2310      	movs	r3, #16
 800313c:	9302      	str	r3, [sp, #8]
 800313e:	2301      	movs	r3, #1
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	193b      	adds	r3, r7, r4
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2301      	movs	r3, #1
 8003148:	f002 f8d4 	bl	80052f4 <HAL_I2C_Mem_Read>
	return Buf[0];
 800314c:	193b      	adds	r3, r7, r4
 800314e:	781b      	ldrb	r3, [r3, #0]
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b005      	add	sp, #20
 8003156:	bd90      	pop	{r4, r7, pc}
 8003158:	20000004 	.word	0x20000004
 800315c:	200000e8 	.word	0x200000e8

08003160 <invmsICM20948Check>:
static void invmsICM20948GyroOffset(void);

static void invmsICM20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data);
static void invmsICM20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data);
extern bool invmsICM20948Check(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
    bool bRet = false;
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
    if(REG_VAL_WIA == DEV_I2C_ReadByte( REG_ADD_WIA))
 800316c:	2000      	movs	r0, #0
 800316e:	f7ff ffd3 	bl	8003118 <DEV_I2C_ReadByte>
 8003172:	0003      	movs	r3, r0
 8003174:	2bea      	cmp	r3, #234	; 0xea
 8003176:	d102      	bne.n	800317e <invmsICM20948Check+0x1e>
    {
        bRet = true;
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
    }
    return bRet;
 800317e:	1dfb      	adds	r3, r7, #7
 8003180:	781b      	ldrb	r3, [r3, #0]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}

0800318a <invmsICM20948Init>:

extern void invmsICM20948Init(void)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	af00      	add	r7, sp, #0
    /* user bank 0 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800318e:	2100      	movs	r1, #0
 8003190:	207f      	movs	r0, #127	; 0x7f
 8003192:	f7ff ff95 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_PWR_MIGMT_1,  REG_VAL_ALL_RGE_RESET);
 8003196:	2101      	movs	r1, #1
 8003198:	2006      	movs	r0, #6
 800319a:	f7ff ff91 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_Delay_ms(10);
 800319e:	200a      	movs	r0, #10
 80031a0:	f001 fc9c 	bl	8004adc <HAL_Delay>
    DEV_I2C_WriteByte( REG_ADD_PWR_MIGMT_1,  REG_VAL_RUN_MODE);
 80031a4:	2101      	movs	r1, #1
 80031a6:	2006      	movs	r0, #6
 80031a8:	f7ff ff8a 	bl	80030c0 <DEV_I2C_WriteByte>

    /* user bank 2 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 80031ac:	2120      	movs	r1, #32
 80031ae:	207f      	movs	r0, #127	; 0x7f
 80031b0:	f7ff ff86 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_GYRO_SMPLRT_DIV, 0x07);
 80031b4:	2107      	movs	r1, #7
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7ff ff82 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_GYRO_CONFIG_1,
 80031bc:	2135      	movs	r1, #53	; 0x35
 80031be:	2001      	movs	r0, #1
 80031c0:	f7ff ff7e 	bl	80030c0 <DEV_I2C_WriteByte>
                      REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_1000DPS | REG_VAL_BIT_GYRO_DLPF);
    DEV_I2C_WriteByte( REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07);
 80031c4:	2107      	movs	r1, #7
 80031c6:	2011      	movs	r0, #17
 80031c8:	f7ff ff7a 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_ACCEL_CONFIG,
 80031cc:	2131      	movs	r1, #49	; 0x31
 80031ce:	2014      	movs	r0, #20
 80031d0:	f7ff ff76 	bl	80030c0 <DEV_I2C_WriteByte>
                      REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

    /* user bank 0 register */
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80031d4:	2100      	movs	r1, #0
 80031d6:	207f      	movs	r0, #127	; 0x7f
 80031d8:	f7ff ff72 	bl	80030c0 <DEV_I2C_WriteByte>

    DEV_Delay_ms(100);
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	f001 fc7d 	bl	8004adc <HAL_Delay>
    /* offset */
    invmsICM20948GyroOffset();
 80031e2:	f000 fb9b 	bl	800391c <invmsICM20948GyroOffset>

    invmsICM20948MagCheck();
 80031e6:	f000 fa3b 	bl	8003660 <invmsICM20948MagCheck>

    invmsICM20948WriteSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_WRITE,
 80031ea:	2204      	movs	r2, #4
 80031ec:	2131      	movs	r1, #49	; 0x31
 80031ee:	200c      	movs	r0, #12
 80031f0:	f000 fae2 	bl	80037b8 <invmsICM20948WriteSecondary>
                                 REG_ADD_MAG_CNTL2, REG_VAL_MAG_MODE_20HZ);
    return;
 80031f4:	46c0      	nop			; (mov r8, r8)
}
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <invmsICM20948GyroRead>:
extern void invmsICM20948GyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b08c      	sub	sp, #48	; 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0};
 8003208:	2520      	movs	r5, #32
 800320a:	197b      	adds	r3, r7, r5
 800320c:	0018      	movs	r0, r3
 800320e:	2306      	movs	r3, #6
 8003210:	001a      	movs	r2, r3
 8003212:	2100      	movs	r1, #0
 8003214:	f003 fe1a 	bl	8006e4c <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8003218:	2314      	movs	r3, #20
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	0018      	movs	r0, r3
 800321e:	230c      	movs	r3, #12
 8003220:	001a      	movs	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f003 fe12 	bl	8006e4c <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 8003228:	4b57      	ldr	r3, [pc, #348]	; (8003388 <invmsICM20948GyroRead+0x18c>)
 800322a:	2200      	movs	r2, #0
 800322c:	5e9b      	ldrsh	r3, [r3, r2]
 800322e:	b29b      	uxth	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	b29b      	uxth	r3, r3
 8003234:	b21a      	sxth	r2, r3
 8003236:	4b54      	ldr	r3, [pc, #336]	; (8003388 <invmsICM20948GyroRead+0x18c>)
 8003238:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_XOUT_L);
 800323a:	2034      	movs	r0, #52	; 0x34
 800323c:	f7ff ff6c 	bl	8003118 <DEV_I2C_ReadByte>
 8003240:	0003      	movs	r3, r0
 8003242:	001a      	movs	r2, r3
 8003244:	2428      	movs	r4, #40	; 0x28
 8003246:	193b      	adds	r3, r7, r4
 8003248:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_XOUT_H);
 800324a:	2033      	movs	r0, #51	; 0x33
 800324c:	f7ff ff64 	bl	8003118 <DEV_I2C_ReadByte>
 8003250:	0003      	movs	r3, r0
 8003252:	001a      	movs	r2, r3
 8003254:	193b      	adds	r3, r7, r4
 8003256:	705a      	strb	r2, [r3, #1]
    s16Buf[0]=	(u8Buf[1]<<8)|u8Buf[0];
 8003258:	193b      	adds	r3, r7, r4
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	b21a      	sxth	r2, r3
 8003260:	193b      	adds	r3, r7, r4
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21a      	sxth	r2, r3
 800326a:	197b      	adds	r3, r7, r5
 800326c:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_YOUT_L);
 800326e:	2036      	movs	r0, #54	; 0x36
 8003270:	f7ff ff52 	bl	8003118 <DEV_I2C_ReadByte>
 8003274:	0003      	movs	r3, r0
 8003276:	001a      	movs	r2, r3
 8003278:	193b      	adds	r3, r7, r4
 800327a:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_YOUT_H);
 800327c:	2035      	movs	r0, #53	; 0x35
 800327e:	f7ff ff4b 	bl	8003118 <DEV_I2C_ReadByte>
 8003282:	0003      	movs	r3, r0
 8003284:	001a      	movs	r2, r3
 8003286:	193b      	adds	r3, r7, r4
 8003288:	705a      	strb	r2, [r3, #1]
    s16Buf[1]=	(u8Buf[1]<<8)|u8Buf[0];
 800328a:	193b      	adds	r3, r7, r4
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b21a      	sxth	r2, r3
 8003292:	193b      	adds	r3, r7, r4
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b21b      	sxth	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b21a      	sxth	r2, r3
 800329c:	197b      	adds	r3, r7, r5
 800329e:	805a      	strh	r2, [r3, #2]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_GYRO_ZOUT_L);
 80032a0:	2038      	movs	r0, #56	; 0x38
 80032a2:	f7ff ff39 	bl	8003118 <DEV_I2C_ReadByte>
 80032a6:	0003      	movs	r3, r0
 80032a8:	001a      	movs	r2, r3
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_GYRO_ZOUT_H);
 80032ae:	2037      	movs	r0, #55	; 0x37
 80032b0:	f7ff ff32 	bl	8003118 <DEV_I2C_ReadByte>
 80032b4:	0003      	movs	r3, r0
 80032b6:	001a      	movs	r2, r3
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	705a      	strb	r2, [r3, #1]
    s16Buf[2]=	(u8Buf[1]<<8)|u8Buf[0];
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	b21a      	sxth	r2, r3
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b21a      	sxth	r2, r3
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	809a      	strh	r2, [r3, #4]

#if 1
    for(i = 0; i < 3; i ++)
 80032d2:	232f      	movs	r3, #47	; 0x2f
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e026      	b.n	800332a <invmsICM20948GyroRead+0x12e>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 80032dc:	242f      	movs	r4, #47	; 0x2f
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	0013      	movs	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4a28      	ldr	r2, [pc, #160]	; (800338c <invmsICM20948GyroRead+0x190>)
 80032ec:	1898      	adds	r0, r3, r2
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	0013      	movs	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4a24      	ldr	r2, [pc, #144]	; (800338c <invmsICM20948GyroRead+0x190>)
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	1c99      	adds	r1, r3, #2
 8003300:	0025      	movs	r5, r4
 8003302:	197b      	adds	r3, r7, r5
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	2320      	movs	r3, #32
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	0052      	lsls	r2, r2, #1
 800330c:	5ed4      	ldrsh	r4, [r2, r3]
 800330e:	197b      	adds	r3, r7, r5
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	2214      	movs	r2, #20
 8003316:	18ba      	adds	r2, r7, r2
 8003318:	18d3      	adds	r3, r2, r3
 800331a:	0022      	movs	r2, r4
 800331c:	f000 fabb 	bl	8003896 <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 8003320:	197b      	adds	r3, r7, r5
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	197b      	adds	r3, r7, r5
 8003326:	3201      	adds	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	232f      	movs	r3, #47	; 0x2f
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d9d3      	bls.n	80032dc <invmsICM20948GyroRead+0xe0>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 8003334:	2114      	movs	r1, #20
 8003336:	187b      	adds	r3, r7, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <invmsICM20948GyroRead+0x194>)
 800333e:	2000      	movs	r0, #0
 8003340:	5e1b      	ldrsh	r3, [r3, r0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	b21a      	sxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <invmsICM20948GyroRead+0x194>)
 8003356:	2002      	movs	r0, #2
 8003358:	5e1b      	ldrsh	r3, [r3, r0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	b21a      	sxth	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 8003366:	187b      	adds	r3, r7, r1
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <invmsICM20948GyroRead+0x194>)
 800336e:	2104      	movs	r1, #4
 8003370:	5e5b      	ldrsh	r3, [r3, r1]
 8003372:	b29b      	uxth	r3, r3
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21a      	sxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	801a      	strh	r2, [r3, #0]
#else
    *ps16X = s16Buf[0];
    *ps16Y = s16Buf[1];
    *ps16Z = s16Buf[2];
#endif
    return;
 800337e:	46c0      	nop			; (mov r8, r8)
}
 8003380:	46bd      	mov	sp, r7
 8003382:	b00c      	add	sp, #48	; 0x30
 8003384:	bdb0      	pop	{r4, r5, r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	200001da 	.word	0x200001da
 800338c:	200001dc 	.word	0x200001dc
 8003390:	200001d4 	.word	0x200001d4

08003394 <invmsICM20948AccelRead>:

extern void invmsICM20948AccelRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[2];
    int16_t s16Buf[3] = {0};
 80033a0:	251c      	movs	r5, #28
 80033a2:	197b      	adds	r3, r7, r5
 80033a4:	0018      	movs	r0, r3
 80033a6:	2306      	movs	r3, #6
 80033a8:	001a      	movs	r2, r3
 80033aa:	2100      	movs	r1, #0
 80033ac:	f003 fd4e 	bl	8006e4c <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 80033b0:	2310      	movs	r3, #16
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	0018      	movs	r0, r3
 80033b6:	230c      	movs	r3, #12
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f003 fd46 	bl	8006e4c <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_XOUT_L);
 80033c0:	202e      	movs	r0, #46	; 0x2e
 80033c2:	f7ff fea9 	bl	8003118 <DEV_I2C_ReadByte>
 80033c6:	0003      	movs	r3, r0
 80033c8:	001a      	movs	r2, r3
 80033ca:	2424      	movs	r4, #36	; 0x24
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_XOUT_H);
 80033d0:	202d      	movs	r0, #45	; 0x2d
 80033d2:	f7ff fea1 	bl	8003118 <DEV_I2C_ReadByte>
 80033d6:	0003      	movs	r3, r0
 80033d8:	001a      	movs	r2, r3
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	705a      	strb	r2, [r3, #1]
    s16Buf[0]=	(u8Buf[1]<<8)|u8Buf[0];
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	785b      	ldrb	r3, [r3, #1]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	193b      	adds	r3, r7, r4
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b21b      	sxth	r3, r3
 80033ec:	4313      	orrs	r3, r2
 80033ee:	b21a      	sxth	r2, r3
 80033f0:	197b      	adds	r3, r7, r5
 80033f2:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_YOUT_L);
 80033f4:	2030      	movs	r0, #48	; 0x30
 80033f6:	f7ff fe8f 	bl	8003118 <DEV_I2C_ReadByte>
 80033fa:	0003      	movs	r3, r0
 80033fc:	001a      	movs	r2, r3
 80033fe:	193b      	adds	r3, r7, r4
 8003400:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_YOUT_H);
 8003402:	202f      	movs	r0, #47	; 0x2f
 8003404:	f7ff fe88 	bl	8003118 <DEV_I2C_ReadByte>
 8003408:	0003      	movs	r3, r0
 800340a:	001a      	movs	r2, r3
 800340c:	193b      	adds	r3, r7, r4
 800340e:	705a      	strb	r2, [r3, #1]
    s16Buf[1]=	(u8Buf[1]<<8)|u8Buf[0];
 8003410:	193b      	adds	r3, r7, r4
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b21a      	sxth	r2, r3
 8003418:	193b      	adds	r3, r7, r4
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b21b      	sxth	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	b21a      	sxth	r2, r3
 8003422:	197b      	adds	r3, r7, r5
 8003424:	805a      	strh	r2, [r3, #2]

    u8Buf[0]=DEV_I2C_ReadByte(REG_ADD_ACCEL_ZOUT_L);
 8003426:	2032      	movs	r0, #50	; 0x32
 8003428:	f7ff fe76 	bl	8003118 <DEV_I2C_ReadByte>
 800342c:	0003      	movs	r3, r0
 800342e:	001a      	movs	r2, r3
 8003430:	193b      	adds	r3, r7, r4
 8003432:	701a      	strb	r2, [r3, #0]
    u8Buf[1]=DEV_I2C_ReadByte(REG_ADD_ACCEL_ZOUT_H);
 8003434:	2031      	movs	r0, #49	; 0x31
 8003436:	f7ff fe6f 	bl	8003118 <DEV_I2C_ReadByte>
 800343a:	0003      	movs	r3, r0
 800343c:	001a      	movs	r2, r3
 800343e:	193b      	adds	r3, r7, r4
 8003440:	705a      	strb	r2, [r3, #1]
    s16Buf[2]=	(u8Buf[1]<<8)|u8Buf[0];
 8003442:	193b      	adds	r3, r7, r4
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b21a      	sxth	r2, r3
 800344a:	193b      	adds	r3, r7, r4
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b21b      	sxth	r3, r3
 8003450:	4313      	orrs	r3, r2
 8003452:	b21a      	sxth	r2, r3
 8003454:	197b      	adds	r3, r7, r5
 8003456:	809a      	strh	r2, [r3, #4]

    #if 1
    for(i = 0; i < 3; i ++)
 8003458:	2327      	movs	r3, #39	; 0x27
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e026      	b.n	80034b0 <invmsICM20948AccelRead+0x11c>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8003462:	2427      	movs	r4, #39	; 0x27
 8003464:	193b      	adds	r3, r7, r4
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	0013      	movs	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	189b      	adds	r3, r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <invmsICM20948AccelRead+0x150>)
 8003472:	1898      	adds	r0, r3, r2
 8003474:	193b      	adds	r3, r7, r4
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	0013      	movs	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	189b      	adds	r3, r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <invmsICM20948AccelRead+0x150>)
 8003482:	189b      	adds	r3, r3, r2
 8003484:	1c99      	adds	r1, r3, #2
 8003486:	0025      	movs	r5, r4
 8003488:	197b      	adds	r3, r7, r5
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	231c      	movs	r3, #28
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	0052      	lsls	r2, r2, #1
 8003492:	5ed4      	ldrsh	r4, [r2, r3]
 8003494:	197b      	adds	r3, r7, r5
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	2210      	movs	r2, #16
 800349c:	18ba      	adds	r2, r7, r2
 800349e:	18d3      	adds	r3, r2, r3
 80034a0:	0022      	movs	r2, r4
 80034a2:	f000 f9f8 	bl	8003896 <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 80034a6:	197b      	adds	r3, r7, r5
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	197b      	adds	r3, r7, r5
 80034ac:	3201      	adds	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	2327      	movs	r3, #39	; 0x27
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d9d3      	bls.n	8003462 <invmsICM20948AccelRead+0xce>
    }
    *ps16X = s32OutBuf[0];
 80034ba:	2110      	movs	r1, #16
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1];
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2];
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	801a      	strh	r2, [r3, #0]
    #else
    *ps16X = s16Buf[0];
    *ps16Y = s16Buf[1];
    *ps16Z = s16Buf[2];
    #endif
    return;
 80034da:	46c0      	nop			; (mov r8, r8)

}
 80034dc:	46bd      	mov	sp, r7
 80034de:	b00a      	add	sp, #40	; 0x28
 80034e0:	bdb0      	pop	{r4, r5, r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	20000214 	.word	0x20000214

080034e8 <invmsICM20948MagRead>:

extern void invmsICM20948MagRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	b08c      	sub	sp, #48	; 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
    uint8_t counter = 20;
 80034f4:	232f      	movs	r3, #47	; 0x2f
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2214      	movs	r2, #20
 80034fa:	701a      	strb	r2, [r3, #0]
    uint8_t u8Data[MAG_DATA_LEN];
    int16_t s16Buf[3] = {0};
 80034fc:	2320      	movs	r3, #32
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	0018      	movs	r0, r3
 8003502:	2306      	movs	r3, #6
 8003504:	001a      	movs	r2, r3
 8003506:	2100      	movs	r1, #0
 8003508:	f003 fca0 	bl	8006e4c <memset>
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 800350c:	2314      	movs	r3, #20
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	0018      	movs	r0, r3
 8003512:	230c      	movs	r3, #12
 8003514:	001a      	movs	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f003 fc98 	bl	8006e4c <memset>
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    while( counter>0 )
 800351c:	e015      	b.n	800354a <invmsICM20948MagRead+0x62>
    {
        DEV_Delay_ms(10);
 800351e:	200a      	movs	r0, #10
 8003520:	f001 fadc 	bl	8004adc <HAL_Delay>
        invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 8003524:	2428      	movs	r4, #40	; 0x28
 8003526:	193b      	adds	r3, r7, r4
 8003528:	2201      	movs	r2, #1
 800352a:	2110      	movs	r1, #16
 800352c:	208c      	movs	r0, #140	; 0x8c
 800352e:	f000 f8b4 	bl	800369a <invmsICM20948ReadSecondary>
                                    REG_ADD_MAG_ST2, 1, u8Data);

        if ((u8Data[0] & 0x01) != 0)
 8003532:	193b      	adds	r3, r7, r4
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	001a      	movs	r2, r3
 8003538:	2301      	movs	r3, #1
 800353a:	4013      	ands	r3, r2
 800353c:	d10b      	bne.n	8003556 <invmsICM20948MagRead+0x6e>
            break;

        counter--;
 800353e:	212f      	movs	r1, #47	; 0x2f
 8003540:	187b      	adds	r3, r7, r1
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	187b      	adds	r3, r7, r1
 8003546:	3a01      	subs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
    while( counter>0 )
 800354a:	232f      	movs	r3, #47	; 0x2f
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e4      	bne.n	800351e <invmsICM20948MagRead+0x36>
 8003554:	e000      	b.n	8003558 <invmsICM20948MagRead+0x70>
            break;
 8003556:	46c0      	nop			; (mov r8, r8)
    }

    if(counter != 0)
 8003558:	232f      	movs	r3, #47	; 0x2f
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02a      	beq.n	80035b8 <invmsICM20948MagRead+0xd0>
    {
        invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 8003562:	2428      	movs	r4, #40	; 0x28
 8003564:	193b      	adds	r3, r7, r4
 8003566:	2206      	movs	r2, #6
 8003568:	2111      	movs	r1, #17
 800356a:	208c      	movs	r0, #140	; 0x8c
 800356c:	f000 f895 	bl	800369a <invmsICM20948ReadSecondary>
                                    REG_ADD_MAG_DATA,
                                    MAG_DATA_LEN,
                                    u8Data);
        s16Buf[0] = ((int16_t)u8Data[1]<<8) | u8Data[0];
 8003570:	0021      	movs	r1, r4
 8003572:	187b      	adds	r3, r7, r1
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	b21a      	sxth	r2, r3
 800357a:	187b      	adds	r3, r7, r1
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	b21b      	sxth	r3, r3
 8003580:	4313      	orrs	r3, r2
 8003582:	b21a      	sxth	r2, r3
 8003584:	2020      	movs	r0, #32
 8003586:	183b      	adds	r3, r7, r0
 8003588:	801a      	strh	r2, [r3, #0]
        s16Buf[1] = ((int16_t)u8Data[3]<<8) | u8Data[2];
 800358a:	187b      	adds	r3, r7, r1
 800358c:	78db      	ldrb	r3, [r3, #3]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	b21a      	sxth	r2, r3
 8003592:	187b      	adds	r3, r7, r1
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	b21b      	sxth	r3, r3
 8003598:	4313      	orrs	r3, r2
 800359a:	b21a      	sxth	r2, r3
 800359c:	183b      	adds	r3, r7, r0
 800359e:	805a      	strh	r2, [r3, #2]
        s16Buf[2] = ((int16_t)u8Data[5]<<8) | u8Data[4];
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	795b      	ldrb	r3, [r3, #5]
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	b21b      	sxth	r3, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	809a      	strh	r2, [r3, #4]
 80035b6:	e003      	b.n	80035c0 <invmsICM20948MagRead+0xd8>
    }
    else
    {
        printf("\r\n Mag is bussy \r\n");
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <invmsICM20948MagRead+0x170>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f003 fdbc 	bl	8007138 <puts>
    }
#if 1
    for(i = 0; i < 3; i ++)
 80035c0:	232e      	movs	r3, #46	; 0x2e
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e026      	b.n	8003618 <invmsICM20948MagRead+0x130>
    {
        invmsICM20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 80035ca:	242e      	movs	r4, #46	; 0x2e
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	0013      	movs	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4a20      	ldr	r2, [pc, #128]	; (800365c <invmsICM20948MagRead+0x174>)
 80035da:	1898      	adds	r0, r3, r2
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	0013      	movs	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <invmsICM20948MagRead+0x174>)
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	1c99      	adds	r1, r3, #2
 80035ee:	0025      	movs	r5, r4
 80035f0:	197b      	adds	r3, r7, r5
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	2320      	movs	r3, #32
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	5ed4      	ldrsh	r4, [r2, r3]
 80035fc:	197b      	adds	r3, r7, r5
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	2214      	movs	r2, #20
 8003604:	18ba      	adds	r2, r7, r2
 8003606:	18d3      	adds	r3, r2, r3
 8003608:	0022      	movs	r2, r4
 800360a:	f000 f944 	bl	8003896 <invmsICM20948CalAvgValue>
    for(i = 0; i < 3; i ++)
 800360e:	197b      	adds	r3, r7, r5
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	197b      	adds	r3, r7, r5
 8003614:	3201      	adds	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	232e      	movs	r3, #46	; 0x2e
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d9d3      	bls.n	80035ca <invmsICM20948MagRead+0xe2>
    }

    *ps16X =  s32OutBuf[0];
 8003622:	2114      	movs	r1, #20
 8003624:	187b      	adds	r3, r7, r1
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b21a      	sxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	801a      	strh	r2, [r3, #0]
    *ps16Y = -s32OutBuf[1];
 800362e:	187b      	adds	r3, r7, r1
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b29b      	uxth	r3, r3
 8003634:	425b      	negs	r3, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	b21a      	sxth	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	801a      	strh	r2, [r3, #0]
    *ps16Z = -s32OutBuf[2];
 800363e:	187b      	adds	r3, r7, r1
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	b29b      	uxth	r3, r3
 8003644:	425b      	negs	r3, r3
 8003646:	b29b      	uxth	r3, r3
 8003648:	b21a      	sxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	801a      	strh	r2, [r3, #0]
#else
    *ps16X = s16Buf[0];
    *ps16Y = -s16Buf[1];
    *ps16Z = -s16Buf[2];
#endif
    return;
 800364e:	46c0      	nop			; (mov r8, r8)
}
 8003650:	46bd      	mov	sp, r7
 8003652:	b00c      	add	sp, #48	; 0x30
 8003654:	bdb0      	pop	{r4, r5, r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	0800848c 	.word	0x0800848c
 800365c:	2000024c 	.word	0x2000024c

08003660 <invmsICM20948MagCheck>:

static bool invmsICM20948MagCheck(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
    bool bRet = false;
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
    uint8_t u8Ret[2];

    invmsICM20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	2202      	movs	r2, #2
 8003670:	2100      	movs	r1, #0
 8003672:	208c      	movs	r0, #140	; 0x8c
 8003674:	f000 f811 	bl	800369a <invmsICM20948ReadSecondary>
                                REG_ADD_MAG_WIA1, 2,u8Ret);
    if( (u8Ret[0] == REG_VAL_MAG_WIA1) && ( u8Ret[1] == REG_VAL_MAG_WIA2) )
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b48      	cmp	r3, #72	; 0x48
 800367e:	d106      	bne.n	800368e <invmsICM20948MagCheck+0x2e>
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b09      	cmp	r3, #9
 8003686:	d102      	bne.n	800368e <invmsICM20948MagCheck+0x2e>
    {
        bRet = true;
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    }

    return bRet;
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}

0800369a <invmsICM20948ReadSecondary>:

static void invmsICM20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data)
{
 800369a:	b5b0      	push	{r4, r5, r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	0004      	movs	r4, r0
 80036a2:	0008      	movs	r0, r1
 80036a4:	0011      	movs	r1, r2
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	1c22      	adds	r2, r4, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	1dbb      	adds	r3, r7, #6
 80036b0:	1c02      	adds	r2, r0, #0
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	1d7b      	adds	r3, r7, #5
 80036b6:	1c0a      	adds	r2, r1, #0
 80036b8:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t u8Temp;

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 80036ba:	2130      	movs	r1, #48	; 0x30
 80036bc:	207f      	movs	r0, #127	; 0x7f
 80036be:	f7ff fcff 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_ADDR, u8I2CAddr);
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	0019      	movs	r1, r3
 80036c8:	2003      	movs	r0, #3
 80036ca:	f7ff fcf9 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_REG,  u8RegAddr);
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	0019      	movs	r1, r3
 80036d4:	2004      	movs	r0, #4
 80036d6:	f7ff fcf3 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL, REG_VAL_BIT_SLV0_EN|u8Len);
 80036da:	1d7b      	adds	r3, r7, #5
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2280      	movs	r2, #128	; 0x80
 80036e0:	4252      	negs	r2, r2
 80036e2:	4313      	orrs	r3, r2
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	0019      	movs	r1, r3
 80036e8:	2005      	movs	r0, #5
 80036ea:	f7ff fce9 	bl	80030c0 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 80036ee:	2100      	movs	r1, #0
 80036f0:	207f      	movs	r0, #127	; 0x7f
 80036f2:	f7ff fce5 	bl	80030c0 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_USER_CTRL);
 80036f6:	250e      	movs	r5, #14
 80036f8:	197c      	adds	r4, r7, r5
 80036fa:	2003      	movs	r0, #3
 80036fc:	f7ff fd0c 	bl	8003118 <DEV_I2C_ReadByte>
 8003700:	0003      	movs	r3, r0
 8003702:	7023      	strb	r3, [r4, #0]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8003704:	0028      	movs	r0, r5
 8003706:	183b      	adds	r3, r7, r0
 8003708:	183a      	adds	r2, r7, r0
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	2120      	movs	r1, #32
 800370e:	430a      	orrs	r2, r1
 8003710:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 8003712:	0004      	movs	r4, r0
 8003714:	183b      	adds	r3, r7, r0
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	0019      	movs	r1, r3
 800371a:	2003      	movs	r0, #3
 800371c:	f7ff fcd0 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_Delay_ms(5);
 8003720:	2005      	movs	r0, #5
 8003722:	f001 f9db 	bl	8004adc <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 8003726:	0020      	movs	r0, r4
 8003728:	183b      	adds	r3, r7, r0
 800372a:	183a      	adds	r2, r7, r0
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	2120      	movs	r1, #32
 8003730:	438a      	bics	r2, r1
 8003732:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 8003734:	183b      	adds	r3, r7, r0
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	0019      	movs	r1, r3
 800373a:	2003      	movs	r0, #3
 800373c:	f7ff fcc0 	bl	80030c0 <DEV_I2C_WriteByte>

    for(i=0; i<u8Len; i++)
 8003740:	230f      	movs	r3, #15
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e012      	b.n	8003770 <invmsICM20948ReadSecondary+0xd6>
    {
        *(pu8data+i) = DEV_I2C_ReadByte( REG_ADD_EXT_SENS_DATA_00+i);
 800374a:	250f      	movs	r5, #15
 800374c:	197b      	adds	r3, r7, r5
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	333b      	adds	r3, #59	; 0x3b
 8003752:	b2d9      	uxtb	r1, r3
 8003754:	197b      	adds	r3, r7, r5
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	18d4      	adds	r4, r2, r3
 800375c:	0008      	movs	r0, r1
 800375e:	f7ff fcdb 	bl	8003118 <DEV_I2C_ReadByte>
 8003762:	0003      	movs	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]
    for(i=0; i<u8Len; i++)
 8003766:	197b      	adds	r3, r7, r5
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	197b      	adds	r3, r7, r5
 800376c:	3201      	adds	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	230f      	movs	r3, #15
 8003772:	18fa      	adds	r2, r7, r3
 8003774:	1d7b      	adds	r3, r7, #5
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d3e5      	bcc.n	800374a <invmsICM20948ReadSecondary+0xb0>

    }
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 800377e:	2130      	movs	r1, #48	; 0x30
 8003780:	207f      	movs	r0, #127	; 0x7f
 8003782:	f7ff fc9d 	bl	80030c0 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_I2C_SLV0_CTRL);
 8003786:	250e      	movs	r5, #14
 8003788:	197c      	adds	r4, r7, r5
 800378a:	2005      	movs	r0, #5
 800378c:	f7ff fcc4 	bl	8003118 <DEV_I2C_ReadByte>
 8003790:	0003      	movs	r3, r0
 8003792:	7023      	strb	r3, [r4, #0]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
 8003794:	197b      	adds	r3, r7, r5
 8003796:	197a      	adds	r2, r7, r5
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 800379c:	197b      	adds	r3, r7, r5
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	0019      	movs	r1, r3
 80037a2:	2005      	movs	r0, #5
 80037a4:	f7ff fc8c 	bl	80030c0 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 80037a8:	2100      	movs	r1, #0
 80037aa:	207f      	movs	r0, #127	; 0x7f
 80037ac:	f7ff fc88 	bl	80030c0 <DEV_I2C_WriteByte>

}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b004      	add	sp, #16
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}

080037b8 <invmsICM20948WriteSecondary>:

static void invmsICM20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	0004      	movs	r4, r0
 80037c0:	0008      	movs	r0, r1
 80037c2:	0011      	movs	r1, r2
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	1c22      	adds	r2, r4, #0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	1dbb      	adds	r3, r7, #6
 80037cc:	1c02      	adds	r2, r0, #0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	1d7b      	adds	r3, r7, #5
 80037d2:	1c0a      	adds	r2, r1, #0
 80037d4:	701a      	strb	r2, [r3, #0]
    uint8_t u8Temp;
    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 80037d6:	2130      	movs	r1, #48	; 0x30
 80037d8:	207f      	movs	r0, #127	; 0x7f
 80037da:	f7ff fc71 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_ADDR, u8I2CAddr);
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	0019      	movs	r1, r3
 80037e4:	2007      	movs	r0, #7
 80037e6:	f7ff fc6b 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_REG,  u8RegAddr);
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	0019      	movs	r1, r3
 80037f0:	2008      	movs	r0, #8
 80037f2:	f7ff fc65 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_DO,   u8data);
 80037f6:	1d7b      	adds	r3, r7, #5
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	0019      	movs	r1, r3
 80037fc:	200a      	movs	r0, #10
 80037fe:	f7ff fc5f 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV1_CTRL, REG_VAL_BIT_SLV0_EN|1);
 8003802:	2181      	movs	r1, #129	; 0x81
 8003804:	2009      	movs	r0, #9
 8003806:	f7ff fc5b 	bl	80030c0 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 800380a:	2100      	movs	r1, #0
 800380c:	207f      	movs	r0, #127	; 0x7f
 800380e:	f7ff fc57 	bl	80030c0 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_USER_CTRL);
 8003812:	250f      	movs	r5, #15
 8003814:	197c      	adds	r4, r7, r5
 8003816:	2003      	movs	r0, #3
 8003818:	f7ff fc7e 	bl	8003118 <DEV_I2C_ReadByte>
 800381c:	0003      	movs	r3, r0
 800381e:	7023      	strb	r3, [r4, #0]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8003820:	0028      	movs	r0, r5
 8003822:	183b      	adds	r3, r7, r0
 8003824:	183a      	adds	r2, r7, r0
 8003826:	7812      	ldrb	r2, [r2, #0]
 8003828:	2120      	movs	r1, #32
 800382a:	430a      	orrs	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 800382e:	0004      	movs	r4, r0
 8003830:	183b      	adds	r3, r7, r0
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	0019      	movs	r1, r3
 8003836:	2003      	movs	r0, #3
 8003838:	f7ff fc42 	bl	80030c0 <DEV_I2C_WriteByte>
    DEV_Delay_ms(5);
 800383c:	2005      	movs	r0, #5
 800383e:	f001 f94d 	bl	8004adc <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 8003842:	0020      	movs	r0, r4
 8003844:	183b      	adds	r3, r7, r0
 8003846:	183a      	adds	r2, r7, r0
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	2120      	movs	r1, #32
 800384c:	438a      	bics	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_USER_CTRL, u8Temp);
 8003850:	0005      	movs	r5, r0
 8003852:	197b      	adds	r3, r7, r5
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	0019      	movs	r1, r3
 8003858:	2003      	movs	r0, #3
 800385a:	f7ff fc31 	bl	80030c0 <DEV_I2C_WriteByte>

    DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 800385e:	2130      	movs	r1, #48	; 0x30
 8003860:	207f      	movs	r0, #127	; 0x7f
 8003862:	f7ff fc2d 	bl	80030c0 <DEV_I2C_WriteByte>

    u8Temp = DEV_I2C_ReadByte(REG_ADD_I2C_SLV0_CTRL);
 8003866:	197c      	adds	r4, r7, r5
 8003868:	2005      	movs	r0, #5
 800386a:	f7ff fc55 	bl	8003118 <DEV_I2C_ReadByte>
 800386e:	0003      	movs	r3, r0
 8003870:	7023      	strb	r3, [r4, #0]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
 8003872:	197b      	adds	r3, r7, r5
 8003874:	197a      	adds	r2, r7, r5
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	701a      	strb	r2, [r3, #0]
    DEV_I2C_WriteByte( REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 800387a:	197b      	adds	r3, r7, r5
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	0019      	movs	r1, r3
 8003880:	2005      	movs	r0, #5
 8003882:	f7ff fc1d 	bl	80030c0 <DEV_I2C_WriteByte>

   DEV_I2C_WriteByte( REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8003886:	2100      	movs	r1, #0
 8003888:	207f      	movs	r0, #127	; 0x7f
 800388a:	f7ff fc19 	bl	80030c0 <DEV_I2C_WriteByte>

    return;
 800388e:	46c0      	nop			; (mov r8, r8)
}
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bdb0      	pop	{r4, r5, r7, pc}

08003896 <invmsICM20948CalAvgValue>:

static void invmsICM20948CalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	1dbb      	adds	r3, r7, #6
 80038a4:	801a      	strh	r2, [r3, #0]
	uint8_t i;

	*(pAvgBuffer + ((*pIndex) ++)) = InVal;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	b2d1      	uxtb	r1, r2
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	7011      	strb	r1, [r2, #0]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	18d3      	adds	r3, r2, r3
 80038b8:	1dba      	adds	r2, r7, #6
 80038ba:	8812      	ldrh	r2, [r2, #0]
 80038bc:	801a      	strh	r2, [r3, #0]
  	*pIndex &= 0x07;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2207      	movs	r2, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	701a      	strb	r2, [r3, #0]

  	*pOutVal = 0;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 80038d2:	2317      	movs	r3, #23
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e011      	b.n	8003900 <invmsICM20948CalAvgValue+0x6a>
  	{
    	*pOutVal += *(pAvgBuffer + i);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2017      	movs	r0, #23
 80038e2:	183a      	adds	r2, r7, r0
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	0052      	lsls	r2, r2, #1
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	188a      	adds	r2, r1, r2
 80038ec:	2100      	movs	r1, #0
 80038ee:	5e52      	ldrsh	r2, [r2, r1]
 80038f0:	189a      	adds	r2, r3, r2
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 8; i ++)
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	3201      	adds	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	2317      	movs	r3, #23
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b07      	cmp	r3, #7
 8003908:	d9e8      	bls.n	80038dc <invmsICM20948CalAvgValue+0x46>
  	}
  	*pOutVal >>= 3;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	10da      	asrs	r2, r3, #3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b006      	add	sp, #24
 800391a:	bd80      	pop	{r7, pc}

0800391c <invmsICM20948GyroOffset>:

static void invmsICM20948GyroOffset(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
	uint8_t i;
    int16_t	s16Gx = 0, s16Gy = 0, s16Gz = 0;
 8003922:	1dbb      	adds	r3, r7, #6
 8003924:	2200      	movs	r2, #0
 8003926:	801a      	strh	r2, [r3, #0]
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	2200      	movs	r2, #0
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	1cbb      	adds	r3, r7, #2
 8003930:	2200      	movs	r2, #0
 8003932:	801a      	strh	r2, [r3, #0]
	int32_t	s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < 32; i ++)
 8003940:	2317      	movs	r3, #23
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	e023      	b.n	8003992 <invmsICM20948GyroOffset+0x76>
 	{
        invmsICM20948GyroRead(&s16Gx, &s16Gy, &s16Gz);
 800394a:	1cba      	adds	r2, r7, #2
 800394c:	1d39      	adds	r1, r7, #4
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff fc53 	bl	80031fc <invmsICM20948GyroRead>
        s32TempGx += s16Gx;
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	2200      	movs	r2, #0
 800395a:	5e9b      	ldrsh	r3, [r3, r2]
 800395c:	001a      	movs	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	189b      	adds	r3, r3, r2
 8003962:	613b      	str	r3, [r7, #16]
		s32TempGy += s16Gy;
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2200      	movs	r2, #0
 8003968:	5e9b      	ldrsh	r3, [r3, r2]
 800396a:	001a      	movs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	189b      	adds	r3, r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
		s32TempGz += s16Gz;
 8003972:	1cbb      	adds	r3, r7, #2
 8003974:	2200      	movs	r2, #0
 8003976:	5e9b      	ldrsh	r3, [r3, r2]
 8003978:	001a      	movs	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	189b      	adds	r3, r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
        DEV_Delay_ms(10);
 8003980:	200a      	movs	r0, #10
 8003982:	f001 f8ab 	bl	8004adc <HAL_Delay>
    for(i = 0; i < 32; i ++)
 8003986:	2117      	movs	r1, #23
 8003988:	187b      	adds	r3, r7, r1
 800398a:	781a      	ldrb	r2, [r3, #0]
 800398c:	187b      	adds	r3, r7, r1
 800398e:	3201      	adds	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	2317      	movs	r3, #23
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b1f      	cmp	r3, #31
 800399a:	d9d6      	bls.n	800394a <invmsICM20948GyroOffset+0x2e>
    }
    gstGyroOffset.s16X = s32TempGx >> 5;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	115b      	asrs	r3, r3, #5
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <invmsICM20948GyroOffset+0xa8>)
 80039a4:	801a      	strh	r2, [r3, #0]
	gstGyroOffset.s16Y = s32TempGy >> 5;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	115b      	asrs	r3, r3, #5
 80039aa:	b21a      	sxth	r2, r3
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <invmsICM20948GyroOffset+0xa8>)
 80039ae:	805a      	strh	r2, [r3, #2]
	gstGyroOffset.s16Z = s32TempGz >> 5;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	115b      	asrs	r3, r3, #5
 80039b4:	b21a      	sxth	r2, r3
 80039b6:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <invmsICM20948GyroOffset+0xa8>)
 80039b8:	809a      	strh	r2, [r3, #4]
    return;
 80039ba:	46c0      	nop			; (mov r8, r8)
}
 80039bc:	46bd      	mov	sp, r7
 80039be:	b006      	add	sp, #24
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	200001d4 	.word	0x200001d4

080039c8 <invSqrt>:
  * @param
  * @retval
  */

float invSqrt(float x)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80039d0:	21fc      	movs	r1, #252	; 0xfc
 80039d2:	0589      	lsls	r1, r1, #22
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fc fef3 	bl	80007c0 <__aeabi_fmul>
 80039da:	1c03      	adds	r3, r0, #0
 80039dc:	617b      	str	r3, [r7, #20]
	float y = x;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	613b      	str	r3, [r7, #16]

	long i = *(long*)&y;                //get bits for floating value
 80039e2:	2310      	movs	r3, #16
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);          //gives initial guss you
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	105b      	asrs	r3, r3, #1
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <invSqrt+0x74>)
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;                    //convert bits back to float
 80039f4:	230c      	movs	r3, #12
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));   //newtop step, repeating increases accuracy
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	1c18      	adds	r0, r3, #0
 8003a02:	f7fc fedd 	bl	80007c0 <__aeabi_fmul>
 8003a06:	1c03      	adds	r3, r0, #0
 8003a08:	1c1a      	adds	r2, r3, #0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1c19      	adds	r1, r3, #0
 8003a0e:	1c10      	adds	r0, r2, #0
 8003a10:	f7fc fed6 	bl	80007c0 <__aeabi_fmul>
 8003a14:	1c03      	adds	r3, r0, #0
 8003a16:	1c19      	adds	r1, r3, #0
 8003a18:	20ff      	movs	r0, #255	; 0xff
 8003a1a:	0580      	lsls	r0, r0, #22
 8003a1c:	f7fc fff6 	bl	8000a0c <__aeabi_fsub>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c1a      	adds	r2, r3, #0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1c19      	adds	r1, r3, #0
 8003a28:	1c10      	adds	r0, r2, #0
 8003a2a:	f7fc fec9 	bl	80007c0 <__aeabi_fmul>
 8003a2e:	1c03      	adds	r3, r0, #0
 8003a30:	613b      	str	r3, [r7, #16]

	return y;
 8003a32:	693b      	ldr	r3, [r7, #16]
}
 8003a34:	1c18      	adds	r0, r3, #0
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	5f3759df 	.word	0x5f3759df

08003a40 <IMU_Init>:
  * @brief  initializes IMU
  * @param  None
  * @retval None
  */
void IMU_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0

    invMSInit();
 8003a44:	f000 fed2 	bl	80047ec <invMSInit>

  	q0 = 1.0f;
 8003a48:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <IMU_Init+0x28>)
 8003a4a:	22fe      	movs	r2, #254	; 0xfe
 8003a4c:	0592      	lsls	r2, r2, #22
 8003a4e:	601a      	str	r2, [r3, #0]
  	q1 = 0.0f;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <IMU_Init+0x2c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
  	q2 = 0.0f;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <IMU_Init+0x30>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  	q3 = 0.0f;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <IMU_Init+0x34>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20000284 	.word	0x20000284
 8003a6c:	20000288 	.word	0x20000288
 8003a70:	2000028c 	.word	0x2000028c
 8003a74:	20000290 	.word	0x20000290

08003a78 <IMU_AHRSupdate>:
  * @param  my: magnetometer Y
  * @param  mz: magnetometer Z
  * @retval None
  */
void IMU_AHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	b0a7      	sub	sp, #156	; 0x9c
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	61f8      	str	r0, [r7, #28]
 8003a80:	61b9      	str	r1, [r7, #24]
 8003a82:	617a      	str	r2, [r7, #20]
 8003a84:	613b      	str	r3, [r7, #16]
	float norm;
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float exInt = 0.0, eyInt = 0.0, ezInt = 0.0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	2484      	movs	r4, #132	; 0x84
 8003a8a:	2610      	movs	r6, #16
 8003a8c:	19a2      	adds	r2, r4, r6
 8003a8e:	19d2      	adds	r2, r2, r7
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	2580      	movs	r5, #128	; 0x80
 8003a96:	19aa      	adds	r2, r5, r6
 8003a98:	19d2      	adds	r2, r2, r7
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	228c      	movs	r2, #140	; 0x8c
 8003aa0:	18b9      	adds	r1, r7, r2
 8003aa2:	600b      	str	r3, [r1, #0]
	float ex, ey, ez, halfT = 0.024f;
 8003aa4:	4bfe      	ldr	r3, [pc, #1016]	; (8003ea0 <IMU_AHRSupdate+0x428>)
 8003aa6:	2588      	movs	r5, #136	; 0x88
 8003aa8:	1979      	adds	r1, r7, r5
 8003aaa:	600b      	str	r3, [r1, #0]

	float q0q0 = q0 * q0;
 8003aac:	4bfd      	ldr	r3, [pc, #1012]	; (8003ea4 <IMU_AHRSupdate+0x42c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4bfc      	ldr	r3, [pc, #1008]	; (8003ea4 <IMU_AHRSupdate+0x42c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1c19      	adds	r1, r3, #0
 8003ab6:	1c10      	adds	r0, r2, #0
 8003ab8:	f7fc fe82 	bl	80007c0 <__aeabi_fmul>
 8003abc:	1c03      	adds	r3, r0, #0
 8003abe:	2084      	movs	r0, #132	; 0x84
 8003ac0:	1839      	adds	r1, r7, r0
 8003ac2:	600b      	str	r3, [r1, #0]
	float q0q1 = q0 * q1;
 8003ac4:	4bf7      	ldr	r3, [pc, #988]	; (8003ea4 <IMU_AHRSupdate+0x42c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4bf7      	ldr	r3, [pc, #988]	; (8003ea8 <IMU_AHRSupdate+0x430>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c19      	adds	r1, r3, #0
 8003ace:	1c10      	adds	r0, r2, #0
 8003ad0:	f7fc fe76 	bl	80007c0 <__aeabi_fmul>
 8003ad4:	1c03      	adds	r3, r0, #0
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	187c      	adds	r4, r7, r1
 8003ada:	6023      	str	r3, [r4, #0]
	float q0q2 = q0 * q2;
 8003adc:	4bf1      	ldr	r3, [pc, #964]	; (8003ea4 <IMU_AHRSupdate+0x42c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4bf2      	ldr	r3, [pc, #968]	; (8003eac <IMU_AHRSupdate+0x434>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c19      	adds	r1, r3, #0
 8003ae6:	1c10      	adds	r0, r2, #0
 8003ae8:	f7fc fe6a 	bl	80007c0 <__aeabi_fmul>
 8003aec:	1c03      	adds	r3, r0, #0
 8003aee:	67fb      	str	r3, [r7, #124]	; 0x7c
	float q0q3 = q0 * q3;
 8003af0:	4bec      	ldr	r3, [pc, #944]	; (8003ea4 <IMU_AHRSupdate+0x42c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4bee      	ldr	r3, [pc, #952]	; (8003eb0 <IMU_AHRSupdate+0x438>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1c19      	adds	r1, r3, #0
 8003afa:	1c10      	adds	r0, r2, #0
 8003afc:	f7fc fe60 	bl	80007c0 <__aeabi_fmul>
 8003b00:	1c03      	adds	r3, r0, #0
 8003b02:	67bb      	str	r3, [r7, #120]	; 0x78
	float q1q1 = q1 * q1;
 8003b04:	4be8      	ldr	r3, [pc, #928]	; (8003ea8 <IMU_AHRSupdate+0x430>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4be7      	ldr	r3, [pc, #924]	; (8003ea8 <IMU_AHRSupdate+0x430>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1c19      	adds	r1, r3, #0
 8003b0e:	1c10      	adds	r0, r2, #0
 8003b10:	f7fc fe56 	bl	80007c0 <__aeabi_fmul>
 8003b14:	1c03      	adds	r3, r0, #0
 8003b16:	677b      	str	r3, [r7, #116]	; 0x74
	float q1q2 = q1 * q2;
 8003b18:	4be3      	ldr	r3, [pc, #908]	; (8003ea8 <IMU_AHRSupdate+0x430>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4be3      	ldr	r3, [pc, #908]	; (8003eac <IMU_AHRSupdate+0x434>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c19      	adds	r1, r3, #0
 8003b22:	1c10      	adds	r0, r2, #0
 8003b24:	f7fc fe4c 	bl	80007c0 <__aeabi_fmul>
 8003b28:	1c03      	adds	r3, r0, #0
 8003b2a:	673b      	str	r3, [r7, #112]	; 0x70
	float q1q3 = q1 * q3;
 8003b2c:	4bde      	ldr	r3, [pc, #888]	; (8003ea8 <IMU_AHRSupdate+0x430>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4bdf      	ldr	r3, [pc, #892]	; (8003eb0 <IMU_AHRSupdate+0x438>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1c19      	adds	r1, r3, #0
 8003b36:	1c10      	adds	r0, r2, #0
 8003b38:	f7fc fe42 	bl	80007c0 <__aeabi_fmul>
 8003b3c:	1c03      	adds	r3, r0, #0
 8003b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 8003b40:	4bda      	ldr	r3, [pc, #872]	; (8003eac <IMU_AHRSupdate+0x434>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4bd9      	ldr	r3, [pc, #868]	; (8003eac <IMU_AHRSupdate+0x434>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1c19      	adds	r1, r3, #0
 8003b4a:	1c10      	adds	r0, r2, #0
 8003b4c:	f7fc fe38 	bl	80007c0 <__aeabi_fmul>
 8003b50:	1c03      	adds	r3, r0, #0
 8003b52:	66bb      	str	r3, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 8003b54:	4bd5      	ldr	r3, [pc, #852]	; (8003eac <IMU_AHRSupdate+0x434>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4bd5      	ldr	r3, [pc, #852]	; (8003eb0 <IMU_AHRSupdate+0x438>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	1c19      	adds	r1, r3, #0
 8003b5e:	1c10      	adds	r0, r2, #0
 8003b60:	f7fc fe2e 	bl	80007c0 <__aeabi_fmul>
 8003b64:	1c03      	adds	r3, r0, #0
 8003b66:	667b      	str	r3, [r7, #100]	; 0x64
	float q3q3 = q3 * q3;
 8003b68:	4bd1      	ldr	r3, [pc, #836]	; (8003eb0 <IMU_AHRSupdate+0x438>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4bd0      	ldr	r3, [pc, #832]	; (8003eb0 <IMU_AHRSupdate+0x438>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1c19      	adds	r1, r3, #0
 8003b72:	1c10      	adds	r0, r2, #0
 8003b74:	f7fc fe24 	bl	80007c0 <__aeabi_fmul>
 8003b78:	1c03      	adds	r3, r0, #0
 8003b7a:	663b      	str	r3, [r7, #96]	; 0x60

	norm = invSqrt(ax * ax + ay * ay + az * az);
 8003b7c:	6939      	ldr	r1, [r7, #16]
 8003b7e:	6938      	ldr	r0, [r7, #16]
 8003b80:	f7fc fe1e 	bl	80007c0 <__aeabi_fmul>
 8003b84:	1c03      	adds	r3, r0, #0
 8003b86:	1c1c      	adds	r4, r3, #0
 8003b88:	25a0      	movs	r5, #160	; 0xa0
 8003b8a:	19ab      	adds	r3, r5, r6
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	19ab      	adds	r3, r5, r6
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	f7fc fe13 	bl	80007c0 <__aeabi_fmul>
 8003b9a:	1c03      	adds	r3, r0, #0
 8003b9c:	1c19      	adds	r1, r3, #0
 8003b9e:	1c20      	adds	r0, r4, #0
 8003ba0:	f7fc fbc0 	bl	8000324 <__aeabi_fadd>
 8003ba4:	1c03      	adds	r3, r0, #0
 8003ba6:	1c1c      	adds	r4, r3, #0
 8003ba8:	26a4      	movs	r6, #164	; 0xa4
 8003baa:	2210      	movs	r2, #16
 8003bac:	18b3      	adds	r3, r6, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	18b3      	adds	r3, r6, r2
 8003bb4:	19db      	adds	r3, r3, r7
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	f7fc fe02 	bl	80007c0 <__aeabi_fmul>
 8003bbc:	1c03      	adds	r3, r0, #0
 8003bbe:	1c19      	adds	r1, r3, #0
 8003bc0:	1c20      	adds	r0, r4, #0
 8003bc2:	f7fc fbaf 	bl	8000324 <__aeabi_fadd>
 8003bc6:	1c03      	adds	r3, r0, #0
 8003bc8:	1c18      	adds	r0, r3, #0
 8003bca:	f7ff fefd 	bl	80039c8 <invSqrt>
 8003bce:	1c03      	adds	r3, r0, #0
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
	ax = ax * norm;
 8003bd2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003bd4:	6938      	ldr	r0, [r7, #16]
 8003bd6:	f7fc fdf3 	bl	80007c0 <__aeabi_fmul>
 8003bda:	1c03      	adds	r3, r0, #0
 8003bdc:	613b      	str	r3, [r7, #16]
	ay = ay * norm;
 8003bde:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003be0:	2410      	movs	r4, #16
 8003be2:	192b      	adds	r3, r5, r4
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f7fc fdea 	bl	80007c0 <__aeabi_fmul>
 8003bec:	1c03      	adds	r3, r0, #0
 8003bee:	1929      	adds	r1, r5, r4
 8003bf0:	19ca      	adds	r2, r1, r7
 8003bf2:	6013      	str	r3, [r2, #0]
	az = az * norm;
 8003bf4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003bf6:	1933      	adds	r3, r6, r4
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	f7fc fde0 	bl	80007c0 <__aeabi_fmul>
 8003c00:	1c03      	adds	r3, r0, #0
 8003c02:	0022      	movs	r2, r4
 8003c04:	18b4      	adds	r4, r6, r2
 8003c06:	19e1      	adds	r1, r4, r7
 8003c08:	600b      	str	r3, [r1, #0]

	norm = invSqrt(mx * mx + my * my + mz * mz);
 8003c0a:	26a8      	movs	r6, #168	; 0xa8
 8003c0c:	18b4      	adds	r4, r6, r2
 8003c0e:	19e3      	adds	r3, r4, r7
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	18b4      	adds	r4, r6, r2
 8003c14:	19e3      	adds	r3, r4, r7
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	f7fc fdd2 	bl	80007c0 <__aeabi_fmul>
 8003c1c:	1c03      	adds	r3, r0, #0
 8003c1e:	1c1c      	adds	r4, r3, #0
 8003c20:	25ac      	movs	r5, #172	; 0xac
 8003c22:	2210      	movs	r2, #16
 8003c24:	18ab      	adds	r3, r5, r2
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	18ab      	adds	r3, r5, r2
 8003c2c:	19db      	adds	r3, r3, r7
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	f7fc fdc6 	bl	80007c0 <__aeabi_fmul>
 8003c34:	1c03      	adds	r3, r0, #0
 8003c36:	1c19      	adds	r1, r3, #0
 8003c38:	1c20      	adds	r0, r4, #0
 8003c3a:	f7fc fb73 	bl	8000324 <__aeabi_fadd>
 8003c3e:	1c03      	adds	r3, r0, #0
 8003c40:	1c1c      	adds	r4, r3, #0
 8003c42:	23b0      	movs	r3, #176	; 0xb0
 8003c44:	2210      	movs	r2, #16
 8003c46:	1899      	adds	r1, r3, r2
 8003c48:	19c9      	adds	r1, r1, r7
 8003c4a:	6809      	ldr	r1, [r1, #0]
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	19da      	adds	r2, r3, r7
 8003c50:	6810      	ldr	r0, [r2, #0]
 8003c52:	f7fc fdb5 	bl	80007c0 <__aeabi_fmul>
 8003c56:	1c03      	adds	r3, r0, #0
 8003c58:	1c19      	adds	r1, r3, #0
 8003c5a:	1c20      	adds	r0, r4, #0
 8003c5c:	f7fc fb62 	bl	8000324 <__aeabi_fadd>
 8003c60:	1c03      	adds	r3, r0, #0
 8003c62:	1c18      	adds	r0, r3, #0
 8003c64:	f7ff feb0 	bl	80039c8 <invSqrt>
 8003c68:	1c03      	adds	r3, r0, #0
 8003c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
	mx = mx * norm;
 8003c6c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c6e:	2410      	movs	r4, #16
 8003c70:	1933      	adds	r3, r6, r4
 8003c72:	19da      	adds	r2, r3, r7
 8003c74:	6810      	ldr	r0, [r2, #0]
 8003c76:	f7fc fda3 	bl	80007c0 <__aeabi_fmul>
 8003c7a:	1c03      	adds	r3, r0, #0
 8003c7c:	1931      	adds	r1, r6, r4
 8003c7e:	19c9      	adds	r1, r1, r7
 8003c80:	600b      	str	r3, [r1, #0]
	my = my * norm;
 8003c82:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c84:	192b      	adds	r3, r5, r4
 8003c86:	19da      	adds	r2, r3, r7
 8003c88:	6810      	ldr	r0, [r2, #0]
 8003c8a:	f7fc fd99 	bl	80007c0 <__aeabi_fmul>
 8003c8e:	1c03      	adds	r3, r0, #0
 8003c90:	0022      	movs	r2, r4
 8003c92:	18ac      	adds	r4, r5, r2
 8003c94:	19e1      	adds	r1, r4, r7
 8003c96:	600b      	str	r3, [r1, #0]
	mz = mz * norm;
 8003c98:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c9a:	24b0      	movs	r4, #176	; 0xb0
 8003c9c:	18a3      	adds	r3, r4, r2
 8003c9e:	19db      	adds	r3, r3, r7
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f7fc fd8d 	bl	80007c0 <__aeabi_fmul>
 8003ca6:	1c03      	adds	r3, r0, #0
 8003ca8:	2210      	movs	r2, #16
 8003caa:	18a4      	adds	r4, r4, r2
 8003cac:	19e1      	adds	r1, r4, r7
 8003cae:	600b      	str	r3, [r1, #0]

	// compute reference direction of flux
	hx = 2 * mx * (0.5f - q2q2 - q3q3) + 2 * my * (q1q2 - q0q3) + 2 * mz * (q1q3 + q0q2);
 8003cb0:	18b4      	adds	r4, r6, r2
 8003cb2:	19e1      	adds	r1, r4, r7
 8003cb4:	680b      	ldr	r3, [r1, #0]
 8003cb6:	1c19      	adds	r1, r3, #0
 8003cb8:	1c18      	adds	r0, r3, #0
 8003cba:	f7fc fb33 	bl	8000324 <__aeabi_fadd>
 8003cbe:	1c03      	adds	r3, r0, #0
 8003cc0:	1c1c      	adds	r4, r3, #0
 8003cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cc4:	20fc      	movs	r0, #252	; 0xfc
 8003cc6:	0580      	lsls	r0, r0, #22
 8003cc8:	f7fc fea0 	bl	8000a0c <__aeabi_fsub>
 8003ccc:	1c03      	adds	r3, r0, #0
 8003cce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003cd0:	1c18      	adds	r0, r3, #0
 8003cd2:	f7fc fe9b 	bl	8000a0c <__aeabi_fsub>
 8003cd6:	1c03      	adds	r3, r0, #0
 8003cd8:	1c19      	adds	r1, r3, #0
 8003cda:	1c20      	adds	r0, r4, #0
 8003cdc:	f7fc fd70 	bl	80007c0 <__aeabi_fmul>
 8003ce0:	1c03      	adds	r3, r0, #0
 8003ce2:	1c1c      	adds	r4, r3, #0
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	18ab      	adds	r3, r5, r2
 8003ce8:	19d9      	adds	r1, r3, r7
 8003cea:	680b      	ldr	r3, [r1, #0]
 8003cec:	1c19      	adds	r1, r3, #0
 8003cee:	1c18      	adds	r0, r3, #0
 8003cf0:	f7fc fb18 	bl	8000324 <__aeabi_fadd>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	1c1d      	adds	r5, r3, #0
 8003cf8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003cfa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003cfc:	f7fc fe86 	bl	8000a0c <__aeabi_fsub>
 8003d00:	1c03      	adds	r3, r0, #0
 8003d02:	1c19      	adds	r1, r3, #0
 8003d04:	1c28      	adds	r0, r5, #0
 8003d06:	f7fc fd5b 	bl	80007c0 <__aeabi_fmul>
 8003d0a:	1c03      	adds	r3, r0, #0
 8003d0c:	1c19      	adds	r1, r3, #0
 8003d0e:	1c20      	adds	r0, r4, #0
 8003d10:	f7fc fb08 	bl	8000324 <__aeabi_fadd>
 8003d14:	1c03      	adds	r3, r0, #0
 8003d16:	1c1c      	adds	r4, r3, #0
 8003d18:	23b0      	movs	r3, #176	; 0xb0
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	19d9      	adds	r1, r3, r7
 8003d20:	680b      	ldr	r3, [r1, #0]
 8003d22:	1c19      	adds	r1, r3, #0
 8003d24:	1c18      	adds	r0, r3, #0
 8003d26:	f7fc fafd 	bl	8000324 <__aeabi_fadd>
 8003d2a:	1c03      	adds	r3, r0, #0
 8003d2c:	1c1d      	adds	r5, r3, #0
 8003d2e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d32:	f7fc faf7 	bl	8000324 <__aeabi_fadd>
 8003d36:	1c03      	adds	r3, r0, #0
 8003d38:	1c19      	adds	r1, r3, #0
 8003d3a:	1c28      	adds	r0, r5, #0
 8003d3c:	f7fc fd40 	bl	80007c0 <__aeabi_fmul>
 8003d40:	1c03      	adds	r3, r0, #0
 8003d42:	1c19      	adds	r1, r3, #0
 8003d44:	1c20      	adds	r0, r4, #0
 8003d46:	f7fc faed 	bl	8000324 <__aeabi_fadd>
 8003d4a:	1c03      	adds	r3, r0, #0
 8003d4c:	65bb      	str	r3, [r7, #88]	; 0x58
	hy = 2 * mx * (q1q2 + q0q3) + 2 * my * (0.5f - q1q1 - q3q3) + 2 * mz * (q2q3 - q0q1);
 8003d4e:	2210      	movs	r2, #16
 8003d50:	18b4      	adds	r4, r6, r2
 8003d52:	19e1      	adds	r1, r4, r7
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	1c19      	adds	r1, r3, #0
 8003d58:	1c18      	adds	r0, r3, #0
 8003d5a:	f7fc fae3 	bl	8000324 <__aeabi_fadd>
 8003d5e:	1c03      	adds	r3, r0, #0
 8003d60:	1c1c      	adds	r4, r3, #0
 8003d62:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003d64:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003d66:	f7fc fadd 	bl	8000324 <__aeabi_fadd>
 8003d6a:	1c03      	adds	r3, r0, #0
 8003d6c:	1c19      	adds	r1, r3, #0
 8003d6e:	1c20      	adds	r0, r4, #0
 8003d70:	f7fc fd26 	bl	80007c0 <__aeabi_fmul>
 8003d74:	1c03      	adds	r3, r0, #0
 8003d76:	1c1c      	adds	r4, r3, #0
 8003d78:	25ac      	movs	r5, #172	; 0xac
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	18ab      	adds	r3, r5, r2
 8003d7e:	19d9      	adds	r1, r3, r7
 8003d80:	680b      	ldr	r3, [r1, #0]
 8003d82:	1c19      	adds	r1, r3, #0
 8003d84:	1c18      	adds	r0, r3, #0
 8003d86:	f7fc facd 	bl	8000324 <__aeabi_fadd>
 8003d8a:	1c03      	adds	r3, r0, #0
 8003d8c:	1c1d      	adds	r5, r3, #0
 8003d8e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003d90:	20fc      	movs	r0, #252	; 0xfc
 8003d92:	0580      	lsls	r0, r0, #22
 8003d94:	f7fc fe3a 	bl	8000a0c <__aeabi_fsub>
 8003d98:	1c03      	adds	r3, r0, #0
 8003d9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d9c:	1c18      	adds	r0, r3, #0
 8003d9e:	f7fc fe35 	bl	8000a0c <__aeabi_fsub>
 8003da2:	1c03      	adds	r3, r0, #0
 8003da4:	1c19      	adds	r1, r3, #0
 8003da6:	1c28      	adds	r0, r5, #0
 8003da8:	f7fc fd0a 	bl	80007c0 <__aeabi_fmul>
 8003dac:	1c03      	adds	r3, r0, #0
 8003dae:	1c19      	adds	r1, r3, #0
 8003db0:	1c20      	adds	r0, r4, #0
 8003db2:	f7fc fab7 	bl	8000324 <__aeabi_fadd>
 8003db6:	1c03      	adds	r3, r0, #0
 8003db8:	1c1c      	adds	r4, r3, #0
 8003dba:	23b0      	movs	r3, #176	; 0xb0
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	19d9      	adds	r1, r3, r7
 8003dc2:	680b      	ldr	r3, [r1, #0]
 8003dc4:	1c19      	adds	r1, r3, #0
 8003dc6:	1c18      	adds	r0, r3, #0
 8003dc8:	f7fc faac 	bl	8000324 <__aeabi_fadd>
 8003dcc:	1c03      	adds	r3, r0, #0
 8003dce:	1c1d      	adds	r5, r3, #0
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	1879      	adds	r1, r7, r1
 8003dd4:	6809      	ldr	r1, [r1, #0]
 8003dd6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003dd8:	f7fc fe18 	bl	8000a0c <__aeabi_fsub>
 8003ddc:	1c03      	adds	r3, r0, #0
 8003dde:	1c19      	adds	r1, r3, #0
 8003de0:	1c28      	adds	r0, r5, #0
 8003de2:	f7fc fced 	bl	80007c0 <__aeabi_fmul>
 8003de6:	1c03      	adds	r3, r0, #0
 8003de8:	1c19      	adds	r1, r3, #0
 8003dea:	1c20      	adds	r0, r4, #0
 8003dec:	f7fc fa9a 	bl	8000324 <__aeabi_fadd>
 8003df0:	1c03      	adds	r3, r0, #0
 8003df2:	657b      	str	r3, [r7, #84]	; 0x54
	hz = 2 * mx * (q1q3 - q0q2) + 2 * my * (q2q3 + q0q1) + 2 * mz * (0.5f - q1q1 - q2q2);
 8003df4:	2310      	movs	r3, #16
 8003df6:	18f4      	adds	r4, r6, r3
 8003df8:	19e1      	adds	r1, r4, r7
 8003dfa:	680b      	ldr	r3, [r1, #0]
 8003dfc:	1c19      	adds	r1, r3, #0
 8003dfe:	1c18      	adds	r0, r3, #0
 8003e00:	f7fc fa90 	bl	8000324 <__aeabi_fadd>
 8003e04:	1c03      	adds	r3, r0, #0
 8003e06:	1c1c      	adds	r4, r3, #0
 8003e08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e0c:	f7fc fdfe 	bl	8000a0c <__aeabi_fsub>
 8003e10:	1c03      	adds	r3, r0, #0
 8003e12:	1c19      	adds	r1, r3, #0
 8003e14:	1c20      	adds	r0, r4, #0
 8003e16:	f7fc fcd3 	bl	80007c0 <__aeabi_fmul>
 8003e1a:	1c03      	adds	r3, r0, #0
 8003e1c:	1c1c      	adds	r4, r3, #0
 8003e1e:	25ac      	movs	r5, #172	; 0xac
 8003e20:	2610      	movs	r6, #16
 8003e22:	19a9      	adds	r1, r5, r6
 8003e24:	19c9      	adds	r1, r1, r7
 8003e26:	680b      	ldr	r3, [r1, #0]
 8003e28:	1c19      	adds	r1, r3, #0
 8003e2a:	1c18      	adds	r0, r3, #0
 8003e2c:	f7fc fa7a 	bl	8000324 <__aeabi_fadd>
 8003e30:	1c03      	adds	r3, r0, #0
 8003e32:	1c1d      	adds	r5, r3, #0
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	18f9      	adds	r1, r7, r3
 8003e38:	6809      	ldr	r1, [r1, #0]
 8003e3a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003e3c:	f7fc fa72 	bl	8000324 <__aeabi_fadd>
 8003e40:	1c03      	adds	r3, r0, #0
 8003e42:	1c19      	adds	r1, r3, #0
 8003e44:	1c28      	adds	r0, r5, #0
 8003e46:	f7fc fcbb 	bl	80007c0 <__aeabi_fmul>
 8003e4a:	1c03      	adds	r3, r0, #0
 8003e4c:	1c19      	adds	r1, r3, #0
 8003e4e:	1c20      	adds	r0, r4, #0
 8003e50:	f7fc fa68 	bl	8000324 <__aeabi_fadd>
 8003e54:	1c03      	adds	r3, r0, #0
 8003e56:	1c1c      	adds	r4, r3, #0
 8003e58:	23b0      	movs	r3, #176	; 0xb0
 8003e5a:	1999      	adds	r1, r3, r6
 8003e5c:	19c9      	adds	r1, r1, r7
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	1c19      	adds	r1, r3, #0
 8003e62:	1c18      	adds	r0, r3, #0
 8003e64:	f7fc fa5e 	bl	8000324 <__aeabi_fadd>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	1c1d      	adds	r5, r3, #0
 8003e6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e6e:	20fc      	movs	r0, #252	; 0xfc
 8003e70:	0580      	lsls	r0, r0, #22
 8003e72:	f7fc fdcb 	bl	8000a0c <__aeabi_fsub>
 8003e76:	1c03      	adds	r3, r0, #0
 8003e78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e7a:	1c18      	adds	r0, r3, #0
 8003e7c:	f7fc fdc6 	bl	8000a0c <__aeabi_fsub>
 8003e80:	1c03      	adds	r3, r0, #0
 8003e82:	1c19      	adds	r1, r3, #0
 8003e84:	1c28      	adds	r0, r5, #0
 8003e86:	f7fc fc9b 	bl	80007c0 <__aeabi_fmul>
 8003e8a:	1c03      	adds	r3, r0, #0
 8003e8c:	1c19      	adds	r1, r3, #0
 8003e8e:	1c20      	adds	r0, r4, #0
 8003e90:	f7fc fa48 	bl	8000324 <__aeabi_fadd>
 8003e94:	1c03      	adds	r3, r0, #0
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
	bx = sqrt((hx * hx) + (hy * hy));
 8003e98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003e9c:	e00a      	b.n	8003eb4 <IMU_AHRSupdate+0x43c>
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	3cc49ba6 	.word	0x3cc49ba6
 8003ea4:	20000284 	.word	0x20000284
 8003ea8:	20000288 	.word	0x20000288
 8003eac:	2000028c 	.word	0x2000028c
 8003eb0:	20000290 	.word	0x20000290
 8003eb4:	f7fc fc84 	bl	80007c0 <__aeabi_fmul>
 8003eb8:	1c03      	adds	r3, r0, #0
 8003eba:	1c1c      	adds	r4, r3, #0
 8003ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ebe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ec0:	f7fc fc7e 	bl	80007c0 <__aeabi_fmul>
 8003ec4:	1c03      	adds	r3, r0, #0
 8003ec6:	1c19      	adds	r1, r3, #0
 8003ec8:	1c20      	adds	r0, r4, #0
 8003eca:	f7fc fa2b 	bl	8000324 <__aeabi_fadd>
 8003ece:	1c03      	adds	r3, r0, #0
 8003ed0:	1c18      	adds	r0, r3, #0
 8003ed2:	f7fe fd21 	bl	8002918 <__aeabi_f2d>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	000b      	movs	r3, r1
 8003eda:	0010      	movs	r0, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	f004 f9dd 	bl	800829c <sqrt>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	000b      	movs	r3, r1
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	f7fe fd5d 	bl	80029a8 <__aeabi_d2f>
 8003eee:	1c03      	adds	r3, r0, #0
 8003ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
	bz = hz;
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48

	// estimated direction of gravity and flux (v and w)
	vx = 2 * (q1q3 - q0q2);
 8003ef6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003efa:	f7fc fd87 	bl	8000a0c <__aeabi_fsub>
 8003efe:	1c03      	adds	r3, r0, #0
 8003f00:	1c19      	adds	r1, r3, #0
 8003f02:	1c18      	adds	r0, r3, #0
 8003f04:	f7fc fa0e 	bl	8000324 <__aeabi_fadd>
 8003f08:	1c03      	adds	r3, r0, #0
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
	vy = 2 * (q0q1 + q2q3);
 8003f0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	18fc      	adds	r4, r7, r3
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	f7fc fa06 	bl	8000324 <__aeabi_fadd>
 8003f18:	1c03      	adds	r3, r0, #0
 8003f1a:	1c19      	adds	r1, r3, #0
 8003f1c:	1c18      	adds	r0, r3, #0
 8003f1e:	f7fc fa01 	bl	8000324 <__aeabi_fadd>
 8003f22:	1c03      	adds	r3, r0, #0
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8003f26:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003f28:	2084      	movs	r0, #132	; 0x84
 8003f2a:	1838      	adds	r0, r7, r0
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	f7fc fd6d 	bl	8000a0c <__aeabi_fsub>
 8003f32:	1c03      	adds	r3, r0, #0
 8003f34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f36:	1c18      	adds	r0, r3, #0
 8003f38:	f7fc fd68 	bl	8000a0c <__aeabi_fsub>
 8003f3c:	1c03      	adds	r3, r0, #0
 8003f3e:	1c19      	adds	r1, r3, #0
 8003f40:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f42:	f7fc f9ef 	bl	8000324 <__aeabi_fadd>
 8003f46:	1c03      	adds	r3, r0, #0
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
	wx = 2 * bx * (0.5 - q2q2 - q3q3) + 2 * bz * (q1q3 - q0q2);
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	1c19      	adds	r1, r3, #0
 8003f4e:	1c18      	adds	r0, r3, #0
 8003f50:	f7fc f9e8 	bl	8000324 <__aeabi_fadd>
 8003f54:	1c03      	adds	r3, r0, #0
 8003f56:	1c18      	adds	r0, r3, #0
 8003f58:	f7fe fcde 	bl	8002918 <__aeabi_f2d>
 8003f5c:	0004      	movs	r4, r0
 8003f5e:	000d      	movs	r5, r1
 8003f60:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003f62:	f7fe fcd9 	bl	8002918 <__aeabi_f2d>
 8003f66:	0002      	movs	r2, r0
 8003f68:	000b      	movs	r3, r1
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	49f7      	ldr	r1, [pc, #988]	; (800434c <IMU_AHRSupdate+0x8d4>)
 8003f6e:	f7fe f8f3 	bl	8002158 <__aeabi_dsub>
 8003f72:	0002      	movs	r2, r0
 8003f74:	000b      	movs	r3, r1
 8003f76:	60ba      	str	r2, [r7, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003f7c:	f7fe fccc 	bl	8002918 <__aeabi_f2d>
 8003f80:	0002      	movs	r2, r0
 8003f82:	000b      	movs	r3, r1
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	f7fe f8e6 	bl	8002158 <__aeabi_dsub>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	000b      	movs	r3, r1
 8003f90:	0020      	movs	r0, r4
 8003f92:	0029      	movs	r1, r5
 8003f94:	f7fd fe74 	bl	8001c80 <__aeabi_dmul>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	000b      	movs	r3, r1
 8003f9c:	0014      	movs	r4, r2
 8003f9e:	001d      	movs	r5, r3
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	1c19      	adds	r1, r3, #0
 8003fa4:	1c18      	adds	r0, r3, #0
 8003fa6:	f7fc f9bd 	bl	8000324 <__aeabi_fadd>
 8003faa:	1c03      	adds	r3, r0, #0
 8003fac:	1c1e      	adds	r6, r3, #0
 8003fae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fb2:	f7fc fd2b 	bl	8000a0c <__aeabi_fsub>
 8003fb6:	1c03      	adds	r3, r0, #0
 8003fb8:	1c19      	adds	r1, r3, #0
 8003fba:	1c30      	adds	r0, r6, #0
 8003fbc:	f7fc fc00 	bl	80007c0 <__aeabi_fmul>
 8003fc0:	1c03      	adds	r3, r0, #0
 8003fc2:	1c18      	adds	r0, r3, #0
 8003fc4:	f7fe fca8 	bl	8002918 <__aeabi_f2d>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	000b      	movs	r3, r1
 8003fcc:	0020      	movs	r0, r4
 8003fce:	0029      	movs	r1, r5
 8003fd0:	f7fc ff18 	bl	8000e04 <__aeabi_dadd>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	000b      	movs	r3, r1
 8003fd8:	0010      	movs	r0, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	f7fe fce4 	bl	80029a8 <__aeabi_d2f>
 8003fe0:	1c03      	adds	r3, r0, #0
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
	wy = 2 * bx * (q1q2 - q0q3) + 2 * bz * (q0q1 + q2q3);
 8003fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe6:	1c19      	adds	r1, r3, #0
 8003fe8:	1c18      	adds	r0, r3, #0
 8003fea:	f7fc f99b 	bl	8000324 <__aeabi_fadd>
 8003fee:	1c03      	adds	r3, r0, #0
 8003ff0:	1c1c      	adds	r4, r3, #0
 8003ff2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003ff4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003ff6:	f7fc fd09 	bl	8000a0c <__aeabi_fsub>
 8003ffa:	1c03      	adds	r3, r0, #0
 8003ffc:	1c19      	adds	r1, r3, #0
 8003ffe:	1c20      	adds	r0, r4, #0
 8004000:	f7fc fbde 	bl	80007c0 <__aeabi_fmul>
 8004004:	1c03      	adds	r3, r0, #0
 8004006:	1c1c      	adds	r4, r3, #0
 8004008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400a:	1c19      	adds	r1, r3, #0
 800400c:	1c18      	adds	r0, r3, #0
 800400e:	f7fc f989 	bl	8000324 <__aeabi_fadd>
 8004012:	1c03      	adds	r3, r0, #0
 8004014:	1c1d      	adds	r5, r3, #0
 8004016:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	18f8      	adds	r0, r7, r3
 800401c:	6800      	ldr	r0, [r0, #0]
 800401e:	f7fc f981 	bl	8000324 <__aeabi_fadd>
 8004022:	1c03      	adds	r3, r0, #0
 8004024:	1c19      	adds	r1, r3, #0
 8004026:	1c28      	adds	r0, r5, #0
 8004028:	f7fc fbca 	bl	80007c0 <__aeabi_fmul>
 800402c:	1c03      	adds	r3, r0, #0
 800402e:	1c19      	adds	r1, r3, #0
 8004030:	1c20      	adds	r0, r4, #0
 8004032:	f7fc f977 	bl	8000324 <__aeabi_fadd>
 8004036:	1c03      	adds	r3, r0, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
	wz = 2 * bx * (q0q2 + q1q3) + 2 * bz * (0.5 - q1q1 - q2q2);
 800403a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403c:	1c19      	adds	r1, r3, #0
 800403e:	1c18      	adds	r0, r3, #0
 8004040:	f7fc f970 	bl	8000324 <__aeabi_fadd>
 8004044:	1c03      	adds	r3, r0, #0
 8004046:	1c1c      	adds	r4, r3, #0
 8004048:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800404a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800404c:	f7fc f96a 	bl	8000324 <__aeabi_fadd>
 8004050:	1c03      	adds	r3, r0, #0
 8004052:	1c19      	adds	r1, r3, #0
 8004054:	1c20      	adds	r0, r4, #0
 8004056:	f7fc fbb3 	bl	80007c0 <__aeabi_fmul>
 800405a:	1c03      	adds	r3, r0, #0
 800405c:	1c18      	adds	r0, r3, #0
 800405e:	f7fe fc5b 	bl	8002918 <__aeabi_f2d>
 8004062:	0004      	movs	r4, r0
 8004064:	000d      	movs	r5, r1
 8004066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004068:	1c19      	adds	r1, r3, #0
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7fc f95a 	bl	8000324 <__aeabi_fadd>
 8004070:	1c03      	adds	r3, r0, #0
 8004072:	1c18      	adds	r0, r3, #0
 8004074:	f7fe fc50 	bl	8002918 <__aeabi_f2d>
 8004078:	60b8      	str	r0, [r7, #8]
 800407a:	60f9      	str	r1, [r7, #12]
 800407c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800407e:	f7fe fc4b 	bl	8002918 <__aeabi_f2d>
 8004082:	0002      	movs	r2, r0
 8004084:	000b      	movs	r3, r1
 8004086:	2000      	movs	r0, #0
 8004088:	49b0      	ldr	r1, [pc, #704]	; (800434c <IMU_AHRSupdate+0x8d4>)
 800408a:	f7fe f865 	bl	8002158 <__aeabi_dsub>
 800408e:	0002      	movs	r2, r0
 8004090:	000b      	movs	r3, r1
 8004092:	603a      	str	r2, [r7, #0]
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004098:	f7fe fc3e 	bl	8002918 <__aeabi_f2d>
 800409c:	0002      	movs	r2, r0
 800409e:	000b      	movs	r3, r1
 80040a0:	6838      	ldr	r0, [r7, #0]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	f7fe f858 	bl	8002158 <__aeabi_dsub>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	68b8      	ldr	r0, [r7, #8]
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	f7fd fde6 	bl	8001c80 <__aeabi_dmul>
 80040b4:	0002      	movs	r2, r0
 80040b6:	000b      	movs	r3, r1
 80040b8:	0020      	movs	r0, r4
 80040ba:	0029      	movs	r1, r5
 80040bc:	f7fc fea2 	bl	8000e04 <__aeabi_dadd>
 80040c0:	0002      	movs	r2, r0
 80040c2:	000b      	movs	r3, r1
 80040c4:	0010      	movs	r0, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	f7fe fc6e 	bl	80029a8 <__aeabi_d2f>
 80040cc:	1c03      	adds	r3, r0, #0
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30

	// error is sum of cross product between reference direction of fields and direction measured by sensors
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80040d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040d2:	20a0      	movs	r0, #160	; 0xa0
 80040d4:	2610      	movs	r6, #16
 80040d6:	1980      	adds	r0, r0, r6
 80040d8:	19c3      	adds	r3, r0, r7
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f7fc fb70 	bl	80007c0 <__aeabi_fmul>
 80040e0:	1c03      	adds	r3, r0, #0
 80040e2:	1c1c      	adds	r4, r3, #0
 80040e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e6:	22a4      	movs	r2, #164	; 0xa4
 80040e8:	1990      	adds	r0, r2, r6
 80040ea:	19c3      	adds	r3, r0, r7
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f7fc fb67 	bl	80007c0 <__aeabi_fmul>
 80040f2:	1c03      	adds	r3, r0, #0
 80040f4:	1c19      	adds	r1, r3, #0
 80040f6:	1c20      	adds	r0, r4, #0
 80040f8:	f7fc fc88 	bl	8000a0c <__aeabi_fsub>
 80040fc:	1c03      	adds	r3, r0, #0
 80040fe:	1c1c      	adds	r4, r3, #0
 8004100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004102:	25ac      	movs	r5, #172	; 0xac
 8004104:	19a8      	adds	r0, r5, r6
 8004106:	19c0      	adds	r0, r0, r7
 8004108:	6800      	ldr	r0, [r0, #0]
 800410a:	f7fc fb59 	bl	80007c0 <__aeabi_fmul>
 800410e:	1c03      	adds	r3, r0, #0
 8004110:	1c1d      	adds	r5, r3, #0
 8004112:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004114:	22b0      	movs	r2, #176	; 0xb0
 8004116:	0016      	movs	r6, r2
 8004118:	2310      	movs	r3, #16
 800411a:	18d0      	adds	r0, r2, r3
 800411c:	19c3      	adds	r3, r0, r7
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f7fc fb4e 	bl	80007c0 <__aeabi_fmul>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c19      	adds	r1, r3, #0
 8004128:	1c28      	adds	r0, r5, #0
 800412a:	f7fc fc6f 	bl	8000a0c <__aeabi_fsub>
 800412e:	1c03      	adds	r3, r0, #0
 8004130:	1c19      	adds	r1, r3, #0
 8004132:	1c20      	adds	r0, r4, #0
 8004134:	f7fc f8f6 	bl	8000324 <__aeabi_fadd>
 8004138:	1c03      	adds	r3, r0, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800413c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800413e:	22a4      	movs	r2, #164	; 0xa4
 8004140:	2510      	movs	r5, #16
 8004142:	1950      	adds	r0, r2, r5
 8004144:	19c2      	adds	r2, r0, r7
 8004146:	6810      	ldr	r0, [r2, #0]
 8004148:	f7fc fb3a 	bl	80007c0 <__aeabi_fmul>
 800414c:	1c03      	adds	r3, r0, #0
 800414e:	1c1c      	adds	r4, r3, #0
 8004150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f7fc fb34 	bl	80007c0 <__aeabi_fmul>
 8004158:	1c03      	adds	r3, r0, #0
 800415a:	1c19      	adds	r1, r3, #0
 800415c:	1c20      	adds	r0, r4, #0
 800415e:	f7fc fc55 	bl	8000a0c <__aeabi_fsub>
 8004162:	1c03      	adds	r3, r0, #0
 8004164:	1c1c      	adds	r4, r3, #0
 8004166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004168:	0032      	movs	r2, r6
 800416a:	1950      	adds	r0, r2, r5
 800416c:	19c2      	adds	r2, r0, r7
 800416e:	6810      	ldr	r0, [r2, #0]
 8004170:	f7fc fb26 	bl	80007c0 <__aeabi_fmul>
 8004174:	1c03      	adds	r3, r0, #0
 8004176:	1c1d      	adds	r5, r3, #0
 8004178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800417a:	26a8      	movs	r6, #168	; 0xa8
 800417c:	2310      	movs	r3, #16
 800417e:	18f0      	adds	r0, r6, r3
 8004180:	19c2      	adds	r2, r0, r7
 8004182:	6810      	ldr	r0, [r2, #0]
 8004184:	f7fc fb1c 	bl	80007c0 <__aeabi_fmul>
 8004188:	1c03      	adds	r3, r0, #0
 800418a:	1c19      	adds	r1, r3, #0
 800418c:	1c28      	adds	r0, r5, #0
 800418e:	f7fc fc3d 	bl	8000a0c <__aeabi_fsub>
 8004192:	1c03      	adds	r3, r0, #0
 8004194:	1c19      	adds	r1, r3, #0
 8004196:	1c20      	adds	r0, r4, #0
 8004198:	f7fc f8c4 	bl	8000324 <__aeabi_fadd>
 800419c:	1c03      	adds	r3, r0, #0
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80041a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a2:	6938      	ldr	r0, [r7, #16]
 80041a4:	f7fc fb0c 	bl	80007c0 <__aeabi_fmul>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	1c1c      	adds	r4, r3, #0
 80041ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ae:	20a0      	movs	r0, #160	; 0xa0
 80041b0:	2510      	movs	r5, #16
 80041b2:	1940      	adds	r0, r0, r5
 80041b4:	19c2      	adds	r2, r0, r7
 80041b6:	6810      	ldr	r0, [r2, #0]
 80041b8:	f7fc fb02 	bl	80007c0 <__aeabi_fmul>
 80041bc:	1c03      	adds	r3, r0, #0
 80041be:	1c19      	adds	r1, r3, #0
 80041c0:	1c20      	adds	r0, r4, #0
 80041c2:	f7fc fc23 	bl	8000a0c <__aeabi_fsub>
 80041c6:	1c03      	adds	r3, r0, #0
 80041c8:	1c1c      	adds	r4, r3, #0
 80041ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041cc:	1970      	adds	r0, r6, r5
 80041ce:	19c2      	adds	r2, r0, r7
 80041d0:	6810      	ldr	r0, [r2, #0]
 80041d2:	f7fc faf5 	bl	80007c0 <__aeabi_fmul>
 80041d6:	1c03      	adds	r3, r0, #0
 80041d8:	1c1d      	adds	r5, r3, #0
 80041da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041dc:	23ac      	movs	r3, #172	; 0xac
 80041de:	2610      	movs	r6, #16
 80041e0:	1998      	adds	r0, r3, r6
 80041e2:	19c3      	adds	r3, r0, r7
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	f7fc faeb 	bl	80007c0 <__aeabi_fmul>
 80041ea:	1c03      	adds	r3, r0, #0
 80041ec:	1c19      	adds	r1, r3, #0
 80041ee:	1c28      	adds	r0, r5, #0
 80041f0:	f7fc fc0c 	bl	8000a0c <__aeabi_fsub>
 80041f4:	1c03      	adds	r3, r0, #0
 80041f6:	1c19      	adds	r1, r3, #0
 80041f8:	1c20      	adds	r0, r4, #0
 80041fa:	f7fc f893 	bl	8000324 <__aeabi_fadd>
 80041fe:	1c03      	adds	r3, r0, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24

	if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8004202:	2100      	movs	r1, #0
 8004204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004206:	f7fc f85f 	bl	80002c8 <__aeabi_fcmpeq>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d175      	bne.n	80042fa <IMU_AHRSupdate+0x882>
 800420e:	2100      	movs	r1, #0
 8004210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004212:	f7fc f859 	bl	80002c8 <__aeabi_fcmpeq>
 8004216:	1e03      	subs	r3, r0, #0
 8004218:	d16f      	bne.n	80042fa <IMU_AHRSupdate+0x882>
 800421a:	2100      	movs	r1, #0
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f7fc f853 	bl	80002c8 <__aeabi_fcmpeq>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d169      	bne.n	80042fa <IMU_AHRSupdate+0x882>
	{
		exInt = exInt + ex * Ki * halfT;
 8004226:	2588      	movs	r5, #136	; 0x88
 8004228:	1979      	adds	r1, r7, r5
 800422a:	6809      	ldr	r1, [r1, #0]
 800422c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800422e:	f7fc fac7 	bl	80007c0 <__aeabi_fmul>
 8004232:	1c03      	adds	r3, r0, #0
 8004234:	1c19      	adds	r1, r3, #0
 8004236:	2484      	movs	r4, #132	; 0x84
 8004238:	19a0      	adds	r0, r4, r6
 800423a:	19c3      	adds	r3, r0, r7
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f7fc f871 	bl	8000324 <__aeabi_fadd>
 8004242:	1c03      	adds	r3, r0, #0
 8004244:	19a1      	adds	r1, r4, r6
 8004246:	19ca      	adds	r2, r1, r7
 8004248:	6013      	str	r3, [r2, #0]
		eyInt = eyInt + ey * Ki * halfT;
 800424a:	1979      	adds	r1, r7, r5
 800424c:	6809      	ldr	r1, [r1, #0]
 800424e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004250:	f7fc fab6 	bl	80007c0 <__aeabi_fmul>
 8004254:	1c03      	adds	r3, r0, #0
 8004256:	1c19      	adds	r1, r3, #0
 8004258:	2580      	movs	r5, #128	; 0x80
 800425a:	19a8      	adds	r0, r5, r6
 800425c:	19c3      	adds	r3, r0, r7
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	f7fc f860 	bl	8000324 <__aeabi_fadd>
 8004264:	1c03      	adds	r3, r0, #0
 8004266:	19a9      	adds	r1, r5, r6
 8004268:	19ca      	adds	r2, r1, r7
 800426a:	6013      	str	r3, [r2, #0]
		ezInt = ezInt + ez * Ki * halfT;
 800426c:	2388      	movs	r3, #136	; 0x88
 800426e:	18f9      	adds	r1, r7, r3
 8004270:	6809      	ldr	r1, [r1, #0]
 8004272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004274:	f7fc faa4 	bl	80007c0 <__aeabi_fmul>
 8004278:	1c03      	adds	r3, r0, #0
 800427a:	1c19      	adds	r1, r3, #0
 800427c:	228c      	movs	r2, #140	; 0x8c
 800427e:	18b8      	adds	r0, r7, r2
 8004280:	6800      	ldr	r0, [r0, #0]
 8004282:	f7fc f84f 	bl	8000324 <__aeabi_fadd>
 8004286:	1c03      	adds	r3, r0, #0
 8004288:	228c      	movs	r2, #140	; 0x8c
 800428a:	18b9      	adds	r1, r7, r2
 800428c:	600b      	str	r3, [r1, #0]

		gx = gx + Kp * ex + exInt;
 800428e:	4930      	ldr	r1, [pc, #192]	; (8004350 <IMU_AHRSupdate+0x8d8>)
 8004290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004292:	f7fc fa95 	bl	80007c0 <__aeabi_fmul>
 8004296:	1c03      	adds	r3, r0, #0
 8004298:	69f9      	ldr	r1, [r7, #28]
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7fc f842 	bl	8000324 <__aeabi_fadd>
 80042a0:	1c03      	adds	r3, r0, #0
 80042a2:	1c19      	adds	r1, r3, #0
 80042a4:	19a0      	adds	r0, r4, r6
 80042a6:	19c3      	adds	r3, r0, r7
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	f7fc f83b 	bl	8000324 <__aeabi_fadd>
 80042ae:	1c03      	adds	r3, r0, #0
 80042b0:	61fb      	str	r3, [r7, #28]
		gy = gy + Kp * ey + eyInt;
 80042b2:	4927      	ldr	r1, [pc, #156]	; (8004350 <IMU_AHRSupdate+0x8d8>)
 80042b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b6:	f7fc fa83 	bl	80007c0 <__aeabi_fmul>
 80042ba:	1c03      	adds	r3, r0, #0
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	1c18      	adds	r0, r3, #0
 80042c0:	f7fc f830 	bl	8000324 <__aeabi_fadd>
 80042c4:	1c03      	adds	r3, r0, #0
 80042c6:	1c19      	adds	r1, r3, #0
 80042c8:	19a8      	adds	r0, r5, r6
 80042ca:	19c3      	adds	r3, r0, r7
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f7fc f829 	bl	8000324 <__aeabi_fadd>
 80042d2:	1c03      	adds	r3, r0, #0
 80042d4:	61bb      	str	r3, [r7, #24]
		gz = gz + Kp * ez + ezInt;
 80042d6:	491e      	ldr	r1, [pc, #120]	; (8004350 <IMU_AHRSupdate+0x8d8>)
 80042d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042da:	f7fc fa71 	bl	80007c0 <__aeabi_fmul>
 80042de:	1c03      	adds	r3, r0, #0
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7fc f81e 	bl	8000324 <__aeabi_fadd>
 80042e8:	1c03      	adds	r3, r0, #0
 80042ea:	1c19      	adds	r1, r3, #0
 80042ec:	238c      	movs	r3, #140	; 0x8c
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f7fc f817 	bl	8000324 <__aeabi_fadd>
 80042f6:	1c03      	adds	r3, r0, #0
 80042f8:	617b      	str	r3, [r7, #20]
	}

	q0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <IMU_AHRSupdate+0x8dc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	0612      	lsls	r2, r2, #24
 8004302:	4053      	eors	r3, r2
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	1c18      	adds	r0, r3, #0
 8004308:	f7fc fa5a 	bl	80007c0 <__aeabi_fmul>
 800430c:	1c03      	adds	r3, r0, #0
 800430e:	1c1c      	adds	r4, r3, #0
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <IMU_AHRSupdate+0x8e0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	1c18      	adds	r0, r3, #0
 8004318:	f7fc fa52 	bl	80007c0 <__aeabi_fmul>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	1c19      	adds	r1, r3, #0
 8004320:	1c20      	adds	r0, r4, #0
 8004322:	f7fc fb73 	bl	8000a0c <__aeabi_fsub>
 8004326:	1c03      	adds	r3, r0, #0
 8004328:	1c1c      	adds	r4, r3, #0
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <IMU_AHRSupdate+0x8e4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	1c18      	adds	r0, r3, #0
 8004332:	f7fc fa45 	bl	80007c0 <__aeabi_fmul>
 8004336:	1c03      	adds	r3, r0, #0
 8004338:	1c19      	adds	r1, r3, #0
 800433a:	1c20      	adds	r0, r4, #0
 800433c:	f7fc fb66 	bl	8000a0c <__aeabi_fsub>
 8004340:	1c03      	adds	r3, r0, #0
 8004342:	2588      	movs	r5, #136	; 0x88
 8004344:	197a      	adds	r2, r7, r5
 8004346:	6811      	ldr	r1, [r2, #0]
 8004348:	1c18      	adds	r0, r3, #0
 800434a:	e009      	b.n	8004360 <IMU_AHRSupdate+0x8e8>
 800434c:	3fe00000 	.word	0x3fe00000
 8004350:	40900000 	.word	0x40900000
 8004354:	20000288 	.word	0x20000288
 8004358:	2000028c 	.word	0x2000028c
 800435c:	20000290 	.word	0x20000290
 8004360:	f7fc fa2e 	bl	80007c0 <__aeabi_fmul>
 8004364:	1c03      	adds	r3, r0, #0
 8004366:	1c1a      	adds	r2, r3, #0
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <IMU_AHRSupdate+0xb00>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	1c19      	adds	r1, r3, #0
 800436e:	1c10      	adds	r0, r2, #0
 8004370:	f7fb ffd8 	bl	8000324 <__aeabi_fadd>
 8004374:	1c03      	adds	r3, r0, #0
 8004376:	1c1a      	adds	r2, r3, #0
 8004378:	4b7f      	ldr	r3, [pc, #508]	; (8004578 <IMU_AHRSupdate+0xb00>)
 800437a:	601a      	str	r2, [r3, #0]
	q1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800437c:	4b7e      	ldr	r3, [pc, #504]	; (8004578 <IMU_AHRSupdate+0xb00>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69f9      	ldr	r1, [r7, #28]
 8004382:	1c18      	adds	r0, r3, #0
 8004384:	f7fc fa1c 	bl	80007c0 <__aeabi_fmul>
 8004388:	1c03      	adds	r3, r0, #0
 800438a:	1c1c      	adds	r4, r3, #0
 800438c:	4b7b      	ldr	r3, [pc, #492]	; (800457c <IMU_AHRSupdate+0xb04>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	1c18      	adds	r0, r3, #0
 8004394:	f7fc fa14 	bl	80007c0 <__aeabi_fmul>
 8004398:	1c03      	adds	r3, r0, #0
 800439a:	1c19      	adds	r1, r3, #0
 800439c:	1c20      	adds	r0, r4, #0
 800439e:	f7fb ffc1 	bl	8000324 <__aeabi_fadd>
 80043a2:	1c03      	adds	r3, r0, #0
 80043a4:	1c1c      	adds	r4, r3, #0
 80043a6:	4b76      	ldr	r3, [pc, #472]	; (8004580 <IMU_AHRSupdate+0xb08>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	1c18      	adds	r0, r3, #0
 80043ae:	f7fc fa07 	bl	80007c0 <__aeabi_fmul>
 80043b2:	1c03      	adds	r3, r0, #0
 80043b4:	1c19      	adds	r1, r3, #0
 80043b6:	1c20      	adds	r0, r4, #0
 80043b8:	f7fc fb28 	bl	8000a0c <__aeabi_fsub>
 80043bc:	1c03      	adds	r3, r0, #0
 80043be:	197a      	adds	r2, r7, r5
 80043c0:	6811      	ldr	r1, [r2, #0]
 80043c2:	1c18      	adds	r0, r3, #0
 80043c4:	f7fc f9fc 	bl	80007c0 <__aeabi_fmul>
 80043c8:	1c03      	adds	r3, r0, #0
 80043ca:	1c1a      	adds	r2, r3, #0
 80043cc:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	1c19      	adds	r1, r3, #0
 80043d2:	1c10      	adds	r0, r2, #0
 80043d4:	f7fb ffa6 	bl	8000324 <__aeabi_fadd>
 80043d8:	1c03      	adds	r3, r0, #0
 80043da:	1c1a      	adds	r2, r3, #0
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 80043de:	601a      	str	r2, [r3, #0]
	q2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 80043e0:	4b65      	ldr	r3, [pc, #404]	; (8004578 <IMU_AHRSupdate+0xb00>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	1c18      	adds	r0, r3, #0
 80043e8:	f7fc f9ea 	bl	80007c0 <__aeabi_fmul>
 80043ec:	1c03      	adds	r3, r0, #0
 80043ee:	1c1c      	adds	r4, r3, #0
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	1c18      	adds	r0, r3, #0
 80043f8:	f7fc f9e2 	bl	80007c0 <__aeabi_fmul>
 80043fc:	1c03      	adds	r3, r0, #0
 80043fe:	1c19      	adds	r1, r3, #0
 8004400:	1c20      	adds	r0, r4, #0
 8004402:	f7fc fb03 	bl	8000a0c <__aeabi_fsub>
 8004406:	1c03      	adds	r3, r0, #0
 8004408:	1c1c      	adds	r4, r3, #0
 800440a:	4b5d      	ldr	r3, [pc, #372]	; (8004580 <IMU_AHRSupdate+0xb08>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	1c18      	adds	r0, r3, #0
 8004412:	f7fc f9d5 	bl	80007c0 <__aeabi_fmul>
 8004416:	1c03      	adds	r3, r0, #0
 8004418:	1c19      	adds	r1, r3, #0
 800441a:	1c20      	adds	r0, r4, #0
 800441c:	f7fb ff82 	bl	8000324 <__aeabi_fadd>
 8004420:	1c03      	adds	r3, r0, #0
 8004422:	197a      	adds	r2, r7, r5
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1c18      	adds	r0, r3, #0
 8004428:	f7fc f9ca 	bl	80007c0 <__aeabi_fmul>
 800442c:	1c03      	adds	r3, r0, #0
 800442e:	1c1a      	adds	r2, r3, #0
 8004430:	4b52      	ldr	r3, [pc, #328]	; (800457c <IMU_AHRSupdate+0xb04>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	1c19      	adds	r1, r3, #0
 8004436:	1c10      	adds	r0, r2, #0
 8004438:	f7fb ff74 	bl	8000324 <__aeabi_fadd>
 800443c:	1c03      	adds	r3, r0, #0
 800443e:	1c1a      	adds	r2, r3, #0
 8004440:	4b4e      	ldr	r3, [pc, #312]	; (800457c <IMU_AHRSupdate+0xb04>)
 8004442:	601a      	str	r2, [r3, #0]
	q3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8004444:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <IMU_AHRSupdate+0xb00>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	1c18      	adds	r0, r3, #0
 800444c:	f7fc f9b8 	bl	80007c0 <__aeabi_fmul>
 8004450:	1c03      	adds	r3, r0, #0
 8004452:	1c1c      	adds	r4, r3, #0
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	1c18      	adds	r0, r3, #0
 800445c:	f7fc f9b0 	bl	80007c0 <__aeabi_fmul>
 8004460:	1c03      	adds	r3, r0, #0
 8004462:	1c19      	adds	r1, r3, #0
 8004464:	1c20      	adds	r0, r4, #0
 8004466:	f7fb ff5d 	bl	8000324 <__aeabi_fadd>
 800446a:	1c03      	adds	r3, r0, #0
 800446c:	1c1c      	adds	r4, r3, #0
 800446e:	4b43      	ldr	r3, [pc, #268]	; (800457c <IMU_AHRSupdate+0xb04>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69f9      	ldr	r1, [r7, #28]
 8004474:	1c18      	adds	r0, r3, #0
 8004476:	f7fc f9a3 	bl	80007c0 <__aeabi_fmul>
 800447a:	1c03      	adds	r3, r0, #0
 800447c:	1c19      	adds	r1, r3, #0
 800447e:	1c20      	adds	r0, r4, #0
 8004480:	f7fc fac4 	bl	8000a0c <__aeabi_fsub>
 8004484:	1c03      	adds	r3, r0, #0
 8004486:	197a      	adds	r2, r7, r5
 8004488:	6811      	ldr	r1, [r2, #0]
 800448a:	1c18      	adds	r0, r3, #0
 800448c:	f7fc f998 	bl	80007c0 <__aeabi_fmul>
 8004490:	1c03      	adds	r3, r0, #0
 8004492:	1c1a      	adds	r2, r3, #0
 8004494:	4b3a      	ldr	r3, [pc, #232]	; (8004580 <IMU_AHRSupdate+0xb08>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c19      	adds	r1, r3, #0
 800449a:	1c10      	adds	r0, r2, #0
 800449c:	f7fb ff42 	bl	8000324 <__aeabi_fadd>
 80044a0:	1c03      	adds	r3, r0, #0
 80044a2:	1c1a      	adds	r2, r3, #0
 80044a4:	4b36      	ldr	r3, [pc, #216]	; (8004580 <IMU_AHRSupdate+0xb08>)
 80044a6:	601a      	str	r2, [r3, #0]

	norm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <IMU_AHRSupdate+0xb00>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <IMU_AHRSupdate+0xb00>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1c19      	adds	r1, r3, #0
 80044b2:	1c10      	adds	r0, r2, #0
 80044b4:	f7fc f984 	bl	80007c0 <__aeabi_fmul>
 80044b8:	1c03      	adds	r3, r0, #0
 80044ba:	1c1c      	adds	r4, r3, #0
 80044bc:	4b31      	ldr	r3, [pc, #196]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b30      	ldr	r3, [pc, #192]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c19      	adds	r1, r3, #0
 80044c6:	1c10      	adds	r0, r2, #0
 80044c8:	f7fc f97a 	bl	80007c0 <__aeabi_fmul>
 80044cc:	1c03      	adds	r3, r0, #0
 80044ce:	1c19      	adds	r1, r3, #0
 80044d0:	1c20      	adds	r0, r4, #0
 80044d2:	f7fb ff27 	bl	8000324 <__aeabi_fadd>
 80044d6:	1c03      	adds	r3, r0, #0
 80044d8:	1c1c      	adds	r4, r3, #0
 80044da:	4b28      	ldr	r3, [pc, #160]	; (800457c <IMU_AHRSupdate+0xb04>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <IMU_AHRSupdate+0xb04>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	1c19      	adds	r1, r3, #0
 80044e4:	1c10      	adds	r0, r2, #0
 80044e6:	f7fc f96b 	bl	80007c0 <__aeabi_fmul>
 80044ea:	1c03      	adds	r3, r0, #0
 80044ec:	1c19      	adds	r1, r3, #0
 80044ee:	1c20      	adds	r0, r4, #0
 80044f0:	f7fb ff18 	bl	8000324 <__aeabi_fadd>
 80044f4:	1c03      	adds	r3, r0, #0
 80044f6:	1c1c      	adds	r4, r3, #0
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <IMU_AHRSupdate+0xb08>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <IMU_AHRSupdate+0xb08>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	1c19      	adds	r1, r3, #0
 8004502:	1c10      	adds	r0, r2, #0
 8004504:	f7fc f95c 	bl	80007c0 <__aeabi_fmul>
 8004508:	1c03      	adds	r3, r0, #0
 800450a:	1c19      	adds	r1, r3, #0
 800450c:	1c20      	adds	r0, r4, #0
 800450e:	f7fb ff09 	bl	8000324 <__aeabi_fadd>
 8004512:	1c03      	adds	r3, r0, #0
 8004514:	1c18      	adds	r0, r3, #0
 8004516:	f7ff fa57 	bl	80039c8 <invSqrt>
 800451a:	1c03      	adds	r3, r0, #0
 800451c:	65fb      	str	r3, [r7, #92]	; 0x5c
	q0 = q0 * norm;
 800451e:	4b16      	ldr	r3, [pc, #88]	; (8004578 <IMU_AHRSupdate+0xb00>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004524:	1c18      	adds	r0, r3, #0
 8004526:	f7fc f94b 	bl	80007c0 <__aeabi_fmul>
 800452a:	1c03      	adds	r3, r0, #0
 800452c:	1c1a      	adds	r2, r3, #0
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <IMU_AHRSupdate+0xb00>)
 8004530:	601a      	str	r2, [r3, #0]
	q1 = q1 * norm;
 8004532:	4b14      	ldr	r3, [pc, #80]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004538:	1c18      	adds	r0, r3, #0
 800453a:	f7fc f941 	bl	80007c0 <__aeabi_fmul>
 800453e:	1c03      	adds	r3, r0, #0
 8004540:	1c1a      	adds	r2, r3, #0
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <IMU_AHRSupdate+0xb0c>)
 8004544:	601a      	str	r2, [r3, #0]
	q2 = q2 * norm;
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <IMU_AHRSupdate+0xb04>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800454c:	1c18      	adds	r0, r3, #0
 800454e:	f7fc f937 	bl	80007c0 <__aeabi_fmul>
 8004552:	1c03      	adds	r3, r0, #0
 8004554:	1c1a      	adds	r2, r3, #0
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <IMU_AHRSupdate+0xb04>)
 8004558:	601a      	str	r2, [r3, #0]
	q3 = q3 * norm;
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <IMU_AHRSupdate+0xb08>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004560:	1c18      	adds	r0, r3, #0
 8004562:	f7fc f92d 	bl	80007c0 <__aeabi_fmul>
 8004566:	1c03      	adds	r3, r0, #0
 8004568:	1c1a      	adds	r2, r3, #0
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <IMU_AHRSupdate+0xb08>)
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b027      	add	sp, #156	; 0x9c
 8004574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	20000284 	.word	0x20000284
 800457c:	2000028c 	.word	0x2000028c
 8004580:	20000290 	.word	0x20000290
 8004584:	20000288 	.word	0x20000288

08004588 <IMU_GetQuater>:
  * @brief  Get quaters
  * @param  None
  * @retval None
  */
void IMU_GetQuater(void)
{
 8004588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800458a:	46c6      	mov	lr, r8
 800458c:	b500      	push	{lr}
 800458e:	b096      	sub	sp, #88	; 0x58
 8004590:	af06      	add	r7, sp, #24
	float MotionVal[9];
    int16_t s16Gyro[3], s16Accel[3], s16Magn[3];

    invMSAccelRead(&s16Accel[0], &s16Accel[1], &s16Accel[2]);
 8004592:	240c      	movs	r4, #12
 8004594:	193b      	adds	r3, r7, r4
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	193b      	adds	r3, r7, r4
 800459a:	1c99      	adds	r1, r3, #2
 800459c:	193b      	adds	r3, r7, r4
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f98a 	bl	80048b8 <invMSAccelRead>
    invMSGyroRead(&s16Gyro[0], &s16Gyro[1], &s16Gyro[2]);
 80045a4:	2514      	movs	r5, #20
 80045a6:	197b      	adds	r3, r7, r5
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	197b      	adds	r3, r7, r5
 80045ac:	1c99      	adds	r1, r3, #2
 80045ae:	197b      	adds	r3, r7, r5
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 f9ad 	bl	8004910 <invMSGyroRead>
    invMSMagRead(&s16Magn[0], &s16Magn[1], &s16Magn[2]);
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	1c99      	adds	r1, r3, #2
 80045be:	1d3b      	adds	r3, r7, #4
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f9d1 	bl	8004968 <invMSMagRead>

    //for log
    gyro[0] = s16Gyro[0];
 80045c6:	197b      	adds	r3, r7, r5
 80045c8:	2200      	movs	r2, #0
 80045ca:	5e9a      	ldrsh	r2, [r3, r2]
 80045cc:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <IMU_GetQuater+0x244>)
 80045ce:	801a      	strh	r2, [r3, #0]
    gyro[1] = s16Gyro[1];
 80045d0:	197b      	adds	r3, r7, r5
 80045d2:	2202      	movs	r2, #2
 80045d4:	5e9a      	ldrsh	r2, [r3, r2]
 80045d6:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <IMU_GetQuater+0x244>)
 80045d8:	805a      	strh	r2, [r3, #2]
    gyro[2] = s16Gyro[2];
 80045da:	197b      	adds	r3, r7, r5
 80045dc:	2204      	movs	r2, #4
 80045de:	5e9a      	ldrsh	r2, [r3, r2]
 80045e0:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <IMU_GetQuater+0x244>)
 80045e2:	809a      	strh	r2, [r3, #4]
    accel[0] = s16Accel[0];
 80045e4:	193b      	adds	r3, r7, r4
 80045e6:	2200      	movs	r2, #0
 80045e8:	5e9a      	ldrsh	r2, [r3, r2]
 80045ea:	4b79      	ldr	r3, [pc, #484]	; (80047d0 <IMU_GetQuater+0x248>)
 80045ec:	801a      	strh	r2, [r3, #0]
    accel[1] = s16Accel[1];
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	2202      	movs	r2, #2
 80045f2:	5e9a      	ldrsh	r2, [r3, r2]
 80045f4:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <IMU_GetQuater+0x248>)
 80045f6:	805a      	strh	r2, [r3, #2]
    accel[2] = s16Accel[2];
 80045f8:	193b      	adds	r3, r7, r4
 80045fa:	2204      	movs	r2, #4
 80045fc:	5e9a      	ldrsh	r2, [r3, r2]
 80045fe:	4b74      	ldr	r3, [pc, #464]	; (80047d0 <IMU_GetQuater+0x248>)
 8004600:	809a      	strh	r2, [r3, #4]
    magn[0] = s16Magn[0] - gstMagOffset.s16X;
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	2200      	movs	r2, #0
 8004606:	5e9b      	ldrsh	r3, [r3, r2]
 8004608:	b29a      	uxth	r2, r3
 800460a:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <IMU_GetQuater+0x24c>)
 800460c:	2100      	movs	r1, #0
 800460e:	5e5b      	ldrsh	r3, [r3, r1]
 8004610:	b29b      	uxth	r3, r3
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	b29b      	uxth	r3, r3
 8004616:	b21a      	sxth	r2, r3
 8004618:	4b6f      	ldr	r3, [pc, #444]	; (80047d8 <IMU_GetQuater+0x250>)
 800461a:	801a      	strh	r2, [r3, #0]
    magn[1] = s16Magn[1] - gstMagOffset.s16Y;
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	2202      	movs	r2, #2
 8004620:	5e9b      	ldrsh	r3, [r3, r2]
 8004622:	b29a      	uxth	r2, r3
 8004624:	4b6b      	ldr	r3, [pc, #428]	; (80047d4 <IMU_GetQuater+0x24c>)
 8004626:	2102      	movs	r1, #2
 8004628:	5e5b      	ldrsh	r3, [r3, r1]
 800462a:	b29b      	uxth	r3, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	b29b      	uxth	r3, r3
 8004630:	b21a      	sxth	r2, r3
 8004632:	4b69      	ldr	r3, [pc, #420]	; (80047d8 <IMU_GetQuater+0x250>)
 8004634:	805a      	strh	r2, [r3, #2]
    magn[2] = s16Magn[2] - gstMagOffset.s16Z;
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	2204      	movs	r2, #4
 800463a:	5e9b      	ldrsh	r3, [r3, r2]
 800463c:	b29a      	uxth	r2, r3
 800463e:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <IMU_GetQuater+0x24c>)
 8004640:	2104      	movs	r1, #4
 8004642:	5e5b      	ldrsh	r3, [r3, r1]
 8004644:	b29b      	uxth	r3, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	b29b      	uxth	r3, r3
 800464a:	b21a      	sxth	r2, r3
 800464c:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <IMU_GetQuater+0x250>)
 800464e:	809a      	strh	r2, [r3, #4]

    MotionVal[0]=gyro[0]/32.8;
 8004650:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <IMU_GetQuater+0x244>)
 8004652:	2200      	movs	r2, #0
 8004654:	5e9b      	ldrsh	r3, [r3, r2]
 8004656:	0018      	movs	r0, r3
 8004658:	f7fe f92e 	bl	80028b8 <__aeabi_i2d>
 800465c:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <IMU_GetQuater+0x254>)
 800465e:	4b60      	ldr	r3, [pc, #384]	; (80047e0 <IMU_GetQuater+0x258>)
 8004660:	f7fc ff0c 	bl	800147c <__aeabi_ddiv>
 8004664:	0002      	movs	r2, r0
 8004666:	000b      	movs	r3, r1
 8004668:	0010      	movs	r0, r2
 800466a:	0019      	movs	r1, r3
 800466c:	f7fe f99c 	bl	80029a8 <__aeabi_d2f>
 8004670:	1c02      	adds	r2, r0, #0
 8004672:	241c      	movs	r4, #28
 8004674:	193b      	adds	r3, r7, r4
 8004676:	601a      	str	r2, [r3, #0]
    MotionVal[1]=gyro[1]/32.8;
 8004678:	4b54      	ldr	r3, [pc, #336]	; (80047cc <IMU_GetQuater+0x244>)
 800467a:	2202      	movs	r2, #2
 800467c:	5e9b      	ldrsh	r3, [r3, r2]
 800467e:	0018      	movs	r0, r3
 8004680:	f7fe f91a 	bl	80028b8 <__aeabi_i2d>
 8004684:	4a55      	ldr	r2, [pc, #340]	; (80047dc <IMU_GetQuater+0x254>)
 8004686:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <IMU_GetQuater+0x258>)
 8004688:	f7fc fef8 	bl	800147c <__aeabi_ddiv>
 800468c:	0002      	movs	r2, r0
 800468e:	000b      	movs	r3, r1
 8004690:	0010      	movs	r0, r2
 8004692:	0019      	movs	r1, r3
 8004694:	f7fe f988 	bl	80029a8 <__aeabi_d2f>
 8004698:	1c02      	adds	r2, r0, #0
 800469a:	193b      	adds	r3, r7, r4
 800469c:	605a      	str	r2, [r3, #4]
    MotionVal[2]=gyro[2]/32.8;
 800469e:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <IMU_GetQuater+0x244>)
 80046a0:	2204      	movs	r2, #4
 80046a2:	5e9b      	ldrsh	r3, [r3, r2]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fe f907 	bl	80028b8 <__aeabi_i2d>
 80046aa:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <IMU_GetQuater+0x254>)
 80046ac:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <IMU_GetQuater+0x258>)
 80046ae:	f7fc fee5 	bl	800147c <__aeabi_ddiv>
 80046b2:	0002      	movs	r2, r0
 80046b4:	000b      	movs	r3, r1
 80046b6:	0010      	movs	r0, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	f7fe f975 	bl	80029a8 <__aeabi_d2f>
 80046be:	1c02      	adds	r2, r0, #0
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	609a      	str	r2, [r3, #8]
    MotionVal[3]=accel[0];
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <IMU_GetQuater+0x248>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	5e9b      	ldrsh	r3, [r3, r2]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f7fc fb4c 	bl	8000d68 <__aeabi_i2f>
 80046d0:	1c02      	adds	r2, r0, #0
 80046d2:	193b      	adds	r3, r7, r4
 80046d4:	60da      	str	r2, [r3, #12]
    MotionVal[4]=accel[1];
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <IMU_GetQuater+0x248>)
 80046d8:	2202      	movs	r2, #2
 80046da:	5e9b      	ldrsh	r3, [r3, r2]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fc fb43 	bl	8000d68 <__aeabi_i2f>
 80046e2:	1c02      	adds	r2, r0, #0
 80046e4:	193b      	adds	r3, r7, r4
 80046e6:	611a      	str	r2, [r3, #16]
    MotionVal[5]=accel[2];
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <IMU_GetQuater+0x248>)
 80046ea:	2204      	movs	r2, #4
 80046ec:	5e9b      	ldrsh	r3, [r3, r2]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f7fc fb3a 	bl	8000d68 <__aeabi_i2f>
 80046f4:	1c02      	adds	r2, r0, #0
 80046f6:	193b      	adds	r3, r7, r4
 80046f8:	615a      	str	r2, [r3, #20]
    MotionVal[6]=magn[0];
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <IMU_GetQuater+0x250>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004700:	0018      	movs	r0, r3
 8004702:	f7fc fb31 	bl	8000d68 <__aeabi_i2f>
 8004706:	1c02      	adds	r2, r0, #0
 8004708:	193b      	adds	r3, r7, r4
 800470a:	619a      	str	r2, [r3, #24]
    MotionVal[7]=magn[1];
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <IMU_GetQuater+0x250>)
 800470e:	2202      	movs	r2, #2
 8004710:	5e9b      	ldrsh	r3, [r3, r2]
 8004712:	0018      	movs	r0, r3
 8004714:	f7fc fb28 	bl	8000d68 <__aeabi_i2f>
 8004718:	1c02      	adds	r2, r0, #0
 800471a:	193b      	adds	r3, r7, r4
 800471c:	61da      	str	r2, [r3, #28]
    MotionVal[8]=magn[2];
 800471e:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <IMU_GetQuater+0x250>)
 8004720:	2204      	movs	r2, #4
 8004722:	5e9b      	ldrsh	r3, [r3, r2]
 8004724:	0018      	movs	r0, r3
 8004726:	f7fc fb1f 	bl	8000d68 <__aeabi_i2f>
 800472a:	1c02      	adds	r2, r0, #0
 800472c:	193b      	adds	r3, r7, r4
 800472e:	621a      	str	r2, [r3, #32]
 	IMU_AHRSupdate((float)MotionVal[0] * 0.0175, (float)MotionVal[1] * 0.0175, (float)MotionVal[2] * 0.0175,
 8004730:	193b      	adds	r3, r7, r4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1c18      	adds	r0, r3, #0
 8004736:	f7fe f8ef 	bl	8002918 <__aeabi_f2d>
 800473a:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <IMU_GetQuater+0x25c>)
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <IMU_GetQuater+0x260>)
 800473e:	f7fd fa9f 	bl	8001c80 <__aeabi_dmul>
 8004742:	0002      	movs	r2, r0
 8004744:	000b      	movs	r3, r1
 8004746:	0010      	movs	r0, r2
 8004748:	0019      	movs	r1, r3
 800474a:	f7fe f92d 	bl	80029a8 <__aeabi_d2f>
 800474e:	1c06      	adds	r6, r0, #0
 8004750:	193b      	adds	r3, r7, r4
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	1c18      	adds	r0, r3, #0
 8004756:	f7fe f8df 	bl	8002918 <__aeabi_f2d>
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <IMU_GetQuater+0x25c>)
 800475c:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <IMU_GetQuater+0x260>)
 800475e:	f7fd fa8f 	bl	8001c80 <__aeabi_dmul>
 8004762:	0002      	movs	r2, r0
 8004764:	000b      	movs	r3, r1
 8004766:	0010      	movs	r0, r2
 8004768:	0019      	movs	r1, r3
 800476a:	f7fe f91d 	bl	80029a8 <__aeabi_d2f>
 800476e:	4680      	mov	r8, r0
 8004770:	193b      	adds	r3, r7, r4
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	1c18      	adds	r0, r3, #0
 8004776:	f7fe f8cf 	bl	8002918 <__aeabi_f2d>
 800477a:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <IMU_GetQuater+0x25c>)
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <IMU_GetQuater+0x260>)
 800477e:	f7fd fa7f 	bl	8001c80 <__aeabi_dmul>
 8004782:	0002      	movs	r2, r0
 8004784:	000b      	movs	r3, r1
 8004786:	0010      	movs	r0, r2
 8004788:	0019      	movs	r1, r3
 800478a:	f7fe f90d 	bl	80029a8 <__aeabi_d2f>
 800478e:	4684      	mov	ip, r0
 8004790:	193b      	adds	r3, r7, r4
 8004792:	68dd      	ldr	r5, [r3, #12]
 8004794:	193b      	adds	r3, r7, r4
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	193b      	adds	r3, r7, r4
 800479a:	6959      	ldr	r1, [r3, #20]
 800479c:	193b      	adds	r3, r7, r4
 800479e:	6998      	ldr	r0, [r3, #24]
 80047a0:	193b      	adds	r3, r7, r4
 80047a2:	69dc      	ldr	r4, [r3, #28]
 80047a4:	231c      	movs	r3, #28
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	9304      	str	r3, [sp, #16]
 80047ac:	9403      	str	r4, [sp, #12]
 80047ae:	9002      	str	r0, [sp, #8]
 80047b0:	9101      	str	r1, [sp, #4]
 80047b2:	9200      	str	r2, [sp, #0]
 80047b4:	1c2b      	adds	r3, r5, #0
 80047b6:	4662      	mov	r2, ip
 80047b8:	4641      	mov	r1, r8
 80047ba:	1c30      	adds	r0, r6, #0
 80047bc:	f7ff f95c 	bl	8003a78 <IMU_AHRSupdate>
   	(float)MotionVal[3], (float)MotionVal[4], (float)MotionVal[5], (float)MotionVal[6], (float)MotionVal[7], MotionVal[8]);
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b010      	add	sp, #64	; 0x40
 80047c6:	bc80      	pop	{r7}
 80047c8:	46b8      	mov	r8, r7
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047cc:	20000144 	.word	0x20000144
 80047d0:	2000013c 	.word	0x2000013c
 80047d4:	20000294 	.word	0x20000294
 80047d8:	20000134 	.word	0x20000134
 80047dc:	66666666 	.word	0x66666666
 80047e0:	40406666 	.word	0x40406666
 80047e4:	1eb851ec 	.word	0x1eb851ec
 80047e8:	3f91eb85 	.word	0x3f91eb85

080047ec <invMSInit>:
{
    "Motion sersor is ICM-20948"
};

extern void invMSInit()
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
    INVMS_EN_SENSOR_TYPY i;
    //char buf[64] = {""};
    //sprintf(buf, "%s", "\r\nSensor raw data [v0.9]. \r\n");
    //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
    //memset(buf, 0, sizeof(buf));
    printf("\r\nSensor raw data [v0.9]. \r\n");
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <invMSInit+0xb4>)
 80047f4:	0018      	movs	r0, r3
 80047f6:	f002 fc9f 	bl	8007138 <puts>
    DEV_Delay_ms(10);
 80047fa:	200a      	movs	r0, #10
 80047fc:	f000 f96e 	bl	8004adc <HAL_Delay>
	for(i=INVMS_EN_SENSOR_TYPY_MPU9255; i<INVMS_EN_SENSOR_TYPY_MAX; i++)
 8004800:	1dfb      	adds	r3, r7, #7
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e02d      	b.n	8004864 <invMSInit+0x78>
	{
        if(gsstSensorList[i].pFunCheck != NULL)
 8004808:	1dfb      	adds	r3, r7, #7
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	4925      	ldr	r1, [pc, #148]	; (80048a4 <invMSInit+0xb8>)
 800480e:	0013      	movs	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	189b      	adds	r3, r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	18cb      	adds	r3, r1, r3
 8004818:	3304      	adds	r3, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01c      	beq.n	800485a <invMSInit+0x6e>
        {
            if( true == gsstSensorList[i].pFunCheck())
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	491f      	ldr	r1, [pc, #124]	; (80048a4 <invMSInit+0xb8>)
 8004826:	0013      	movs	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	189b      	adds	r3, r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	18cb      	adds	r3, r1, r3
 8004830:	3304      	adds	r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4798      	blx	r3
 8004836:	1e03      	subs	r3, r0, #0
 8004838:	d00f      	beq.n	800485a <invMSInit+0x6e>
            {
                genCurrentSensorType = i;
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <invMSInit+0xbc>)
 800483c:	1dfa      	adds	r2, r7, #7
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	701a      	strb	r2, [r3, #0]
                printf("\r\n%s\r\n", gstring[genCurrentSensorType]);
 8004842:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <invMSInit+0xbc>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	001a      	movs	r2, r3
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <invMSInit+0xc0>)
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	58d2      	ldr	r2, [r2, r3]
 800484e:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <invMSInit+0xc4>)
 8004850:	0011      	movs	r1, r2
 8004852:	0018      	movs	r0, r3
 8004854:	f002 fbe4 	bl	8007020 <iprintf>
                //sprintf(buf, "\r\n%s\r\n", gstring[genCurrentSensorType]);
                //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
                //memset(buf, 0, sizeof(buf));
                break;
 8004858:	e008      	b.n	800486c <invMSInit+0x80>
	for(i=INVMS_EN_SENSOR_TYPY_MPU9255; i<INVMS_EN_SENSOR_TYPY_MAX; i++)
 800485a:	1dfb      	adds	r3, r7, #7
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	1dfb      	adds	r3, r7, #7
 8004860:	3201      	adds	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d9cd      	bls.n	8004808 <invMSInit+0x1c>
            }
        }
    }

    if( genCurrentSensorType!= INVMS_EN_SENSOR_TYPY_MAX)
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <invMSInit+0xbc>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d00c      	beq.n	800488e <invMSInit+0xa2>
    {
        gsstSensorList[genCurrentSensorType].pFunInit();
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <invMSInit+0xbc>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	0019      	movs	r1, r3
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <invMSInit+0xb8>)
 800487c:	000b      	movs	r3, r1
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	185b      	adds	r3, r3, r1
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	18d3      	adds	r3, r2, r3
 8004886:	3308      	adds	r3, #8
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4798      	blx	r3
         //sprintf(buf, "%s", "\r\ninvsense motion sensor have not connect. \r\n");
		 //HAL_UART_Transmit(&huart1, (uint8_t*)buf, sizeof(buf), 1000);
		 //memset(buf, 0, sizeof(buf));
    }

    return;
 800488c:	e004      	b.n	8004898 <invMSInit+0xac>
         printf("\r\ninvsense motion sensor have not connect. \r\n");
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <invMSInit+0xc8>)
 8004890:	0018      	movs	r0, r3
 8004892:	f002 fc51 	bl	8007138 <puts>
    return;
 8004896:	46c0      	nop			; (mov r8, r8)
}
 8004898:	46bd      	mov	sp, r7
 800489a:	b002      	add	sp, #8
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	080084bc 	.word	0x080084bc
 80048a4:	20000008 	.word	0x20000008
 80048a8:	20000050 	.word	0x20000050
 80048ac:	20000054 	.word	0x20000054
 80048b0:	080084d8 	.word	0x080084d8
 80048b4:	080084e0 	.word	0x080084e0

080048b8 <invMSAccelRead>:
extern void invMSAccelRead(int16_t* ps16AccelX, int16_t* ps16AccelY, int16_t* ps16AccelZ)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <invMSAccelRead+0x50>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d018      	beq.n	80048fe <invMSAccelRead+0x46>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d015      	beq.n	80048fe <invMSAccelRead+0x46>
        (ps16AccelX != NULL) &&
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <invMSAccelRead+0x46>
        (ps16AccelY != NULL) &&
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <invMSAccelRead+0x46>
        (ps16AccelZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunAccelRead(ps16AccelX, ps16AccelY, ps16AccelZ);
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <invMSAccelRead+0x50>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	0019      	movs	r1, r3
 80048e4:	4a09      	ldr	r2, [pc, #36]	; (800490c <invMSAccelRead+0x54>)
 80048e6:	000b      	movs	r3, r1
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	185b      	adds	r3, r3, r1
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	18d3      	adds	r3, r2, r3
 80048f0:	3310      	adds	r3, #16
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	4798      	blx	r3
    }
    return;
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46c0      	nop			; (mov r8, r8)
}
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	20000050 	.word	0x20000050
 800490c:	20000008 	.word	0x20000008

08004910 <invMSGyroRead>:
extern void invMSGyroRead(int16_t* ps16GyroX, int16_t* ps16GyroY, int16_t* ps16GyroZ)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <invMSGyroRead+0x50>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d018      	beq.n	8004956 <invMSGyroRead+0x46>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <invMSGyroRead+0x46>
        (ps16GyroX != NULL) &&
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d012      	beq.n	8004956 <invMSGyroRead+0x46>
        (ps16GyroY != NULL) &&
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00f      	beq.n	8004956 <invMSGyroRead+0x46>
        (ps16GyroZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunGyroRead(ps16GyroX, ps16GyroY, ps16GyroZ);
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <invMSGyroRead+0x50>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	0019      	movs	r1, r3
 800493c:	4a09      	ldr	r2, [pc, #36]	; (8004964 <invMSGyroRead+0x54>)
 800493e:	000b      	movs	r3, r1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	185b      	adds	r3, r3, r1
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	18d3      	adds	r3, r2, r3
 8004948:	330c      	adds	r3, #12
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	4798      	blx	r3
    }
    return;
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46c0      	nop			; (mov r8, r8)
}
 8004958:	46bd      	mov	sp, r7
 800495a:	b004      	add	sp, #16
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	20000050 	.word	0x20000050
 8004964:	20000008 	.word	0x20000008

08004968 <invMSMagRead>:
extern void invMSMagRead(int16_t* ps16MagnX, int16_t* ps16MagnY, int16_t* ps16MagnZ)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
    if( (genCurrentSensorType != INVMS_EN_SENSOR_TYPY_MAX) &&
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <invMSMagRead+0x50>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d018      	beq.n	80049ae <invMSMagRead+0x46>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <invMSMagRead+0x46>
        (ps16MagnX != NULL) &&
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <invMSMagRead+0x46>
        (ps16MagnY != NULL) &&
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <invMSMagRead+0x46>
        (ps16MagnZ != NULL) )
    {
        gsstSensorList[genCurrentSensorType].pFunMagRead(ps16MagnX, ps16MagnY, ps16MagnZ);
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <invMSMagRead+0x50>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	0019      	movs	r1, r3
 8004994:	4a09      	ldr	r2, [pc, #36]	; (80049bc <invMSMagRead+0x54>)
 8004996:	000b      	movs	r3, r1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	185b      	adds	r3, r3, r1
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	18d3      	adds	r3, r2, r3
 80049a0:	3314      	adds	r3, #20
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	4798      	blx	r3
    }
    return;
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46c0      	nop			; (mov r8, r8)
}
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000050 	.word	0x20000050
 80049bc:	20000008 	.word	0x20000008

080049c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049c0:	480d      	ldr	r0, [pc, #52]	; (80049f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049c4:	480d      	ldr	r0, [pc, #52]	; (80049fc <LoopForever+0x6>)
  ldr r1, =_edata
 80049c6:	490e      	ldr	r1, [pc, #56]	; (8004a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <LoopForever+0xe>)
  movs r3, #0
 80049ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049cc:	e002      	b.n	80049d4 <LoopCopyDataInit>

080049ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049d2:	3304      	adds	r3, #4

080049d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049d8:	d3f9      	bcc.n	80049ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049da:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049dc:	4c0b      	ldr	r4, [pc, #44]	; (8004a0c <LoopForever+0x16>)
  movs r3, #0
 80049de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049e0:	e001      	b.n	80049e6 <LoopFillZerobss>

080049e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049e4:	3204      	adds	r2, #4

080049e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049e8:	d3fb      	bcc.n	80049e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80049ea:	f7fe fae5 	bl	8002fb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80049ee:	f002 f9ed 	bl	8006dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049f2:	f7fe f941 	bl	8002c78 <main>

080049f6 <LoopForever>:

LoopForever:
    b LoopForever
 80049f6:	e7fe      	b.n	80049f6 <LoopForever>
  ldr   r0, =_estack
 80049f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80049fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a00:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8004a04:	080086a8 	.word	0x080086a8
  ldr r2, =_sbss
 8004a08:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8004a0c:	200002b0 	.word	0x200002b0

08004a10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a10:	e7fe      	b.n	8004a10 <ADC1_COMP_IRQHandler>
	...

08004a14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <HAL_Init+0x24>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_Init+0x24>)
 8004a1e:	2110      	movs	r1, #16
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f000 f809 	bl	8004a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a2a:	f7fe f9ef 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	0018      	movs	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	40022000 	.word	0x40022000

08004a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <HAL_InitTick+0x5c>)
 8004a46:	681c      	ldr	r4, [r3, #0]
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_InitTick+0x60>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	23fa      	movs	r3, #250	; 0xfa
 8004a50:	0098      	lsls	r0, r3, #2
 8004a52:	f7fb fb63 	bl	800011c <__udivsi3>
 8004a56:	0003      	movs	r3, r0
 8004a58:	0019      	movs	r1, r3
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	f7fb fb5e 	bl	800011c <__udivsi3>
 8004a60:	0003      	movs	r3, r0
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 f905 	bl	8004c72 <HAL_SYSTICK_Config>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e00f      	b.n	8004a90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d80b      	bhi.n	8004a8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	425b      	negs	r3, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f8e2 	bl	8004c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_InitTick+0x64>)
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b003      	add	sp, #12
 8004a96:	bd90      	pop	{r4, r7, pc}
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	20000064 	.word	0x20000064
 8004aa0:	20000060 	.word	0x20000060

08004aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_IncTick+0x1c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	001a      	movs	r2, r3
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_IncTick+0x20>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	18d2      	adds	r2, r2, r3
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_IncTick+0x20>)
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	20000064 	.word	0x20000064
 8004ac4:	2000029c 	.word	0x2000029c

08004ac8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b02      	ldr	r3, [pc, #8]	; (8004ad8 <HAL_GetTick+0x10>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	2000029c 	.word	0x2000029c

08004adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff fff0 	bl	8004ac8 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	d005      	beq.n	8004b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_Delay+0x44>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	001a      	movs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	f7ff ffe0 	bl	8004ac8 <HAL_GetTick>
 8004b08:	0002      	movs	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d8f7      	bhi.n	8004b04 <HAL_Delay+0x28>
  {
  }
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	20000064 	.word	0x20000064

08004b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b32:	1dfb      	adds	r3, r7, #7
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b7f      	cmp	r3, #127	; 0x7f
 8004b38:	d828      	bhi.n	8004b8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b3a:	4a2f      	ldr	r2, [pc, #188]	; (8004bf8 <__NVIC_SetPriority+0xd4>)
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	089b      	lsrs	r3, r3, #2
 8004b44:	33c0      	adds	r3, #192	; 0xc0
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	589b      	ldr	r3, [r3, r2]
 8004b4a:	1dfa      	adds	r2, r7, #7
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	0011      	movs	r1, r2
 8004b50:	2203      	movs	r2, #3
 8004b52:	400a      	ands	r2, r1
 8004b54:	00d2      	lsls	r2, r2, #3
 8004b56:	21ff      	movs	r1, #255	; 0xff
 8004b58:	4091      	lsls	r1, r2
 8004b5a:	000a      	movs	r2, r1
 8004b5c:	43d2      	mvns	r2, r2
 8004b5e:	401a      	ands	r2, r3
 8004b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	019b      	lsls	r3, r3, #6
 8004b66:	22ff      	movs	r2, #255	; 0xff
 8004b68:	401a      	ands	r2, r3
 8004b6a:	1dfb      	adds	r3, r7, #7
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	2303      	movs	r3, #3
 8004b72:	4003      	ands	r3, r0
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b78:	481f      	ldr	r0, [pc, #124]	; (8004bf8 <__NVIC_SetPriority+0xd4>)
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	430a      	orrs	r2, r1
 8004b84:	33c0      	adds	r3, #192	; 0xc0
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b8a:	e031      	b.n	8004bf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <__NVIC_SetPriority+0xd8>)
 8004b8e:	1dfb      	adds	r3, r7, #7
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	0019      	movs	r1, r3
 8004b94:	230f      	movs	r3, #15
 8004b96:	400b      	ands	r3, r1
 8004b98:	3b08      	subs	r3, #8
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3306      	adds	r3, #6
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1dfa      	adds	r2, r7, #7
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	0011      	movs	r1, r2
 8004bac:	2203      	movs	r2, #3
 8004bae:	400a      	ands	r2, r1
 8004bb0:	00d2      	lsls	r2, r2, #3
 8004bb2:	21ff      	movs	r1, #255	; 0xff
 8004bb4:	4091      	lsls	r1, r2
 8004bb6:	000a      	movs	r2, r1
 8004bb8:	43d2      	mvns	r2, r2
 8004bba:	401a      	ands	r2, r3
 8004bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	401a      	ands	r2, r3
 8004bc6:	1dfb      	adds	r3, r7, #7
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	2303      	movs	r3, #3
 8004bce:	4003      	ands	r3, r0
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bd4:	4809      	ldr	r0, [pc, #36]	; (8004bfc <__NVIC_SetPriority+0xd8>)
 8004bd6:	1dfb      	adds	r3, r7, #7
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	001c      	movs	r4, r3
 8004bdc:	230f      	movs	r3, #15
 8004bde:	4023      	ands	r3, r4
 8004be0:	3b08      	subs	r3, #8
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	430a      	orrs	r2, r1
 8004be6:	3306      	adds	r3, #6
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	18c3      	adds	r3, r0, r3
 8004bec:	3304      	adds	r3, #4
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b003      	add	sp, #12
 8004bf6:	bd90      	pop	{r4, r7, pc}
 8004bf8:	e000e100 	.word	0xe000e100
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	045b      	lsls	r3, r3, #17
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d301      	bcc.n	8004c18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c14:	2301      	movs	r3, #1
 8004c16:	e010      	b.n	8004c3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <SysTick_Config+0x44>)
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c20:	2301      	movs	r3, #1
 8004c22:	425b      	negs	r3, r3
 8004c24:	2103      	movs	r1, #3
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7ff ff7c 	bl	8004b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <SysTick_Config+0x44>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c32:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <SysTick_Config+0x44>)
 8004c34:	2207      	movs	r2, #7
 8004c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	e000e010 	.word	0xe000e010

08004c48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	210f      	movs	r1, #15
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	1c02      	adds	r2, r0, #0
 8004c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	0011      	movs	r1, r2
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff ff5d 	bl	8004b24 <__NVIC_SetPriority>
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b004      	add	sp, #16
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7ff ffbf 	bl	8004c00 <SysTick_Config>
 8004c82:	0003      	movs	r3, r0
}
 8004c84:	0018      	movs	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c9a:	e14f      	b.n	8004f3c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4091      	lsls	r1, r2
 8004ca6:	000a      	movs	r2, r1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d100      	bne.n	8004cb4 <HAL_GPIO_Init+0x28>
 8004cb2:	e140      	b.n	8004f36 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d005      	beq.n	8004ccc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d130      	bne.n	8004d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	0013      	movs	r3, r2
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	409a      	lsls	r2, r3
 8004cee:	0013      	movs	r3, r2
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d02:	2201      	movs	r2, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	409a      	lsls	r2, r3
 8004d08:	0013      	movs	r3, r2
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	2201      	movs	r2, #1
 8004d1a:	401a      	ands	r2, r3
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	0013      	movs	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d017      	beq.n	8004d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	409a      	lsls	r2, r3
 8004d48:	0013      	movs	r3, r2
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	0013      	movs	r3, r2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d123      	bne.n	8004dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	58d3      	ldr	r3, [r2, r3]
 8004d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2207      	movs	r2, #7
 8004d88:	4013      	ands	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	0013      	movs	r3, r2
 8004d92:	43da      	mvns	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2107      	movs	r1, #7
 8004da2:	400b      	ands	r3, r1
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	409a      	lsls	r2, r3
 8004da8:	0013      	movs	r3, r2
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	08da      	lsrs	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3208      	adds	r2, #8
 8004db8:	0092      	lsls	r2, r2, #2
 8004dba:	6939      	ldr	r1, [r7, #16]
 8004dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	0013      	movs	r3, r2
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	401a      	ands	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	409a      	lsls	r2, r3
 8004de4:	0013      	movs	r3, r2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	23c0      	movs	r3, #192	; 0xc0
 8004df8:	029b      	lsls	r3, r3, #10
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d100      	bne.n	8004e00 <HAL_GPIO_Init+0x174>
 8004dfe:	e09a      	b.n	8004f36 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e00:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <HAL_GPIO_Init+0x2c8>)
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_GPIO_Init+0x2c8>)
 8004e06:	2101      	movs	r1, #1
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	619a      	str	r2, [r3, #24]
 8004e0c:	4b51      	ldr	r3, [pc, #324]	; (8004f54 <HAL_GPIO_Init+0x2c8>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2201      	movs	r2, #1
 8004e12:	4013      	ands	r3, r2
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e18:	4a4f      	ldr	r2, [pc, #316]	; (8004f58 <HAL_GPIO_Init+0x2cc>)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	589b      	ldr	r3, [r3, r2]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	409a      	lsls	r2, r3
 8004e32:	0013      	movs	r3, r2
 8004e34:	43da      	mvns	r2, r3
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	2390      	movs	r3, #144	; 0x90
 8004e40:	05db      	lsls	r3, r3, #23
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d013      	beq.n	8004e6e <HAL_GPIO_Init+0x1e2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a44      	ldr	r2, [pc, #272]	; (8004f5c <HAL_GPIO_Init+0x2d0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00d      	beq.n	8004e6a <HAL_GPIO_Init+0x1de>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a43      	ldr	r2, [pc, #268]	; (8004f60 <HAL_GPIO_Init+0x2d4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <HAL_GPIO_Init+0x1da>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a42      	ldr	r2, [pc, #264]	; (8004f64 <HAL_GPIO_Init+0x2d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_GPIO_Init+0x1d6>
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e006      	b.n	8004e70 <HAL_GPIO_Init+0x1e4>
 8004e62:	2305      	movs	r3, #5
 8004e64:	e004      	b.n	8004e70 <HAL_GPIO_Init+0x1e4>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_Init+0x1e4>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_GPIO_Init+0x1e4>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	2103      	movs	r1, #3
 8004e74:	400a      	ands	r2, r1
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	4093      	lsls	r3, r2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e80:	4935      	ldr	r1, [pc, #212]	; (8004f58 <HAL_GPIO_Init+0x2cc>)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	089b      	lsrs	r3, r3, #2
 8004e86:	3302      	adds	r3, #2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e8e:	4b36      	ldr	r3, [pc, #216]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	025b      	lsls	r3, r3, #9
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	43da      	mvns	r2, r3
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004edc:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee2:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	43da      	mvns	r2, r3
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	035b      	lsls	r3, r3, #13
 8004efa:	4013      	ands	r3, r2
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	039b      	lsls	r3, r3, #14
 8004f24:	4013      	ands	r3, r2
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	40da      	lsrs	r2, r3
 8004f44:	1e13      	subs	r3, r2, #0
 8004f46:	d000      	beq.n	8004f4a <HAL_GPIO_Init+0x2be>
 8004f48:	e6a8      	b.n	8004c9c <HAL_GPIO_Init+0x10>
  } 
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b006      	add	sp, #24
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	48000800 	.word	0x48000800
 8004f64:	48000c00 	.word	0x48000c00
 8004f68:	40010400 	.word	0x40010400

08004f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e082      	b.n	8005084 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2241      	movs	r2, #65	; 0x41
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7fd fe21 	bl	8002bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2241      	movs	r2, #65	; 0x41
 8004f9e:	2124      	movs	r1, #36	; 0x24
 8004fa0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	438a      	bics	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_I2C_Init+0x120>)
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689a      	ldr	r2, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4931      	ldr	r1, [pc, #196]	; (8005090 <HAL_I2C_Init+0x124>)
 8004fcc:	400a      	ands	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d108      	bne.n	8004fea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2180      	movs	r1, #128	; 0x80
 8004fe2:	0209      	lsls	r1, r1, #8
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	e007      	b.n	8004ffa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2184      	movs	r1, #132	; 0x84
 8004ff4:	0209      	lsls	r1, r1, #8
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d104      	bne.n	800500c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	491f      	ldr	r1, [pc, #124]	; (8005094 <HAL_I2C_Init+0x128>)
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	491a      	ldr	r1, [pc, #104]	; (8005090 <HAL_I2C_Init+0x124>)
 8005028:	400a      	ands	r2, r1
 800502a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	431a      	orrs	r2, r3
 8005036:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69d9      	ldr	r1, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1a      	ldr	r2, [r3, #32]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2101      	movs	r1, #1
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2241      	movs	r2, #65	; 0x41
 8005070:	2120      	movs	r1, #32
 8005072:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2242      	movs	r2, #66	; 0x42
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}
 800508c:	f0ffffff 	.word	0xf0ffffff
 8005090:	ffff7fff 	.word	0xffff7fff
 8005094:	02008000 	.word	0x02008000

08005098 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	000c      	movs	r4, r1
 80050a2:	0010      	movs	r0, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	230a      	movs	r3, #10
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	1c22      	adds	r2, r4, #0
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	2308      	movs	r3, #8
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	1c02      	adds	r2, r0, #0
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	1dbb      	adds	r3, r7, #6
 80050b8:	1c0a      	adds	r2, r1, #0
 80050ba:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2241      	movs	r2, #65	; 0x41
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d000      	beq.n	80050ca <HAL_I2C_Mem_Write+0x32>
 80050c8:	e10c      	b.n	80052e4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <HAL_I2C_Mem_Write+0x42>
 80050d0:	232c      	movs	r3, #44	; 0x2c
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2280      	movs	r2, #128	; 0x80
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0ff      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	5c9b      	ldrb	r3, [r3, r2]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_I2C_Mem_Write+0x5c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e0f8      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2240      	movs	r2, #64	; 0x40
 80050f8:	2101      	movs	r1, #1
 80050fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050fc:	f7ff fce4 	bl	8004ac8 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005104:	2380      	movs	r3, #128	; 0x80
 8005106:	0219      	lsls	r1, r3, #8
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	2319      	movs	r3, #25
 8005110:	2201      	movs	r2, #1
 8005112:	f000 fb0b 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0e3      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2241      	movs	r2, #65	; 0x41
 8005122:	2121      	movs	r1, #33	; 0x21
 8005124:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2242      	movs	r2, #66	; 0x42
 800512a:	2140      	movs	r1, #64	; 0x40
 800512c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	222c      	movs	r2, #44	; 0x2c
 800513e:	18ba      	adds	r2, r7, r2
 8005140:	8812      	ldrh	r2, [r2, #0]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514a:	1dbb      	adds	r3, r7, #6
 800514c:	881c      	ldrh	r4, [r3, #0]
 800514e:	2308      	movs	r3, #8
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	230a      	movs	r3, #10
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	8819      	ldrh	r1, [r3, #0]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	0023      	movs	r3, r4
 8005166:	f000 f9f9 	bl	800555c <I2C_RequestMemoryWrite>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d005      	beq.n	800517a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2240      	movs	r2, #64	; 0x40
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0b5      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2bff      	cmp	r3, #255	; 0xff
 8005182:	d911      	bls.n	80051a8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	; 0xff
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	2380      	movs	r3, #128	; 0x80
 8005192:	045c      	lsls	r4, r3, #17
 8005194:	230a      	movs	r3, #10
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	8819      	ldrh	r1, [r3, #0]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	2300      	movs	r3, #0
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	0023      	movs	r3, r4
 80051a2:	f000 fbf7 	bl	8005994 <I2C_TransferConfig>
 80051a6:	e012      	b.n	80051ce <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	049c      	lsls	r4, r3, #18
 80051bc:	230a      	movs	r3, #10
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	8819      	ldrh	r1, [r3, #0]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	0023      	movs	r3, r4
 80051ca:	f000 fbe3 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 fae8 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e081      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03a      	beq.n	8005292 <HAL_I2C_Mem_Write+0x1fa>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d136      	bne.n	8005292 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	0013      	movs	r3, r2
 800522e:	2200      	movs	r2, #0
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	f000 fa7b 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8005236:	1e03      	subs	r3, r0, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e053      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2bff      	cmp	r3, #255	; 0xff
 8005246:	d911      	bls.n	800526c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	22ff      	movs	r2, #255	; 0xff
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	b2da      	uxtb	r2, r3
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	045c      	lsls	r4, r3, #17
 8005258:	230a      	movs	r3, #10
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	8819      	ldrh	r1, [r3, #0]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	0023      	movs	r3, r4
 8005266:	f000 fb95 	bl	8005994 <I2C_TransferConfig>
 800526a:	e012      	b.n	8005292 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	049c      	lsls	r4, r3, #18
 8005280:	230a      	movs	r3, #10
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	8819      	ldrh	r1, [r3, #0]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	2300      	movs	r3, #0
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	0023      	movs	r3, r4
 800528e:	f000 fb81 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d198      	bne.n	80051ce <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 fac0 	bl	8005828 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e01a      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	490b      	ldr	r1, [pc, #44]	; (80052f0 <HAL_I2C_Mem_Write+0x258>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2241      	movs	r2, #65	; 0x41
 80052cc:	2120      	movs	r1, #32
 80052ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2242      	movs	r2, #66	; 0x42
 80052d4:	2100      	movs	r1, #0
 80052d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2240      	movs	r2, #64	; 0x40
 80052dc:	2100      	movs	r1, #0
 80052de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e000      	b.n	80052e6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80052e4:	2302      	movs	r3, #2
  }
}
 80052e6:	0018      	movs	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b007      	add	sp, #28
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	46c0      	nop			; (mov r8, r8)
 80052f0:	fe00e800 	.word	0xfe00e800

080052f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b089      	sub	sp, #36	; 0x24
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	000c      	movs	r4, r1
 80052fe:	0010      	movs	r0, r2
 8005300:	0019      	movs	r1, r3
 8005302:	230a      	movs	r3, #10
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	1c22      	adds	r2, r4, #0
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	2308      	movs	r3, #8
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	1c02      	adds	r2, r0, #0
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	1dbb      	adds	r3, r7, #6
 8005314:	1c0a      	adds	r2, r1, #0
 8005316:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2241      	movs	r2, #65	; 0x41
 800531c:	5c9b      	ldrb	r3, [r3, r2]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	d000      	beq.n	8005326 <HAL_I2C_Mem_Read+0x32>
 8005324:	e110      	b.n	8005548 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_I2C_Mem_Read+0x42>
 800532c:	232c      	movs	r3, #44	; 0x2c
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d105      	bne.n	8005342 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	0092      	lsls	r2, r2, #2
 800533c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e103      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	5c9b      	ldrb	r3, [r3, r2]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_I2C_Mem_Read+0x5c>
 800534c:	2302      	movs	r3, #2
 800534e:	e0fc      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2240      	movs	r2, #64	; 0x40
 8005354:	2101      	movs	r1, #1
 8005356:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005358:	f7ff fbb6 	bl	8004ac8 <HAL_GetTick>
 800535c:	0003      	movs	r3, r0
 800535e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	0219      	lsls	r1, r3, #8
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	2319      	movs	r3, #25
 800536c:	2201      	movs	r2, #1
 800536e:	f000 f9dd 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d001      	beq.n	800537a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0e7      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2241      	movs	r2, #65	; 0x41
 800537e:	2122      	movs	r1, #34	; 0x22
 8005380:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2242      	movs	r2, #66	; 0x42
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	222c      	movs	r2, #44	; 0x2c
 800539a:	18ba      	adds	r2, r7, r2
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	881c      	ldrh	r4, [r3, #0]
 80053aa:	2308      	movs	r3, #8
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	881a      	ldrh	r2, [r3, #0]
 80053b0:	230a      	movs	r3, #10
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	8819      	ldrh	r1, [r3, #0]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	0023      	movs	r3, r4
 80053c2:	f000 f92f 	bl	8005624 <I2C_RequestMemoryRead>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d005      	beq.n	80053d6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2240      	movs	r2, #64	; 0x40
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0b9      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2bff      	cmp	r3, #255	; 0xff
 80053de:	d911      	bls.n	8005404 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	045c      	lsls	r4, r3, #17
 80053f0:	230a      	movs	r3, #10
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	8819      	ldrh	r1, [r3, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	4b56      	ldr	r3, [pc, #344]	; (8005554 <HAL_I2C_Mem_Read+0x260>)
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	0023      	movs	r3, r4
 80053fe:	f000 fac9 	bl	8005994 <I2C_TransferConfig>
 8005402:	e012      	b.n	800542a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005412:	b2da      	uxtb	r2, r3
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	049c      	lsls	r4, r3, #18
 8005418:	230a      	movs	r3, #10
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	8819      	ldrh	r1, [r3, #0]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	4b4c      	ldr	r3, [pc, #304]	; (8005554 <HAL_I2C_Mem_Read+0x260>)
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	0023      	movs	r3, r4
 8005426:	f000 fab5 	bl	8005994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800542a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	0013      	movs	r3, r2
 8005434:	2200      	movs	r2, #0
 8005436:	2104      	movs	r1, #4
 8005438:	f000 f978 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 800543c:	1e03      	subs	r3, r0, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e082      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d03a      	beq.n	80054f6 <HAL_I2C_Mem_Read+0x202>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d136      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	0013      	movs	r3, r2
 8005492:	2200      	movs	r2, #0
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	f000 f949 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e053      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2bff      	cmp	r3, #255	; 0xff
 80054aa:	d911      	bls.n	80054d0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	045c      	lsls	r4, r3, #17
 80054bc:	230a      	movs	r3, #10
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	8819      	ldrh	r1, [r3, #0]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	0023      	movs	r3, r4
 80054ca:	f000 fa63 	bl	8005994 <I2C_TransferConfig>
 80054ce:	e012      	b.n	80054f6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	049c      	lsls	r4, r3, #18
 80054e4:	230a      	movs	r3, #10
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	8819      	ldrh	r1, [r3, #0]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	2300      	movs	r3, #0
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 fa4f 	bl	8005994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d194      	bne.n	800542a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	0018      	movs	r0, r3
 8005508:	f000 f98e 	bl	8005828 <I2C_WaitOnSTOPFlagUntilTimeout>
 800550c:	1e03      	subs	r3, r0, #0
 800550e:	d001      	beq.n	8005514 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e01a      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2220      	movs	r2, #32
 800551a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	490c      	ldr	r1, [pc, #48]	; (8005558 <HAL_I2C_Mem_Read+0x264>)
 8005528:	400a      	ands	r2, r1
 800552a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2241      	movs	r2, #65	; 0x41
 8005530:	2120      	movs	r1, #32
 8005532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2242      	movs	r2, #66	; 0x42
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	2100      	movs	r1, #0
 8005542:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	0018      	movs	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	b007      	add	sp, #28
 8005550:	bd90      	pop	{r4, r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	80002400 	.word	0x80002400
 8005558:	fe00e800 	.word	0xfe00e800

0800555c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	000c      	movs	r4, r1
 8005566:	0010      	movs	r0, r2
 8005568:	0019      	movs	r1, r3
 800556a:	250a      	movs	r5, #10
 800556c:	197b      	adds	r3, r7, r5
 800556e:	1c22      	adds	r2, r4, #0
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	2308      	movs	r3, #8
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	1c02      	adds	r2, r0, #0
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	1dbb      	adds	r3, r7, #6
 800557c:	1c0a      	adds	r2, r1, #0
 800557e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005580:	1dbb      	adds	r3, r7, #6
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	045c      	lsls	r4, r3, #17
 800558a:	197b      	adds	r3, r7, r5
 800558c:	8819      	ldrh	r1, [r3, #0]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	4b23      	ldr	r3, [pc, #140]	; (8005620 <I2C_RequestMemoryWrite+0xc4>)
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	0023      	movs	r3, r4
 8005596:	f000 f9fd 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	6a39      	ldr	r1, [r7, #32]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 f902 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 80055a6:	1e03      	subs	r3, r0, #0
 80055a8:	d001      	beq.n	80055ae <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e033      	b.n	8005616 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ae:	1dbb      	adds	r3, r7, #6
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d107      	bne.n	80055c6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055b6:	2308      	movs	r3, #8
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
 80055c4:	e019      	b.n	80055fa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055c6:	2308      	movs	r3, #8
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	6a39      	ldr	r1, [r7, #32]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 f8e3 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 80055e4:	1e03      	subs	r3, r0, #0
 80055e6:	d001      	beq.n	80055ec <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e014      	b.n	8005616 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ec:	2308      	movs	r3, #8
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a3a      	ldr	r2, [r7, #32]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	0013      	movs	r3, r2
 8005604:	2200      	movs	r2, #0
 8005606:	2180      	movs	r1, #128	; 0x80
 8005608:	f000 f890 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 800560c:	1e03      	subs	r3, r0, #0
 800560e:	d001      	beq.n	8005614 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bdb0      	pop	{r4, r5, r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	80002000 	.word	0x80002000

08005624 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005624:	b5b0      	push	{r4, r5, r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	000c      	movs	r4, r1
 800562e:	0010      	movs	r0, r2
 8005630:	0019      	movs	r1, r3
 8005632:	250a      	movs	r5, #10
 8005634:	197b      	adds	r3, r7, r5
 8005636:	1c22      	adds	r2, r4, #0
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	2308      	movs	r3, #8
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	1c02      	adds	r2, r0, #0
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	1dbb      	adds	r3, r7, #6
 8005644:	1c0a      	adds	r2, r1, #0
 8005646:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005648:	1dbb      	adds	r3, r7, #6
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	197b      	adds	r3, r7, r5
 8005650:	8819      	ldrh	r1, [r3, #0]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <I2C_RequestMemoryRead+0xc0>)
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2300      	movs	r3, #0
 800565a:	f000 f99b 	bl	8005994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005660:	6a39      	ldr	r1, [r7, #32]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 f8a0 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d001      	beq.n	8005672 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e033      	b.n	80056da <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005672:	1dbb      	adds	r3, r7, #6
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800567a:	2308      	movs	r3, #8
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28
 8005688:	e019      	b.n	80056be <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800568a:	2308      	movs	r3, #8
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	b29b      	uxth	r3, r3
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6a39      	ldr	r1, [r7, #32]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	0018      	movs	r0, r3
 80056a4:	f000 f881 	bl	80057aa <I2C_WaitOnTXISFlagUntilTimeout>
 80056a8:	1e03      	subs	r3, r0, #0
 80056aa:	d001      	beq.n	80056b0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e014      	b.n	80056da <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	2308      	movs	r3, #8
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80056be:	6a3a      	ldr	r2, [r7, #32]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	0013      	movs	r3, r2
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	f000 f82e 	bl	800572c <I2C_WaitOnFlagUntilTimeout>
 80056d0:	1e03      	subs	r3, r0, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	80002000 	.word	0x80002000

080056e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2202      	movs	r2, #2
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d103      	bne.n	8005706 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	2201      	movs	r2, #1
 800570e:	4013      	ands	r3, r2
 8005710:	2b01      	cmp	r3, #1
 8005712:	d007      	beq.n	8005724 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2101      	movs	r1, #1
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
  }
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b002      	add	sp, #8
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	1dfb      	adds	r3, r7, #7
 800573a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800573c:	e021      	b.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	3301      	adds	r3, #1
 8005742:	d01e      	beq.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005744:	f7ff f9c0 	bl	8004ac8 <HAL_GetTick>
 8005748:	0002      	movs	r2, r0
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d302      	bcc.n	800575a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d113      	bne.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	2220      	movs	r2, #32
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2241      	movs	r2, #65	; 0x41
 800576a:	2120      	movs	r1, #32
 800576c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2242      	movs	r2, #66	; 0x42
 8005772:	2100      	movs	r1, #0
 8005774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e00f      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	425a      	negs	r2, r3
 8005792:	4153      	adcs	r3, r2
 8005794:	b2db      	uxtb	r3, r3
 8005796:	001a      	movs	r2, r3
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d0ce      	beq.n	800573e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}

080057aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057b6:	e02b      	b.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 f86e 	bl	80058a0 <I2C_IsAcknowledgeFailed>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d001      	beq.n	80057cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e029      	b.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	3301      	adds	r3, #1
 80057d0:	d01e      	beq.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d2:	f7ff f979 	bl	8004ac8 <HAL_GetTick>
 80057d6:	0002      	movs	r2, r0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d302      	bcc.n	80057e8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d113      	bne.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	2220      	movs	r2, #32
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2241      	movs	r2, #65	; 0x41
 80057f8:	2120      	movs	r1, #32
 80057fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2242      	movs	r2, #66	; 0x42
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2202      	movs	r2, #2
 8005818:	4013      	ands	r3, r2
 800581a:	2b02      	cmp	r3, #2
 800581c:	d1cc      	bne.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	b004      	add	sp, #16
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005834:	e028      	b.n	8005888 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	0018      	movs	r0, r3
 800583e:	f000 f82f 	bl	80058a0 <I2C_IsAcknowledgeFailed>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d001      	beq.n	800584a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e026      	b.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7ff f93d 	bl	8004ac8 <HAL_GetTick>
 800584e:	0002      	movs	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d113      	bne.n	8005888 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	2220      	movs	r2, #32
 8005866:	431a      	orrs	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2241      	movs	r2, #65	; 0x41
 8005870:	2120      	movs	r1, #32
 8005872:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2242      	movs	r2, #66	; 0x42
 8005878:	2100      	movs	r1, #0
 800587a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e007      	b.n	8005898 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2220      	movs	r2, #32
 8005890:	4013      	ands	r3, r2
 8005892:	2b20      	cmp	r3, #32
 8005894:	d1cf      	bne.n	8005836 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b004      	add	sp, #16
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2210      	movs	r2, #16
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d164      	bne.n	8005984 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	2380      	movs	r3, #128	; 0x80
 80058c2:	049b      	lsls	r3, r3, #18
 80058c4:	401a      	ands	r2, r3
 80058c6:	2380      	movs	r3, #128	; 0x80
 80058c8:	049b      	lsls	r3, r3, #18
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d02b      	beq.n	8005926 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	01c9      	lsls	r1, r1, #7
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e0:	e021      	b.n	8005926 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3301      	adds	r3, #1
 80058e6:	d01e      	beq.n	8005926 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7ff f8ee 	bl	8004ac8 <HAL_GetTick>
 80058ec:	0002      	movs	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <I2C_IsAcknowledgeFailed+0x5e>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d113      	bne.n	8005926 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	2220      	movs	r2, #32
 8005904:	431a      	orrs	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2241      	movs	r2, #65	; 0x41
 800590e:	2120      	movs	r1, #32
 8005910:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2242      	movs	r2, #66	; 0x42
 8005916:	2100      	movs	r1, #0
 8005918:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2240      	movs	r2, #64	; 0x40
 800591e:	2100      	movs	r1, #0
 8005920:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e02f      	b.n	8005986 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2220      	movs	r2, #32
 800592e:	4013      	ands	r3, r2
 8005930:	2b20      	cmp	r3, #32
 8005932:	d1d6      	bne.n	80058e2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2220      	movs	r2, #32
 8005942:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff fece 	bl	80056e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	490e      	ldr	r1, [pc, #56]	; (8005990 <I2C_IsAcknowledgeFailed+0xf0>)
 8005958:	400a      	ands	r2, r1
 800595a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	2204      	movs	r2, #4
 8005962:	431a      	orrs	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2241      	movs	r2, #65	; 0x41
 800596c:	2120      	movs	r1, #32
 800596e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2242      	movs	r2, #66	; 0x42
 8005974:	2100      	movs	r1, #0
 8005976:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2240      	movs	r2, #64	; 0x40
 800597c:	2100      	movs	r1, #0
 800597e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b004      	add	sp, #16
 800598c:	bd80      	pop	{r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	fe00e800 	.word	0xfe00e800

08005994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	0008      	movs	r0, r1
 800599e:	0011      	movs	r1, r2
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	240a      	movs	r4, #10
 80059a4:	193b      	adds	r3, r7, r4
 80059a6:	1c02      	adds	r2, r0, #0
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	2009      	movs	r0, #9
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	1c0a      	adds	r2, r1, #0
 80059b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	0d51      	lsrs	r1, r2, #21
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	00d2      	lsls	r2, r2, #3
 80059c0:	400a      	ands	r2, r1
 80059c2:	490e      	ldr	r1, [pc, #56]	; (80059fc <I2C_TransferConfig+0x68>)
 80059c4:	430a      	orrs	r2, r1
 80059c6:	43d2      	mvns	r2, r2
 80059c8:	401a      	ands	r2, r3
 80059ca:	0011      	movs	r1, r2
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	059b      	lsls	r3, r3, #22
 80059d2:	0d9a      	lsrs	r2, r3, #22
 80059d4:	183b      	adds	r3, r7, r0
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	0418      	lsls	r0, r3, #16
 80059da:	23ff      	movs	r3, #255	; 0xff
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	4003      	ands	r3, r0
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b005      	add	sp, #20
 80059f8:	bd90      	pop	{r4, r7, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	03ff63ff 	.word	0x03ff63ff

08005a00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2241      	movs	r2, #65	; 0x41
 8005a0e:	5c9b      	ldrb	r3, [r3, r2]
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d138      	bne.n	8005a88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2240      	movs	r2, #64	; 0x40
 8005a1a:	5c9b      	ldrb	r3, [r3, r2]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e032      	b.n	8005a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2240      	movs	r2, #64	; 0x40
 8005a28:	2101      	movs	r1, #1
 8005a2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2241      	movs	r2, #65	; 0x41
 8005a30:	2124      	movs	r1, #36	; 0x24
 8005a32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	438a      	bics	r2, r1
 8005a42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4911      	ldr	r1, [pc, #68]	; (8005a94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6819      	ldr	r1, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2101      	movs	r1, #1
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2241      	movs	r2, #65	; 0x41
 8005a78:	2120      	movs	r1, #32
 8005a7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e000      	b.n	8005a8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
  }
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b002      	add	sp, #8
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	ffffefff 	.word	0xffffefff

08005a98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2241      	movs	r2, #65	; 0x41
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d139      	bne.n	8005b22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	5c9b      	ldrb	r3, [r3, r2]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e033      	b.n	8005b24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2240      	movs	r2, #64	; 0x40
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2241      	movs	r2, #65	; 0x41
 8005ac8:	2124      	movs	r1, #36	; 0x24
 8005aca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	438a      	bics	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a11      	ldr	r2, [pc, #68]	; (8005b2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2241      	movs	r2, #65	; 0x41
 8005b12:	2120      	movs	r1, #32
 8005b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b004      	add	sp, #16
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	fffff0ff 	.word	0xfffff0ff

08005b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e301      	b.n	8006146 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d100      	bne.n	8005b4e <HAL_RCC_OscConfig+0x1e>
 8005b4c:	e08d      	b.n	8005c6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005b4e:	4bc3      	ldr	r3, [pc, #780]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	220c      	movs	r2, #12
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d00e      	beq.n	8005b78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b5a:	4bc0      	ldr	r3, [pc, #768]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	220c      	movs	r2, #12
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x64>
 8005b66:	4bbd      	ldr	r3, [pc, #756]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	025b      	lsls	r3, r3, #9
 8005b6e:	401a      	ands	r2, r3
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d10d      	bne.n	8005b94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b78:	4bb8      	ldr	r3, [pc, #736]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	4013      	ands	r3, r2
 8005b82:	d100      	bne.n	8005b86 <HAL_RCC_OscConfig+0x56>
 8005b84:	e070      	b.n	8005c68 <HAL_RCC_OscConfig+0x138>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d000      	beq.n	8005b90 <HAL_RCC_OscConfig+0x60>
 8005b8e:	e06b      	b.n	8005c68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e2d8      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_OscConfig+0x7c>
 8005b9c:	4baf      	ldr	r3, [pc, #700]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4bae      	ldr	r3, [pc, #696]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	0249      	lsls	r1, r1, #9
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e02f      	b.n	8005c0c <HAL_RCC_OscConfig+0xdc>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_OscConfig+0x9e>
 8005bb4:	4ba9      	ldr	r3, [pc, #676]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4ba8      	ldr	r3, [pc, #672]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bba:	49a9      	ldr	r1, [pc, #676]	; (8005e60 <HAL_RCC_OscConfig+0x330>)
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	4ba6      	ldr	r3, [pc, #664]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	4ba5      	ldr	r3, [pc, #660]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bc6:	49a7      	ldr	r1, [pc, #668]	; (8005e64 <HAL_RCC_OscConfig+0x334>)
 8005bc8:	400a      	ands	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e01e      	b.n	8005c0c <HAL_RCC_OscConfig+0xdc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d10e      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xc4>
 8005bd6:	4ba1      	ldr	r3, [pc, #644]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bdc:	2180      	movs	r1, #128	; 0x80
 8005bde:	02c9      	lsls	r1, r1, #11
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	4b9d      	ldr	r3, [pc, #628]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b9c      	ldr	r3, [pc, #624]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	0249      	lsls	r1, r1, #9
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e00b      	b.n	8005c0c <HAL_RCC_OscConfig+0xdc>
 8005bf4:	4b99      	ldr	r3, [pc, #612]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b98      	ldr	r3, [pc, #608]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005bfa:	4999      	ldr	r1, [pc, #612]	; (8005e60 <HAL_RCC_OscConfig+0x330>)
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	4b96      	ldr	r3, [pc, #600]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b95      	ldr	r3, [pc, #596]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c06:	4997      	ldr	r1, [pc, #604]	; (8005e64 <HAL_RCC_OscConfig+0x334>)
 8005c08:	400a      	ands	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d014      	beq.n	8005c3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fe ff58 	bl	8004ac8 <HAL_GetTick>
 8005c18:	0003      	movs	r3, r0
 8005c1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c1e:	f7fe ff53 	bl	8004ac8 <HAL_GetTick>
 8005c22:	0002      	movs	r2, r0
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b64      	cmp	r3, #100	; 0x64
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e28a      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c30:	4b8a      	ldr	r3, [pc, #552]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0xee>
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fe ff43 	bl	8004ac8 <HAL_GetTick>
 8005c42:	0003      	movs	r3, r0
 8005c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c48:	f7fe ff3e 	bl	8004ac8 <HAL_GetTick>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	; 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e275      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5a:	4b80      	ldr	r3, [pc, #512]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	4013      	ands	r3, r2
 8005c64:	d1f0      	bne.n	8005c48 <HAL_RCC_OscConfig+0x118>
 8005c66:	e000      	b.n	8005c6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	4013      	ands	r3, r2
 8005c72:	d100      	bne.n	8005c76 <HAL_RCC_OscConfig+0x146>
 8005c74:	e069      	b.n	8005d4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c76:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c80:	4b76      	ldr	r3, [pc, #472]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	220c      	movs	r2, #12
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d11c      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x196>
 8005c8c:	4b73      	ldr	r3, [pc, #460]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	025b      	lsls	r3, r3, #9
 8005c94:	4013      	ands	r3, r2
 8005c96:	d116      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c98:	4b70      	ldr	r3, [pc, #448]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d005      	beq.n	8005cae <HAL_RCC_OscConfig+0x17e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d001      	beq.n	8005cae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e24b      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cae:	4b6b      	ldr	r3, [pc, #428]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	22f8      	movs	r2, #248	; 0xf8
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	00da      	lsls	r2, r3, #3
 8005cbe:	4b67      	ldr	r3, [pc, #412]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cc4:	e041      	b.n	8005d4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d024      	beq.n	8005d18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cce:	4b63      	ldr	r3, [pc, #396]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cda:	f7fe fef5 	bl	8004ac8 <HAL_GetTick>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fe fef0 	bl	8004ac8 <HAL_GetTick>
 8005ce8:	0002      	movs	r2, r0
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e227      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf6:	4b59      	ldr	r3, [pc, #356]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d0f1      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	4b56      	ldr	r3, [pc, #344]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	22f8      	movs	r2, #248	; 0xf8
 8005d06:	4393      	bics	r3, r2
 8005d08:	0019      	movs	r1, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	00da      	lsls	r2, r3, #3
 8005d10:	4b52      	ldr	r3, [pc, #328]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d12:	430a      	orrs	r2, r1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e018      	b.n	8005d4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d18:	4b50      	ldr	r3, [pc, #320]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d1e:	2101      	movs	r1, #1
 8005d20:	438a      	bics	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fe fed0 	bl	8004ac8 <HAL_GetTick>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2e:	f7fe fecb 	bl	8004ac8 <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e202      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d40:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2202      	movs	r2, #2
 8005d46:	4013      	ands	r3, r2
 8005d48:	d1f1      	bne.n	8005d2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	4013      	ands	r3, r2
 8005d52:	d036      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d019      	beq.n	8005d90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5c:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d60:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d62:	2101      	movs	r1, #1
 8005d64:	430a      	orrs	r2, r1
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d68:	f7fe feae 	bl	8004ac8 <HAL_GetTick>
 8005d6c:	0003      	movs	r3, r0
 8005d6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d72:	f7fe fea9 	bl	8004ac8 <HAL_GetTick>
 8005d76:	0002      	movs	r2, r0
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e1e0      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d84:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2202      	movs	r2, #2
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d0f1      	beq.n	8005d72 <HAL_RCC_OscConfig+0x242>
 8005d8e:	e018      	b.n	8005dc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005d96:	2101      	movs	r1, #1
 8005d98:	438a      	bics	r2, r1
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9c:	f7fe fe94 	bl	8004ac8 <HAL_GetTick>
 8005da0:	0003      	movs	r3, r0
 8005da2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fe fe8f 	bl	8004ac8 <HAL_GetTick>
 8005daa:	0002      	movs	r2, r0
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e1c6      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db8:	4b28      	ldr	r3, [pc, #160]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d1f1      	bne.n	8005da6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d100      	bne.n	8005dce <HAL_RCC_OscConfig+0x29e>
 8005dcc:	e0b4      	b.n	8005f38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dce:	201f      	movs	r0, #31
 8005dd0:	183b      	adds	r3, r7, r0
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd6:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	055b      	lsls	r3, r3, #21
 8005dde:	4013      	ands	r3, r2
 8005de0:	d110      	bne.n	8005e04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005de8:	2180      	movs	r1, #128	; 0x80
 8005dea:	0549      	lsls	r1, r1, #21
 8005dec:	430a      	orrs	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	055b      	lsls	r3, r3, #21
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4b18      	ldr	r3, [pc, #96]	; (8005e68 <HAL_RCC_OscConfig+0x338>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d11a      	bne.n	8005e46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e10:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCC_OscConfig+0x338>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <HAL_RCC_OscConfig+0x338>)
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	0049      	lsls	r1, r1, #1
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1e:	f7fe fe53 	bl	8004ac8 <HAL_GetTick>
 8005e22:	0003      	movs	r3, r0
 8005e24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e28:	f7fe fe4e 	bl	8004ac8 <HAL_GetTick>
 8005e2c:	0002      	movs	r2, r0
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	; 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e185      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_OscConfig+0x338>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4013      	ands	r3, r2
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10e      	bne.n	8005e6c <HAL_RCC_OscConfig+0x33c>
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_OscConfig+0x32c>)
 8005e54:	2101      	movs	r1, #1
 8005e56:	430a      	orrs	r2, r1
 8005e58:	621a      	str	r2, [r3, #32]
 8005e5a:	e035      	b.n	8005ec8 <HAL_RCC_OscConfig+0x398>
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	fffeffff 	.word	0xfffeffff
 8005e64:	fffbffff 	.word	0xfffbffff
 8005e68:	40007000 	.word	0x40007000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCC_OscConfig+0x35e>
 8005e74:	4bb6      	ldr	r3, [pc, #728]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	4bb5      	ldr	r3, [pc, #724]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	438a      	bics	r2, r1
 8005e7e:	621a      	str	r2, [r3, #32]
 8005e80:	4bb3      	ldr	r3, [pc, #716]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	4bb2      	ldr	r3, [pc, #712]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e86:	2104      	movs	r1, #4
 8005e88:	438a      	bics	r2, r1
 8005e8a:	621a      	str	r2, [r3, #32]
 8005e8c:	e01c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x398>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x380>
 8005e96:	4bae      	ldr	r3, [pc, #696]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	4bad      	ldr	r3, [pc, #692]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	621a      	str	r2, [r3, #32]
 8005ea2:	4bab      	ldr	r3, [pc, #684]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	4baa      	ldr	r3, [pc, #680]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	621a      	str	r2, [r3, #32]
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x398>
 8005eb0:	4ba7      	ldr	r3, [pc, #668]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005eb2:	6a1a      	ldr	r2, [r3, #32]
 8005eb4:	4ba6      	ldr	r3, [pc, #664]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	438a      	bics	r2, r1
 8005eba:	621a      	str	r2, [r3, #32]
 8005ebc:	4ba4      	ldr	r3, [pc, #656]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	4ba3      	ldr	r3, [pc, #652]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d014      	beq.n	8005efa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed0:	f7fe fdfa 	bl	8004ac8 <HAL_GetTick>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	e009      	b.n	8005eee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eda:	f7fe fdf5 	bl	8004ac8 <HAL_GetTick>
 8005ede:	0002      	movs	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	4a9b      	ldr	r2, [pc, #620]	; (8006154 <HAL_RCC_OscConfig+0x624>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e12b      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eee:	4b98      	ldr	r3, [pc, #608]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d0f0      	beq.n	8005eda <HAL_RCC_OscConfig+0x3aa>
 8005ef8:	e013      	b.n	8005f22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efa:	f7fe fde5 	bl	8004ac8 <HAL_GetTick>
 8005efe:	0003      	movs	r3, r0
 8005f00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f02:	e009      	b.n	8005f18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f04:	f7fe fde0 	bl	8004ac8 <HAL_GetTick>
 8005f08:	0002      	movs	r2, r0
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	4a91      	ldr	r2, [pc, #580]	; (8006154 <HAL_RCC_OscConfig+0x624>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e116      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f18:	4b8d      	ldr	r3, [pc, #564]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f22:	231f      	movs	r3, #31
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2c:	4b88      	ldr	r3, [pc, #544]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	4b87      	ldr	r3, [pc, #540]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f32:	4989      	ldr	r1, [pc, #548]	; (8006158 <HAL_RCC_OscConfig+0x628>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d063      	beq.n	800600a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d12a      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f4a:	4b81      	ldr	r3, [pc, #516]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	4b80      	ldr	r3, [pc, #512]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f50:	2104      	movs	r1, #4
 8005f52:	430a      	orrs	r2, r1
 8005f54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005f56:	4b7e      	ldr	r3, [pc, #504]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5a:	4b7d      	ldr	r3, [pc, #500]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f62:	f7fe fdb1 	bl	8004ac8 <HAL_GetTick>
 8005f66:	0003      	movs	r3, r0
 8005f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f6c:	f7fe fdac 	bl	8004ac8 <HAL_GetTick>
 8005f70:	0002      	movs	r2, r0
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e0e3      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005f7e:	4b74      	ldr	r3, [pc, #464]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	2202      	movs	r2, #2
 8005f84:	4013      	ands	r3, r2
 8005f86:	d0f1      	beq.n	8005f6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f88:	4b71      	ldr	r3, [pc, #452]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	22f8      	movs	r2, #248	; 0xf8
 8005f8e:	4393      	bics	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	00da      	lsls	r2, r3, #3
 8005f98:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f9e:	e034      	b.n	800600a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	3305      	adds	r3, #5
 8005fa6:	d111      	bne.n	8005fcc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005fa8:	4b69      	ldr	r3, [pc, #420]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fac:	4b68      	ldr	r3, [pc, #416]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fae:	2104      	movs	r1, #4
 8005fb0:	438a      	bics	r2, r1
 8005fb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005fb4:	4b66      	ldr	r3, [pc, #408]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	22f8      	movs	r2, #248	; 0xf8
 8005fba:	4393      	bics	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	00da      	lsls	r2, r3, #3
 8005fc4:	4b62      	ldr	r3, [pc, #392]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8005fca:	e01e      	b.n	800600a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005fcc:	4b60      	ldr	r3, [pc, #384]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd0:	4b5f      	ldr	r3, [pc, #380]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fd2:	2104      	movs	r1, #4
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005fd8:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fdc:	4b5c      	ldr	r3, [pc, #368]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8005fde:	2101      	movs	r1, #1
 8005fe0:	438a      	bics	r2, r1
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe4:	f7fe fd70 	bl	8004ac8 <HAL_GetTick>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005fee:	f7fe fd6b 	bl	8004ac8 <HAL_GetTick>
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e0a2      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006000:	4b53      	ldr	r3, [pc, #332]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	2202      	movs	r2, #2
 8006006:	4013      	ands	r3, r2
 8006008:	d1f1      	bne.n	8005fee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d100      	bne.n	8006014 <HAL_RCC_OscConfig+0x4e4>
 8006012:	e097      	b.n	8006144 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006014:	4b4e      	ldr	r3, [pc, #312]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	220c      	movs	r2, #12
 800601a:	4013      	ands	r3, r2
 800601c:	2b08      	cmp	r3, #8
 800601e:	d100      	bne.n	8006022 <HAL_RCC_OscConfig+0x4f2>
 8006020:	e06b      	b.n	80060fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d14c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602a:	4b49      	ldr	r3, [pc, #292]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b48      	ldr	r3, [pc, #288]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006030:	494a      	ldr	r1, [pc, #296]	; (800615c <HAL_RCC_OscConfig+0x62c>)
 8006032:	400a      	ands	r2, r1
 8006034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7fe fd47 	bl	8004ac8 <HAL_GetTick>
 800603a:	0003      	movs	r3, r0
 800603c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006040:	f7fe fd42 	bl	8004ac8 <HAL_GetTick>
 8006044:	0002      	movs	r2, r0
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e079      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	049b      	lsls	r3, r3, #18
 800605a:	4013      	ands	r3, r2
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800605e:	4b3c      	ldr	r3, [pc, #240]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	220f      	movs	r2, #15
 8006064:	4393      	bics	r3, r2
 8006066:	0019      	movs	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4b38      	ldr	r3, [pc, #224]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 800606e:	430a      	orrs	r2, r1
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c
 8006072:	4b37      	ldr	r3, [pc, #220]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <HAL_RCC_OscConfig+0x630>)
 8006078:	4013      	ands	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	431a      	orrs	r2, r3
 8006086:	4b32      	ldr	r3, [pc, #200]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800608c:	4b30      	ldr	r3, [pc, #192]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006092:	2180      	movs	r1, #128	; 0x80
 8006094:	0449      	lsls	r1, r1, #17
 8006096:	430a      	orrs	r2, r1
 8006098:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609a:	f7fe fd15 	bl	8004ac8 <HAL_GetTick>
 800609e:	0003      	movs	r3, r0
 80060a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fe fd10 	bl	8004ac8 <HAL_GetTick>
 80060a8:	0002      	movs	r2, r0
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e047      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060b6:	4b26      	ldr	r3, [pc, #152]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	049b      	lsls	r3, r3, #18
 80060be:	4013      	ands	r3, r2
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x574>
 80060c2:	e03f      	b.n	8006144 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c4:	4b22      	ldr	r3, [pc, #136]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b21      	ldr	r3, [pc, #132]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 80060ca:	4924      	ldr	r1, [pc, #144]	; (800615c <HAL_RCC_OscConfig+0x62c>)
 80060cc:	400a      	ands	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fe fcfa 	bl	8004ac8 <HAL_GetTick>
 80060d4:	0003      	movs	r3, r0
 80060d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060da:	f7fe fcf5 	bl	8004ac8 <HAL_GetTick>
 80060de:	0002      	movs	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e02c      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ec:	4b18      	ldr	r3, [pc, #96]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	049b      	lsls	r3, r3, #18
 80060f4:	4013      	ands	r3, r2
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x5aa>
 80060f8:	e024      	b.n	8006144 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e01f      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <HAL_RCC_OscConfig+0x620>)
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	025b      	lsls	r3, r3, #9
 8006118:	401a      	ands	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	429a      	cmp	r2, r3
 8006120:	d10e      	bne.n	8006140 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	220f      	movs	r2, #15
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	23f0      	movs	r3, #240	; 0xf0
 8006134:	039b      	lsls	r3, r3, #14
 8006136:	401a      	ands	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b008      	add	sp, #32
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	40021000 	.word	0x40021000
 8006154:	00001388 	.word	0x00001388
 8006158:	efffffff 	.word	0xefffffff
 800615c:	feffffff 	.word	0xfeffffff
 8006160:	ffc2ffff 	.word	0xffc2ffff

08006164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b3      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006178:	4b5b      	ldr	r3, [pc, #364]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d911      	bls.n	80061aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006186:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2201      	movs	r2, #1
 800618c:	4393      	bics	r3, r2
 800618e:	0019      	movs	r1, r3
 8006190:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006198:	4b53      	ldr	r3, [pc, #332]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d001      	beq.n	80061aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e09a      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d015      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2204      	movs	r2, #4
 80061ba:	4013      	ands	r3, r2
 80061bc:	d006      	beq.n	80061cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061be:	4b4b      	ldr	r3, [pc, #300]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	4b4a      	ldr	r3, [pc, #296]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80061c4:	21e0      	movs	r1, #224	; 0xe0
 80061c6:	00c9      	lsls	r1, r1, #3
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061cc:	4b47      	ldr	r3, [pc, #284]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	22f0      	movs	r2, #240	; 0xf0
 80061d2:	4393      	bics	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	4b44      	ldr	r3, [pc, #272]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2201      	movs	r2, #1
 80061e6:	4013      	ands	r3, r2
 80061e8:	d040      	beq.n	800626c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b3e      	ldr	r3, [pc, #248]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	4013      	ands	r3, r2
 80061fc:	d114      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e06e      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	4b38      	ldr	r3, [pc, #224]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	049b      	lsls	r3, r3, #18
 8006212:	4013      	ands	r3, r2
 8006214:	d108      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e062      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621a:	4b34      	ldr	r3, [pc, #208]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2202      	movs	r2, #2
 8006220:	4013      	ands	r3, r2
 8006222:	d101      	bne.n	8006228 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e05b      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006228:	4b30      	ldr	r3, [pc, #192]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	2203      	movs	r2, #3
 800622e:	4393      	bics	r3, r2
 8006230:	0019      	movs	r1, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	4b2d      	ldr	r3, [pc, #180]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800623c:	f7fe fc44 	bl	8004ac8 <HAL_GetTick>
 8006240:	0003      	movs	r3, r0
 8006242:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006244:	e009      	b.n	800625a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006246:	f7fe fc3f 	bl	8004ac8 <HAL_GetTick>
 800624a:	0002      	movs	r2, r0
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <HAL_RCC_ClockConfig+0x18c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e042      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	220c      	movs	r2, #12
 8006260:	401a      	ands	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d1ec      	bne.n	8006246 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2201      	movs	r2, #1
 8006272:	4013      	ands	r3, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d211      	bcs.n	800629e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2201      	movs	r2, #1
 8006280:	4393      	bics	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628c:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCC_ClockConfig+0x184>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	4013      	ands	r3, r2
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d001      	beq.n	800629e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e020      	b.n	80062e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2204      	movs	r2, #4
 80062a4:	4013      	ands	r3, r2
 80062a6:	d009      	beq.n	80062bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a11      	ldr	r2, [pc, #68]	; (80062f4 <HAL_RCC_ClockConfig+0x190>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	0019      	movs	r1, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80062bc:	f000 f820 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80062c0:	0001      	movs	r1, r0
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_RCC_ClockConfig+0x188>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	220f      	movs	r2, #15
 80062ca:	4013      	ands	r3, r2
 80062cc:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <HAL_RCC_ClockConfig+0x194>)
 80062ce:	5cd3      	ldrb	r3, [r2, r3]
 80062d0:	000a      	movs	r2, r1
 80062d2:	40da      	lsrs	r2, r3
 80062d4:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x198>)
 80062d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80062d8:	2003      	movs	r0, #3
 80062da:	f7fe fbaf 	bl	8004a3c <HAL_InitTick>
  
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b004      	add	sp, #16
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40022000 	.word	0x40022000
 80062ec:	40021000 	.word	0x40021000
 80062f0:	00001388 	.word	0x00001388
 80062f4:	fffff8ff 	.word	0xfffff8ff
 80062f8:	080085f0 	.word	0x080085f0
 80062fc:	20000000 	.word	0x20000000

08006300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b08f      	sub	sp, #60	; 0x3c
 8006304:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006306:	2314      	movs	r3, #20
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	4a2b      	ldr	r2, [pc, #172]	; (80063b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800630c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800630e:	c313      	stmia	r3!, {r0, r1, r4}
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	4a29      	ldr	r2, [pc, #164]	; (80063bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006318:	ca13      	ldmia	r2!, {r0, r1, r4}
 800631a:	c313      	stmia	r3!, {r0, r1, r4}
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006324:	2300      	movs	r3, #0
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
 8006328:	2300      	movs	r3, #0
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
 800632c:	2300      	movs	r3, #0
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	220c      	movs	r2, #12
 800633e:	4013      	ands	r3, r2
 8006340:	2b04      	cmp	r3, #4
 8006342:	d002      	beq.n	800634a <HAL_RCC_GetSysClockFreq+0x4a>
 8006344:	2b08      	cmp	r3, #8
 8006346:	d003      	beq.n	8006350 <HAL_RCC_GetSysClockFreq+0x50>
 8006348:	e02d      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800634a:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800634e:	e02d      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	0c9b      	lsrs	r3, r3, #18
 8006354:	220f      	movs	r2, #15
 8006356:	4013      	ands	r3, r2
 8006358:	2214      	movs	r2, #20
 800635a:	18ba      	adds	r2, r7, r2
 800635c:	5cd3      	ldrb	r3, [r2, r3]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006360:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	220f      	movs	r2, #15
 8006366:	4013      	ands	r3, r2
 8006368:	1d3a      	adds	r2, r7, #4
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800636e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	025b      	lsls	r3, r3, #9
 8006374:	4013      	ands	r3, r2
 8006376:	d009      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637a:	4812      	ldr	r0, [pc, #72]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800637c:	f7f9 fece 	bl	800011c <__udivsi3>
 8006380:	0003      	movs	r3, r0
 8006382:	001a      	movs	r2, r3
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	4353      	muls	r3, r2
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	e009      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800638c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800638e:	000a      	movs	r2, r1
 8006390:	0152      	lsls	r2, r2, #5
 8006392:	1a52      	subs	r2, r2, r1
 8006394:	0193      	lsls	r3, r2, #6
 8006396:	1a9b      	subs	r3, r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	185b      	adds	r3, r3, r1
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80063a4:	e002      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80063aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b00f      	add	sp, #60	; 0x3c
 80063b4:	bd90      	pop	{r4, r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	08008510 	.word	0x08008510
 80063bc:	08008520 	.word	0x08008520
 80063c0:	40021000 	.word	0x40021000
 80063c4:	007a1200 	.word	0x007a1200

080063c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	20000000 	.word	0x20000000

080063dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80063e0:	f7ff fff2 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 80063e4:	0001      	movs	r1, r0
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	2207      	movs	r2, #7
 80063ee:	4013      	ands	r3, r2
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	40d9      	lsrs	r1, r3
 80063f6:	000b      	movs	r3, r1
}    
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	40021000 	.word	0x40021000
 8006404:	08008600 	.word	0x08008600

08006408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	025b      	lsls	r3, r3, #9
 8006420:	4013      	ands	r3, r2
 8006422:	d100      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006424:	e08e      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006426:	2017      	movs	r0, #23
 8006428:	183b      	adds	r3, r7, r0
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800642e:	4b5f      	ldr	r3, [pc, #380]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	055b      	lsls	r3, r3, #21
 8006436:	4013      	ands	r3, r2
 8006438:	d110      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	4b5c      	ldr	r3, [pc, #368]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	4b5b      	ldr	r3, [pc, #364]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006440:	2180      	movs	r1, #128	; 0x80
 8006442:	0549      	lsls	r1, r1, #21
 8006444:	430a      	orrs	r2, r1
 8006446:	61da      	str	r2, [r3, #28]
 8006448:	4b58      	ldr	r3, [pc, #352]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	055b      	lsls	r3, r3, #21
 8006450:	4013      	ands	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006456:	183b      	adds	r3, r7, r0
 8006458:	2201      	movs	r2, #1
 800645a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800645c:	4b54      	ldr	r3, [pc, #336]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	; 0x80
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4013      	ands	r3, r2
 8006466:	d11a      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006468:	4b51      	ldr	r3, [pc, #324]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b50      	ldr	r3, [pc, #320]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	0049      	lsls	r1, r1, #1
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006476:	f7fe fb27 	bl	8004ac8 <HAL_GetTick>
 800647a:	0003      	movs	r3, r0
 800647c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647e:	e008      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006480:	f7fe fb22 	bl	8004ac8 <HAL_GetTick>
 8006484:	0002      	movs	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e087      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4013      	ands	r3, r2
 800649c:	d0f0      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800649e:	4b43      	ldr	r3, [pc, #268]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	23c0      	movs	r3, #192	; 0xc0
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4013      	ands	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d034      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	23c0      	movs	r3, #192	; 0xc0
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d02c      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064c0:	4b3a      	ldr	r3, [pc, #232]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064d0:	2180      	movs	r1, #128	; 0x80
 80064d2:	0249      	lsls	r1, r1, #9
 80064d4:	430a      	orrs	r2, r1
 80064d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064d8:	4b34      	ldr	r3, [pc, #208]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	4b33      	ldr	r3, [pc, #204]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064de:	4936      	ldr	r1, [pc, #216]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80064e0:	400a      	ands	r2, r1
 80064e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064e4:	4b31      	ldr	r3, [pc, #196]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f2:	f7fe fae9 	bl	8004ac8 <HAL_GetTick>
 80064f6:	0003      	movs	r3, r0
 80064f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fa:	e009      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064fc:	f7fe fae4 	bl	8004ac8 <HAL_GetTick>
 8006500:	0002      	movs	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e048      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006510:	4b26      	ldr	r3, [pc, #152]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	2202      	movs	r2, #2
 8006516:	4013      	ands	r3, r2
 8006518:	d0f0      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006520:	4013      	ands	r3, r2
 8006522:	0019      	movs	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	4b20      	ldr	r3, [pc, #128]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800652a:	430a      	orrs	r2, r1
 800652c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800652e:	2317      	movs	r3, #23
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d105      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006538:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800653e:	4920      	ldr	r1, [pc, #128]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006540:	400a      	ands	r2, r1
 8006542:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2201      	movs	r2, #1
 800654a:	4013      	ands	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	2203      	movs	r2, #3
 8006554:	4393      	bics	r3, r2
 8006556:	0019      	movs	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	4b13      	ldr	r3, [pc, #76]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800655e:	430a      	orrs	r2, r1
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2220      	movs	r2, #32
 8006568:	4013      	ands	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800656c:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	2210      	movs	r2, #16
 8006572:	4393      	bics	r3, r2
 8006574:	0019      	movs	r1, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800657c:	430a      	orrs	r2, r1
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4013      	ands	r3, r2
 800658a:	d009      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	2240      	movs	r2, #64	; 0x40
 8006592:	4393      	bics	r3, r2
 8006594:	0019      	movs	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800659c:	430a      	orrs	r2, r1
 800659e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b006      	add	sp, #24
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40007000 	.word	0x40007000
 80065b4:	fffffcff 	.word	0xfffffcff
 80065b8:	fffeffff 	.word	0xfffeffff
 80065bc:	00001388 	.word	0x00001388
 80065c0:	efffffff 	.word	0xefffffff

080065c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e044      	b.n	8006660 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2274      	movs	r2, #116	; 0x74
 80065e2:	2100      	movs	r1, #0
 80065e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7fc fd1b 	bl	8003024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2224      	movs	r2, #36	; 0x24
 80065f2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2101      	movs	r1, #1
 8006600:	438a      	bics	r2, r1
 8006602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0018      	movs	r0, r3
 8006608:	f000 f8da 	bl	80067c0 <UART_SetConfig>
 800660c:	0003      	movs	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e024      	b.n	8006660 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f000 fa0d 	bl	8006a40 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	490d      	ldr	r1, [pc, #52]	; (8006668 <HAL_UART_Init+0xa4>)
 8006632:	400a      	ands	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	212a      	movs	r1, #42	; 0x2a
 8006642:	438a      	bics	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	430a      	orrs	r2, r1
 8006654:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	0018      	movs	r0, r3
 800665a:	f000 faa5 	bl	8006ba8 <UART_CheckIdleState>
 800665e:	0003      	movs	r3, r0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}
 8006668:	ffffb7ff 	.word	0xffffb7ff

0800666c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	1dbb      	adds	r3, r7, #6
 800667a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006680:	2b20      	cmp	r3, #32
 8006682:	d000      	beq.n	8006686 <HAL_UART_Transmit+0x1a>
 8006684:	e096      	b.n	80067b4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_UART_Transmit+0x28>
 800668c:	1dbb      	adds	r3, r7, #6
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e08e      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	015b      	lsls	r3, r3, #5
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d109      	bne.n	80066b8 <HAL_UART_Transmit+0x4c>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2201      	movs	r2, #1
 80066b0:	4013      	ands	r3, r2
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e07e      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2274      	movs	r2, #116	; 0x74
 80066bc:	5c9b      	ldrb	r3, [r3, r2]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Transmit+0x5a>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e077      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2274      	movs	r2, #116	; 0x74
 80066ca:	2101      	movs	r1, #1
 80066cc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	2100      	movs	r1, #0
 80066d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066dc:	f7fe f9f4 	bl	8004ac8 <HAL_GetTick>
 80066e0:	0003      	movs	r3, r0
 80066e2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1dba      	adds	r2, r7, #6
 80066e8:	2150      	movs	r1, #80	; 0x50
 80066ea:	8812      	ldrh	r2, [r2, #0]
 80066ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	1dba      	adds	r2, r7, #6
 80066f2:	2152      	movs	r1, #82	; 0x52
 80066f4:	8812      	ldrh	r2, [r2, #0]
 80066f6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	2380      	movs	r3, #128	; 0x80
 80066fe:	015b      	lsls	r3, r3, #5
 8006700:	429a      	cmp	r2, r3
 8006702:	d108      	bne.n	8006716 <HAL_UART_Transmit+0xaa>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e003      	b.n	800671e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2274      	movs	r2, #116	; 0x74
 8006722:	2100      	movs	r1, #0
 8006724:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006726:	e02d      	b.n	8006784 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	0013      	movs	r3, r2
 8006732:	2200      	movs	r2, #0
 8006734:	2180      	movs	r1, #128	; 0x80
 8006736:	f000 fa7f 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 800673a:	1e03      	subs	r3, r0, #0
 800673c:	d001      	beq.n	8006742 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e039      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	881a      	ldrh	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	05d2      	lsls	r2, r2, #23
 8006752:	0dd2      	lsrs	r2, r2, #23
 8006754:	b292      	uxth	r2, r2
 8006756:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	3302      	adds	r3, #2
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e008      	b.n	8006772 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	781a      	ldrb	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b292      	uxth	r2, r2
 800676a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2252      	movs	r2, #82	; 0x52
 8006776:	5a9b      	ldrh	r3, [r3, r2]
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b299      	uxth	r1, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2252      	movs	r2, #82	; 0x52
 8006782:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2252      	movs	r2, #82	; 0x52
 8006788:	5a9b      	ldrh	r3, [r3, r2]
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1cb      	bne.n	8006728 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	0013      	movs	r3, r2
 800679a:	2200      	movs	r2, #0
 800679c:	2140      	movs	r1, #64	; 0x40
 800679e:	f000 fa4b 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 80067a2:	1e03      	subs	r3, r0, #0
 80067a4:	d001      	beq.n	80067aa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e005      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	0018      	movs	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b008      	add	sp, #32
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067c8:	231e      	movs	r3, #30
 80067ca:	18fb      	adds	r3, r7, r3
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a8d      	ldr	r2, [pc, #564]	; (8006a24 <UART_SetConfig+0x264>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	0019      	movs	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a88      	ldr	r2, [pc, #544]	; (8006a28 <UART_SetConfig+0x268>)
 8006806:	4013      	ands	r3, r2
 8006808:	0019      	movs	r1, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <UART_SetConfig+0x26c>)
 800682e:	4013      	ands	r3, r2
 8006830:	0019      	movs	r1, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7b      	ldr	r2, [pc, #492]	; (8006a30 <UART_SetConfig+0x270>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d127      	bne.n	8006896 <UART_SetConfig+0xd6>
 8006846:	4b7b      	ldr	r3, [pc, #492]	; (8006a34 <UART_SetConfig+0x274>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	2203      	movs	r2, #3
 800684c:	4013      	ands	r3, r2
 800684e:	2b03      	cmp	r3, #3
 8006850:	d00d      	beq.n	800686e <UART_SetConfig+0xae>
 8006852:	d81b      	bhi.n	800688c <UART_SetConfig+0xcc>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d014      	beq.n	8006882 <UART_SetConfig+0xc2>
 8006858:	d818      	bhi.n	800688c <UART_SetConfig+0xcc>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <UART_SetConfig+0xa4>
 800685e:	2b01      	cmp	r3, #1
 8006860:	d00a      	beq.n	8006878 <UART_SetConfig+0xb8>
 8006862:	e013      	b.n	800688c <UART_SetConfig+0xcc>
 8006864:	231f      	movs	r3, #31
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e021      	b.n	80068b2 <UART_SetConfig+0xf2>
 800686e:	231f      	movs	r3, #31
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	2202      	movs	r2, #2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e01c      	b.n	80068b2 <UART_SetConfig+0xf2>
 8006878:	231f      	movs	r3, #31
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	2204      	movs	r2, #4
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e017      	b.n	80068b2 <UART_SetConfig+0xf2>
 8006882:	231f      	movs	r3, #31
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2208      	movs	r2, #8
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e012      	b.n	80068b2 <UART_SetConfig+0xf2>
 800688c:	231f      	movs	r3, #31
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	2210      	movs	r2, #16
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e00d      	b.n	80068b2 <UART_SetConfig+0xf2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a67      	ldr	r2, [pc, #412]	; (8006a38 <UART_SetConfig+0x278>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d104      	bne.n	80068aa <UART_SetConfig+0xea>
 80068a0:	231f      	movs	r3, #31
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e003      	b.n	80068b2 <UART_SetConfig+0xf2>
 80068aa:	231f      	movs	r3, #31
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	2210      	movs	r2, #16
 80068b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d15d      	bne.n	800697a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80068be:	231f      	movs	r3, #31
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d015      	beq.n	80068f4 <UART_SetConfig+0x134>
 80068c8:	dc18      	bgt.n	80068fc <UART_SetConfig+0x13c>
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d00d      	beq.n	80068ea <UART_SetConfig+0x12a>
 80068ce:	dc15      	bgt.n	80068fc <UART_SetConfig+0x13c>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <UART_SetConfig+0x11a>
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d005      	beq.n	80068e4 <UART_SetConfig+0x124>
 80068d8:	e010      	b.n	80068fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068da:	f7ff fd7f 	bl	80063dc <HAL_RCC_GetPCLK1Freq>
 80068de:	0003      	movs	r3, r0
 80068e0:	61bb      	str	r3, [r7, #24]
        break;
 80068e2:	e012      	b.n	800690a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e4:	4b55      	ldr	r3, [pc, #340]	; (8006a3c <UART_SetConfig+0x27c>)
 80068e6:	61bb      	str	r3, [r7, #24]
        break;
 80068e8:	e00f      	b.n	800690a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ea:	f7ff fd09 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80068ee:	0003      	movs	r3, r0
 80068f0:	61bb      	str	r3, [r7, #24]
        break;
 80068f2:	e00a      	b.n	800690a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	61bb      	str	r3, [r7, #24]
        break;
 80068fa:	e006      	b.n	800690a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006900:	231e      	movs	r3, #30
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
        break;
 8006908:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d100      	bne.n	8006912 <UART_SetConfig+0x152>
 8006910:	e07b      	b.n	8006a0a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	005a      	lsls	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	18d2      	adds	r2, r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	0019      	movs	r1, r3
 8006924:	0010      	movs	r0, r2
 8006926:	f7f9 fbf9 	bl	800011c <__udivsi3>
 800692a:	0003      	movs	r3, r0
 800692c:	b29b      	uxth	r3, r3
 800692e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d91c      	bls.n	8006970 <UART_SetConfig+0x1b0>
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	025b      	lsls	r3, r3, #9
 800693c:	429a      	cmp	r2, r3
 800693e:	d217      	bcs.n	8006970 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	b29a      	uxth	r2, r3
 8006944:	200e      	movs	r0, #14
 8006946:	183b      	adds	r3, r7, r0
 8006948:	210f      	movs	r1, #15
 800694a:	438a      	bics	r2, r1
 800694c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	b29b      	uxth	r3, r3
 8006954:	2207      	movs	r2, #7
 8006956:	4013      	ands	r3, r2
 8006958:	b299      	uxth	r1, r3
 800695a:	183b      	adds	r3, r7, r0
 800695c:	183a      	adds	r2, r7, r0
 800695e:	8812      	ldrh	r2, [r2, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	183a      	adds	r2, r7, r0
 800696a:	8812      	ldrh	r2, [r2, #0]
 800696c:	60da      	str	r2, [r3, #12]
 800696e:	e04c      	b.n	8006a0a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006970:	231e      	movs	r3, #30
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	2201      	movs	r2, #1
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e047      	b.n	8006a0a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800697a:	231f      	movs	r3, #31
 800697c:	18fb      	adds	r3, r7, r3
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d015      	beq.n	80069b0 <UART_SetConfig+0x1f0>
 8006984:	dc18      	bgt.n	80069b8 <UART_SetConfig+0x1f8>
 8006986:	2b04      	cmp	r3, #4
 8006988:	d00d      	beq.n	80069a6 <UART_SetConfig+0x1e6>
 800698a:	dc15      	bgt.n	80069b8 <UART_SetConfig+0x1f8>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <UART_SetConfig+0x1d6>
 8006990:	2b02      	cmp	r3, #2
 8006992:	d005      	beq.n	80069a0 <UART_SetConfig+0x1e0>
 8006994:	e010      	b.n	80069b8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006996:	f7ff fd21 	bl	80063dc <HAL_RCC_GetPCLK1Freq>
 800699a:	0003      	movs	r3, r0
 800699c:	61bb      	str	r3, [r7, #24]
        break;
 800699e:	e012      	b.n	80069c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a0:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <UART_SetConfig+0x27c>)
 80069a2:	61bb      	str	r3, [r7, #24]
        break;
 80069a4:	e00f      	b.n	80069c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069a6:	f7ff fcab 	bl	8006300 <HAL_RCC_GetSysClockFreq>
 80069aa:	0003      	movs	r3, r0
 80069ac:	61bb      	str	r3, [r7, #24]
        break;
 80069ae:	e00a      	b.n	80069c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	61bb      	str	r3, [r7, #24]
        break;
 80069b6:	e006      	b.n	80069c6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069bc:	231e      	movs	r3, #30
 80069be:	18fb      	adds	r3, r7, r3
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
        break;
 80069c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	085a      	lsrs	r2, r3, #1
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	18d2      	adds	r2, r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	0019      	movs	r1, r3
 80069dc:	0010      	movs	r0, r2
 80069de:	f7f9 fb9d 	bl	800011c <__udivsi3>
 80069e2:	0003      	movs	r3, r0
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b0f      	cmp	r3, #15
 80069ec:	d909      	bls.n	8006a02 <UART_SetConfig+0x242>
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	025b      	lsls	r3, r3, #9
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d204      	bcs.n	8006a02 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	60da      	str	r2, [r3, #12]
 8006a00:	e003      	b.n	8006a0a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006a02:	231e      	movs	r3, #30
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a16:	231e      	movs	r3, #30
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	781b      	ldrb	r3, [r3, #0]
}
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b008      	add	sp, #32
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	ffff69f3 	.word	0xffff69f3
 8006a28:	ffffcfff 	.word	0xffffcfff
 8006a2c:	fffff4ff 	.word	0xfffff4ff
 8006a30:	40013800 	.word	0x40013800
 8006a34:	40021000 	.word	0x40021000
 8006a38:	40004400 	.word	0x40004400
 8006a3c:	007a1200 	.word	0x007a1200

08006a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4a4a      	ldr	r2, [pc, #296]	; (8006b84 <UART_AdvFeatureConfig+0x144>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2202      	movs	r2, #2
 8006a70:	4013      	ands	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4a43      	ldr	r2, [pc, #268]	; (8006b88 <UART_AdvFeatureConfig+0x148>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2204      	movs	r2, #4
 8006a92:	4013      	ands	r3, r2
 8006a94:	d00b      	beq.n	8006aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a3b      	ldr	r2, [pc, #236]	; (8006b8c <UART_AdvFeatureConfig+0x14c>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	0019      	movs	r1, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2208      	movs	r2, #8
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <UART_AdvFeatureConfig+0x150>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2210      	movs	r2, #16
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <UART_AdvFeatureConfig+0x154>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af6:	2220      	movs	r2, #32
 8006af8:	4013      	ands	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <UART_AdvFeatureConfig+0x158>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <UART_AdvFeatureConfig+0x15c>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	0019      	movs	r1, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	035b      	lsls	r3, r3, #13
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d10b      	bne.n	8006b5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <UART_AdvFeatureConfig+0x160>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2280      	movs	r2, #128	; 0x80
 8006b60:	4013      	ands	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ba4 <UART_AdvFeatureConfig+0x164>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	0019      	movs	r1, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b002      	add	sp, #8
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	fffdffff 	.word	0xfffdffff
 8006b88:	fffeffff 	.word	0xfffeffff
 8006b8c:	fffbffff 	.word	0xfffbffff
 8006b90:	ffff7fff 	.word	0xffff7fff
 8006b94:	ffffefff 	.word	0xffffefff
 8006b98:	ffffdfff 	.word	0xffffdfff
 8006b9c:	ffefffff 	.word	0xffefffff
 8006ba0:	ff9fffff 	.word	0xff9fffff
 8006ba4:	fff7ffff 	.word	0xfff7ffff

08006ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2280      	movs	r2, #128	; 0x80
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bb8:	f7fd ff86 	bl	8004ac8 <HAL_GetTick>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d10c      	bne.n	8006be8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	0391      	lsls	r1, r2, #14
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <UART_CheckIdleState+0x8c>)
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f000 f82c 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 8006be0:	1e03      	subs	r3, r0, #0
 8006be2:	d001      	beq.n	8006be8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e021      	b.n	8006c2c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d10c      	bne.n	8006c10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2280      	movs	r2, #128	; 0x80
 8006bfa:	03d1      	lsls	r1, r2, #15
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <UART_CheckIdleState+0x8c>)
 8006c00:	9200      	str	r2, [sp, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f000 f818 	bl	8006c38 <UART_WaitOnFlagUntilTimeout>
 8006c08:	1e03      	subs	r3, r0, #0
 8006c0a:	d001      	beq.n	8006c10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e00d      	b.n	8006c2c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2274      	movs	r2, #116	; 0x74
 8006c26:	2100      	movs	r1, #0
 8006c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b004      	add	sp, #16
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	01ffffff 	.word	0x01ffffff

08006c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b094      	sub	sp, #80	; 0x50
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	1dfb      	adds	r3, r7, #7
 8006c46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c48:	e0a3      	b.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	d100      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c50:	e09f      	b.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7fd ff39 	bl	8004ac8 <HAL_GetTick>
 8006c56:	0002      	movs	r2, r0
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d302      	bcc.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d13d      	bne.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c68:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c70:	647b      	str	r3, [r7, #68]	; 0x44
 8006c72:	2301      	movs	r3, #1
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	494c      	ldr	r1, [pc, #304]	; (8006dbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	f383 8810 	msr	PRIMASK, r3
}
 8006c98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	f383 8810 	msr	PRIMASK, r3
}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2101      	movs	r1, #1
 8006cbc:	438a      	bics	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	f383 8810 	msr	PRIMASK, r3
}
 8006cca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2274      	movs	r2, #116	; 0x74
 8006cdc:	2100      	movs	r1, #0
 8006cde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e067      	b.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2204      	movs	r2, #4
 8006cec:	4013      	ands	r3, r2
 8006cee:	d050      	beq.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	2380      	movs	r3, #128	; 0x80
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d146      	bne.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2280      	movs	r2, #128	; 0x80
 8006d0a:	0112      	lsls	r2, r2, #4
 8006d0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	613b      	str	r3, [r7, #16]
  return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4923      	ldr	r1, [pc, #140]	; (8006dbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006d30:	400a      	ands	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f383 8810 	msr	PRIMASK, r3
}
 8006d3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d40:	f3ef 8310 	mrs	r3, PRIMASK
 8006d44:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d46:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f383 8810 	msr	PRIMASK, r3
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2101      	movs	r1, #1
 8006d62:	438a      	bics	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	f383 8810 	msr	PRIMASK, r3
}
 8006d70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	2120      	movs	r1, #32
 8006d84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2274      	movs	r2, #116	; 0x74
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e010      	b.n	8006db4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	425a      	negs	r2, r3
 8006da2:	4153      	adcs	r3, r2
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	001a      	movs	r2, r3
 8006da8:	1dfb      	adds	r3, r7, #7
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d100      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006db0:	e74b      	b.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b014      	add	sp, #80	; 0x50
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	fffffe5f 	.word	0xfffffe5f

08006dc0 <__errno>:
 8006dc0:	4b01      	ldr	r3, [pc, #4]	; (8006dc8 <__errno+0x8>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	4770      	bx	lr
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	20000068 	.word	0x20000068

08006dcc <__libc_init_array>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	2600      	movs	r6, #0
 8006dd0:	4d0c      	ldr	r5, [pc, #48]	; (8006e04 <__libc_init_array+0x38>)
 8006dd2:	4c0d      	ldr	r4, [pc, #52]	; (8006e08 <__libc_init_array+0x3c>)
 8006dd4:	1b64      	subs	r4, r4, r5
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	42a6      	cmp	r6, r4
 8006dda:	d109      	bne.n	8006df0 <__libc_init_array+0x24>
 8006ddc:	2600      	movs	r6, #0
 8006dde:	f001 fb39 	bl	8008454 <_init>
 8006de2:	4d0a      	ldr	r5, [pc, #40]	; (8006e0c <__libc_init_array+0x40>)
 8006de4:	4c0a      	ldr	r4, [pc, #40]	; (8006e10 <__libc_init_array+0x44>)
 8006de6:	1b64      	subs	r4, r4, r5
 8006de8:	10a4      	asrs	r4, r4, #2
 8006dea:	42a6      	cmp	r6, r4
 8006dec:	d105      	bne.n	8006dfa <__libc_init_array+0x2e>
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	00b3      	lsls	r3, r6, #2
 8006df2:	58eb      	ldr	r3, [r5, r3]
 8006df4:	4798      	blx	r3
 8006df6:	3601      	adds	r6, #1
 8006df8:	e7ee      	b.n	8006dd8 <__libc_init_array+0xc>
 8006dfa:	00b3      	lsls	r3, r6, #2
 8006dfc:	58eb      	ldr	r3, [r5, r3]
 8006dfe:	4798      	blx	r3
 8006e00:	3601      	adds	r6, #1
 8006e02:	e7f2      	b.n	8006dea <__libc_init_array+0x1e>
 8006e04:	080086a0 	.word	0x080086a0
 8006e08:	080086a0 	.word	0x080086a0
 8006e0c:	080086a0 	.word	0x080086a0
 8006e10:	080086a4 	.word	0x080086a4

08006e14 <memcpy>:
 8006e14:	2300      	movs	r3, #0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d100      	bne.n	8006e1e <memcpy+0xa>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	5ccc      	ldrb	r4, [r1, r3]
 8006e20:	54c4      	strb	r4, [r0, r3]
 8006e22:	3301      	adds	r3, #1
 8006e24:	e7f8      	b.n	8006e18 <memcpy+0x4>

08006e26 <memmove>:
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4288      	cmp	r0, r1
 8006e2a:	d902      	bls.n	8006e32 <memmove+0xc>
 8006e2c:	188b      	adds	r3, r1, r2
 8006e2e:	4298      	cmp	r0, r3
 8006e30:	d303      	bcc.n	8006e3a <memmove+0x14>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e007      	b.n	8006e46 <memmove+0x20>
 8006e36:	5c8b      	ldrb	r3, [r1, r2]
 8006e38:	5483      	strb	r3, [r0, r2]
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	d2fb      	bcs.n	8006e36 <memmove+0x10>
 8006e3e:	bd10      	pop	{r4, pc}
 8006e40:	5ccc      	ldrb	r4, [r1, r3]
 8006e42:	54c4      	strb	r4, [r0, r3]
 8006e44:	3301      	adds	r3, #1
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d1fa      	bne.n	8006e40 <memmove+0x1a>
 8006e4a:	e7f8      	b.n	8006e3e <memmove+0x18>

08006e4c <memset>:
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	1882      	adds	r2, r0, r2
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d100      	bne.n	8006e56 <memset+0xa>
 8006e54:	4770      	bx	lr
 8006e56:	7019      	strb	r1, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	e7f9      	b.n	8006e50 <memset+0x4>

08006e5c <_free_r>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	0005      	movs	r5, r0
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d010      	beq.n	8006e86 <_free_r+0x2a>
 8006e64:	1f0c      	subs	r4, r1, #4
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da00      	bge.n	8006e6e <_free_r+0x12>
 8006e6c:	18e4      	adds	r4, r4, r3
 8006e6e:	0028      	movs	r0, r5
 8006e70:	f000 fcbe 	bl	80077f0 <__malloc_lock>
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <_free_r+0x90>)
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <_free_r+0x2c>
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6014      	str	r4, [r2, #0]
 8006e80:	0028      	movs	r0, r5
 8006e82:	f000 fcbd 	bl	8007800 <__malloc_unlock>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	d908      	bls.n	8006e9e <_free_r+0x42>
 8006e8c:	6821      	ldr	r1, [r4, #0]
 8006e8e:	1860      	adds	r0, r4, r1
 8006e90:	4283      	cmp	r3, r0
 8006e92:	d1f3      	bne.n	8006e7c <_free_r+0x20>
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	1841      	adds	r1, r0, r1
 8006e9a:	6021      	str	r1, [r4, #0]
 8006e9c:	e7ee      	b.n	8006e7c <_free_r+0x20>
 8006e9e:	001a      	movs	r2, r3
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <_free_r+0x4e>
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	d9f9      	bls.n	8006e9e <_free_r+0x42>
 8006eaa:	6811      	ldr	r1, [r2, #0]
 8006eac:	1850      	adds	r0, r2, r1
 8006eae:	42a0      	cmp	r0, r4
 8006eb0:	d10b      	bne.n	8006eca <_free_r+0x6e>
 8006eb2:	6820      	ldr	r0, [r4, #0]
 8006eb4:	1809      	adds	r1, r1, r0
 8006eb6:	1850      	adds	r0, r2, r1
 8006eb8:	6011      	str	r1, [r2, #0]
 8006eba:	4283      	cmp	r3, r0
 8006ebc:	d1e0      	bne.n	8006e80 <_free_r+0x24>
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	1841      	adds	r1, r0, r1
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	6053      	str	r3, [r2, #4]
 8006ec8:	e7da      	b.n	8006e80 <_free_r+0x24>
 8006eca:	42a0      	cmp	r0, r4
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x78>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e7d5      	b.n	8006e80 <_free_r+0x24>
 8006ed4:	6821      	ldr	r1, [r4, #0]
 8006ed6:	1860      	adds	r0, r4, r1
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	d103      	bne.n	8006ee4 <_free_r+0x88>
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	1841      	adds	r1, r0, r1
 8006ee2:	6021      	str	r1, [r4, #0]
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6054      	str	r4, [r2, #4]
 8006ee8:	e7ca      	b.n	8006e80 <_free_r+0x24>
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	200002a0 	.word	0x200002a0

08006ef0 <sbrk_aligned>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	4e0f      	ldr	r6, [pc, #60]	; (8006f30 <sbrk_aligned+0x40>)
 8006ef4:	000d      	movs	r5, r1
 8006ef6:	6831      	ldr	r1, [r6, #0]
 8006ef8:	0004      	movs	r4, r0
 8006efa:	2900      	cmp	r1, #0
 8006efc:	d102      	bne.n	8006f04 <sbrk_aligned+0x14>
 8006efe:	f000 f925 	bl	800714c <_sbrk_r>
 8006f02:	6030      	str	r0, [r6, #0]
 8006f04:	0029      	movs	r1, r5
 8006f06:	0020      	movs	r0, r4
 8006f08:	f000 f920 	bl	800714c <_sbrk_r>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d00a      	beq.n	8006f26 <sbrk_aligned+0x36>
 8006f10:	2303      	movs	r3, #3
 8006f12:	1cc5      	adds	r5, r0, #3
 8006f14:	439d      	bics	r5, r3
 8006f16:	42a8      	cmp	r0, r5
 8006f18:	d007      	beq.n	8006f2a <sbrk_aligned+0x3a>
 8006f1a:	1a29      	subs	r1, r5, r0
 8006f1c:	0020      	movs	r0, r4
 8006f1e:	f000 f915 	bl	800714c <_sbrk_r>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d101      	bne.n	8006f2a <sbrk_aligned+0x3a>
 8006f26:	2501      	movs	r5, #1
 8006f28:	426d      	negs	r5, r5
 8006f2a:	0028      	movs	r0, r5
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	200002a4 	.word	0x200002a4

08006f34 <_malloc_r>:
 8006f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f36:	2203      	movs	r2, #3
 8006f38:	1ccb      	adds	r3, r1, #3
 8006f3a:	4393      	bics	r3, r2
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	0006      	movs	r6, r0
 8006f40:	001f      	movs	r7, r3
 8006f42:	2b0c      	cmp	r3, #12
 8006f44:	d232      	bcs.n	8006fac <_malloc_r+0x78>
 8006f46:	270c      	movs	r7, #12
 8006f48:	42b9      	cmp	r1, r7
 8006f4a:	d831      	bhi.n	8006fb0 <_malloc_r+0x7c>
 8006f4c:	0030      	movs	r0, r6
 8006f4e:	f000 fc4f 	bl	80077f0 <__malloc_lock>
 8006f52:	4d32      	ldr	r5, [pc, #200]	; (800701c <_malloc_r+0xe8>)
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	001c      	movs	r4, r3
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d12e      	bne.n	8006fba <_malloc_r+0x86>
 8006f5c:	0039      	movs	r1, r7
 8006f5e:	0030      	movs	r0, r6
 8006f60:	f7ff ffc6 	bl	8006ef0 <sbrk_aligned>
 8006f64:	0004      	movs	r4, r0
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d11e      	bne.n	8006fa8 <_malloc_r+0x74>
 8006f6a:	682c      	ldr	r4, [r5, #0]
 8006f6c:	0025      	movs	r5, r4
 8006f6e:	2d00      	cmp	r5, #0
 8006f70:	d14a      	bne.n	8007008 <_malloc_r+0xd4>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	0029      	movs	r1, r5
 8006f76:	18e3      	adds	r3, r4, r3
 8006f78:	0030      	movs	r0, r6
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f000 f8e6 	bl	800714c <_sbrk_r>
 8006f80:	9b01      	ldr	r3, [sp, #4]
 8006f82:	4283      	cmp	r3, r0
 8006f84:	d143      	bne.n	800700e <_malloc_r+0xda>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	3703      	adds	r7, #3
 8006f8a:	1aff      	subs	r7, r7, r3
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	439f      	bics	r7, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	2f0c      	cmp	r7, #12
 8006f94:	d200      	bcs.n	8006f98 <_malloc_r+0x64>
 8006f96:	270c      	movs	r7, #12
 8006f98:	0039      	movs	r1, r7
 8006f9a:	0030      	movs	r0, r6
 8006f9c:	f7ff ffa8 	bl	8006ef0 <sbrk_aligned>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d034      	beq.n	800700e <_malloc_r+0xda>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	19df      	adds	r7, r3, r7
 8006fa8:	6027      	str	r7, [r4, #0]
 8006faa:	e013      	b.n	8006fd4 <_malloc_r+0xa0>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dacb      	bge.n	8006f48 <_malloc_r+0x14>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	0028      	movs	r0, r5
 8006fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	1bd1      	subs	r1, r2, r7
 8006fbe:	d420      	bmi.n	8007002 <_malloc_r+0xce>
 8006fc0:	290b      	cmp	r1, #11
 8006fc2:	d917      	bls.n	8006ff4 <_malloc_r+0xc0>
 8006fc4:	19e2      	adds	r2, r4, r7
 8006fc6:	6027      	str	r7, [r4, #0]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d111      	bne.n	8006ff0 <_malloc_r+0xbc>
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	6053      	str	r3, [r2, #4]
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	0025      	movs	r5, r4
 8006fd8:	f000 fc12 	bl	8007800 <__malloc_unlock>
 8006fdc:	2207      	movs	r2, #7
 8006fde:	350b      	adds	r5, #11
 8006fe0:	1d23      	adds	r3, r4, #4
 8006fe2:	4395      	bics	r5, r2
 8006fe4:	1aea      	subs	r2, r5, r3
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	d0e5      	beq.n	8006fb6 <_malloc_r+0x82>
 8006fea:	1b5b      	subs	r3, r3, r5
 8006fec:	50a3      	str	r3, [r4, r2]
 8006fee:	e7e2      	b.n	8006fb6 <_malloc_r+0x82>
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e7ec      	b.n	8006fce <_malloc_r+0x9a>
 8006ff4:	6862      	ldr	r2, [r4, #4]
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	d101      	bne.n	8006ffe <_malloc_r+0xca>
 8006ffa:	602a      	str	r2, [r5, #0]
 8006ffc:	e7ea      	b.n	8006fd4 <_malloc_r+0xa0>
 8006ffe:	605a      	str	r2, [r3, #4]
 8007000:	e7e8      	b.n	8006fd4 <_malloc_r+0xa0>
 8007002:	0023      	movs	r3, r4
 8007004:	6864      	ldr	r4, [r4, #4]
 8007006:	e7a7      	b.n	8006f58 <_malloc_r+0x24>
 8007008:	002c      	movs	r4, r5
 800700a:	686d      	ldr	r5, [r5, #4]
 800700c:	e7af      	b.n	8006f6e <_malloc_r+0x3a>
 800700e:	230c      	movs	r3, #12
 8007010:	0030      	movs	r0, r6
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	f000 fbf4 	bl	8007800 <__malloc_unlock>
 8007018:	e7cd      	b.n	8006fb6 <_malloc_r+0x82>
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	200002a0 	.word	0x200002a0

08007020 <iprintf>:
 8007020:	b40f      	push	{r0, r1, r2, r3}
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <iprintf+0x30>)
 8007024:	b513      	push	{r0, r1, r4, lr}
 8007026:	681c      	ldr	r4, [r3, #0]
 8007028:	2c00      	cmp	r4, #0
 800702a:	d005      	beq.n	8007038 <iprintf+0x18>
 800702c:	69a3      	ldr	r3, [r4, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <iprintf+0x18>
 8007032:	0020      	movs	r0, r4
 8007034:	f000 facc 	bl	80075d0 <__sinit>
 8007038:	ab05      	add	r3, sp, #20
 800703a:	0020      	movs	r0, r4
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	68a1      	ldr	r1, [r4, #8]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	f000 fd6f 	bl	8007b24 <_vfiprintf_r>
 8007046:	bc16      	pop	{r1, r2, r4}
 8007048:	bc08      	pop	{r3}
 800704a:	b004      	add	sp, #16
 800704c:	4718      	bx	r3
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	20000068 	.word	0x20000068

08007054 <_puts_r>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	0005      	movs	r5, r0
 8007058:	000e      	movs	r6, r1
 800705a:	2800      	cmp	r0, #0
 800705c:	d004      	beq.n	8007068 <_puts_r+0x14>
 800705e:	6983      	ldr	r3, [r0, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <_puts_r+0x14>
 8007064:	f000 fab4 	bl	80075d0 <__sinit>
 8007068:	69ab      	ldr	r3, [r5, #24]
 800706a:	68ac      	ldr	r4, [r5, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <_puts_r+0x22>
 8007070:	0028      	movs	r0, r5
 8007072:	f000 faad 	bl	80075d0 <__sinit>
 8007076:	4b2d      	ldr	r3, [pc, #180]	; (800712c <_puts_r+0xd8>)
 8007078:	429c      	cmp	r4, r3
 800707a:	d122      	bne.n	80070c2 <_puts_r+0x6e>
 800707c:	686c      	ldr	r4, [r5, #4]
 800707e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007080:	07db      	lsls	r3, r3, #31
 8007082:	d405      	bmi.n	8007090 <_puts_r+0x3c>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	059b      	lsls	r3, r3, #22
 8007088:	d402      	bmi.n	8007090 <_puts_r+0x3c>
 800708a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800708c:	f000 fb41 	bl	8007712 <__retarget_lock_acquire_recursive>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	071b      	lsls	r3, r3, #28
 8007094:	d502      	bpl.n	800709c <_puts_r+0x48>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d129      	bne.n	80070f0 <_puts_r+0x9c>
 800709c:	0021      	movs	r1, r4
 800709e:	0028      	movs	r0, r5
 80070a0:	f000 f8f0 	bl	8007284 <__swsetup_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d023      	beq.n	80070f0 <_puts_r+0x9c>
 80070a8:	2501      	movs	r5, #1
 80070aa:	426d      	negs	r5, r5
 80070ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ae:	07db      	lsls	r3, r3, #31
 80070b0:	d405      	bmi.n	80070be <_puts_r+0x6a>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	059b      	lsls	r3, r3, #22
 80070b6:	d402      	bmi.n	80070be <_puts_r+0x6a>
 80070b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ba:	f000 fb2b 	bl	8007714 <__retarget_lock_release_recursive>
 80070be:	0028      	movs	r0, r5
 80070c0:	bd70      	pop	{r4, r5, r6, pc}
 80070c2:	4b1b      	ldr	r3, [pc, #108]	; (8007130 <_puts_r+0xdc>)
 80070c4:	429c      	cmp	r4, r3
 80070c6:	d101      	bne.n	80070cc <_puts_r+0x78>
 80070c8:	68ac      	ldr	r4, [r5, #8]
 80070ca:	e7d8      	b.n	800707e <_puts_r+0x2a>
 80070cc:	4b19      	ldr	r3, [pc, #100]	; (8007134 <_puts_r+0xe0>)
 80070ce:	429c      	cmp	r4, r3
 80070d0:	d1d5      	bne.n	800707e <_puts_r+0x2a>
 80070d2:	68ec      	ldr	r4, [r5, #12]
 80070d4:	e7d3      	b.n	800707e <_puts_r+0x2a>
 80070d6:	3601      	adds	r6, #1
 80070d8:	60a3      	str	r3, [r4, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da04      	bge.n	80070e8 <_puts_r+0x94>
 80070de:	69a2      	ldr	r2, [r4, #24]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	dc16      	bgt.n	8007112 <_puts_r+0xbe>
 80070e4:	290a      	cmp	r1, #10
 80070e6:	d014      	beq.n	8007112 <_puts_r+0xbe>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	7019      	strb	r1, [r3, #0]
 80070f0:	68a3      	ldr	r3, [r4, #8]
 80070f2:	7831      	ldrb	r1, [r6, #0]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d1ed      	bne.n	80070d6 <_puts_r+0x82>
 80070fa:	60a3      	str	r3, [r4, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da0f      	bge.n	8007120 <_puts_r+0xcc>
 8007100:	0028      	movs	r0, r5
 8007102:	0022      	movs	r2, r4
 8007104:	310a      	adds	r1, #10
 8007106:	f000 f867 	bl	80071d8 <__swbuf_r>
 800710a:	250a      	movs	r5, #10
 800710c:	1c43      	adds	r3, r0, #1
 800710e:	d1cd      	bne.n	80070ac <_puts_r+0x58>
 8007110:	e7ca      	b.n	80070a8 <_puts_r+0x54>
 8007112:	0022      	movs	r2, r4
 8007114:	0028      	movs	r0, r5
 8007116:	f000 f85f 	bl	80071d8 <__swbuf_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d1e8      	bne.n	80070f0 <_puts_r+0x9c>
 800711e:	e7c3      	b.n	80070a8 <_puts_r+0x54>
 8007120:	250a      	movs	r5, #10
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	6022      	str	r2, [r4, #0]
 8007128:	701d      	strb	r5, [r3, #0]
 800712a:	e7bf      	b.n	80070ac <_puts_r+0x58>
 800712c:	0800862c 	.word	0x0800862c
 8007130:	0800864c 	.word	0x0800864c
 8007134:	0800860c 	.word	0x0800860c

08007138 <puts>:
 8007138:	b510      	push	{r4, lr}
 800713a:	4b03      	ldr	r3, [pc, #12]	; (8007148 <puts+0x10>)
 800713c:	0001      	movs	r1, r0
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	f7ff ff88 	bl	8007054 <_puts_r>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	20000068 	.word	0x20000068

0800714c <_sbrk_r>:
 800714c:	2300      	movs	r3, #0
 800714e:	b570      	push	{r4, r5, r6, lr}
 8007150:	4d06      	ldr	r5, [pc, #24]	; (800716c <_sbrk_r+0x20>)
 8007152:	0004      	movs	r4, r0
 8007154:	0008      	movs	r0, r1
 8007156:	602b      	str	r3, [r5, #0]
 8007158:	f7fb fef8 	bl	8002f4c <_sbrk>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d103      	bne.n	8007168 <_sbrk_r+0x1c>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d000      	beq.n	8007168 <_sbrk_r+0x1c>
 8007166:	6023      	str	r3, [r4, #0]
 8007168:	bd70      	pop	{r4, r5, r6, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	200002ac 	.word	0x200002ac

08007170 <sniprintf>:
 8007170:	b40c      	push	{r2, r3}
 8007172:	b530      	push	{r4, r5, lr}
 8007174:	4b17      	ldr	r3, [pc, #92]	; (80071d4 <sniprintf+0x64>)
 8007176:	000c      	movs	r4, r1
 8007178:	681d      	ldr	r5, [r3, #0]
 800717a:	b09d      	sub	sp, #116	; 0x74
 800717c:	2900      	cmp	r1, #0
 800717e:	da08      	bge.n	8007192 <sniprintf+0x22>
 8007180:	238b      	movs	r3, #139	; 0x8b
 8007182:	2001      	movs	r0, #1
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	4240      	negs	r0, r0
 8007188:	b01d      	add	sp, #116	; 0x74
 800718a:	bc30      	pop	{r4, r5}
 800718c:	bc08      	pop	{r3}
 800718e:	b002      	add	sp, #8
 8007190:	4718      	bx	r3
 8007192:	2382      	movs	r3, #130	; 0x82
 8007194:	466a      	mov	r2, sp
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	8293      	strh	r3, [r2, #20]
 800719a:	2300      	movs	r3, #0
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	9006      	str	r0, [sp, #24]
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d000      	beq.n	80071a6 <sniprintf+0x36>
 80071a4:	1e4b      	subs	r3, r1, #1
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	2301      	movs	r3, #1
 80071ac:	466a      	mov	r2, sp
 80071ae:	425b      	negs	r3, r3
 80071b0:	82d3      	strh	r3, [r2, #22]
 80071b2:	0028      	movs	r0, r5
 80071b4:	ab21      	add	r3, sp, #132	; 0x84
 80071b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80071b8:	a902      	add	r1, sp, #8
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	f000 fb8a 	bl	80078d4 <_svfiprintf_r>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	da01      	bge.n	80071c8 <sniprintf+0x58>
 80071c4:	238b      	movs	r3, #139	; 0x8b
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	2c00      	cmp	r4, #0
 80071ca:	d0dd      	beq.n	8007188 <sniprintf+0x18>
 80071cc:	2300      	movs	r3, #0
 80071ce:	9a02      	ldr	r2, [sp, #8]
 80071d0:	7013      	strb	r3, [r2, #0]
 80071d2:	e7d9      	b.n	8007188 <sniprintf+0x18>
 80071d4:	20000068 	.word	0x20000068

080071d8 <__swbuf_r>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	0005      	movs	r5, r0
 80071dc:	000e      	movs	r6, r1
 80071de:	0014      	movs	r4, r2
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d004      	beq.n	80071ee <__swbuf_r+0x16>
 80071e4:	6983      	ldr	r3, [r0, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <__swbuf_r+0x16>
 80071ea:	f000 f9f1 	bl	80075d0 <__sinit>
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <__swbuf_r+0xa0>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d12e      	bne.n	8007252 <__swbuf_r+0x7a>
 80071f4:	686c      	ldr	r4, [r5, #4]
 80071f6:	69a3      	ldr	r3, [r4, #24]
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	071b      	lsls	r3, r3, #28
 80071fe:	d532      	bpl.n	8007266 <__swbuf_r+0x8e>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d02f      	beq.n	8007266 <__swbuf_r+0x8e>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	b2f7      	uxtb	r7, r6
 800720c:	1a98      	subs	r0, r3, r2
 800720e:	6963      	ldr	r3, [r4, #20]
 8007210:	b2f6      	uxtb	r6, r6
 8007212:	4283      	cmp	r3, r0
 8007214:	dc05      	bgt.n	8007222 <__swbuf_r+0x4a>
 8007216:	0021      	movs	r1, r4
 8007218:	0028      	movs	r0, r5
 800721a:	f000 f937 	bl	800748c <_fflush_r>
 800721e:	2800      	cmp	r0, #0
 8007220:	d127      	bne.n	8007272 <__swbuf_r+0x9a>
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	3001      	adds	r0, #1
 8007226:	3b01      	subs	r3, #1
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	701f      	strb	r7, [r3, #0]
 8007232:	6963      	ldr	r3, [r4, #20]
 8007234:	4283      	cmp	r3, r0
 8007236:	d004      	beq.n	8007242 <__swbuf_r+0x6a>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	07db      	lsls	r3, r3, #31
 800723c:	d507      	bpl.n	800724e <__swbuf_r+0x76>
 800723e:	2e0a      	cmp	r6, #10
 8007240:	d105      	bne.n	800724e <__swbuf_r+0x76>
 8007242:	0021      	movs	r1, r4
 8007244:	0028      	movs	r0, r5
 8007246:	f000 f921 	bl	800748c <_fflush_r>
 800724a:	2800      	cmp	r0, #0
 800724c:	d111      	bne.n	8007272 <__swbuf_r+0x9a>
 800724e:	0030      	movs	r0, r6
 8007250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <__swbuf_r+0xa4>)
 8007254:	429c      	cmp	r4, r3
 8007256:	d101      	bne.n	800725c <__swbuf_r+0x84>
 8007258:	68ac      	ldr	r4, [r5, #8]
 800725a:	e7cc      	b.n	80071f6 <__swbuf_r+0x1e>
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <__swbuf_r+0xa8>)
 800725e:	429c      	cmp	r4, r3
 8007260:	d1c9      	bne.n	80071f6 <__swbuf_r+0x1e>
 8007262:	68ec      	ldr	r4, [r5, #12]
 8007264:	e7c7      	b.n	80071f6 <__swbuf_r+0x1e>
 8007266:	0021      	movs	r1, r4
 8007268:	0028      	movs	r0, r5
 800726a:	f000 f80b 	bl	8007284 <__swsetup_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	d0c9      	beq.n	8007206 <__swbuf_r+0x2e>
 8007272:	2601      	movs	r6, #1
 8007274:	4276      	negs	r6, r6
 8007276:	e7ea      	b.n	800724e <__swbuf_r+0x76>
 8007278:	0800862c 	.word	0x0800862c
 800727c:	0800864c 	.word	0x0800864c
 8007280:	0800860c 	.word	0x0800860c

08007284 <__swsetup_r>:
 8007284:	4b37      	ldr	r3, [pc, #220]	; (8007364 <__swsetup_r+0xe0>)
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	681d      	ldr	r5, [r3, #0]
 800728a:	0006      	movs	r6, r0
 800728c:	000c      	movs	r4, r1
 800728e:	2d00      	cmp	r5, #0
 8007290:	d005      	beq.n	800729e <__swsetup_r+0x1a>
 8007292:	69ab      	ldr	r3, [r5, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <__swsetup_r+0x1a>
 8007298:	0028      	movs	r0, r5
 800729a:	f000 f999 	bl	80075d0 <__sinit>
 800729e:	4b32      	ldr	r3, [pc, #200]	; (8007368 <__swsetup_r+0xe4>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	d10f      	bne.n	80072c4 <__swsetup_r+0x40>
 80072a4:	686c      	ldr	r4, [r5, #4]
 80072a6:	230c      	movs	r3, #12
 80072a8:	5ee2      	ldrsh	r2, [r4, r3]
 80072aa:	b293      	uxth	r3, r2
 80072ac:	0711      	lsls	r1, r2, #28
 80072ae:	d42d      	bmi.n	800730c <__swsetup_r+0x88>
 80072b0:	06d9      	lsls	r1, r3, #27
 80072b2:	d411      	bmi.n	80072d8 <__swsetup_r+0x54>
 80072b4:	2309      	movs	r3, #9
 80072b6:	2001      	movs	r0, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	3337      	adds	r3, #55	; 0x37
 80072bc:	4313      	orrs	r3, r2
 80072be:	81a3      	strh	r3, [r4, #12]
 80072c0:	4240      	negs	r0, r0
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <__swsetup_r+0xe8>)
 80072c6:	429c      	cmp	r4, r3
 80072c8:	d101      	bne.n	80072ce <__swsetup_r+0x4a>
 80072ca:	68ac      	ldr	r4, [r5, #8]
 80072cc:	e7eb      	b.n	80072a6 <__swsetup_r+0x22>
 80072ce:	4b28      	ldr	r3, [pc, #160]	; (8007370 <__swsetup_r+0xec>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	d1e8      	bne.n	80072a6 <__swsetup_r+0x22>
 80072d4:	68ec      	ldr	r4, [r5, #12]
 80072d6:	e7e6      	b.n	80072a6 <__swsetup_r+0x22>
 80072d8:	075b      	lsls	r3, r3, #29
 80072da:	d513      	bpl.n	8007304 <__swsetup_r+0x80>
 80072dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072de:	2900      	cmp	r1, #0
 80072e0:	d008      	beq.n	80072f4 <__swsetup_r+0x70>
 80072e2:	0023      	movs	r3, r4
 80072e4:	3344      	adds	r3, #68	; 0x44
 80072e6:	4299      	cmp	r1, r3
 80072e8:	d002      	beq.n	80072f0 <__swsetup_r+0x6c>
 80072ea:	0030      	movs	r0, r6
 80072ec:	f7ff fdb6 	bl	8006e5c <_free_r>
 80072f0:	2300      	movs	r3, #0
 80072f2:	6363      	str	r3, [r4, #52]	; 0x34
 80072f4:	2224      	movs	r2, #36	; 0x24
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	4393      	bics	r3, r2
 80072fa:	81a3      	strh	r3, [r4, #12]
 80072fc:	2300      	movs	r3, #0
 80072fe:	6063      	str	r3, [r4, #4]
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	2308      	movs	r3, #8
 8007306:	89a2      	ldrh	r2, [r4, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10b      	bne.n	800732a <__swsetup_r+0xa6>
 8007312:	21a0      	movs	r1, #160	; 0xa0
 8007314:	2280      	movs	r2, #128	; 0x80
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	0089      	lsls	r1, r1, #2
 800731a:	0092      	lsls	r2, r2, #2
 800731c:	400b      	ands	r3, r1
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <__swsetup_r+0xa6>
 8007322:	0021      	movs	r1, r4
 8007324:	0030      	movs	r0, r6
 8007326:	f000 fa1f 	bl	8007768 <__smakebuf_r>
 800732a:	220c      	movs	r2, #12
 800732c:	5ea3      	ldrsh	r3, [r4, r2]
 800732e:	2001      	movs	r0, #1
 8007330:	001a      	movs	r2, r3
 8007332:	b299      	uxth	r1, r3
 8007334:	4002      	ands	r2, r0
 8007336:	4203      	tst	r3, r0
 8007338:	d00f      	beq.n	800735a <__swsetup_r+0xd6>
 800733a:	2200      	movs	r2, #0
 800733c:	60a2      	str	r2, [r4, #8]
 800733e:	6962      	ldr	r2, [r4, #20]
 8007340:	4252      	negs	r2, r2
 8007342:	61a2      	str	r2, [r4, #24]
 8007344:	2000      	movs	r0, #0
 8007346:	6922      	ldr	r2, [r4, #16]
 8007348:	4282      	cmp	r2, r0
 800734a:	d1ba      	bne.n	80072c2 <__swsetup_r+0x3e>
 800734c:	060a      	lsls	r2, r1, #24
 800734e:	d5b8      	bpl.n	80072c2 <__swsetup_r+0x3e>
 8007350:	2240      	movs	r2, #64	; 0x40
 8007352:	4313      	orrs	r3, r2
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	3801      	subs	r0, #1
 8007358:	e7b3      	b.n	80072c2 <__swsetup_r+0x3e>
 800735a:	0788      	lsls	r0, r1, #30
 800735c:	d400      	bmi.n	8007360 <__swsetup_r+0xdc>
 800735e:	6962      	ldr	r2, [r4, #20]
 8007360:	60a2      	str	r2, [r4, #8]
 8007362:	e7ef      	b.n	8007344 <__swsetup_r+0xc0>
 8007364:	20000068 	.word	0x20000068
 8007368:	0800862c 	.word	0x0800862c
 800736c:	0800864c 	.word	0x0800864c
 8007370:	0800860c 	.word	0x0800860c

08007374 <__sflush_r>:
 8007374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007376:	898b      	ldrh	r3, [r1, #12]
 8007378:	0005      	movs	r5, r0
 800737a:	000c      	movs	r4, r1
 800737c:	071a      	lsls	r2, r3, #28
 800737e:	d45f      	bmi.n	8007440 <__sflush_r+0xcc>
 8007380:	684a      	ldr	r2, [r1, #4]
 8007382:	2a00      	cmp	r2, #0
 8007384:	dc04      	bgt.n	8007390 <__sflush_r+0x1c>
 8007386:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007388:	2a00      	cmp	r2, #0
 800738a:	dc01      	bgt.n	8007390 <__sflush_r+0x1c>
 800738c:	2000      	movs	r0, #0
 800738e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007390:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007392:	2f00      	cmp	r7, #0
 8007394:	d0fa      	beq.n	800738c <__sflush_r+0x18>
 8007396:	2200      	movs	r2, #0
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	682e      	ldr	r6, [r5, #0]
 800739c:	602a      	str	r2, [r5, #0]
 800739e:	001a      	movs	r2, r3
 80073a0:	0149      	lsls	r1, r1, #5
 80073a2:	400a      	ands	r2, r1
 80073a4:	420b      	tst	r3, r1
 80073a6:	d034      	beq.n	8007412 <__sflush_r+0x9e>
 80073a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	075b      	lsls	r3, r3, #29
 80073ae:	d506      	bpl.n	80073be <__sflush_r+0x4a>
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	1ac0      	subs	r0, r0, r3
 80073b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <__sflush_r+0x4a>
 80073ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073bc:	1ac0      	subs	r0, r0, r3
 80073be:	0002      	movs	r2, r0
 80073c0:	6a21      	ldr	r1, [r4, #32]
 80073c2:	2300      	movs	r3, #0
 80073c4:	0028      	movs	r0, r5
 80073c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80073c8:	47b8      	blx	r7
 80073ca:	89a1      	ldrh	r1, [r4, #12]
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d106      	bne.n	80073de <__sflush_r+0x6a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	2b1d      	cmp	r3, #29
 80073d4:	d831      	bhi.n	800743a <__sflush_r+0xc6>
 80073d6:	4a2c      	ldr	r2, [pc, #176]	; (8007488 <__sflush_r+0x114>)
 80073d8:	40da      	lsrs	r2, r3
 80073da:	07d3      	lsls	r3, r2, #31
 80073dc:	d52d      	bpl.n	800743a <__sflush_r+0xc6>
 80073de:	2300      	movs	r3, #0
 80073e0:	6063      	str	r3, [r4, #4]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	04cb      	lsls	r3, r1, #19
 80073e8:	d505      	bpl.n	80073f6 <__sflush_r+0x82>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	d102      	bne.n	80073f4 <__sflush_r+0x80>
 80073ee:	682b      	ldr	r3, [r5, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d100      	bne.n	80073f6 <__sflush_r+0x82>
 80073f4:	6560      	str	r0, [r4, #84]	; 0x54
 80073f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073f8:	602e      	str	r6, [r5, #0]
 80073fa:	2900      	cmp	r1, #0
 80073fc:	d0c6      	beq.n	800738c <__sflush_r+0x18>
 80073fe:	0023      	movs	r3, r4
 8007400:	3344      	adds	r3, #68	; 0x44
 8007402:	4299      	cmp	r1, r3
 8007404:	d002      	beq.n	800740c <__sflush_r+0x98>
 8007406:	0028      	movs	r0, r5
 8007408:	f7ff fd28 	bl	8006e5c <_free_r>
 800740c:	2000      	movs	r0, #0
 800740e:	6360      	str	r0, [r4, #52]	; 0x34
 8007410:	e7bd      	b.n	800738e <__sflush_r+0x1a>
 8007412:	2301      	movs	r3, #1
 8007414:	0028      	movs	r0, r5
 8007416:	6a21      	ldr	r1, [r4, #32]
 8007418:	47b8      	blx	r7
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	d1c5      	bne.n	80073aa <__sflush_r+0x36>
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0c2      	beq.n	80073aa <__sflush_r+0x36>
 8007424:	2b1d      	cmp	r3, #29
 8007426:	d001      	beq.n	800742c <__sflush_r+0xb8>
 8007428:	2b16      	cmp	r3, #22
 800742a:	d101      	bne.n	8007430 <__sflush_r+0xbc>
 800742c:	602e      	str	r6, [r5, #0]
 800742e:	e7ad      	b.n	800738c <__sflush_r+0x18>
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	89a2      	ldrh	r2, [r4, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	e7a9      	b.n	800738e <__sflush_r+0x1a>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	430b      	orrs	r3, r1
 800743e:	e7fa      	b.n	8007436 <__sflush_r+0xc2>
 8007440:	690f      	ldr	r7, [r1, #16]
 8007442:	2f00      	cmp	r7, #0
 8007444:	d0a2      	beq.n	800738c <__sflush_r+0x18>
 8007446:	680a      	ldr	r2, [r1, #0]
 8007448:	600f      	str	r7, [r1, #0]
 800744a:	1bd2      	subs	r2, r2, r7
 800744c:	9201      	str	r2, [sp, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	079b      	lsls	r3, r3, #30
 8007452:	d100      	bne.n	8007456 <__sflush_r+0xe2>
 8007454:	694a      	ldr	r2, [r1, #20]
 8007456:	60a2      	str	r2, [r4, #8]
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	dc00      	bgt.n	8007460 <__sflush_r+0xec>
 800745e:	e795      	b.n	800738c <__sflush_r+0x18>
 8007460:	003a      	movs	r2, r7
 8007462:	0028      	movs	r0, r5
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	6a21      	ldr	r1, [r4, #32]
 8007468:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800746a:	47b0      	blx	r6
 800746c:	2800      	cmp	r0, #0
 800746e:	dc06      	bgt.n	800747e <__sflush_r+0x10a>
 8007470:	2340      	movs	r3, #64	; 0x40
 8007472:	2001      	movs	r0, #1
 8007474:	89a2      	ldrh	r2, [r4, #12]
 8007476:	4240      	negs	r0, r0
 8007478:	4313      	orrs	r3, r2
 800747a:	81a3      	strh	r3, [r4, #12]
 800747c:	e787      	b.n	800738e <__sflush_r+0x1a>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	183f      	adds	r7, r7, r0
 8007482:	1a1b      	subs	r3, r3, r0
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	e7e7      	b.n	8007458 <__sflush_r+0xe4>
 8007488:	20400001 	.word	0x20400001

0800748c <_fflush_r>:
 800748c:	690b      	ldr	r3, [r1, #16]
 800748e:	b570      	push	{r4, r5, r6, lr}
 8007490:	0005      	movs	r5, r0
 8007492:	000c      	movs	r4, r1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <_fflush_r+0x12>
 8007498:	2500      	movs	r5, #0
 800749a:	0028      	movs	r0, r5
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	2800      	cmp	r0, #0
 80074a0:	d004      	beq.n	80074ac <_fflush_r+0x20>
 80074a2:	6983      	ldr	r3, [r0, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <_fflush_r+0x20>
 80074a8:	f000 f892 	bl	80075d0 <__sinit>
 80074ac:	4b14      	ldr	r3, [pc, #80]	; (8007500 <_fflush_r+0x74>)
 80074ae:	429c      	cmp	r4, r3
 80074b0:	d11b      	bne.n	80074ea <_fflush_r+0x5e>
 80074b2:	686c      	ldr	r4, [r5, #4]
 80074b4:	220c      	movs	r2, #12
 80074b6:	5ea3      	ldrsh	r3, [r4, r2]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0ed      	beq.n	8007498 <_fflush_r+0xc>
 80074bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074be:	07d2      	lsls	r2, r2, #31
 80074c0:	d404      	bmi.n	80074cc <_fflush_r+0x40>
 80074c2:	059b      	lsls	r3, r3, #22
 80074c4:	d402      	bmi.n	80074cc <_fflush_r+0x40>
 80074c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074c8:	f000 f923 	bl	8007712 <__retarget_lock_acquire_recursive>
 80074cc:	0028      	movs	r0, r5
 80074ce:	0021      	movs	r1, r4
 80074d0:	f7ff ff50 	bl	8007374 <__sflush_r>
 80074d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074d6:	0005      	movs	r5, r0
 80074d8:	07db      	lsls	r3, r3, #31
 80074da:	d4de      	bmi.n	800749a <_fflush_r+0xe>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	059b      	lsls	r3, r3, #22
 80074e0:	d4db      	bmi.n	800749a <_fflush_r+0xe>
 80074e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e4:	f000 f916 	bl	8007714 <__retarget_lock_release_recursive>
 80074e8:	e7d7      	b.n	800749a <_fflush_r+0xe>
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <_fflush_r+0x78>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	d101      	bne.n	80074f4 <_fflush_r+0x68>
 80074f0:	68ac      	ldr	r4, [r5, #8]
 80074f2:	e7df      	b.n	80074b4 <_fflush_r+0x28>
 80074f4:	4b04      	ldr	r3, [pc, #16]	; (8007508 <_fflush_r+0x7c>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d1dc      	bne.n	80074b4 <_fflush_r+0x28>
 80074fa:	68ec      	ldr	r4, [r5, #12]
 80074fc:	e7da      	b.n	80074b4 <_fflush_r+0x28>
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	0800862c 	.word	0x0800862c
 8007504:	0800864c 	.word	0x0800864c
 8007508:	0800860c 	.word	0x0800860c

0800750c <std>:
 800750c:	2300      	movs	r3, #0
 800750e:	b510      	push	{r4, lr}
 8007510:	0004      	movs	r4, r0
 8007512:	6003      	str	r3, [r0, #0]
 8007514:	6043      	str	r3, [r0, #4]
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	8181      	strh	r1, [r0, #12]
 800751a:	6643      	str	r3, [r0, #100]	; 0x64
 800751c:	0019      	movs	r1, r3
 800751e:	81c2      	strh	r2, [r0, #14]
 8007520:	6103      	str	r3, [r0, #16]
 8007522:	6143      	str	r3, [r0, #20]
 8007524:	6183      	str	r3, [r0, #24]
 8007526:	2208      	movs	r2, #8
 8007528:	305c      	adds	r0, #92	; 0x5c
 800752a:	f7ff fc8f 	bl	8006e4c <memset>
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x38>)
 8007530:	6224      	str	r4, [r4, #32]
 8007532:	6263      	str	r3, [r4, #36]	; 0x24
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <std+0x3c>)
 8007536:	62a3      	str	r3, [r4, #40]	; 0x28
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <std+0x40>)
 800753a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <std+0x44>)
 800753e:	6323      	str	r3, [r4, #48]	; 0x30
 8007540:	bd10      	pop	{r4, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	0800809d 	.word	0x0800809d
 8007548:	080080c5 	.word	0x080080c5
 800754c:	080080fd 	.word	0x080080fd
 8007550:	08008129 	.word	0x08008129

08007554 <_cleanup_r>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4902      	ldr	r1, [pc, #8]	; (8007560 <_cleanup_r+0xc>)
 8007558:	f000 f8ba 	bl	80076d0 <_fwalk_reent>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	0800748d 	.word	0x0800748d

08007564 <__sfmoreglue>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	2568      	movs	r5, #104	; 0x68
 8007568:	1e4a      	subs	r2, r1, #1
 800756a:	4355      	muls	r5, r2
 800756c:	000e      	movs	r6, r1
 800756e:	0029      	movs	r1, r5
 8007570:	3174      	adds	r1, #116	; 0x74
 8007572:	f7ff fcdf 	bl	8006f34 <_malloc_r>
 8007576:	1e04      	subs	r4, r0, #0
 8007578:	d008      	beq.n	800758c <__sfmoreglue+0x28>
 800757a:	2100      	movs	r1, #0
 800757c:	002a      	movs	r2, r5
 800757e:	6001      	str	r1, [r0, #0]
 8007580:	6046      	str	r6, [r0, #4]
 8007582:	300c      	adds	r0, #12
 8007584:	60a0      	str	r0, [r4, #8]
 8007586:	3268      	adds	r2, #104	; 0x68
 8007588:	f7ff fc60 	bl	8006e4c <memset>
 800758c:	0020      	movs	r0, r4
 800758e:	bd70      	pop	{r4, r5, r6, pc}

08007590 <__sfp_lock_acquire>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4802      	ldr	r0, [pc, #8]	; (800759c <__sfp_lock_acquire+0xc>)
 8007594:	f000 f8bd 	bl	8007712 <__retarget_lock_acquire_recursive>
 8007598:	bd10      	pop	{r4, pc}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	200002a9 	.word	0x200002a9

080075a0 <__sfp_lock_release>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	4802      	ldr	r0, [pc, #8]	; (80075ac <__sfp_lock_release+0xc>)
 80075a4:	f000 f8b6 	bl	8007714 <__retarget_lock_release_recursive>
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	200002a9 	.word	0x200002a9

080075b0 <__sinit_lock_acquire>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	4802      	ldr	r0, [pc, #8]	; (80075bc <__sinit_lock_acquire+0xc>)
 80075b4:	f000 f8ad 	bl	8007712 <__retarget_lock_acquire_recursive>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	200002aa 	.word	0x200002aa

080075c0 <__sinit_lock_release>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	4802      	ldr	r0, [pc, #8]	; (80075cc <__sinit_lock_release+0xc>)
 80075c4:	f000 f8a6 	bl	8007714 <__retarget_lock_release_recursive>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	200002aa 	.word	0x200002aa

080075d0 <__sinit>:
 80075d0:	b513      	push	{r0, r1, r4, lr}
 80075d2:	0004      	movs	r4, r0
 80075d4:	f7ff ffec 	bl	80075b0 <__sinit_lock_acquire>
 80075d8:	69a3      	ldr	r3, [r4, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <__sinit+0x14>
 80075de:	f7ff ffef 	bl	80075c0 <__sinit_lock_release>
 80075e2:	bd13      	pop	{r0, r1, r4, pc}
 80075e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80075e6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80075e8:	6523      	str	r3, [r4, #80]	; 0x50
 80075ea:	4b13      	ldr	r3, [pc, #76]	; (8007638 <__sinit+0x68>)
 80075ec:	4a13      	ldr	r2, [pc, #76]	; (800763c <__sinit+0x6c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d101      	bne.n	80075fc <__sinit+0x2c>
 80075f8:	2301      	movs	r3, #1
 80075fa:	61a3      	str	r3, [r4, #24]
 80075fc:	0020      	movs	r0, r4
 80075fe:	f000 f81f 	bl	8007640 <__sfp>
 8007602:	6060      	str	r0, [r4, #4]
 8007604:	0020      	movs	r0, r4
 8007606:	f000 f81b 	bl	8007640 <__sfp>
 800760a:	60a0      	str	r0, [r4, #8]
 800760c:	0020      	movs	r0, r4
 800760e:	f000 f817 	bl	8007640 <__sfp>
 8007612:	2200      	movs	r2, #0
 8007614:	2104      	movs	r1, #4
 8007616:	60e0      	str	r0, [r4, #12]
 8007618:	6860      	ldr	r0, [r4, #4]
 800761a:	f7ff ff77 	bl	800750c <std>
 800761e:	2201      	movs	r2, #1
 8007620:	2109      	movs	r1, #9
 8007622:	68a0      	ldr	r0, [r4, #8]
 8007624:	f7ff ff72 	bl	800750c <std>
 8007628:	2202      	movs	r2, #2
 800762a:	2112      	movs	r1, #18
 800762c:	68e0      	ldr	r0, [r4, #12]
 800762e:	f7ff ff6d 	bl	800750c <std>
 8007632:	2301      	movs	r3, #1
 8007634:	61a3      	str	r3, [r4, #24]
 8007636:	e7d2      	b.n	80075de <__sinit+0xe>
 8007638:	08008608 	.word	0x08008608
 800763c:	08007555 	.word	0x08007555

08007640 <__sfp>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	0007      	movs	r7, r0
 8007644:	f7ff ffa4 	bl	8007590 <__sfp_lock_acquire>
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <__sfp+0x88>)
 800764a:	681e      	ldr	r6, [r3, #0]
 800764c:	69b3      	ldr	r3, [r6, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <__sfp+0x18>
 8007652:	0030      	movs	r0, r6
 8007654:	f7ff ffbc 	bl	80075d0 <__sinit>
 8007658:	3648      	adds	r6, #72	; 0x48
 800765a:	68b4      	ldr	r4, [r6, #8]
 800765c:	6873      	ldr	r3, [r6, #4]
 800765e:	3b01      	subs	r3, #1
 8007660:	d504      	bpl.n	800766c <__sfp+0x2c>
 8007662:	6833      	ldr	r3, [r6, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d022      	beq.n	80076ae <__sfp+0x6e>
 8007668:	6836      	ldr	r6, [r6, #0]
 800766a:	e7f6      	b.n	800765a <__sfp+0x1a>
 800766c:	220c      	movs	r2, #12
 800766e:	5ea5      	ldrsh	r5, [r4, r2]
 8007670:	2d00      	cmp	r5, #0
 8007672:	d11a      	bne.n	80076aa <__sfp+0x6a>
 8007674:	0020      	movs	r0, r4
 8007676:	4b15      	ldr	r3, [pc, #84]	; (80076cc <__sfp+0x8c>)
 8007678:	3058      	adds	r0, #88	; 0x58
 800767a:	60e3      	str	r3, [r4, #12]
 800767c:	6665      	str	r5, [r4, #100]	; 0x64
 800767e:	f000 f847 	bl	8007710 <__retarget_lock_init_recursive>
 8007682:	f7ff ff8d 	bl	80075a0 <__sfp_lock_release>
 8007686:	0020      	movs	r0, r4
 8007688:	2208      	movs	r2, #8
 800768a:	0029      	movs	r1, r5
 800768c:	6025      	str	r5, [r4, #0]
 800768e:	60a5      	str	r5, [r4, #8]
 8007690:	6065      	str	r5, [r4, #4]
 8007692:	6125      	str	r5, [r4, #16]
 8007694:	6165      	str	r5, [r4, #20]
 8007696:	61a5      	str	r5, [r4, #24]
 8007698:	305c      	adds	r0, #92	; 0x5c
 800769a:	f7ff fbd7 	bl	8006e4c <memset>
 800769e:	6365      	str	r5, [r4, #52]	; 0x34
 80076a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80076a2:	64a5      	str	r5, [r4, #72]	; 0x48
 80076a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80076a6:	0020      	movs	r0, r4
 80076a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076aa:	3468      	adds	r4, #104	; 0x68
 80076ac:	e7d7      	b.n	800765e <__sfp+0x1e>
 80076ae:	2104      	movs	r1, #4
 80076b0:	0038      	movs	r0, r7
 80076b2:	f7ff ff57 	bl	8007564 <__sfmoreglue>
 80076b6:	1e04      	subs	r4, r0, #0
 80076b8:	6030      	str	r0, [r6, #0]
 80076ba:	d1d5      	bne.n	8007668 <__sfp+0x28>
 80076bc:	f7ff ff70 	bl	80075a0 <__sfp_lock_release>
 80076c0:	230c      	movs	r3, #12
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	e7ef      	b.n	80076a6 <__sfp+0x66>
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	08008608 	.word	0x08008608
 80076cc:	ffff0001 	.word	0xffff0001

080076d0 <_fwalk_reent>:
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	0004      	movs	r4, r0
 80076d4:	0006      	movs	r6, r0
 80076d6:	2700      	movs	r7, #0
 80076d8:	9101      	str	r1, [sp, #4]
 80076da:	3448      	adds	r4, #72	; 0x48
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	68a5      	ldr	r5, [r4, #8]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	9b00      	ldr	r3, [sp, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	d504      	bpl.n	80076f4 <_fwalk_reent+0x24>
 80076ea:	6824      	ldr	r4, [r4, #0]
 80076ec:	2c00      	cmp	r4, #0
 80076ee:	d1f5      	bne.n	80076dc <_fwalk_reent+0xc>
 80076f0:	0038      	movs	r0, r7
 80076f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076f4:	89ab      	ldrh	r3, [r5, #12]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d908      	bls.n	800770c <_fwalk_reent+0x3c>
 80076fa:	220e      	movs	r2, #14
 80076fc:	5eab      	ldrsh	r3, [r5, r2]
 80076fe:	3301      	adds	r3, #1
 8007700:	d004      	beq.n	800770c <_fwalk_reent+0x3c>
 8007702:	0029      	movs	r1, r5
 8007704:	0030      	movs	r0, r6
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	4798      	blx	r3
 800770a:	4307      	orrs	r7, r0
 800770c:	3568      	adds	r5, #104	; 0x68
 800770e:	e7e8      	b.n	80076e2 <_fwalk_reent+0x12>

08007710 <__retarget_lock_init_recursive>:
 8007710:	4770      	bx	lr

08007712 <__retarget_lock_acquire_recursive>:
 8007712:	4770      	bx	lr

08007714 <__retarget_lock_release_recursive>:
 8007714:	4770      	bx	lr
	...

08007718 <__swhatbuf_r>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	000e      	movs	r6, r1
 800771c:	001d      	movs	r5, r3
 800771e:	230e      	movs	r3, #14
 8007720:	5ec9      	ldrsh	r1, [r1, r3]
 8007722:	0014      	movs	r4, r2
 8007724:	b096      	sub	sp, #88	; 0x58
 8007726:	2900      	cmp	r1, #0
 8007728:	da08      	bge.n	800773c <__swhatbuf_r+0x24>
 800772a:	220c      	movs	r2, #12
 800772c:	5eb3      	ldrsh	r3, [r6, r2]
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	d411      	bmi.n	800775a <__swhatbuf_r+0x42>
 8007736:	2380      	movs	r3, #128	; 0x80
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	e00f      	b.n	800775c <__swhatbuf_r+0x44>
 800773c:	466a      	mov	r2, sp
 800773e:	f000 fd1f 	bl	8008180 <_fstat_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	dbf1      	blt.n	800772a <__swhatbuf_r+0x12>
 8007746:	23f0      	movs	r3, #240	; 0xf0
 8007748:	9901      	ldr	r1, [sp, #4]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	4019      	ands	r1, r3
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <__swhatbuf_r+0x4c>)
 8007750:	18c9      	adds	r1, r1, r3
 8007752:	424b      	negs	r3, r1
 8007754:	4159      	adcs	r1, r3
 8007756:	6029      	str	r1, [r5, #0]
 8007758:	e7ed      	b.n	8007736 <__swhatbuf_r+0x1e>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2000      	movs	r0, #0
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	b016      	add	sp, #88	; 0x58
 8007762:	bd70      	pop	{r4, r5, r6, pc}
 8007764:	ffffe000 	.word	0xffffe000

08007768 <__smakebuf_r>:
 8007768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800776a:	2602      	movs	r6, #2
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	0005      	movs	r5, r0
 8007770:	000c      	movs	r4, r1
 8007772:	4233      	tst	r3, r6
 8007774:	d006      	beq.n	8007784 <__smakebuf_r+0x1c>
 8007776:	0023      	movs	r3, r4
 8007778:	3347      	adds	r3, #71	; 0x47
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	2301      	movs	r3, #1
 8007780:	6163      	str	r3, [r4, #20]
 8007782:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007784:	466a      	mov	r2, sp
 8007786:	ab01      	add	r3, sp, #4
 8007788:	f7ff ffc6 	bl	8007718 <__swhatbuf_r>
 800778c:	9900      	ldr	r1, [sp, #0]
 800778e:	0007      	movs	r7, r0
 8007790:	0028      	movs	r0, r5
 8007792:	f7ff fbcf 	bl	8006f34 <_malloc_r>
 8007796:	2800      	cmp	r0, #0
 8007798:	d108      	bne.n	80077ac <__smakebuf_r+0x44>
 800779a:	220c      	movs	r2, #12
 800779c:	5ea3      	ldrsh	r3, [r4, r2]
 800779e:	059a      	lsls	r2, r3, #22
 80077a0:	d4ef      	bmi.n	8007782 <__smakebuf_r+0x1a>
 80077a2:	2203      	movs	r2, #3
 80077a4:	4393      	bics	r3, r2
 80077a6:	431e      	orrs	r6, r3
 80077a8:	81a6      	strh	r6, [r4, #12]
 80077aa:	e7e4      	b.n	8007776 <__smakebuf_r+0xe>
 80077ac:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <__smakebuf_r+0x84>)
 80077ae:	62ab      	str	r3, [r5, #40]	; 0x28
 80077b0:	2380      	movs	r3, #128	; 0x80
 80077b2:	89a2      	ldrh	r2, [r4, #12]
 80077b4:	6020      	str	r0, [r4, #0]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	9b00      	ldr	r3, [sp, #0]
 80077bc:	6120      	str	r0, [r4, #16]
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <__smakebuf_r+0x7a>
 80077c6:	0028      	movs	r0, r5
 80077c8:	230e      	movs	r3, #14
 80077ca:	5ee1      	ldrsh	r1, [r4, r3]
 80077cc:	f000 fcea 	bl	80081a4 <_isatty_r>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d006      	beq.n	80077e2 <__smakebuf_r+0x7a>
 80077d4:	2203      	movs	r2, #3
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	4393      	bics	r3, r2
 80077da:	001a      	movs	r2, r3
 80077dc:	2301      	movs	r3, #1
 80077de:	4313      	orrs	r3, r2
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	89a0      	ldrh	r0, [r4, #12]
 80077e4:	4307      	orrs	r7, r0
 80077e6:	81a7      	strh	r7, [r4, #12]
 80077e8:	e7cb      	b.n	8007782 <__smakebuf_r+0x1a>
 80077ea:	46c0      	nop			; (mov r8, r8)
 80077ec:	08007555 	.word	0x08007555

080077f0 <__malloc_lock>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4802      	ldr	r0, [pc, #8]	; (80077fc <__malloc_lock+0xc>)
 80077f4:	f7ff ff8d 	bl	8007712 <__retarget_lock_acquire_recursive>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	200002a8 	.word	0x200002a8

08007800 <__malloc_unlock>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4802      	ldr	r0, [pc, #8]	; (800780c <__malloc_unlock+0xc>)
 8007804:	f7ff ff86 	bl	8007714 <__retarget_lock_release_recursive>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	46c0      	nop			; (mov r8, r8)
 800780c:	200002a8 	.word	0x200002a8

08007810 <__ssputs_r>:
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	688e      	ldr	r6, [r1, #8]
 8007814:	b085      	sub	sp, #20
 8007816:	0007      	movs	r7, r0
 8007818:	000c      	movs	r4, r1
 800781a:	9203      	str	r2, [sp, #12]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	429e      	cmp	r6, r3
 8007820:	d83c      	bhi.n	800789c <__ssputs_r+0x8c>
 8007822:	2390      	movs	r3, #144	; 0x90
 8007824:	898a      	ldrh	r2, [r1, #12]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	421a      	tst	r2, r3
 800782a:	d034      	beq.n	8007896 <__ssputs_r+0x86>
 800782c:	6909      	ldr	r1, [r1, #16]
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	6960      	ldr	r0, [r4, #20]
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	9302      	str	r3, [sp, #8]
 8007836:	2303      	movs	r3, #3
 8007838:	4343      	muls	r3, r0
 800783a:	0fdd      	lsrs	r5, r3, #31
 800783c:	18ed      	adds	r5, r5, r3
 800783e:	9b01      	ldr	r3, [sp, #4]
 8007840:	9802      	ldr	r0, [sp, #8]
 8007842:	3301      	adds	r3, #1
 8007844:	181b      	adds	r3, r3, r0
 8007846:	106d      	asrs	r5, r5, #1
 8007848:	42ab      	cmp	r3, r5
 800784a:	d900      	bls.n	800784e <__ssputs_r+0x3e>
 800784c:	001d      	movs	r5, r3
 800784e:	0553      	lsls	r3, r2, #21
 8007850:	d532      	bpl.n	80078b8 <__ssputs_r+0xa8>
 8007852:	0029      	movs	r1, r5
 8007854:	0038      	movs	r0, r7
 8007856:	f7ff fb6d 	bl	8006f34 <_malloc_r>
 800785a:	1e06      	subs	r6, r0, #0
 800785c:	d109      	bne.n	8007872 <__ssputs_r+0x62>
 800785e:	230c      	movs	r3, #12
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	2340      	movs	r3, #64	; 0x40
 8007864:	2001      	movs	r0, #1
 8007866:	89a2      	ldrh	r2, [r4, #12]
 8007868:	4240      	negs	r0, r0
 800786a:	4313      	orrs	r3, r2
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	b005      	add	sp, #20
 8007870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007872:	9a02      	ldr	r2, [sp, #8]
 8007874:	6921      	ldr	r1, [r4, #16]
 8007876:	f7ff facd 	bl	8006e14 <memcpy>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <__ssputs_r+0xc0>)
 800787e:	401a      	ands	r2, r3
 8007880:	2380      	movs	r3, #128	; 0x80
 8007882:	4313      	orrs	r3, r2
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	6126      	str	r6, [r4, #16]
 800788a:	18f6      	adds	r6, r6, r3
 800788c:	6026      	str	r6, [r4, #0]
 800788e:	6165      	str	r5, [r4, #20]
 8007890:	9e01      	ldr	r6, [sp, #4]
 8007892:	1aed      	subs	r5, r5, r3
 8007894:	60a5      	str	r5, [r4, #8]
 8007896:	9b01      	ldr	r3, [sp, #4]
 8007898:	429e      	cmp	r6, r3
 800789a:	d900      	bls.n	800789e <__ssputs_r+0x8e>
 800789c:	9e01      	ldr	r6, [sp, #4]
 800789e:	0032      	movs	r2, r6
 80078a0:	9903      	ldr	r1, [sp, #12]
 80078a2:	6820      	ldr	r0, [r4, #0]
 80078a4:	f7ff fabf 	bl	8006e26 <memmove>
 80078a8:	68a3      	ldr	r3, [r4, #8]
 80078aa:	2000      	movs	r0, #0
 80078ac:	1b9b      	subs	r3, r3, r6
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	199e      	adds	r6, r3, r6
 80078b4:	6026      	str	r6, [r4, #0]
 80078b6:	e7da      	b.n	800786e <__ssputs_r+0x5e>
 80078b8:	002a      	movs	r2, r5
 80078ba:	0038      	movs	r0, r7
 80078bc:	f000 fca3 	bl	8008206 <_realloc_r>
 80078c0:	1e06      	subs	r6, r0, #0
 80078c2:	d1e0      	bne.n	8007886 <__ssputs_r+0x76>
 80078c4:	0038      	movs	r0, r7
 80078c6:	6921      	ldr	r1, [r4, #16]
 80078c8:	f7ff fac8 	bl	8006e5c <_free_r>
 80078cc:	e7c7      	b.n	800785e <__ssputs_r+0x4e>
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	fffffb7f 	.word	0xfffffb7f

080078d4 <_svfiprintf_r>:
 80078d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d6:	b0a1      	sub	sp, #132	; 0x84
 80078d8:	9003      	str	r0, [sp, #12]
 80078da:	001d      	movs	r5, r3
 80078dc:	898b      	ldrh	r3, [r1, #12]
 80078de:	000f      	movs	r7, r1
 80078e0:	0016      	movs	r6, r2
 80078e2:	061b      	lsls	r3, r3, #24
 80078e4:	d511      	bpl.n	800790a <_svfiprintf_r+0x36>
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10e      	bne.n	800790a <_svfiprintf_r+0x36>
 80078ec:	2140      	movs	r1, #64	; 0x40
 80078ee:	f7ff fb21 	bl	8006f34 <_malloc_r>
 80078f2:	6038      	str	r0, [r7, #0]
 80078f4:	6138      	str	r0, [r7, #16]
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d105      	bne.n	8007906 <_svfiprintf_r+0x32>
 80078fa:	230c      	movs	r3, #12
 80078fc:	9a03      	ldr	r2, [sp, #12]
 80078fe:	3801      	subs	r0, #1
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	b021      	add	sp, #132	; 0x84
 8007904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007906:	2340      	movs	r3, #64	; 0x40
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	2300      	movs	r3, #0
 800790c:	ac08      	add	r4, sp, #32
 800790e:	6163      	str	r3, [r4, #20]
 8007910:	3320      	adds	r3, #32
 8007912:	7663      	strb	r3, [r4, #25]
 8007914:	3310      	adds	r3, #16
 8007916:	76a3      	strb	r3, [r4, #26]
 8007918:	9507      	str	r5, [sp, #28]
 800791a:	0035      	movs	r5, r6
 800791c:	782b      	ldrb	r3, [r5, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <_svfiprintf_r+0x52>
 8007922:	2b25      	cmp	r3, #37	; 0x25
 8007924:	d147      	bne.n	80079b6 <_svfiprintf_r+0xe2>
 8007926:	1bab      	subs	r3, r5, r6
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	42b5      	cmp	r5, r6
 800792c:	d00c      	beq.n	8007948 <_svfiprintf_r+0x74>
 800792e:	0032      	movs	r2, r6
 8007930:	0039      	movs	r1, r7
 8007932:	9803      	ldr	r0, [sp, #12]
 8007934:	f7ff ff6c 	bl	8007810 <__ssputs_r>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d100      	bne.n	800793e <_svfiprintf_r+0x6a>
 800793c:	e0ae      	b.n	8007a9c <_svfiprintf_r+0x1c8>
 800793e:	6962      	ldr	r2, [r4, #20]
 8007940:	9b05      	ldr	r3, [sp, #20]
 8007942:	4694      	mov	ip, r2
 8007944:	4463      	add	r3, ip
 8007946:	6163      	str	r3, [r4, #20]
 8007948:	782b      	ldrb	r3, [r5, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d100      	bne.n	8007950 <_svfiprintf_r+0x7c>
 800794e:	e0a5      	b.n	8007a9c <_svfiprintf_r+0x1c8>
 8007950:	2201      	movs	r2, #1
 8007952:	2300      	movs	r3, #0
 8007954:	4252      	negs	r2, r2
 8007956:	6062      	str	r2, [r4, #4]
 8007958:	a904      	add	r1, sp, #16
 800795a:	3254      	adds	r2, #84	; 0x54
 800795c:	1852      	adds	r2, r2, r1
 800795e:	1c6e      	adds	r6, r5, #1
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	60e3      	str	r3, [r4, #12]
 8007964:	60a3      	str	r3, [r4, #8]
 8007966:	7013      	strb	r3, [r2, #0]
 8007968:	65a3      	str	r3, [r4, #88]	; 0x58
 800796a:	2205      	movs	r2, #5
 800796c:	7831      	ldrb	r1, [r6, #0]
 800796e:	4854      	ldr	r0, [pc, #336]	; (8007ac0 <_svfiprintf_r+0x1ec>)
 8007970:	f000 fc3e 	bl	80081f0 <memchr>
 8007974:	1c75      	adds	r5, r6, #1
 8007976:	2800      	cmp	r0, #0
 8007978:	d11f      	bne.n	80079ba <_svfiprintf_r+0xe6>
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	06d3      	lsls	r3, r2, #27
 800797e:	d504      	bpl.n	800798a <_svfiprintf_r+0xb6>
 8007980:	2353      	movs	r3, #83	; 0x53
 8007982:	a904      	add	r1, sp, #16
 8007984:	185b      	adds	r3, r3, r1
 8007986:	2120      	movs	r1, #32
 8007988:	7019      	strb	r1, [r3, #0]
 800798a:	0713      	lsls	r3, r2, #28
 800798c:	d504      	bpl.n	8007998 <_svfiprintf_r+0xc4>
 800798e:	2353      	movs	r3, #83	; 0x53
 8007990:	a904      	add	r1, sp, #16
 8007992:	185b      	adds	r3, r3, r1
 8007994:	212b      	movs	r1, #43	; 0x2b
 8007996:	7019      	strb	r1, [r3, #0]
 8007998:	7833      	ldrb	r3, [r6, #0]
 800799a:	2b2a      	cmp	r3, #42	; 0x2a
 800799c:	d016      	beq.n	80079cc <_svfiprintf_r+0xf8>
 800799e:	0035      	movs	r5, r6
 80079a0:	2100      	movs	r1, #0
 80079a2:	200a      	movs	r0, #10
 80079a4:	68e3      	ldr	r3, [r4, #12]
 80079a6:	782a      	ldrb	r2, [r5, #0]
 80079a8:	1c6e      	adds	r6, r5, #1
 80079aa:	3a30      	subs	r2, #48	; 0x30
 80079ac:	2a09      	cmp	r2, #9
 80079ae:	d94e      	bls.n	8007a4e <_svfiprintf_r+0x17a>
 80079b0:	2900      	cmp	r1, #0
 80079b2:	d111      	bne.n	80079d8 <_svfiprintf_r+0x104>
 80079b4:	e017      	b.n	80079e6 <_svfiprintf_r+0x112>
 80079b6:	3501      	adds	r5, #1
 80079b8:	e7b0      	b.n	800791c <_svfiprintf_r+0x48>
 80079ba:	4b41      	ldr	r3, [pc, #260]	; (8007ac0 <_svfiprintf_r+0x1ec>)
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	1ac0      	subs	r0, r0, r3
 80079c0:	2301      	movs	r3, #1
 80079c2:	4083      	lsls	r3, r0
 80079c4:	4313      	orrs	r3, r2
 80079c6:	002e      	movs	r6, r5
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	e7ce      	b.n	800796a <_svfiprintf_r+0x96>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	9107      	str	r1, [sp, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db01      	blt.n	80079dc <_svfiprintf_r+0x108>
 80079d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079da:	e004      	b.n	80079e6 <_svfiprintf_r+0x112>
 80079dc:	425b      	negs	r3, r3
 80079de:	60e3      	str	r3, [r4, #12]
 80079e0:	2302      	movs	r3, #2
 80079e2:	4313      	orrs	r3, r2
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	782b      	ldrb	r3, [r5, #0]
 80079e8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ea:	d10a      	bne.n	8007a02 <_svfiprintf_r+0x12e>
 80079ec:	786b      	ldrb	r3, [r5, #1]
 80079ee:	2b2a      	cmp	r3, #42	; 0x2a
 80079f0:	d135      	bne.n	8007a5e <_svfiprintf_r+0x18a>
 80079f2:	9b07      	ldr	r3, [sp, #28]
 80079f4:	3502      	adds	r5, #2
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	9207      	str	r2, [sp, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	db2b      	blt.n	8007a58 <_svfiprintf_r+0x184>
 8007a00:	9309      	str	r3, [sp, #36]	; 0x24
 8007a02:	4e30      	ldr	r6, [pc, #192]	; (8007ac4 <_svfiprintf_r+0x1f0>)
 8007a04:	2203      	movs	r2, #3
 8007a06:	0030      	movs	r0, r6
 8007a08:	7829      	ldrb	r1, [r5, #0]
 8007a0a:	f000 fbf1 	bl	80081f0 <memchr>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d006      	beq.n	8007a20 <_svfiprintf_r+0x14c>
 8007a12:	2340      	movs	r3, #64	; 0x40
 8007a14:	1b80      	subs	r0, r0, r6
 8007a16:	4083      	lsls	r3, r0
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	3501      	adds	r5, #1
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	7829      	ldrb	r1, [r5, #0]
 8007a22:	2206      	movs	r2, #6
 8007a24:	4828      	ldr	r0, [pc, #160]	; (8007ac8 <_svfiprintf_r+0x1f4>)
 8007a26:	1c6e      	adds	r6, r5, #1
 8007a28:	7621      	strb	r1, [r4, #24]
 8007a2a:	f000 fbe1 	bl	80081f0 <memchr>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d03c      	beq.n	8007aac <_svfiprintf_r+0x1d8>
 8007a32:	4b26      	ldr	r3, [pc, #152]	; (8007acc <_svfiprintf_r+0x1f8>)
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d125      	bne.n	8007a84 <_svfiprintf_r+0x1b0>
 8007a38:	2207      	movs	r2, #7
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	3307      	adds	r3, #7
 8007a3e:	4393      	bics	r3, r2
 8007a40:	3308      	adds	r3, #8
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	6963      	ldr	r3, [r4, #20]
 8007a46:	9a04      	ldr	r2, [sp, #16]
 8007a48:	189b      	adds	r3, r3, r2
 8007a4a:	6163      	str	r3, [r4, #20]
 8007a4c:	e765      	b.n	800791a <_svfiprintf_r+0x46>
 8007a4e:	4343      	muls	r3, r0
 8007a50:	0035      	movs	r5, r6
 8007a52:	2101      	movs	r1, #1
 8007a54:	189b      	adds	r3, r3, r2
 8007a56:	e7a6      	b.n	80079a6 <_svfiprintf_r+0xd2>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	425b      	negs	r3, r3
 8007a5c:	e7d0      	b.n	8007a00 <_svfiprintf_r+0x12c>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	200a      	movs	r0, #10
 8007a62:	001a      	movs	r2, r3
 8007a64:	3501      	adds	r5, #1
 8007a66:	6063      	str	r3, [r4, #4]
 8007a68:	7829      	ldrb	r1, [r5, #0]
 8007a6a:	1c6e      	adds	r6, r5, #1
 8007a6c:	3930      	subs	r1, #48	; 0x30
 8007a6e:	2909      	cmp	r1, #9
 8007a70:	d903      	bls.n	8007a7a <_svfiprintf_r+0x1a6>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0c5      	beq.n	8007a02 <_svfiprintf_r+0x12e>
 8007a76:	9209      	str	r2, [sp, #36]	; 0x24
 8007a78:	e7c3      	b.n	8007a02 <_svfiprintf_r+0x12e>
 8007a7a:	4342      	muls	r2, r0
 8007a7c:	0035      	movs	r5, r6
 8007a7e:	2301      	movs	r3, #1
 8007a80:	1852      	adds	r2, r2, r1
 8007a82:	e7f1      	b.n	8007a68 <_svfiprintf_r+0x194>
 8007a84:	ab07      	add	r3, sp, #28
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	003a      	movs	r2, r7
 8007a8a:	0021      	movs	r1, r4
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <_svfiprintf_r+0x1fc>)
 8007a8e:	9803      	ldr	r0, [sp, #12]
 8007a90:	e000      	b.n	8007a94 <_svfiprintf_r+0x1c0>
 8007a92:	bf00      	nop
 8007a94:	9004      	str	r0, [sp, #16]
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	d1d3      	bne.n	8007a44 <_svfiprintf_r+0x170>
 8007a9c:	89bb      	ldrh	r3, [r7, #12]
 8007a9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007aa0:	065b      	lsls	r3, r3, #25
 8007aa2:	d400      	bmi.n	8007aa6 <_svfiprintf_r+0x1d2>
 8007aa4:	e72d      	b.n	8007902 <_svfiprintf_r+0x2e>
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	4240      	negs	r0, r0
 8007aaa:	e72a      	b.n	8007902 <_svfiprintf_r+0x2e>
 8007aac:	ab07      	add	r3, sp, #28
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	003a      	movs	r2, r7
 8007ab2:	0021      	movs	r1, r4
 8007ab4:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <_svfiprintf_r+0x1fc>)
 8007ab6:	9803      	ldr	r0, [sp, #12]
 8007ab8:	f000 f9de 	bl	8007e78 <_printf_i>
 8007abc:	e7ea      	b.n	8007a94 <_svfiprintf_r+0x1c0>
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	0800866c 	.word	0x0800866c
 8007ac4:	08008672 	.word	0x08008672
 8007ac8:	08008676 	.word	0x08008676
 8007acc:	00000000 	.word	0x00000000
 8007ad0:	08007811 	.word	0x08007811

08007ad4 <__sfputc_r>:
 8007ad4:	6893      	ldr	r3, [r2, #8]
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	6093      	str	r3, [r2, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da04      	bge.n	8007aea <__sfputc_r+0x16>
 8007ae0:	6994      	ldr	r4, [r2, #24]
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	db07      	blt.n	8007af6 <__sfputc_r+0x22>
 8007ae6:	290a      	cmp	r1, #10
 8007ae8:	d005      	beq.n	8007af6 <__sfputc_r+0x22>
 8007aea:	6813      	ldr	r3, [r2, #0]
 8007aec:	1c58      	adds	r0, r3, #1
 8007aee:	6010      	str	r0, [r2, #0]
 8007af0:	7019      	strb	r1, [r3, #0]
 8007af2:	0008      	movs	r0, r1
 8007af4:	bd10      	pop	{r4, pc}
 8007af6:	f7ff fb6f 	bl	80071d8 <__swbuf_r>
 8007afa:	0001      	movs	r1, r0
 8007afc:	e7f9      	b.n	8007af2 <__sfputc_r+0x1e>

08007afe <__sfputs_r>:
 8007afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b00:	0006      	movs	r6, r0
 8007b02:	000f      	movs	r7, r1
 8007b04:	0014      	movs	r4, r2
 8007b06:	18d5      	adds	r5, r2, r3
 8007b08:	42ac      	cmp	r4, r5
 8007b0a:	d101      	bne.n	8007b10 <__sfputs_r+0x12>
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	e007      	b.n	8007b20 <__sfputs_r+0x22>
 8007b10:	7821      	ldrb	r1, [r4, #0]
 8007b12:	003a      	movs	r2, r7
 8007b14:	0030      	movs	r0, r6
 8007b16:	f7ff ffdd 	bl	8007ad4 <__sfputc_r>
 8007b1a:	3401      	adds	r4, #1
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d1f3      	bne.n	8007b08 <__sfputs_r+0xa>
 8007b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b24 <_vfiprintf_r>:
 8007b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b26:	b0a1      	sub	sp, #132	; 0x84
 8007b28:	0006      	movs	r6, r0
 8007b2a:	000c      	movs	r4, r1
 8007b2c:	001f      	movs	r7, r3
 8007b2e:	9203      	str	r2, [sp, #12]
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d004      	beq.n	8007b3e <_vfiprintf_r+0x1a>
 8007b34:	6983      	ldr	r3, [r0, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <_vfiprintf_r+0x1a>
 8007b3a:	f7ff fd49 	bl	80075d0 <__sinit>
 8007b3e:	4b8e      	ldr	r3, [pc, #568]	; (8007d78 <_vfiprintf_r+0x254>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	d11c      	bne.n	8007b7e <_vfiprintf_r+0x5a>
 8007b44:	6874      	ldr	r4, [r6, #4]
 8007b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b48:	07db      	lsls	r3, r3, #31
 8007b4a:	d405      	bmi.n	8007b58 <_vfiprintf_r+0x34>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	059b      	lsls	r3, r3, #22
 8007b50:	d402      	bmi.n	8007b58 <_vfiprintf_r+0x34>
 8007b52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b54:	f7ff fddd 	bl	8007712 <__retarget_lock_acquire_recursive>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	071b      	lsls	r3, r3, #28
 8007b5c:	d502      	bpl.n	8007b64 <_vfiprintf_r+0x40>
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d11d      	bne.n	8007ba0 <_vfiprintf_r+0x7c>
 8007b64:	0021      	movs	r1, r4
 8007b66:	0030      	movs	r0, r6
 8007b68:	f7ff fb8c 	bl	8007284 <__swsetup_r>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d017      	beq.n	8007ba0 <_vfiprintf_r+0x7c>
 8007b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b72:	07db      	lsls	r3, r3, #31
 8007b74:	d50d      	bpl.n	8007b92 <_vfiprintf_r+0x6e>
 8007b76:	2001      	movs	r0, #1
 8007b78:	4240      	negs	r0, r0
 8007b7a:	b021      	add	sp, #132	; 0x84
 8007b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b7e:	4b7f      	ldr	r3, [pc, #508]	; (8007d7c <_vfiprintf_r+0x258>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d101      	bne.n	8007b88 <_vfiprintf_r+0x64>
 8007b84:	68b4      	ldr	r4, [r6, #8]
 8007b86:	e7de      	b.n	8007b46 <_vfiprintf_r+0x22>
 8007b88:	4b7d      	ldr	r3, [pc, #500]	; (8007d80 <_vfiprintf_r+0x25c>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d1db      	bne.n	8007b46 <_vfiprintf_r+0x22>
 8007b8e:	68f4      	ldr	r4, [r6, #12]
 8007b90:	e7d9      	b.n	8007b46 <_vfiprintf_r+0x22>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	059b      	lsls	r3, r3, #22
 8007b96:	d4ee      	bmi.n	8007b76 <_vfiprintf_r+0x52>
 8007b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b9a:	f7ff fdbb 	bl	8007714 <__retarget_lock_release_recursive>
 8007b9e:	e7ea      	b.n	8007b76 <_vfiprintf_r+0x52>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	ad08      	add	r5, sp, #32
 8007ba4:	616b      	str	r3, [r5, #20]
 8007ba6:	3320      	adds	r3, #32
 8007ba8:	766b      	strb	r3, [r5, #25]
 8007baa:	3310      	adds	r3, #16
 8007bac:	76ab      	strb	r3, [r5, #26]
 8007bae:	9707      	str	r7, [sp, #28]
 8007bb0:	9f03      	ldr	r7, [sp, #12]
 8007bb2:	783b      	ldrb	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <_vfiprintf_r+0x98>
 8007bb8:	2b25      	cmp	r3, #37	; 0x25
 8007bba:	d14e      	bne.n	8007c5a <_vfiprintf_r+0x136>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	1afb      	subs	r3, r7, r3
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	429f      	cmp	r7, r3
 8007bc6:	d00d      	beq.n	8007be4 <_vfiprintf_r+0xc0>
 8007bc8:	9b05      	ldr	r3, [sp, #20]
 8007bca:	0021      	movs	r1, r4
 8007bcc:	0030      	movs	r0, r6
 8007bce:	9a03      	ldr	r2, [sp, #12]
 8007bd0:	f7ff ff95 	bl	8007afe <__sfputs_r>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d100      	bne.n	8007bda <_vfiprintf_r+0xb6>
 8007bd8:	e0b5      	b.n	8007d46 <_vfiprintf_r+0x222>
 8007bda:	696a      	ldr	r2, [r5, #20]
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	4694      	mov	ip, r2
 8007be0:	4463      	add	r3, ip
 8007be2:	616b      	str	r3, [r5, #20]
 8007be4:	783b      	ldrb	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d100      	bne.n	8007bec <_vfiprintf_r+0xc8>
 8007bea:	e0ac      	b.n	8007d46 <_vfiprintf_r+0x222>
 8007bec:	2201      	movs	r2, #1
 8007bee:	1c7b      	adds	r3, r7, #1
 8007bf0:	9303      	str	r3, [sp, #12]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4252      	negs	r2, r2
 8007bf6:	606a      	str	r2, [r5, #4]
 8007bf8:	a904      	add	r1, sp, #16
 8007bfa:	3254      	adds	r2, #84	; 0x54
 8007bfc:	1852      	adds	r2, r2, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	60eb      	str	r3, [r5, #12]
 8007c02:	60ab      	str	r3, [r5, #8]
 8007c04:	7013      	strb	r3, [r2, #0]
 8007c06:	65ab      	str	r3, [r5, #88]	; 0x58
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	2205      	movs	r2, #5
 8007c0c:	7819      	ldrb	r1, [r3, #0]
 8007c0e:	485d      	ldr	r0, [pc, #372]	; (8007d84 <_vfiprintf_r+0x260>)
 8007c10:	f000 faee 	bl	80081f0 <memchr>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	1c5f      	adds	r7, r3, #1
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d120      	bne.n	8007c5e <_vfiprintf_r+0x13a>
 8007c1c:	682a      	ldr	r2, [r5, #0]
 8007c1e:	06d3      	lsls	r3, r2, #27
 8007c20:	d504      	bpl.n	8007c2c <_vfiprintf_r+0x108>
 8007c22:	2353      	movs	r3, #83	; 0x53
 8007c24:	a904      	add	r1, sp, #16
 8007c26:	185b      	adds	r3, r3, r1
 8007c28:	2120      	movs	r1, #32
 8007c2a:	7019      	strb	r1, [r3, #0]
 8007c2c:	0713      	lsls	r3, r2, #28
 8007c2e:	d504      	bpl.n	8007c3a <_vfiprintf_r+0x116>
 8007c30:	2353      	movs	r3, #83	; 0x53
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	185b      	adds	r3, r3, r1
 8007c36:	212b      	movs	r1, #43	; 0x2b
 8007c38:	7019      	strb	r1, [r3, #0]
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c40:	d016      	beq.n	8007c70 <_vfiprintf_r+0x14c>
 8007c42:	2100      	movs	r1, #0
 8007c44:	68eb      	ldr	r3, [r5, #12]
 8007c46:	9f03      	ldr	r7, [sp, #12]
 8007c48:	783a      	ldrb	r2, [r7, #0]
 8007c4a:	1c78      	adds	r0, r7, #1
 8007c4c:	3a30      	subs	r2, #48	; 0x30
 8007c4e:	4684      	mov	ip, r0
 8007c50:	2a09      	cmp	r2, #9
 8007c52:	d94f      	bls.n	8007cf4 <_vfiprintf_r+0x1d0>
 8007c54:	2900      	cmp	r1, #0
 8007c56:	d111      	bne.n	8007c7c <_vfiprintf_r+0x158>
 8007c58:	e017      	b.n	8007c8a <_vfiprintf_r+0x166>
 8007c5a:	3701      	adds	r7, #1
 8007c5c:	e7a9      	b.n	8007bb2 <_vfiprintf_r+0x8e>
 8007c5e:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <_vfiprintf_r+0x260>)
 8007c60:	682a      	ldr	r2, [r5, #0]
 8007c62:	1ac0      	subs	r0, r0, r3
 8007c64:	2301      	movs	r3, #1
 8007c66:	4083      	lsls	r3, r0
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	9703      	str	r7, [sp, #12]
 8007c6e:	e7cb      	b.n	8007c08 <_vfiprintf_r+0xe4>
 8007c70:	9b07      	ldr	r3, [sp, #28]
 8007c72:	1d19      	adds	r1, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	9107      	str	r1, [sp, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db01      	blt.n	8007c80 <_vfiprintf_r+0x15c>
 8007c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c7e:	e004      	b.n	8007c8a <_vfiprintf_r+0x166>
 8007c80:	425b      	negs	r3, r3
 8007c82:	60eb      	str	r3, [r5, #12]
 8007c84:	2302      	movs	r3, #2
 8007c86:	4313      	orrs	r3, r2
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	783b      	ldrb	r3, [r7, #0]
 8007c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8e:	d10a      	bne.n	8007ca6 <_vfiprintf_r+0x182>
 8007c90:	787b      	ldrb	r3, [r7, #1]
 8007c92:	2b2a      	cmp	r3, #42	; 0x2a
 8007c94:	d137      	bne.n	8007d06 <_vfiprintf_r+0x1e2>
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	3702      	adds	r7, #2
 8007c9a:	1d1a      	adds	r2, r3, #4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	9207      	str	r2, [sp, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db2d      	blt.n	8007d00 <_vfiprintf_r+0x1dc>
 8007ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	7839      	ldrb	r1, [r7, #0]
 8007caa:	4837      	ldr	r0, [pc, #220]	; (8007d88 <_vfiprintf_r+0x264>)
 8007cac:	f000 faa0 	bl	80081f0 <memchr>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d007      	beq.n	8007cc4 <_vfiprintf_r+0x1a0>
 8007cb4:	4b34      	ldr	r3, [pc, #208]	; (8007d88 <_vfiprintf_r+0x264>)
 8007cb6:	682a      	ldr	r2, [r5, #0]
 8007cb8:	1ac0      	subs	r0, r0, r3
 8007cba:	2340      	movs	r3, #64	; 0x40
 8007cbc:	4083      	lsls	r3, r0
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	3701      	adds	r7, #1
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	7839      	ldrb	r1, [r7, #0]
 8007cc6:	1c7b      	adds	r3, r7, #1
 8007cc8:	2206      	movs	r2, #6
 8007cca:	4830      	ldr	r0, [pc, #192]	; (8007d8c <_vfiprintf_r+0x268>)
 8007ccc:	9303      	str	r3, [sp, #12]
 8007cce:	7629      	strb	r1, [r5, #24]
 8007cd0:	f000 fa8e 	bl	80081f0 <memchr>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d045      	beq.n	8007d64 <_vfiprintf_r+0x240>
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <_vfiprintf_r+0x26c>)
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d127      	bne.n	8007d2e <_vfiprintf_r+0x20a>
 8007cde:	2207      	movs	r2, #7
 8007ce0:	9b07      	ldr	r3, [sp, #28]
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	4393      	bics	r3, r2
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	696b      	ldr	r3, [r5, #20]
 8007cec:	9a04      	ldr	r2, [sp, #16]
 8007cee:	189b      	adds	r3, r3, r2
 8007cf0:	616b      	str	r3, [r5, #20]
 8007cf2:	e75d      	b.n	8007bb0 <_vfiprintf_r+0x8c>
 8007cf4:	210a      	movs	r1, #10
 8007cf6:	434b      	muls	r3, r1
 8007cf8:	4667      	mov	r7, ip
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	3909      	subs	r1, #9
 8007cfe:	e7a3      	b.n	8007c48 <_vfiprintf_r+0x124>
 8007d00:	2301      	movs	r3, #1
 8007d02:	425b      	negs	r3, r3
 8007d04:	e7ce      	b.n	8007ca4 <_vfiprintf_r+0x180>
 8007d06:	2300      	movs	r3, #0
 8007d08:	001a      	movs	r2, r3
 8007d0a:	3701      	adds	r7, #1
 8007d0c:	606b      	str	r3, [r5, #4]
 8007d0e:	7839      	ldrb	r1, [r7, #0]
 8007d10:	1c78      	adds	r0, r7, #1
 8007d12:	3930      	subs	r1, #48	; 0x30
 8007d14:	4684      	mov	ip, r0
 8007d16:	2909      	cmp	r1, #9
 8007d18:	d903      	bls.n	8007d22 <_vfiprintf_r+0x1fe>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0c3      	beq.n	8007ca6 <_vfiprintf_r+0x182>
 8007d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d20:	e7c1      	b.n	8007ca6 <_vfiprintf_r+0x182>
 8007d22:	230a      	movs	r3, #10
 8007d24:	435a      	muls	r2, r3
 8007d26:	4667      	mov	r7, ip
 8007d28:	1852      	adds	r2, r2, r1
 8007d2a:	3b09      	subs	r3, #9
 8007d2c:	e7ef      	b.n	8007d0e <_vfiprintf_r+0x1ea>
 8007d2e:	ab07      	add	r3, sp, #28
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	0022      	movs	r2, r4
 8007d34:	0029      	movs	r1, r5
 8007d36:	0030      	movs	r0, r6
 8007d38:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <_vfiprintf_r+0x270>)
 8007d3a:	e000      	b.n	8007d3e <_vfiprintf_r+0x21a>
 8007d3c:	bf00      	nop
 8007d3e:	9004      	str	r0, [sp, #16]
 8007d40:	9b04      	ldr	r3, [sp, #16]
 8007d42:	3301      	adds	r3, #1
 8007d44:	d1d1      	bne.n	8007cea <_vfiprintf_r+0x1c6>
 8007d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d48:	07db      	lsls	r3, r3, #31
 8007d4a:	d405      	bmi.n	8007d58 <_vfiprintf_r+0x234>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	059b      	lsls	r3, r3, #22
 8007d50:	d402      	bmi.n	8007d58 <_vfiprintf_r+0x234>
 8007d52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d54:	f7ff fcde 	bl	8007714 <__retarget_lock_release_recursive>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	065b      	lsls	r3, r3, #25
 8007d5c:	d500      	bpl.n	8007d60 <_vfiprintf_r+0x23c>
 8007d5e:	e70a      	b.n	8007b76 <_vfiprintf_r+0x52>
 8007d60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d62:	e70a      	b.n	8007b7a <_vfiprintf_r+0x56>
 8007d64:	ab07      	add	r3, sp, #28
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	0022      	movs	r2, r4
 8007d6a:	0029      	movs	r1, r5
 8007d6c:	0030      	movs	r0, r6
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <_vfiprintf_r+0x270>)
 8007d70:	f000 f882 	bl	8007e78 <_printf_i>
 8007d74:	e7e3      	b.n	8007d3e <_vfiprintf_r+0x21a>
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	0800862c 	.word	0x0800862c
 8007d7c:	0800864c 	.word	0x0800864c
 8007d80:	0800860c 	.word	0x0800860c
 8007d84:	0800866c 	.word	0x0800866c
 8007d88:	08008672 	.word	0x08008672
 8007d8c:	08008676 	.word	0x08008676
 8007d90:	00000000 	.word	0x00000000
 8007d94:	08007aff 	.word	0x08007aff

08007d98 <_printf_common>:
 8007d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9a:	0015      	movs	r5, r2
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	688a      	ldr	r2, [r1, #8]
 8007da0:	690b      	ldr	r3, [r1, #16]
 8007da2:	000c      	movs	r4, r1
 8007da4:	9000      	str	r0, [sp, #0]
 8007da6:	4293      	cmp	r3, r2
 8007da8:	da00      	bge.n	8007dac <_printf_common+0x14>
 8007daa:	0013      	movs	r3, r2
 8007dac:	0022      	movs	r2, r4
 8007dae:	602b      	str	r3, [r5, #0]
 8007db0:	3243      	adds	r2, #67	; 0x43
 8007db2:	7812      	ldrb	r2, [r2, #0]
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	d001      	beq.n	8007dbc <_printf_common+0x24>
 8007db8:	3301      	adds	r3, #1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	069b      	lsls	r3, r3, #26
 8007dc0:	d502      	bpl.n	8007dc8 <_printf_common+0x30>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	3302      	adds	r3, #2
 8007dc6:	602b      	str	r3, [r5, #0]
 8007dc8:	6822      	ldr	r2, [r4, #0]
 8007dca:	2306      	movs	r3, #6
 8007dcc:	0017      	movs	r7, r2
 8007dce:	401f      	ands	r7, r3
 8007dd0:	421a      	tst	r2, r3
 8007dd2:	d027      	beq.n	8007e24 <_printf_common+0x8c>
 8007dd4:	0023      	movs	r3, r4
 8007dd6:	3343      	adds	r3, #67	; 0x43
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	1e5a      	subs	r2, r3, #1
 8007ddc:	4193      	sbcs	r3, r2
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	0692      	lsls	r2, r2, #26
 8007de2:	d430      	bmi.n	8007e46 <_printf_common+0xae>
 8007de4:	0022      	movs	r2, r4
 8007de6:	9901      	ldr	r1, [sp, #4]
 8007de8:	9800      	ldr	r0, [sp, #0]
 8007dea:	9e08      	ldr	r6, [sp, #32]
 8007dec:	3243      	adds	r2, #67	; 0x43
 8007dee:	47b0      	blx	r6
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d025      	beq.n	8007e40 <_printf_common+0xa8>
 8007df4:	2306      	movs	r3, #6
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	682a      	ldr	r2, [r5, #0]
 8007dfa:	68e1      	ldr	r1, [r4, #12]
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	4003      	ands	r3, r0
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d103      	bne.n	8007e0c <_printf_common+0x74>
 8007e04:	1a8d      	subs	r5, r1, r2
 8007e06:	43eb      	mvns	r3, r5
 8007e08:	17db      	asrs	r3, r3, #31
 8007e0a:	401d      	ands	r5, r3
 8007e0c:	68a3      	ldr	r3, [r4, #8]
 8007e0e:	6922      	ldr	r2, [r4, #16]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	dd01      	ble.n	8007e18 <_printf_common+0x80>
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	18ed      	adds	r5, r5, r3
 8007e18:	2700      	movs	r7, #0
 8007e1a:	42bd      	cmp	r5, r7
 8007e1c:	d120      	bne.n	8007e60 <_printf_common+0xc8>
 8007e1e:	2000      	movs	r0, #0
 8007e20:	e010      	b.n	8007e44 <_printf_common+0xac>
 8007e22:	3701      	adds	r7, #1
 8007e24:	68e3      	ldr	r3, [r4, #12]
 8007e26:	682a      	ldr	r2, [r5, #0]
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	ddd2      	ble.n	8007dd4 <_printf_common+0x3c>
 8007e2e:	0022      	movs	r2, r4
 8007e30:	2301      	movs	r3, #1
 8007e32:	9901      	ldr	r1, [sp, #4]
 8007e34:	9800      	ldr	r0, [sp, #0]
 8007e36:	9e08      	ldr	r6, [sp, #32]
 8007e38:	3219      	adds	r2, #25
 8007e3a:	47b0      	blx	r6
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	d1f0      	bne.n	8007e22 <_printf_common+0x8a>
 8007e40:	2001      	movs	r0, #1
 8007e42:	4240      	negs	r0, r0
 8007e44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e46:	2030      	movs	r0, #48	; 0x30
 8007e48:	18e1      	adds	r1, r4, r3
 8007e4a:	3143      	adds	r1, #67	; 0x43
 8007e4c:	7008      	strb	r0, [r1, #0]
 8007e4e:	0021      	movs	r1, r4
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	3145      	adds	r1, #69	; 0x45
 8007e54:	7809      	ldrb	r1, [r1, #0]
 8007e56:	18a2      	adds	r2, r4, r2
 8007e58:	3243      	adds	r2, #67	; 0x43
 8007e5a:	3302      	adds	r3, #2
 8007e5c:	7011      	strb	r1, [r2, #0]
 8007e5e:	e7c1      	b.n	8007de4 <_printf_common+0x4c>
 8007e60:	0022      	movs	r2, r4
 8007e62:	2301      	movs	r3, #1
 8007e64:	9901      	ldr	r1, [sp, #4]
 8007e66:	9800      	ldr	r0, [sp, #0]
 8007e68:	9e08      	ldr	r6, [sp, #32]
 8007e6a:	321a      	adds	r2, #26
 8007e6c:	47b0      	blx	r6
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	d0e6      	beq.n	8007e40 <_printf_common+0xa8>
 8007e72:	3701      	adds	r7, #1
 8007e74:	e7d1      	b.n	8007e1a <_printf_common+0x82>
	...

08007e78 <_printf_i>:
 8007e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7a:	b08b      	sub	sp, #44	; 0x2c
 8007e7c:	9206      	str	r2, [sp, #24]
 8007e7e:	000a      	movs	r2, r1
 8007e80:	3243      	adds	r2, #67	; 0x43
 8007e82:	9307      	str	r3, [sp, #28]
 8007e84:	9005      	str	r0, [sp, #20]
 8007e86:	9204      	str	r2, [sp, #16]
 8007e88:	7e0a      	ldrb	r2, [r1, #24]
 8007e8a:	000c      	movs	r4, r1
 8007e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e8e:	2a78      	cmp	r2, #120	; 0x78
 8007e90:	d807      	bhi.n	8007ea2 <_printf_i+0x2a>
 8007e92:	2a62      	cmp	r2, #98	; 0x62
 8007e94:	d809      	bhi.n	8007eaa <_printf_i+0x32>
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	d100      	bne.n	8007e9c <_printf_i+0x24>
 8007e9a:	e0c1      	b.n	8008020 <_printf_i+0x1a8>
 8007e9c:	2a58      	cmp	r2, #88	; 0x58
 8007e9e:	d100      	bne.n	8007ea2 <_printf_i+0x2a>
 8007ea0:	e08c      	b.n	8007fbc <_printf_i+0x144>
 8007ea2:	0026      	movs	r6, r4
 8007ea4:	3642      	adds	r6, #66	; 0x42
 8007ea6:	7032      	strb	r2, [r6, #0]
 8007ea8:	e022      	b.n	8007ef0 <_printf_i+0x78>
 8007eaa:	0010      	movs	r0, r2
 8007eac:	3863      	subs	r0, #99	; 0x63
 8007eae:	2815      	cmp	r0, #21
 8007eb0:	d8f7      	bhi.n	8007ea2 <_printf_i+0x2a>
 8007eb2:	f7f8 f929 	bl	8000108 <__gnu_thumb1_case_shi>
 8007eb6:	0016      	.short	0x0016
 8007eb8:	fff6001f 	.word	0xfff6001f
 8007ebc:	fff6fff6 	.word	0xfff6fff6
 8007ec0:	001ffff6 	.word	0x001ffff6
 8007ec4:	fff6fff6 	.word	0xfff6fff6
 8007ec8:	fff6fff6 	.word	0xfff6fff6
 8007ecc:	003600a8 	.word	0x003600a8
 8007ed0:	fff6009a 	.word	0xfff6009a
 8007ed4:	00b9fff6 	.word	0x00b9fff6
 8007ed8:	0036fff6 	.word	0x0036fff6
 8007edc:	fff6fff6 	.word	0xfff6fff6
 8007ee0:	009e      	.short	0x009e
 8007ee2:	0026      	movs	r6, r4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	3642      	adds	r6, #66	; 0x42
 8007ee8:	1d11      	adds	r1, r2, #4
 8007eea:	6019      	str	r1, [r3, #0]
 8007eec:	6813      	ldr	r3, [r2, #0]
 8007eee:	7033      	strb	r3, [r6, #0]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e0a7      	b.n	8008044 <_printf_i+0x1cc>
 8007ef4:	6808      	ldr	r0, [r1, #0]
 8007ef6:	6819      	ldr	r1, [r3, #0]
 8007ef8:	1d0a      	adds	r2, r1, #4
 8007efa:	0605      	lsls	r5, r0, #24
 8007efc:	d50b      	bpl.n	8007f16 <_printf_i+0x9e>
 8007efe:	680d      	ldr	r5, [r1, #0]
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	da03      	bge.n	8007f0e <_printf_i+0x96>
 8007f06:	232d      	movs	r3, #45	; 0x2d
 8007f08:	9a04      	ldr	r2, [sp, #16]
 8007f0a:	426d      	negs	r5, r5
 8007f0c:	7013      	strb	r3, [r2, #0]
 8007f0e:	4b61      	ldr	r3, [pc, #388]	; (8008094 <_printf_i+0x21c>)
 8007f10:	270a      	movs	r7, #10
 8007f12:	9303      	str	r3, [sp, #12]
 8007f14:	e01b      	b.n	8007f4e <_printf_i+0xd6>
 8007f16:	680d      	ldr	r5, [r1, #0]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	0641      	lsls	r1, r0, #25
 8007f1c:	d5f1      	bpl.n	8007f02 <_printf_i+0x8a>
 8007f1e:	b22d      	sxth	r5, r5
 8007f20:	e7ef      	b.n	8007f02 <_printf_i+0x8a>
 8007f22:	680d      	ldr	r5, [r1, #0]
 8007f24:	6819      	ldr	r1, [r3, #0]
 8007f26:	1d08      	adds	r0, r1, #4
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	062e      	lsls	r6, r5, #24
 8007f2c:	d501      	bpl.n	8007f32 <_printf_i+0xba>
 8007f2e:	680d      	ldr	r5, [r1, #0]
 8007f30:	e003      	b.n	8007f3a <_printf_i+0xc2>
 8007f32:	066d      	lsls	r5, r5, #25
 8007f34:	d5fb      	bpl.n	8007f2e <_printf_i+0xb6>
 8007f36:	680d      	ldr	r5, [r1, #0]
 8007f38:	b2ad      	uxth	r5, r5
 8007f3a:	4b56      	ldr	r3, [pc, #344]	; (8008094 <_printf_i+0x21c>)
 8007f3c:	2708      	movs	r7, #8
 8007f3e:	9303      	str	r3, [sp, #12]
 8007f40:	2a6f      	cmp	r2, #111	; 0x6f
 8007f42:	d000      	beq.n	8007f46 <_printf_i+0xce>
 8007f44:	3702      	adds	r7, #2
 8007f46:	0023      	movs	r3, r4
 8007f48:	2200      	movs	r2, #0
 8007f4a:	3343      	adds	r3, #67	; 0x43
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	db03      	blt.n	8007f5e <_printf_i+0xe6>
 8007f56:	2204      	movs	r2, #4
 8007f58:	6821      	ldr	r1, [r4, #0]
 8007f5a:	4391      	bics	r1, r2
 8007f5c:	6021      	str	r1, [r4, #0]
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	d102      	bne.n	8007f68 <_printf_i+0xf0>
 8007f62:	9e04      	ldr	r6, [sp, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00c      	beq.n	8007f82 <_printf_i+0x10a>
 8007f68:	9e04      	ldr	r6, [sp, #16]
 8007f6a:	0028      	movs	r0, r5
 8007f6c:	0039      	movs	r1, r7
 8007f6e:	f7f8 f95b 	bl	8000228 <__aeabi_uidivmod>
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	3e01      	subs	r6, #1
 8007f76:	5c5b      	ldrb	r3, [r3, r1]
 8007f78:	7033      	strb	r3, [r6, #0]
 8007f7a:	002b      	movs	r3, r5
 8007f7c:	0005      	movs	r5, r0
 8007f7e:	429f      	cmp	r7, r3
 8007f80:	d9f3      	bls.n	8007f6a <_printf_i+0xf2>
 8007f82:	2f08      	cmp	r7, #8
 8007f84:	d109      	bne.n	8007f9a <_printf_i+0x122>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	07db      	lsls	r3, r3, #31
 8007f8a:	d506      	bpl.n	8007f9a <_printf_i+0x122>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	dc02      	bgt.n	8007f9a <_printf_i+0x122>
 8007f94:	2330      	movs	r3, #48	; 0x30
 8007f96:	3e01      	subs	r6, #1
 8007f98:	7033      	strb	r3, [r6, #0]
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	9b07      	ldr	r3, [sp, #28]
 8007fa2:	0021      	movs	r1, r4
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	9805      	ldr	r0, [sp, #20]
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	aa09      	add	r2, sp, #36	; 0x24
 8007fac:	f7ff fef4 	bl	8007d98 <_printf_common>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d14c      	bne.n	800804e <_printf_i+0x1d6>
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	4240      	negs	r0, r0
 8007fb8:	b00b      	add	sp, #44	; 0x2c
 8007fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbc:	3145      	adds	r1, #69	; 0x45
 8007fbe:	700a      	strb	r2, [r1, #0]
 8007fc0:	4a34      	ldr	r2, [pc, #208]	; (8008094 <_printf_i+0x21c>)
 8007fc2:	9203      	str	r2, [sp, #12]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	6821      	ldr	r1, [r4, #0]
 8007fc8:	ca20      	ldmia	r2!, {r5}
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	0608      	lsls	r0, r1, #24
 8007fce:	d516      	bpl.n	8007ffe <_printf_i+0x186>
 8007fd0:	07cb      	lsls	r3, r1, #31
 8007fd2:	d502      	bpl.n	8007fda <_printf_i+0x162>
 8007fd4:	2320      	movs	r3, #32
 8007fd6:	4319      	orrs	r1, r3
 8007fd8:	6021      	str	r1, [r4, #0]
 8007fda:	2710      	movs	r7, #16
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	d1b2      	bne.n	8007f46 <_printf_i+0xce>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	439a      	bics	r2, r3
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	e7ad      	b.n	8007f46 <_printf_i+0xce>
 8007fea:	2220      	movs	r2, #32
 8007fec:	6809      	ldr	r1, [r1, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	6022      	str	r2, [r4, #0]
 8007ff2:	0022      	movs	r2, r4
 8007ff4:	2178      	movs	r1, #120	; 0x78
 8007ff6:	3245      	adds	r2, #69	; 0x45
 8007ff8:	7011      	strb	r1, [r2, #0]
 8007ffa:	4a27      	ldr	r2, [pc, #156]	; (8008098 <_printf_i+0x220>)
 8007ffc:	e7e1      	b.n	8007fc2 <_printf_i+0x14a>
 8007ffe:	0648      	lsls	r0, r1, #25
 8008000:	d5e6      	bpl.n	8007fd0 <_printf_i+0x158>
 8008002:	b2ad      	uxth	r5, r5
 8008004:	e7e4      	b.n	8007fd0 <_printf_i+0x158>
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	680d      	ldr	r5, [r1, #0]
 800800a:	1d10      	adds	r0, r2, #4
 800800c:	6949      	ldr	r1, [r1, #20]
 800800e:	6018      	str	r0, [r3, #0]
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	062e      	lsls	r6, r5, #24
 8008014:	d501      	bpl.n	800801a <_printf_i+0x1a2>
 8008016:	6019      	str	r1, [r3, #0]
 8008018:	e002      	b.n	8008020 <_printf_i+0x1a8>
 800801a:	066d      	lsls	r5, r5, #25
 800801c:	d5fb      	bpl.n	8008016 <_printf_i+0x19e>
 800801e:	8019      	strh	r1, [r3, #0]
 8008020:	2300      	movs	r3, #0
 8008022:	9e04      	ldr	r6, [sp, #16]
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	e7bb      	b.n	8007fa0 <_printf_i+0x128>
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	1d11      	adds	r1, r2, #4
 800802c:	6019      	str	r1, [r3, #0]
 800802e:	6816      	ldr	r6, [r2, #0]
 8008030:	2100      	movs	r1, #0
 8008032:	0030      	movs	r0, r6
 8008034:	6862      	ldr	r2, [r4, #4]
 8008036:	f000 f8db 	bl	80081f0 <memchr>
 800803a:	2800      	cmp	r0, #0
 800803c:	d001      	beq.n	8008042 <_printf_i+0x1ca>
 800803e:	1b80      	subs	r0, r0, r6
 8008040:	6060      	str	r0, [r4, #4]
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	6123      	str	r3, [r4, #16]
 8008046:	2300      	movs	r3, #0
 8008048:	9a04      	ldr	r2, [sp, #16]
 800804a:	7013      	strb	r3, [r2, #0]
 800804c:	e7a8      	b.n	8007fa0 <_printf_i+0x128>
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	0032      	movs	r2, r6
 8008052:	9906      	ldr	r1, [sp, #24]
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	9d07      	ldr	r5, [sp, #28]
 8008058:	47a8      	blx	r5
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	d0aa      	beq.n	8007fb4 <_printf_i+0x13c>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	079b      	lsls	r3, r3, #30
 8008062:	d415      	bmi.n	8008090 <_printf_i+0x218>
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	68e0      	ldr	r0, [r4, #12]
 8008068:	4298      	cmp	r0, r3
 800806a:	daa5      	bge.n	8007fb8 <_printf_i+0x140>
 800806c:	0018      	movs	r0, r3
 800806e:	e7a3      	b.n	8007fb8 <_printf_i+0x140>
 8008070:	0022      	movs	r2, r4
 8008072:	2301      	movs	r3, #1
 8008074:	9906      	ldr	r1, [sp, #24]
 8008076:	9805      	ldr	r0, [sp, #20]
 8008078:	9e07      	ldr	r6, [sp, #28]
 800807a:	3219      	adds	r2, #25
 800807c:	47b0      	blx	r6
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d098      	beq.n	8007fb4 <_printf_i+0x13c>
 8008082:	3501      	adds	r5, #1
 8008084:	68e3      	ldr	r3, [r4, #12]
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	1a9b      	subs	r3, r3, r2
 800808a:	42ab      	cmp	r3, r5
 800808c:	dcf0      	bgt.n	8008070 <_printf_i+0x1f8>
 800808e:	e7e9      	b.n	8008064 <_printf_i+0x1ec>
 8008090:	2500      	movs	r5, #0
 8008092:	e7f7      	b.n	8008084 <_printf_i+0x20c>
 8008094:	0800867d 	.word	0x0800867d
 8008098:	0800868e 	.word	0x0800868e

0800809c <__sread>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	000c      	movs	r4, r1
 80080a0:	250e      	movs	r5, #14
 80080a2:	5f49      	ldrsh	r1, [r1, r5]
 80080a4:	f000 f8de 	bl	8008264 <_read_r>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	db03      	blt.n	80080b4 <__sread+0x18>
 80080ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80080ae:	181b      	adds	r3, r3, r0
 80080b0:	6563      	str	r3, [r4, #84]	; 0x54
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	4a02      	ldr	r2, [pc, #8]	; (80080c0 <__sread+0x24>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	e7f9      	b.n	80080b2 <__sread+0x16>
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	ffffefff 	.word	0xffffefff

080080c4 <__swrite>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	001f      	movs	r7, r3
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	0005      	movs	r5, r0
 80080cc:	000c      	movs	r4, r1
 80080ce:	0016      	movs	r6, r2
 80080d0:	05db      	lsls	r3, r3, #23
 80080d2:	d505      	bpl.n	80080e0 <__swrite+0x1c>
 80080d4:	230e      	movs	r3, #14
 80080d6:	5ec9      	ldrsh	r1, [r1, r3]
 80080d8:	2200      	movs	r2, #0
 80080da:	2302      	movs	r3, #2
 80080dc:	f000 f874 	bl	80081c8 <_lseek_r>
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	4a05      	ldr	r2, [pc, #20]	; (80080f8 <__swrite+0x34>)
 80080e4:	0028      	movs	r0, r5
 80080e6:	4013      	ands	r3, r2
 80080e8:	81a3      	strh	r3, [r4, #12]
 80080ea:	0032      	movs	r2, r6
 80080ec:	230e      	movs	r3, #14
 80080ee:	5ee1      	ldrsh	r1, [r4, r3]
 80080f0:	003b      	movs	r3, r7
 80080f2:	f000 f81f 	bl	8008134 <_write_r>
 80080f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f8:	ffffefff 	.word	0xffffefff

080080fc <__sseek>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	000c      	movs	r4, r1
 8008100:	250e      	movs	r5, #14
 8008102:	5f49      	ldrsh	r1, [r1, r5]
 8008104:	f000 f860 	bl	80081c8 <_lseek_r>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	1c42      	adds	r2, r0, #1
 800810c:	d103      	bne.n	8008116 <__sseek+0x1a>
 800810e:	4a05      	ldr	r2, [pc, #20]	; (8008124 <__sseek+0x28>)
 8008110:	4013      	ands	r3, r2
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	bd70      	pop	{r4, r5, r6, pc}
 8008116:	2280      	movs	r2, #128	; 0x80
 8008118:	0152      	lsls	r2, r2, #5
 800811a:	4313      	orrs	r3, r2
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	6560      	str	r0, [r4, #84]	; 0x54
 8008120:	e7f8      	b.n	8008114 <__sseek+0x18>
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	ffffefff 	.word	0xffffefff

08008128 <__sclose>:
 8008128:	b510      	push	{r4, lr}
 800812a:	230e      	movs	r3, #14
 800812c:	5ec9      	ldrsh	r1, [r1, r3]
 800812e:	f000 f815 	bl	800815c <_close_r>
 8008132:	bd10      	pop	{r4, pc}

08008134 <_write_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	0004      	movs	r4, r0
 8008138:	0008      	movs	r0, r1
 800813a:	0011      	movs	r1, r2
 800813c:	001a      	movs	r2, r3
 800813e:	2300      	movs	r3, #0
 8008140:	4d05      	ldr	r5, [pc, #20]	; (8008158 <_write_r+0x24>)
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7fa feba 	bl	8002ebc <_write>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d103      	bne.n	8008154 <_write_r+0x20>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d000      	beq.n	8008154 <_write_r+0x20>
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	200002ac 	.word	0x200002ac

0800815c <_close_r>:
 800815c:	2300      	movs	r3, #0
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	4d06      	ldr	r5, [pc, #24]	; (800817c <_close_r+0x20>)
 8008162:	0004      	movs	r4, r0
 8008164:	0008      	movs	r0, r1
 8008166:	602b      	str	r3, [r5, #0]
 8008168:	f7fa fec4 	bl	8002ef4 <_close>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d103      	bne.n	8008178 <_close_r+0x1c>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d000      	beq.n	8008178 <_close_r+0x1c>
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	bd70      	pop	{r4, r5, r6, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	200002ac 	.word	0x200002ac

08008180 <_fstat_r>:
 8008180:	2300      	movs	r3, #0
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	4d06      	ldr	r5, [pc, #24]	; (80081a0 <_fstat_r+0x20>)
 8008186:	0004      	movs	r4, r0
 8008188:	0008      	movs	r0, r1
 800818a:	0011      	movs	r1, r2
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	f7fa febb 	bl	8002f08 <_fstat>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d103      	bne.n	800819e <_fstat_r+0x1e>
 8008196:	682b      	ldr	r3, [r5, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d000      	beq.n	800819e <_fstat_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	200002ac 	.word	0x200002ac

080081a4 <_isatty_r>:
 80081a4:	2300      	movs	r3, #0
 80081a6:	b570      	push	{r4, r5, r6, lr}
 80081a8:	4d06      	ldr	r5, [pc, #24]	; (80081c4 <_isatty_r+0x20>)
 80081aa:	0004      	movs	r4, r0
 80081ac:	0008      	movs	r0, r1
 80081ae:	602b      	str	r3, [r5, #0]
 80081b0:	f7fa feb8 	bl	8002f24 <_isatty>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d103      	bne.n	80081c0 <_isatty_r+0x1c>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d000      	beq.n	80081c0 <_isatty_r+0x1c>
 80081be:	6023      	str	r3, [r4, #0]
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	200002ac 	.word	0x200002ac

080081c8 <_lseek_r>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	0004      	movs	r4, r0
 80081cc:	0008      	movs	r0, r1
 80081ce:	0011      	movs	r1, r2
 80081d0:	001a      	movs	r2, r3
 80081d2:	2300      	movs	r3, #0
 80081d4:	4d05      	ldr	r5, [pc, #20]	; (80081ec <_lseek_r+0x24>)
 80081d6:	602b      	str	r3, [r5, #0]
 80081d8:	f7fa fead 	bl	8002f36 <_lseek>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d103      	bne.n	80081e8 <_lseek_r+0x20>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d000      	beq.n	80081e8 <_lseek_r+0x20>
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	200002ac 	.word	0x200002ac

080081f0 <memchr>:
 80081f0:	b2c9      	uxtb	r1, r1
 80081f2:	1882      	adds	r2, r0, r2
 80081f4:	4290      	cmp	r0, r2
 80081f6:	d101      	bne.n	80081fc <memchr+0xc>
 80081f8:	2000      	movs	r0, #0
 80081fa:	4770      	bx	lr
 80081fc:	7803      	ldrb	r3, [r0, #0]
 80081fe:	428b      	cmp	r3, r1
 8008200:	d0fb      	beq.n	80081fa <memchr+0xa>
 8008202:	3001      	adds	r0, #1
 8008204:	e7f6      	b.n	80081f4 <memchr+0x4>

08008206 <_realloc_r>:
 8008206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008208:	0007      	movs	r7, r0
 800820a:	000e      	movs	r6, r1
 800820c:	0014      	movs	r4, r2
 800820e:	2900      	cmp	r1, #0
 8008210:	d105      	bne.n	800821e <_realloc_r+0x18>
 8008212:	0011      	movs	r1, r2
 8008214:	f7fe fe8e 	bl	8006f34 <_malloc_r>
 8008218:	0005      	movs	r5, r0
 800821a:	0028      	movs	r0, r5
 800821c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800821e:	2a00      	cmp	r2, #0
 8008220:	d103      	bne.n	800822a <_realloc_r+0x24>
 8008222:	f7fe fe1b 	bl	8006e5c <_free_r>
 8008226:	0025      	movs	r5, r4
 8008228:	e7f7      	b.n	800821a <_realloc_r+0x14>
 800822a:	f000 f82f 	bl	800828c <_malloc_usable_size_r>
 800822e:	9001      	str	r0, [sp, #4]
 8008230:	4284      	cmp	r4, r0
 8008232:	d803      	bhi.n	800823c <_realloc_r+0x36>
 8008234:	0035      	movs	r5, r6
 8008236:	0843      	lsrs	r3, r0, #1
 8008238:	42a3      	cmp	r3, r4
 800823a:	d3ee      	bcc.n	800821a <_realloc_r+0x14>
 800823c:	0021      	movs	r1, r4
 800823e:	0038      	movs	r0, r7
 8008240:	f7fe fe78 	bl	8006f34 <_malloc_r>
 8008244:	1e05      	subs	r5, r0, #0
 8008246:	d0e8      	beq.n	800821a <_realloc_r+0x14>
 8008248:	9b01      	ldr	r3, [sp, #4]
 800824a:	0022      	movs	r2, r4
 800824c:	429c      	cmp	r4, r3
 800824e:	d900      	bls.n	8008252 <_realloc_r+0x4c>
 8008250:	001a      	movs	r2, r3
 8008252:	0031      	movs	r1, r6
 8008254:	0028      	movs	r0, r5
 8008256:	f7fe fddd 	bl	8006e14 <memcpy>
 800825a:	0031      	movs	r1, r6
 800825c:	0038      	movs	r0, r7
 800825e:	f7fe fdfd 	bl	8006e5c <_free_r>
 8008262:	e7da      	b.n	800821a <_realloc_r+0x14>

08008264 <_read_r>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	0004      	movs	r4, r0
 8008268:	0008      	movs	r0, r1
 800826a:	0011      	movs	r1, r2
 800826c:	001a      	movs	r2, r3
 800826e:	2300      	movs	r3, #0
 8008270:	4d05      	ldr	r5, [pc, #20]	; (8008288 <_read_r+0x24>)
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7fa fe05 	bl	8002e82 <_read>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d103      	bne.n	8008284 <_read_r+0x20>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d000      	beq.n	8008284 <_read_r+0x20>
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	bd70      	pop	{r4, r5, r6, pc}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	200002ac 	.word	0x200002ac

0800828c <_malloc_usable_size_r>:
 800828c:	1f0b      	subs	r3, r1, #4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	1f18      	subs	r0, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	da01      	bge.n	800829a <_malloc_usable_size_r+0xe>
 8008296:	580b      	ldr	r3, [r1, r0]
 8008298:	18c0      	adds	r0, r0, r3
 800829a:	4770      	bx	lr

0800829c <sqrt>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	0004      	movs	r4, r0
 80082a0:	000d      	movs	r5, r1
 80082a2:	f000 f821 	bl	80082e8 <__ieee754_sqrt>
 80082a6:	0022      	movs	r2, r4
 80082a8:	0006      	movs	r6, r0
 80082aa:	000f      	movs	r7, r1
 80082ac:	002b      	movs	r3, r5
 80082ae:	0020      	movs	r0, r4
 80082b0:	0029      	movs	r1, r5
 80082b2:	f7fa fae3 	bl	800287c <__aeabi_dcmpun>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d113      	bne.n	80082e2 <sqrt+0x46>
 80082ba:	2200      	movs	r2, #0
 80082bc:	2300      	movs	r3, #0
 80082be:	0020      	movs	r0, r4
 80082c0:	0029      	movs	r1, r5
 80082c2:	f7f7 ffcd 	bl	8000260 <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d00b      	beq.n	80082e2 <sqrt+0x46>
 80082ca:	f7fe fd79 	bl	8006dc0 <__errno>
 80082ce:	2321      	movs	r3, #33	; 0x21
 80082d0:	2200      	movs	r2, #0
 80082d2:	6003      	str	r3, [r0, #0]
 80082d4:	2300      	movs	r3, #0
 80082d6:	0010      	movs	r0, r2
 80082d8:	0019      	movs	r1, r3
 80082da:	f7f9 f8cf 	bl	800147c <__aeabi_ddiv>
 80082de:	0006      	movs	r6, r0
 80082e0:	000f      	movs	r7, r1
 80082e2:	0030      	movs	r0, r6
 80082e4:	0039      	movs	r1, r7
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082e8 <__ieee754_sqrt>:
 80082e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ea:	000b      	movs	r3, r1
 80082ec:	000c      	movs	r4, r1
 80082ee:	4956      	ldr	r1, [pc, #344]	; (8008448 <__ieee754_sqrt+0x160>)
 80082f0:	0005      	movs	r5, r0
 80082f2:	0002      	movs	r2, r0
 80082f4:	0008      	movs	r0, r1
 80082f6:	b085      	sub	sp, #20
 80082f8:	4020      	ands	r0, r4
 80082fa:	4288      	cmp	r0, r1
 80082fc:	d10f      	bne.n	800831e <__ieee754_sqrt+0x36>
 80082fe:	0028      	movs	r0, r5
 8008300:	0021      	movs	r1, r4
 8008302:	f7f9 fcbd 	bl	8001c80 <__aeabi_dmul>
 8008306:	0002      	movs	r2, r0
 8008308:	000b      	movs	r3, r1
 800830a:	0028      	movs	r0, r5
 800830c:	0021      	movs	r1, r4
 800830e:	f7f8 fd79 	bl	8000e04 <__aeabi_dadd>
 8008312:	0005      	movs	r5, r0
 8008314:	000c      	movs	r4, r1
 8008316:	0028      	movs	r0, r5
 8008318:	0021      	movs	r1, r4
 800831a:	b005      	add	sp, #20
 800831c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831e:	2c00      	cmp	r4, #0
 8008320:	dc10      	bgt.n	8008344 <__ieee754_sqrt+0x5c>
 8008322:	0061      	lsls	r1, r4, #1
 8008324:	0849      	lsrs	r1, r1, #1
 8008326:	4329      	orrs	r1, r5
 8008328:	d0f5      	beq.n	8008316 <__ieee754_sqrt+0x2e>
 800832a:	2100      	movs	r1, #0
 800832c:	428c      	cmp	r4, r1
 800832e:	d100      	bne.n	8008332 <__ieee754_sqrt+0x4a>
 8008330:	e080      	b.n	8008434 <__ieee754_sqrt+0x14c>
 8008332:	0028      	movs	r0, r5
 8008334:	0021      	movs	r1, r4
 8008336:	f7f9 ff0f 	bl	8002158 <__aeabi_dsub>
 800833a:	0002      	movs	r2, r0
 800833c:	000b      	movs	r3, r1
 800833e:	f7f9 f89d 	bl	800147c <__aeabi_ddiv>
 8008342:	e7e6      	b.n	8008312 <__ieee754_sqrt+0x2a>
 8008344:	1521      	asrs	r1, r4, #20
 8008346:	d075      	beq.n	8008434 <__ieee754_sqrt+0x14c>
 8008348:	4840      	ldr	r0, [pc, #256]	; (800844c <__ieee754_sqrt+0x164>)
 800834a:	031b      	lsls	r3, r3, #12
 800834c:	180c      	adds	r4, r1, r0
 800834e:	2080      	movs	r0, #128	; 0x80
 8008350:	0b1b      	lsrs	r3, r3, #12
 8008352:	0340      	lsls	r0, r0, #13
 8008354:	4303      	orrs	r3, r0
 8008356:	07c9      	lsls	r1, r1, #31
 8008358:	d403      	bmi.n	8008362 <__ieee754_sqrt+0x7a>
 800835a:	0fd1      	lsrs	r1, r2, #31
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	185b      	adds	r3, r3, r1
 8008360:	0052      	lsls	r2, r2, #1
 8008362:	1061      	asrs	r1, r4, #1
 8008364:	2400      	movs	r4, #0
 8008366:	9103      	str	r1, [sp, #12]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	0fd1      	lsrs	r1, r2, #31
 800836c:	185b      	adds	r3, r3, r1
 800836e:	2180      	movs	r1, #128	; 0x80
 8008370:	2516      	movs	r5, #22
 8008372:	0020      	movs	r0, r4
 8008374:	0052      	lsls	r2, r2, #1
 8008376:	0389      	lsls	r1, r1, #14
 8008378:	1846      	adds	r6, r0, r1
 800837a:	429e      	cmp	r6, r3
 800837c:	dc02      	bgt.n	8008384 <__ieee754_sqrt+0x9c>
 800837e:	1870      	adds	r0, r6, r1
 8008380:	1b9b      	subs	r3, r3, r6
 8008382:	1864      	adds	r4, r4, r1
 8008384:	0fd6      	lsrs	r6, r2, #31
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	3d01      	subs	r5, #1
 800838a:	18f3      	adds	r3, r6, r3
 800838c:	0052      	lsls	r2, r2, #1
 800838e:	0849      	lsrs	r1, r1, #1
 8008390:	2d00      	cmp	r5, #0
 8008392:	d1f1      	bne.n	8008378 <__ieee754_sqrt+0x90>
 8008394:	2620      	movs	r6, #32
 8008396:	2780      	movs	r7, #128	; 0x80
 8008398:	0029      	movs	r1, r5
 800839a:	9601      	str	r6, [sp, #4]
 800839c:	063f      	lsls	r7, r7, #24
 800839e:	197e      	adds	r6, r7, r5
 80083a0:	46b4      	mov	ip, r6
 80083a2:	4283      	cmp	r3, r0
 80083a4:	dc02      	bgt.n	80083ac <__ieee754_sqrt+0xc4>
 80083a6:	d114      	bne.n	80083d2 <__ieee754_sqrt+0xea>
 80083a8:	4296      	cmp	r6, r2
 80083aa:	d812      	bhi.n	80083d2 <__ieee754_sqrt+0xea>
 80083ac:	4665      	mov	r5, ip
 80083ae:	4666      	mov	r6, ip
 80083b0:	19ed      	adds	r5, r5, r7
 80083b2:	9002      	str	r0, [sp, #8]
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	da03      	bge.n	80083c0 <__ieee754_sqrt+0xd8>
 80083b8:	43ee      	mvns	r6, r5
 80083ba:	0ff6      	lsrs	r6, r6, #31
 80083bc:	1986      	adds	r6, r0, r6
 80083be:	9602      	str	r6, [sp, #8]
 80083c0:	1a1b      	subs	r3, r3, r0
 80083c2:	4562      	cmp	r2, ip
 80083c4:	4180      	sbcs	r0, r0
 80083c6:	4240      	negs	r0, r0
 80083c8:	1a1b      	subs	r3, r3, r0
 80083ca:	4660      	mov	r0, ip
 80083cc:	1a12      	subs	r2, r2, r0
 80083ce:	9802      	ldr	r0, [sp, #8]
 80083d0:	19c9      	adds	r1, r1, r7
 80083d2:	0fd6      	lsrs	r6, r2, #31
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	199b      	adds	r3, r3, r6
 80083d8:	9e01      	ldr	r6, [sp, #4]
 80083da:	0052      	lsls	r2, r2, #1
 80083dc:	3e01      	subs	r6, #1
 80083de:	087f      	lsrs	r7, r7, #1
 80083e0:	9601      	str	r6, [sp, #4]
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d1db      	bne.n	800839e <__ieee754_sqrt+0xb6>
 80083e6:	4313      	orrs	r3, r2
 80083e8:	d003      	beq.n	80083f2 <__ieee754_sqrt+0x10a>
 80083ea:	1c4b      	adds	r3, r1, #1
 80083ec:	d127      	bne.n	800843e <__ieee754_sqrt+0x156>
 80083ee:	0031      	movs	r1, r6
 80083f0:	3401      	adds	r4, #1
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <__ieee754_sqrt+0x168>)
 80083f4:	1060      	asrs	r0, r4, #1
 80083f6:	18c0      	adds	r0, r0, r3
 80083f8:	0849      	lsrs	r1, r1, #1
 80083fa:	07e3      	lsls	r3, r4, #31
 80083fc:	d502      	bpl.n	8008404 <__ieee754_sqrt+0x11c>
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	4319      	orrs	r1, r3
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	000d      	movs	r5, r1
 8008408:	051c      	lsls	r4, r3, #20
 800840a:	1823      	adds	r3, r4, r0
 800840c:	001c      	movs	r4, r3
 800840e:	e782      	b.n	8008316 <__ieee754_sqrt+0x2e>
 8008410:	0ad3      	lsrs	r3, r2, #11
 8008412:	3815      	subs	r0, #21
 8008414:	0552      	lsls	r2, r2, #21
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0fa      	beq.n	8008410 <__ieee754_sqrt+0x128>
 800841a:	2480      	movs	r4, #128	; 0x80
 800841c:	0364      	lsls	r4, r4, #13
 800841e:	4223      	tst	r3, r4
 8008420:	d00a      	beq.n	8008438 <__ieee754_sqrt+0x150>
 8008422:	2420      	movs	r4, #32
 8008424:	0016      	movs	r6, r2
 8008426:	1a64      	subs	r4, r4, r1
 8008428:	40e6      	lsrs	r6, r4
 800842a:	1e4d      	subs	r5, r1, #1
 800842c:	408a      	lsls	r2, r1
 800842e:	4333      	orrs	r3, r6
 8008430:	1b41      	subs	r1, r0, r5
 8008432:	e789      	b.n	8008348 <__ieee754_sqrt+0x60>
 8008434:	2000      	movs	r0, #0
 8008436:	e7ee      	b.n	8008416 <__ieee754_sqrt+0x12e>
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	3101      	adds	r1, #1
 800843c:	e7ef      	b.n	800841e <__ieee754_sqrt+0x136>
 800843e:	2301      	movs	r3, #1
 8008440:	3101      	adds	r1, #1
 8008442:	4399      	bics	r1, r3
 8008444:	e7d5      	b.n	80083f2 <__ieee754_sqrt+0x10a>
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	7ff00000 	.word	0x7ff00000
 800844c:	fffffc01 	.word	0xfffffc01
 8008450:	3fe00000 	.word	0x3fe00000

08008454 <_init>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr

08008460 <_fini>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr
